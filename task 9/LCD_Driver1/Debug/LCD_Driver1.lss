
LCD_Driver1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f2e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001f2e  00001fa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000015f0  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b51  00000000  00000000  0000359c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000040ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000424d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000043dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00006421  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00007522  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000084a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00008624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  000088e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <main>
      7a:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidInit>:

//MCAL Layer
#include "config.h"
#include "private.h"

void DIO_voidInit(void){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = CONC(DIO_U8_PA7_INTIAL_DIRECTION, DIO_U8_PA6_INTIAL_DIRECTION, DIO_U8_PA5_INTIAL_DIRECTION, DIO_U8_PA4_INTIAL_DIRECTION,
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	87 e0       	ldi	r24, 0x07	; 7
     c9c:	80 83       	st	Z, r24
		                   DIO_U8_PA3_INTIAL_DIRECTION, DIO_U8_PA2_INTIAL_DIRECTION, DIO_U8_PA1_INTIAL_DIRECTION, DIO_U8_PA0_INTIAL_DIRECTION);
		                 			
	DIO_u8_DDRB_REG = CONC(DIO_U8_PB7_INTIAL_DIRECTION, DIO_U8_PB6_INTIAL_DIRECTION, DIO_U8_PB5_INTIAL_DIRECTION, DIO_U8_PB4_INTIAL_DIRECTION,
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	10 82       	st	Z, r1
				           DIO_U8_PB3_INTIAL_DIRECTION, DIO_U8_PB2_INTIAL_DIRECTION, DIO_U8_PB1_INTIAL_DIRECTION, DIO_U8_PB0_INTIAL_DIRECTION);
					                                                                                                                      
	DIO_u8_DDRC_REG = CONC(DIO_U8_PC7_INTIAL_DIRECTION, DIO_U8_PC6_INTIAL_DIRECTION, DIO_U8_PC5_INTIAL_DIRECTION, DIO_U8_PC4_INTIAL_DIRECTION,
     ca4:	e4 e3       	ldi	r30, 0x34	; 52
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	10 82       	st	Z, r1
		                   DIO_U8_PC3_INTIAL_DIRECTION, DIO_U8_PC2_INTIAL_DIRECTION, DIO_U8_PC1_INTIAL_DIRECTION, DIO_U8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = CONC(DIO_U8_PD7_INTIAL_DIRECTION, DIO_U8_PD6_INTIAL_DIRECTION, DIO_U8_PD5_INTIAL_DIRECTION, DIO_U8_PD4_INTIAL_DIRECTION,
     caa:	e1 e3       	ldi	r30, 0x31	; 49
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	8f ef       	ldi	r24, 0xFF	; 255
     cb0:	80 83       	st	Z, r24
				           DIO_U8_PD3_INTIAL_DIRECTION, DIO_U8_PD2_INTIAL_DIRECTION, DIO_U8_PD1_INTIAL_DIRECTION, DIO_U8_PD0_INTIAL_DIRECTION);

	DIO_u8_PORTA_REG = CONC(DIO_U8_PA7_INTIAL_VALUE, DIO_U8_PA6_INTIAL_VALUE, DIO_U8_PA5_INTIAL_VALUE, DIO_U8_PA4_INTIAL_VALUE,
     cb2:	eb e3       	ldi	r30, 0x3B	; 59
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	10 82       	st	Z, r1
						    DIO_U8_PA3_INTIAL_VALUE, DIO_U8_PA2_INTIAL_VALUE, DIO_U8_PA1_INTIAL_VALUE, DIO_U8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = CONC(DIO_U8_PB7_INTIAL_VALUE, DIO_U8_PB6_INTIAL_VALUE, DIO_U8_PB5_INTIAL_VALUE, DIO_U8_PB4_INTIAL_VALUE,
     cb8:	e8 e3       	ldi	r30, 0x38	; 56
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	10 82       	st	Z, r1
						   	DIO_U8_PB3_INTIAL_VALUE, DIO_U8_PB2_INTIAL_VALUE, DIO_U8_PB1_INTIAL_VALUE, DIO_U8_PB0_INTIAL_VALUE);
												 
    DIO_u8_PORTC_REG = CONC(DIO_U8_PC7_INTIAL_VALUE, DIO_U8_PC6_INTIAL_VALUE, DIO_U8_PC5_INTIAL_VALUE, DIO_U8_PC4_INTIAL_VALUE,
     cbe:	e5 e3       	ldi	r30, 0x35	; 53
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	10 82       	st	Z, r1
					        DIO_U8_PC3_INTIAL_VALUE, DIO_U8_PC2_INTIAL_VALUE, DIO_U8_PC1_INTIAL_VALUE, DIO_U8_PC0_INTIAL_VALUE);
																		   
    DIO_u8_PORTD_REG = CONC(DIO_U8_PD7_INTIAL_VALUE, DIO_U8_PD6_INTIAL_VALUE, DIO_U8_PD5_INTIAL_VALUE, DIO_U8_PD4_INTIAL_VALUE,
     cc4:	e2 e3       	ldi	r30, 0x32	; 50
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1
						    DIO_U8_PD3_INTIAL_VALUE, DIO_U8_PD2_INTIAL_VALUE, DIO_U8_PD1_INTIAL_VALUE, DIO_U8_PD0_INTIAL_VALUE);
    }
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <DIO_u8_Set_Pin_Direction>:

u8 DIO_u8_Set_Pin_Direction  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Direction ){
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	2e 97       	sbiw	r28, 0x0e	; 14
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	6b 83       	std	Y+3, r22	; 0x03
     ce8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Direction == DIO_u8_INTIAL_INPUT)||(Copy_u8_Pin_Direction == DIO_u8_INTIAL_OUTPUT)))
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	84 30       	cpi	r24, 0x04	; 4
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <DIO_u8_Set_Pin_Direction+0x26>
     cf4:	11 c1       	rjmp	.+546    	; 0xf18 <DIO_u8_Set_Pin_Direction+0x248>
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	88 30       	cpi	r24, 0x08	; 8
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <DIO_u8_Set_Pin_Direction+0x2e>
     cfc:	0d c1       	rjmp	.+538    	; 0xf18 <DIO_u8_Set_Pin_Direction+0x248>
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	88 23       	and	r24, r24
     d02:	21 f0       	breq	.+8      	; 0xd0c <DIO_u8_Set_Pin_Direction+0x3c>
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	09 f0       	breq	.+2      	; 0xd0c <DIO_u8_Set_Pin_Direction+0x3c>
     d0a:	06 c1       	rjmp	.+524    	; 0xf18 <DIO_u8_Set_Pin_Direction+0x248>
	{
        switch (Copy_u8_Port_ID)
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	3e 87       	std	Y+14, r19	; 0x0e
     d14:	2d 87       	std	Y+13, r18	; 0x0d
     d16:	8d 85       	ldd	r24, Y+13	; 0x0d
     d18:	9e 85       	ldd	r25, Y+14	; 0x0e
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	91 05       	cpc	r25, r1
     d1e:	09 f4       	brne	.+2      	; 0xd22 <DIO_u8_Set_Pin_Direction+0x52>
     d20:	50 c0       	rjmp	.+160    	; 0xdc2 <DIO_u8_Set_Pin_Direction+0xf2>
     d22:	2d 85       	ldd	r18, Y+13	; 0x0d
     d24:	3e 85       	ldd	r19, Y+14	; 0x0e
     d26:	22 30       	cpi	r18, 0x02	; 2
     d28:	31 05       	cpc	r19, r1
     d2a:	2c f4       	brge	.+10     	; 0xd36 <DIO_u8_Set_Pin_Direction+0x66>
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	71 f0       	breq	.+28     	; 0xd50 <DIO_u8_Set_Pin_Direction+0x80>
     d34:	f2 c0       	rjmp	.+484    	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>
     d36:	2d 85       	ldd	r18, Y+13	; 0x0d
     d38:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3a:	22 30       	cpi	r18, 0x02	; 2
     d3c:	31 05       	cpc	r19, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <DIO_u8_Set_Pin_Direction+0x72>
     d40:	79 c0       	rjmp	.+242    	; 0xe34 <DIO_u8_Set_Pin_Direction+0x164>
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	83 30       	cpi	r24, 0x03	; 3
     d48:	91 05       	cpc	r25, r1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <DIO_u8_Set_Pin_Direction+0x7e>
     d4c:	ac c0       	rjmp	.+344    	; 0xea6 <DIO_u8_Set_Pin_Direction+0x1d6>
     d4e:	e5 c0       	rjmp	.+458    	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>
        {
               case DIO_u8_PORTA:
            	   switch (Copy_u8_Pin_Direction)
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	3c 87       	std	Y+12, r19	; 0x0c
     d58:	2b 87       	std	Y+11, r18	; 0x0b
     d5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d5c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	c9 f0       	breq	.+50     	; 0xd94 <DIO_u8_Set_Pin_Direction+0xc4>
     d62:	2b 85       	ldd	r18, Y+11	; 0x0b
     d64:	3c 85       	ldd	r19, Y+12	; 0x0c
     d66:	21 30       	cpi	r18, 0x01	; 1
     d68:	31 05       	cpc	r19, r1
     d6a:	49 f5       	brne	.+82     	; 0xdbe <DIO_u8_Set_Pin_Direction+0xee>
            	   {
                    	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
     d6c:	aa e3       	ldi	r26, 0x3A	; 58
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ea e3       	ldi	r30, 0x3A	; 58
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <DIO_u8_Set_Pin_Direction+0xba>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <DIO_u8_Set_Pin_Direction+0xb6>
     d8e:	84 2b       	or	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	c3 c0       	rjmp	.+390    	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>
                    	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
     d94:	aa e3       	ldi	r26, 0x3A	; 58
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	ea e3       	ldi	r30, 0x3A	; 58
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	48 2f       	mov	r20, r24
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 2e       	mov	r0, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_u8_Set_Pin_Direction+0xe2>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	0a 94       	dec	r0
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_u8_Set_Pin_Direction+0xde>
     db6:	80 95       	com	r24
     db8:	84 23       	and	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	ae c0       	rjmp	.+348    	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
     dbe:	19 82       	std	Y+1, r1	; 0x01
     dc0:	ac c0       	rjmp	.+344    	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>

            	   }
                  break;
               case DIO_u8_PORTB:
             	   switch (Copy_u8_Pin_Direction)
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	3a 87       	std	Y+10, r19	; 0x0a
     dca:	29 87       	std	Y+9, r18	; 0x09
     dcc:	89 85       	ldd	r24, Y+9	; 0x09
     dce:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	c9 f0       	breq	.+50     	; 0xe06 <DIO_u8_Set_Pin_Direction+0x136>
     dd4:	29 85       	ldd	r18, Y+9	; 0x09
     dd6:	3a 85       	ldd	r19, Y+10	; 0x0a
     dd8:	21 30       	cpi	r18, 0x01	; 1
     dda:	31 05       	cpc	r19, r1
     ddc:	49 f5       	brne	.+82     	; 0xe30 <DIO_u8_Set_Pin_Direction+0x160>
             	   {
                     	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
     dde:	a7 e3       	ldi	r26, 0x37	; 55
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e7 e3       	ldi	r30, 0x37	; 55
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_u8_Set_Pin_Direction+0x12c>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_u8_Set_Pin_Direction+0x128>
     e00:	84 2b       	or	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	8a c0       	rjmp	.+276    	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>
                     	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
     e06:	a7 e3       	ldi	r26, 0x37	; 55
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e7 e3       	ldi	r30, 0x37	; 55
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_u8_Set_Pin_Direction+0x154>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_u8_Set_Pin_Direction+0x150>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	75 c0       	rjmp	.+234    	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
     e30:	19 82       	std	Y+1, r1	; 0x01
     e32:	73 c0       	rjmp	.+230    	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>

             	   }
                   break;
               case DIO_u8_PORTC:
                   switch (Copy_u8_Pin_Direction)
     e34:	8c 81       	ldd	r24, Y+4	; 0x04
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	38 87       	std	Y+8, r19	; 0x08
     e3c:	2f 83       	std	Y+7, r18	; 0x07
     e3e:	8f 81       	ldd	r24, Y+7	; 0x07
     e40:	98 85       	ldd	r25, Y+8	; 0x08
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	c9 f0       	breq	.+50     	; 0xe78 <DIO_u8_Set_Pin_Direction+0x1a8>
     e46:	2f 81       	ldd	r18, Y+7	; 0x07
     e48:	38 85       	ldd	r19, Y+8	; 0x08
     e4a:	21 30       	cpi	r18, 0x01	; 1
     e4c:	31 05       	cpc	r19, r1
     e4e:	49 f5       	brne	.+82     	; 0xea2 <DIO_u8_Set_Pin_Direction+0x1d2>
                 	   {
                         	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
     e50:	a4 e3       	ldi	r26, 0x34	; 52
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e4 e3       	ldi	r30, 0x34	; 52
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_u8_Set_Pin_Direction+0x19e>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_u8_Set_Pin_Direction+0x19a>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	51 c0       	rjmp	.+162    	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>
                         	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
     e78:	a4 e3       	ldi	r26, 0x34	; 52
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e4 e3       	ldi	r30, 0x34	; 52
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO_u8_Set_Pin_Direction+0x1c6>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO_u8_Set_Pin_Direction+0x1c2>
     e9a:	80 95       	com	r24
     e9c:	84 23       	and	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	3c c0       	rjmp	.+120    	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>
  			           	     default :Local_u8_Erorr_State = ES_NOK ;
     ea2:	19 82       	std	Y+1, r1	; 0x01
     ea4:	3a c0       	rjmp	.+116    	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>

                 	   }
                       break;

               case DIO_u8_PORTD:
                    switch (Copy_u8_Pin_Direction)
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	3e 83       	std	Y+6, r19	; 0x06
     eae:	2d 83       	std	Y+5, r18	; 0x05
     eb0:	8d 81       	ldd	r24, Y+5	; 0x05
     eb2:	9e 81       	ldd	r25, Y+6	; 0x06
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	c9 f0       	breq	.+50     	; 0xeea <DIO_u8_Set_Pin_Direction+0x21a>
     eb8:	2d 81       	ldd	r18, Y+5	; 0x05
     eba:	3e 81       	ldd	r19, Y+6	; 0x06
     ebc:	21 30       	cpi	r18, 0x01	; 1
     ebe:	31 05       	cpc	r19, r1
     ec0:	49 f5       	brne	.+82     	; 0xf14 <DIO_u8_Set_Pin_Direction+0x244>
                     	   {
                             	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
     ec2:	a1 e3       	ldi	r26, 0x31	; 49
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e1 e3       	ldi	r30, 0x31	; 49
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_u8_Set_Pin_Direction+0x210>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_u8_Set_Pin_Direction+0x20c>
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	18 c0       	rjmp	.+48     	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>
                             	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
     eea:	a1 e3       	ldi	r26, 0x31	; 49
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e1 e3       	ldi	r30, 0x31	; 49
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_u8_Set_Pin_Direction+0x238>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_u8_Set_Pin_Direction+0x234>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>
      			           	     default :Local_u8_Erorr_State = ES_NOK ;
     f14:	19 82       	std	Y+1, r1	; 0x01
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <DIO_u8_Set_Pin_Direction+0x24a>
                     	   }
                           break;
        }
	}
	else {
		Local_u8_Erorr_State = ES_NOK ;
     f18:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Erorr_State ;
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1c:	2e 96       	adiw	r28, 0x0e	; 14
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <DIO_u8_Set_Pin_Value>:

u8 DIO_u8_Set_Pin_Value  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Value ){
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	2e 97       	sbiw	r28, 0x0e	; 14
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	8a 83       	std	Y+2, r24	; 0x02
     f44:	6b 83       	std	Y+3, r22	; 0x03
     f46:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Value == DIO_u8_INPUT)||(Copy_u8_Pin_Value == DIO_u8_OUTPUT)))
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	84 30       	cpi	r24, 0x04	; 4
     f50:	08 f0       	brcs	.+2      	; 0xf54 <DIO_u8_Set_Pin_Value+0x26>
     f52:	11 c1       	rjmp	.+546    	; 0x1176 <DIO_u8_Set_Pin_Value+0x248>
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	88 30       	cpi	r24, 0x08	; 8
     f58:	08 f0       	brcs	.+2      	; 0xf5c <DIO_u8_Set_Pin_Value+0x2e>
     f5a:	0d c1       	rjmp	.+538    	; 0x1176 <DIO_u8_Set_Pin_Value+0x248>
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	88 23       	and	r24, r24
     f60:	21 f0       	breq	.+8      	; 0xf6a <DIO_u8_Set_Pin_Value+0x3c>
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	09 f0       	breq	.+2      	; 0xf6a <DIO_u8_Set_Pin_Value+0x3c>
     f68:	06 c1       	rjmp	.+524    	; 0x1176 <DIO_u8_Set_Pin_Value+0x248>
	{
		switch (Copy_u8_Port_ID)
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	3e 87       	std	Y+14, r19	; 0x0e
     f72:	2d 87       	std	Y+13, r18	; 0x0d
     f74:	8d 85       	ldd	r24, Y+13	; 0x0d
     f76:	9e 85       	ldd	r25, Y+14	; 0x0e
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	91 05       	cpc	r25, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <DIO_u8_Set_Pin_Value+0x52>
     f7e:	50 c0       	rjmp	.+160    	; 0x1020 <DIO_u8_Set_Pin_Value+0xf2>
     f80:	2d 85       	ldd	r18, Y+13	; 0x0d
     f82:	3e 85       	ldd	r19, Y+14	; 0x0e
     f84:	22 30       	cpi	r18, 0x02	; 2
     f86:	31 05       	cpc	r19, r1
     f88:	2c f4       	brge	.+10     	; 0xf94 <DIO_u8_Set_Pin_Value+0x66>
     f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	71 f0       	breq	.+28     	; 0xfae <DIO_u8_Set_Pin_Value+0x80>
     f92:	f2 c0       	rjmp	.+484    	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>
     f94:	2d 85       	ldd	r18, Y+13	; 0x0d
     f96:	3e 85       	ldd	r19, Y+14	; 0x0e
     f98:	22 30       	cpi	r18, 0x02	; 2
     f9a:	31 05       	cpc	r19, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <DIO_u8_Set_Pin_Value+0x72>
     f9e:	79 c0       	rjmp	.+242    	; 0x1092 <DIO_u8_Set_Pin_Value+0x164>
     fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	91 05       	cpc	r25, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <DIO_u8_Set_Pin_Value+0x7e>
     faa:	ac c0       	rjmp	.+344    	; 0x1104 <DIO_u8_Set_Pin_Value+0x1d6>
     fac:	e5 c0       	rjmp	.+458    	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Pin_Value)
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	3c 87       	std	Y+12, r19	; 0x0c
     fb6:	2b 87       	std	Y+11, r18	; 0x0b
     fb8:	8b 85       	ldd	r24, Y+11	; 0x0b
     fba:	9c 85       	ldd	r25, Y+12	; 0x0c
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	c9 f0       	breq	.+50     	; 0xff2 <DIO_u8_Set_Pin_Value+0xc4>
     fc0:	2b 85       	ldd	r18, Y+11	; 0x0b
     fc2:	3c 85       	ldd	r19, Y+12	; 0x0c
     fc4:	21 30       	cpi	r18, 0x01	; 1
     fc6:	31 05       	cpc	r19, r1
     fc8:	49 f5       	brne	.+82     	; 0x101c <DIO_u8_Set_Pin_Value+0xee>
			{
			     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
     fca:	ab e3       	ldi	r26, 0x3B	; 59
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	eb e3       	ldi	r30, 0x3B	; 59
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_u8_Set_Pin_Value+0xba>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_u8_Set_Pin_Value+0xb6>
     fec:	84 2b       	or	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	c3 c0       	rjmp	.+390    	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>
           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
     ff2:	ab e3       	ldi	r26, 0x3B	; 59
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	eb e3       	ldi	r30, 0x3B	; 59
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 2e       	mov	r0, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_u8_Set_Pin_Value+0xe2>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_u8_Set_Pin_Value+0xde>
    1014:	80 95       	com	r24
    1016:	84 23       	and	r24, r20
    1018:	8c 93       	st	X, r24
    101a:	ae c0       	rjmp	.+348    	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>
           	     default :Local_u8_Erorr_State = ES_NOK ;
    101c:	19 82       	std	Y+1, r1	; 0x01
    101e:	ac c0       	rjmp	.+344    	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>

			}
			break;
		case DIO_u8_PORTB :
			switch (Copy_u8_Pin_Value)
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3a 87       	std	Y+10, r19	; 0x0a
    1028:	29 87       	std	Y+9, r18	; 0x09
    102a:	89 85       	ldd	r24, Y+9	; 0x09
    102c:	9a 85       	ldd	r25, Y+10	; 0x0a
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	c9 f0       	breq	.+50     	; 0x1064 <DIO_u8_Set_Pin_Value+0x136>
    1032:	29 85       	ldd	r18, Y+9	; 0x09
    1034:	3a 85       	ldd	r19, Y+10	; 0x0a
    1036:	21 30       	cpi	r18, 0x01	; 1
    1038:	31 05       	cpc	r19, r1
    103a:	49 f5       	brne	.+82     	; 0x108e <DIO_u8_Set_Pin_Value+0x160>
				{
				     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    103c:	a8 e3       	ldi	r26, 0x38	; 56
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e8 e3       	ldi	r30, 0x38	; 56
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_u8_Set_Pin_Value+0x12c>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_u8_Set_Pin_Value+0x128>
    105e:	84 2b       	or	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	8a c0       	rjmp	.+276    	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>
	           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    1064:	a8 e3       	ldi	r26, 0x38	; 56
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e8 e3       	ldi	r30, 0x38	; 56
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_u8_Set_Pin_Value+0x154>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <DIO_u8_Set_Pin_Value+0x150>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	75 c0       	rjmp	.+234    	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>
	           	     default :Local_u8_Erorr_State = ES_NOK ;
    108e:	19 82       	std	Y+1, r1	; 0x01
    1090:	73 c0       	rjmp	.+230    	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>

				}
	     	break;
		case DIO_u8_PORTC :
			switch (Copy_u8_Pin_Value)
    1092:	8c 81       	ldd	r24, Y+4	; 0x04
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	38 87       	std	Y+8, r19	; 0x08
    109a:	2f 83       	std	Y+7, r18	; 0x07
    109c:	8f 81       	ldd	r24, Y+7	; 0x07
    109e:	98 85       	ldd	r25, Y+8	; 0x08
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	c9 f0       	breq	.+50     	; 0x10d6 <DIO_u8_Set_Pin_Value+0x1a8>
    10a4:	2f 81       	ldd	r18, Y+7	; 0x07
    10a6:	38 85       	ldd	r19, Y+8	; 0x08
    10a8:	21 30       	cpi	r18, 0x01	; 1
    10aa:	31 05       	cpc	r19, r1
    10ac:	49 f5       	brne	.+82     	; 0x1100 <DIO_u8_Set_Pin_Value+0x1d2>
					{
					     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    10ae:	a5 e3       	ldi	r26, 0x35	; 53
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e5 e3       	ldi	r30, 0x35	; 53
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_u8_Set_Pin_Value+0x19e>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_u8_Set_Pin_Value+0x19a>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	51 c0       	rjmp	.+162    	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>
		           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    10d6:	a5 e3       	ldi	r26, 0x35	; 53
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e3       	ldi	r30, 0x35	; 53
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_u8_Set_Pin_Value+0x1c6>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_u8_Set_Pin_Value+0x1c2>
    10f8:	80 95       	com	r24
    10fa:	84 23       	and	r24, r20
    10fc:	8c 93       	st	X, r24
    10fe:	3c c0       	rjmp	.+120    	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>
		           	     default :Local_u8_Erorr_State = ES_NOK ;
    1100:	19 82       	std	Y+1, r1	; 0x01
    1102:	3a c0       	rjmp	.+116    	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>

					}
		   break;
		case DIO_u8_PORTD :
			switch (Copy_u8_Pin_Value)
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	3e 83       	std	Y+6, r19	; 0x06
    110c:	2d 83       	std	Y+5, r18	; 0x05
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	c9 f0       	breq	.+50     	; 0x1148 <DIO_u8_Set_Pin_Value+0x21a>
    1116:	2d 81       	ldd	r18, Y+5	; 0x05
    1118:	3e 81       	ldd	r19, Y+6	; 0x06
    111a:	21 30       	cpi	r18, 0x01	; 1
    111c:	31 05       	cpc	r19, r1
    111e:	49 f5       	brne	.+82     	; 0x1172 <DIO_u8_Set_Pin_Value+0x244>
						{
						     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    1120:	a2 e3       	ldi	r26, 0x32	; 50
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e2 e3       	ldi	r30, 0x32	; 50
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_u8_Set_Pin_Value+0x210>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_u8_Set_Pin_Value+0x20c>
    1142:	84 2b       	or	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	18 c0       	rjmp	.+48     	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>
			           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    1148:	a2 e3       	ldi	r26, 0x32	; 50
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e2 e3       	ldi	r30, 0x32	; 50
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_u8_Set_Pin_Value+0x238>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_u8_Set_Pin_Value+0x234>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	03 c0       	rjmp	.+6      	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1172:	19 82       	std	Y+1, r1	; 0x01
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <DIO_u8_Set_Pin_Value+0x24a>
						}
			break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    1176:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_u8_Erorr_State ;
    1178:	89 81       	ldd	r24, Y+1	; 0x01
}
    117a:	2e 96       	adiw	r28, 0x0e	; 14
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <DIO_u8_Get_Pin_Value>:

u8 DIO_u8_Get_Pin_Value      (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 * Copy_u8_Returned_Pin_Value ){
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	28 97       	sbiw	r28, 0x08	; 8
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	8b 83       	std	Y+3, r24	; 0x03
    11a2:	6c 83       	std	Y+4, r22	; 0x04
    11a4:	5e 83       	std	Y+6, r21	; 0x06
    11a6:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8_Erorr_State = ES_OK ;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_Pin_Value ;
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && (Copy_u8_Returned_Pin_Value != NULL)){
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	84 30       	cpi	r24, 0x04	; 4
    11b0:	08 f0       	brcs	.+2      	; 0x11b4 <DIO_u8_Get_Pin_Value+0x28>
    11b2:	ae c0       	rjmp	.+348    	; 0x1310 <DIO_u8_Get_Pin_Value+0x184>
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	88 30       	cpi	r24, 0x08	; 8
    11b8:	08 f0       	brcs	.+2      	; 0x11bc <DIO_u8_Get_Pin_Value+0x30>
    11ba:	aa c0       	rjmp	.+340    	; 0x1310 <DIO_u8_Get_Pin_Value+0x184>
    11bc:	8d 81       	ldd	r24, Y+5	; 0x05
    11be:	9e 81       	ldd	r25, Y+6	; 0x06
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <DIO_u8_Get_Pin_Value+0x3a>
    11c4:	a5 c0       	rjmp	.+330    	; 0x1310 <DIO_u8_Get_Pin_Value+0x184>
		switch (Copy_u8_Port_ID)
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	38 87       	std	Y+8, r19	; 0x08
    11ce:	2f 83       	std	Y+7, r18	; 0x07
    11d0:	8f 81       	ldd	r24, Y+7	; 0x07
    11d2:	98 85       	ldd	r25, Y+8	; 0x08
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	c1 f1       	breq	.+112    	; 0x124a <DIO_u8_Get_Pin_Value+0xbe>
    11da:	2f 81       	ldd	r18, Y+7	; 0x07
    11dc:	38 85       	ldd	r19, Y+8	; 0x08
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	2c f4       	brge	.+10     	; 0x11ee <DIO_u8_Get_Pin_Value+0x62>
    11e4:	8f 81       	ldd	r24, Y+7	; 0x07
    11e6:	98 85       	ldd	r25, Y+8	; 0x08
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	71 f0       	breq	.+28     	; 0x1208 <DIO_u8_Get_Pin_Value+0x7c>
    11ec:	92 c0       	rjmp	.+292    	; 0x1312 <DIO_u8_Get_Pin_Value+0x186>
    11ee:	2f 81       	ldd	r18, Y+7	; 0x07
    11f0:	38 85       	ldd	r19, Y+8	; 0x08
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <DIO_u8_Get_Pin_Value+0x6e>
    11f8:	49 c0       	rjmp	.+146    	; 0x128c <DIO_u8_Get_Pin_Value+0x100>
    11fa:	8f 81       	ldd	r24, Y+7	; 0x07
    11fc:	98 85       	ldd	r25, Y+8	; 0x08
    11fe:	83 30       	cpi	r24, 0x03	; 3
    1200:	91 05       	cpc	r25, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <DIO_u8_Get_Pin_Value+0x7a>
    1204:	64 c0       	rjmp	.+200    	; 0x12ce <DIO_u8_Get_Pin_Value+0x142>
    1206:	85 c0       	rjmp	.+266    	; 0x1312 <DIO_u8_Get_Pin_Value+0x186>
		{
		     case DIO_u8_PORTA :
		    	 Local_u8_Pin_Value =SET_BIT(DIO_u8_PORTA_REG,Copy_u8_Pin_ID);
    1208:	ab e3       	ldi	r26, 0x3B	; 59
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	eb e3       	ldi	r30, 0x3B	; 59
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_u8_Get_Pin_Value+0x9a>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_u8_Get_Pin_Value+0x96>
    122a:	84 2b       	or	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	8c 91       	ld	r24, X
    1230:	89 83       	std	Y+1, r24	; 0x01
		    	 if (Local_u8_Pin_Value ==ES_NOK){
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	88 23       	and	r24, r24
    1236:	21 f4       	brne	.+8      	; 0x1240 <DIO_u8_Get_Pin_Value+0xb4>
		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    1238:	ed 81       	ldd	r30, Y+5	; 0x05
    123a:	fe 81       	ldd	r31, Y+6	; 0x06
    123c:	10 82       	st	Z, r1
    123e:	69 c0       	rjmp	.+210    	; 0x1312 <DIO_u8_Get_Pin_Value+0x186>
		    	 }
		    	 else
		    	 {
		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1240:	ed 81       	ldd	r30, Y+5	; 0x05
    1242:	fe 81       	ldd	r31, Y+6	; 0x06
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	80 83       	st	Z, r24
    1248:	64 c0       	rjmp	.+200    	; 0x1312 <DIO_u8_Get_Pin_Value+0x186>
		    	 }
		     break;
		     case DIO_u8_PORTB :
		    		    	 Local_u8_Pin_Value =SET_BIT(DIO_u8_PORTB_REG,Copy_u8_Pin_ID);
    124a:	a8 e3       	ldi	r26, 0x38	; 56
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e8 e3       	ldi	r30, 0x38	; 56
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_u8_Get_Pin_Value+0xdc>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_u8_Get_Pin_Value+0xd8>
    126c:	84 2b       	or	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	8c 91       	ld	r24, X
    1272:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value ==ES_NOK){
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	88 23       	and	r24, r24
    1278:	21 f4       	brne	.+8      	; 0x1282 <DIO_u8_Get_Pin_Value+0xf6>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    127a:	ed 81       	ldd	r30, Y+5	; 0x05
    127c:	fe 81       	ldd	r31, Y+6	; 0x06
    127e:	10 82       	st	Z, r1
    1280:	48 c0       	rjmp	.+144    	; 0x1312 <DIO_u8_Get_Pin_Value+0x186>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1282:	ed 81       	ldd	r30, Y+5	; 0x05
    1284:	fe 81       	ldd	r31, Y+6	; 0x06
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	80 83       	st	Z, r24
    128a:	43 c0       	rjmp	.+134    	; 0x1312 <DIO_u8_Get_Pin_Value+0x186>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTC :
		    		    	 Local_u8_Pin_Value =SET_BIT(DIO_u8_PORTC_REG,Copy_u8_Pin_ID);
    128c:	a5 e3       	ldi	r26, 0x35	; 53
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e5 e3       	ldi	r30, 0x35	; 53
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_u8_Get_Pin_Value+0x11e>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_u8_Get_Pin_Value+0x11a>
    12ae:	84 2b       	or	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	8c 91       	ld	r24, X
    12b4:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value ==ES_NOK){
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	88 23       	and	r24, r24
    12ba:	21 f4       	brne	.+8      	; 0x12c4 <DIO_u8_Get_Pin_Value+0x138>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    12bc:	ed 81       	ldd	r30, Y+5	; 0x05
    12be:	fe 81       	ldd	r31, Y+6	; 0x06
    12c0:	10 82       	st	Z, r1
    12c2:	27 c0       	rjmp	.+78     	; 0x1312 <DIO_u8_Get_Pin_Value+0x186>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    12c4:	ed 81       	ldd	r30, Y+5	; 0x05
    12c6:	fe 81       	ldd	r31, Y+6	; 0x06
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	80 83       	st	Z, r24
    12cc:	22 c0       	rjmp	.+68     	; 0x1312 <DIO_u8_Get_Pin_Value+0x186>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTD :
		    		    	 Local_u8_Pin_Value =SET_BIT(DIO_u8_PORTD_REG,Copy_u8_Pin_ID);
    12ce:	a2 e3       	ldi	r26, 0x32	; 50
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e2 e3       	ldi	r30, 0x32	; 50
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_u8_Get_Pin_Value+0x160>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_u8_Get_Pin_Value+0x15c>
    12f0:	84 2b       	or	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	8c 91       	ld	r24, X
    12f6:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value ==ES_NOK){
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	88 23       	and	r24, r24
    12fc:	21 f4       	brne	.+8      	; 0x1306 <DIO_u8_Get_Pin_Value+0x17a>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    12fe:	ed 81       	ldd	r30, Y+5	; 0x05
    1300:	fe 81       	ldd	r31, Y+6	; 0x06
    1302:	10 82       	st	Z, r1
    1304:	06 c0       	rjmp	.+12     	; 0x1312 <DIO_u8_Get_Pin_Value+0x186>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1306:	ed 81       	ldd	r30, Y+5	; 0x05
    1308:	fe 81       	ldd	r31, Y+6	; 0x06
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	80 83       	st	Z, r24
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <DIO_u8_Get_Pin_Value+0x186>
		    		    	 }
		    		     break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    1310:	1a 82       	std	Y+2, r1	; 0x02
		}
		return Local_u8_Erorr_State ;
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1314:	28 96       	adiw	r28, 0x08	; 8
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <DIO_u8_Set_Port_Direction>:

u8 DIO_u8_Set_Port_Direction (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Direction ){
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	2d 97       	sbiw	r28, 0x0d	; 13
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	8a 83       	std	Y+2, r24	; 0x02
    133c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && ((Copy_u8_Port_Direction == DIO_u8_INPUT)||(Copy_u8_Port_Direction == DIO_u8_OUTPUT)))
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	84 30       	cpi	r24, 0x04	; 4
    1346:	08 f0       	brcs	.+2      	; 0x134a <DIO_u8_Set_Port_Direction+0x24>
    1348:	86 c0       	rjmp	.+268    	; 0x1456 <DIO_u8_Set_Port_Direction+0x130>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 23       	and	r24, r24
    134e:	21 f0       	breq	.+8      	; 0x1358 <DIO_u8_Set_Port_Direction+0x32>
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	09 f0       	breq	.+2      	; 0x1358 <DIO_u8_Set_Port_Direction+0x32>
    1356:	7f c0       	rjmp	.+254    	; 0x1456 <DIO_u8_Set_Port_Direction+0x130>
	{
		switch (Copy_u8_Port_ID)
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	3d 87       	std	Y+13, r19	; 0x0d
    1360:	2c 87       	std	Y+12, r18	; 0x0c
    1362:	8c 85       	ldd	r24, Y+12	; 0x0c
    1364:	9d 85       	ldd	r25, Y+13	; 0x0d
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	91 05       	cpc	r25, r1
    136a:	71 f1       	breq	.+92     	; 0x13c8 <DIO_u8_Set_Port_Direction+0xa2>
    136c:	2c 85       	ldd	r18, Y+12	; 0x0c
    136e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	2c f4       	brge	.+10     	; 0x1380 <DIO_u8_Set_Port_Direction+0x5a>
    1376:	8c 85       	ldd	r24, Y+12	; 0x0c
    1378:	9d 85       	ldd	r25, Y+13	; 0x0d
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	69 f0       	breq	.+26     	; 0x1398 <DIO_u8_Set_Port_Direction+0x72>
    137e:	69 c0       	rjmp	.+210    	; 0x1452 <DIO_u8_Set_Port_Direction+0x12c>
    1380:	2c 85       	ldd	r18, Y+12	; 0x0c
    1382:	3d 85       	ldd	r19, Y+13	; 0x0d
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	b1 f1       	breq	.+108    	; 0x13f6 <DIO_u8_Set_Port_Direction+0xd0>
    138a:	8c 85       	ldd	r24, Y+12	; 0x0c
    138c:	9d 85       	ldd	r25, Y+13	; 0x0d
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	91 05       	cpc	r25, r1
    1392:	09 f4       	brne	.+2      	; 0x1396 <DIO_u8_Set_Port_Direction+0x70>
    1394:	47 c0       	rjmp	.+142    	; 0x1424 <DIO_u8_Set_Port_Direction+0xfe>
    1396:	5d c0       	rjmp	.+186    	; 0x1452 <DIO_u8_Set_Port_Direction+0x12c>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Port_Direction)
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	3b 87       	std	Y+11, r19	; 0x0b
    13a0:	2a 87       	std	Y+10, r18	; 0x0a
    13a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    13a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	59 f0       	breq	.+22     	; 0x13c0 <DIO_u8_Set_Port_Direction+0x9a>
    13aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    13ac:	3b 85       	ldd	r19, Y+11	; 0x0b
    13ae:	21 30       	cpi	r18, 0x01	; 1
    13b0:	31 05       	cpc	r19, r1
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <DIO_u8_Set_Port_Direction+0x90>
    13b4:	51 c0       	rjmp	.+162    	; 0x1458 <DIO_u8_Set_Port_Direction+0x132>
			{
			    case DIO_u8_OUTPUT : DIO_u8_PORTA_REG = 0xff;break;
    13b6:	eb e3       	ldi	r30, 0x3B	; 59
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8f ef       	ldi	r24, 0xFF	; 255
    13bc:	80 83       	st	Z, r24
    13be:	4c c0       	rjmp	.+152    	; 0x1458 <DIO_u8_Set_Port_Direction+0x132>
			    case DIO_u8_INPUT : DIO_u8_PORTA_REG = 0x00;break;
    13c0:	eb e3       	ldi	r30, 0x3B	; 59
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	10 82       	st	Z, r1
    13c6:	48 c0       	rjmp	.+144    	; 0x1458 <DIO_u8_Set_Port_Direction+0x132>
			}
			break;
			case DIO_u8_PORTB :
				switch (Copy_u8_Port_Direction)
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	39 87       	std	Y+9, r19	; 0x09
    13d0:	28 87       	std	Y+8, r18	; 0x08
    13d2:	88 85       	ldd	r24, Y+8	; 0x08
    13d4:	99 85       	ldd	r25, Y+9	; 0x09
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	51 f0       	breq	.+20     	; 0x13ee <DIO_u8_Set_Port_Direction+0xc8>
    13da:	28 85       	ldd	r18, Y+8	; 0x08
    13dc:	39 85       	ldd	r19, Y+9	; 0x09
    13de:	21 30       	cpi	r18, 0x01	; 1
    13e0:	31 05       	cpc	r19, r1
    13e2:	d1 f5       	brne	.+116    	; 0x1458 <DIO_u8_Set_Port_Direction+0x132>
				{
				    case DIO_u8_OUTPUT : DIO_u8_PORTB_REG = 0xff;break;
    13e4:	e8 e3       	ldi	r30, 0x38	; 56
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	80 83       	st	Z, r24
    13ec:	35 c0       	rjmp	.+106    	; 0x1458 <DIO_u8_Set_Port_Direction+0x132>
				    case DIO_u8_INPUT : DIO_u8_PORTB_REG = 0x00;break;
    13ee:	e8 e3       	ldi	r30, 0x38	; 56
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	10 82       	st	Z, r1
    13f4:	31 c0       	rjmp	.+98     	; 0x1458 <DIO_u8_Set_Port_Direction+0x132>
				}
				break;
				case DIO_u8_PORTC :
					switch (Copy_u8_Port_Direction)
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	3f 83       	std	Y+7, r19	; 0x07
    13fe:	2e 83       	std	Y+6, r18	; 0x06
    1400:	8e 81       	ldd	r24, Y+6	; 0x06
    1402:	9f 81       	ldd	r25, Y+7	; 0x07
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	51 f0       	breq	.+20     	; 0x141c <DIO_u8_Set_Port_Direction+0xf6>
    1408:	2e 81       	ldd	r18, Y+6	; 0x06
    140a:	3f 81       	ldd	r19, Y+7	; 0x07
    140c:	21 30       	cpi	r18, 0x01	; 1
    140e:	31 05       	cpc	r19, r1
    1410:	19 f5       	brne	.+70     	; 0x1458 <DIO_u8_Set_Port_Direction+0x132>
					{
					    case DIO_u8_OUTPUT : DIO_u8_PORTC_REG = 0xff;break;
    1412:	e5 e3       	ldi	r30, 0x35	; 53
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	80 83       	st	Z, r24
    141a:	1e c0       	rjmp	.+60     	; 0x1458 <DIO_u8_Set_Port_Direction+0x132>
					    case DIO_u8_INPUT : DIO_u8_PORTC_REG = 0x00;break;
    141c:	e5 e3       	ldi	r30, 0x35	; 53
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	10 82       	st	Z, r1
    1422:	1a c0       	rjmp	.+52     	; 0x1458 <DIO_u8_Set_Port_Direction+0x132>
					}
					break;
					case DIO_u8_PORTD :
						switch (Copy_u8_Port_Direction)
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	3d 83       	std	Y+5, r19	; 0x05
    142c:	2c 83       	std	Y+4, r18	; 0x04
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	9d 81       	ldd	r25, Y+5	; 0x05
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	51 f0       	breq	.+20     	; 0x144a <DIO_u8_Set_Port_Direction+0x124>
    1436:	2c 81       	ldd	r18, Y+4	; 0x04
    1438:	3d 81       	ldd	r19, Y+5	; 0x05
    143a:	21 30       	cpi	r18, 0x01	; 1
    143c:	31 05       	cpc	r19, r1
    143e:	61 f4       	brne	.+24     	; 0x1458 <DIO_u8_Set_Port_Direction+0x132>
						{
						    case DIO_u8_OUTPUT : DIO_u8_PORTD_REG = 0xff;break;
    1440:	e2 e3       	ldi	r30, 0x32	; 50
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	8f ef       	ldi	r24, 0xFF	; 255
    1446:	80 83       	st	Z, r24
    1448:	07 c0       	rjmp	.+14     	; 0x1458 <DIO_u8_Set_Port_Direction+0x132>
						    case DIO_u8_INPUT : DIO_u8_PORTD_REG = 0x00;break;
    144a:	e2 e3       	ldi	r30, 0x32	; 50
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	10 82       	st	Z, r1
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <DIO_u8_Set_Port_Direction+0x132>
						}
						break;
						default:Local_u8_Erorr_State = ES_NOK ;
    1452:	19 82       	std	Y+1, r1	; 0x01
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <DIO_u8_Set_Port_Direction+0x132>

		}
	}
	else {
				Local_u8_Erorr_State = ES_NOK ;
    1456:	19 82       	std	Y+1, r1	; 0x01
			}
			return Local_u8_Erorr_State ;
    1458:	89 81       	ldd	r24, Y+1	; 0x01

}
    145a:	2d 96       	adiw	r28, 0x0d	; 13
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <DIO_u8_Set_Port_Value>:

u8 DIO_u8_Set_Port_Value     (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Value ){
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <DIO_u8_Set_Port_Value+0x6>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <DIO_u8_Set_Port_Value+0x8>
    1474:	0f 92       	push	r0
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	8a 83       	std	Y+2, r24	; 0x02
    147c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	89 83       	std	Y+1, r24	; 0x01

			switch (Copy_u8_Port_ID)
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	3d 83       	std	Y+5, r19	; 0x05
    148a:	2c 83       	std	Y+4, r18	; 0x04
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	9d 81       	ldd	r25, Y+5	; 0x05
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	91 05       	cpc	r25, r1
    1494:	d1 f0       	breq	.+52     	; 0x14ca <DIO_u8_Set_Port_Value+0x5e>
    1496:	2c 81       	ldd	r18, Y+4	; 0x04
    1498:	3d 81       	ldd	r19, Y+5	; 0x05
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	2c f4       	brge	.+10     	; 0x14aa <DIO_u8_Set_Port_Value+0x3e>
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	9d 81       	ldd	r25, Y+5	; 0x05
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	61 f0       	breq	.+24     	; 0x14c0 <DIO_u8_Set_Port_Value+0x54>
    14a8:	1f c0       	rjmp	.+62     	; 0x14e8 <DIO_u8_Set_Port_Value+0x7c>
    14aa:	2c 81       	ldd	r18, Y+4	; 0x04
    14ac:	3d 81       	ldd	r19, Y+5	; 0x05
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	81 f0       	breq	.+32     	; 0x14d4 <DIO_u8_Set_Port_Value+0x68>
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	83 30       	cpi	r24, 0x03	; 3
    14ba:	91 05       	cpc	r25, r1
    14bc:	81 f0       	breq	.+32     	; 0x14de <DIO_u8_Set_Port_Value+0x72>
    14be:	14 c0       	rjmp	.+40     	; 0x14e8 <DIO_u8_Set_Port_Value+0x7c>
			{
			case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8_Port_Value; break;
    14c0:	eb e3       	ldi	r30, 0x3B	; 59
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	80 83       	st	Z, r24
    14c8:	10 c0       	rjmp	.+32     	; 0x14ea <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8_Port_Value; break;
    14ca:	e8 e3       	ldi	r30, 0x38	; 56
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	80 83       	st	Z, r24
    14d2:	0b c0       	rjmp	.+22     	; 0x14ea <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8_Port_Value; break;
    14d4:	e5 e3       	ldi	r30, 0x35	; 53
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	80 83       	st	Z, r24
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8_Port_Value; break;
    14de:	e2 e3       	ldi	r30, 0x32	; 50
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	80 83       	st	Z, r24
    14e6:	01 c0       	rjmp	.+2      	; 0x14ea <DIO_u8_Set_Port_Value+0x7e>
			default :Local_u8_Erorr_State = ES_NOK;
    14e8:	19 82       	std	Y+1, r1	; 0x01
			}
			return Local_u8_Erorr_State ;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01

}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <DIO_u8_Get_Port_Value>:

u8 DIO_u8_Get_Port_Value     (u8 Copy_u8_Port_ID, u8 * Copy_u8_Returned_Port_Value ){
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <DIO_u8_Get_Port_Value+0x6>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <DIO_u8_Get_Port_Value+0x8>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <DIO_u8_Get_Port_Value+0xa>
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	8a 83       	std	Y+2, r24	; 0x02
    150c:	7c 83       	std	Y+4, r23	; 0x04
    150e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Returned_Port_Value != NULL){
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	e9 f1       	breq	.+122    	; 0x1596 <DIO_u8_Get_Port_Value+0x9a>
		switch (Copy_u8_Port_ID)
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3e 83       	std	Y+6, r19	; 0x06
    1524:	2d 83       	std	Y+5, r18	; 0x05
    1526:	8d 81       	ldd	r24, Y+5	; 0x05
    1528:	9e 81       	ldd	r25, Y+6	; 0x06
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	e1 f0       	breq	.+56     	; 0x1568 <DIO_u8_Get_Port_Value+0x6c>
    1530:	2d 81       	ldd	r18, Y+5	; 0x05
    1532:	3e 81       	ldd	r19, Y+6	; 0x06
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	2c f4       	brge	.+10     	; 0x1544 <DIO_u8_Get_Port_Value+0x48>
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	61 f0       	breq	.+24     	; 0x155a <DIO_u8_Get_Port_Value+0x5e>
    1542:	27 c0       	rjmp	.+78     	; 0x1592 <DIO_u8_Get_Port_Value+0x96>
    1544:	2d 81       	ldd	r18, Y+5	; 0x05
    1546:	3e 81       	ldd	r19, Y+6	; 0x06
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	a1 f0       	breq	.+40     	; 0x1576 <DIO_u8_Get_Port_Value+0x7a>
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 05       	cpc	r25, r1
    1556:	b1 f0       	breq	.+44     	; 0x1584 <DIO_u8_Get_Port_Value+0x88>
    1558:	1c c0       	rjmp	.+56     	; 0x1592 <DIO_u8_Get_Port_Value+0x96>
		{
		case DIO_u8_PORTA :* Copy_u8_Returned_Port_Value =DIO_u8_PORTA_REG; break;
    155a:	eb e3       	ldi	r30, 0x3B	; 59
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	eb 81       	ldd	r30, Y+3	; 0x03
    1562:	fc 81       	ldd	r31, Y+4	; 0x04
    1564:	80 83       	st	Z, r24
    1566:	18 c0       	rjmp	.+48     	; 0x1598 <DIO_u8_Get_Port_Value+0x9c>
		case DIO_u8_PORTB :* Copy_u8_Returned_Port_Value =DIO_u8_PORTB_REG; break;
    1568:	e8 e3       	ldi	r30, 0x38	; 56
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	eb 81       	ldd	r30, Y+3	; 0x03
    1570:	fc 81       	ldd	r31, Y+4	; 0x04
    1572:	80 83       	st	Z, r24
    1574:	11 c0       	rjmp	.+34     	; 0x1598 <DIO_u8_Get_Port_Value+0x9c>
		case DIO_u8_PORTC :* Copy_u8_Returned_Port_Value =DIO_u8_PORTC_REG; break;
    1576:	e5 e3       	ldi	r30, 0x35	; 53
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	eb 81       	ldd	r30, Y+3	; 0x03
    157e:	fc 81       	ldd	r31, Y+4	; 0x04
    1580:	80 83       	st	Z, r24
    1582:	0a c0       	rjmp	.+20     	; 0x1598 <DIO_u8_Get_Port_Value+0x9c>
		case DIO_u8_PORTD :* Copy_u8_Returned_Port_Value =DIO_u8_PORTD_REG; break;
    1584:	e2 e3       	ldi	r30, 0x32	; 50
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	eb 81       	ldd	r30, Y+3	; 0x03
    158c:	fc 81       	ldd	r31, Y+4	; 0x04
    158e:	80 83       	st	Z, r24
    1590:	03 c0       	rjmp	.+6      	; 0x1598 <DIO_u8_Get_Port_Value+0x9c>
		default :Local_u8_Erorr_State = ES_NOK;
    1592:	19 82       	std	Y+1, r1	; 0x01
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <DIO_u8_Get_Port_Value+0x9c>
		}}
		else {
			Local_u8_Erorr_State = ES_NOK ;
    1596:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_u8_Erorr_State ;
    1598:	89 81       	ldd	r24, Y+1	; 0x01

}
    159a:	26 96       	adiw	r28, 0x06	; 6
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <LCD_void_INIT>:
#include"LCD_private.h"

//#define F_CPU 8000000UL
#include<util/delay.h>

void LCD_void_INIT (void){
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	c2 54       	subi	r28, 0x42	; 66
    15b6:	d0 40       	sbci	r29, 0x00	; 0
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	fe 01       	movw	r30, r28
    15c4:	ff 96       	adiw	r30, 0x3f	; 63
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	ac e0       	ldi	r26, 0x0C	; 12
    15cc:	b2 e4       	ldi	r27, 0x42	; 66
    15ce:	80 83       	st	Z, r24
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	a2 83       	std	Z+2, r26	; 0x02
    15d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d6:	fe 01       	movw	r30, r28
    15d8:	ff 96       	adiw	r30, 0x3f	; 63
    15da:	60 81       	ld	r22, Z
    15dc:	71 81       	ldd	r23, Z+1	; 0x01
    15de:	82 81       	ldd	r24, Z+2	; 0x02
    15e0:	93 81       	ldd	r25, Z+3	; 0x03
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	4a e7       	ldi	r20, 0x7A	; 122
    15e8:	53 e4       	ldi	r21, 0x43	; 67
    15ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	8b af       	std	Y+59, r24	; 0x3b
    15f4:	9c af       	std	Y+60, r25	; 0x3c
    15f6:	ad af       	std	Y+61, r26	; 0x3d
    15f8:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    15fa:	6b ad       	ldd	r22, Y+59	; 0x3b
    15fc:	7c ad       	ldd	r23, Y+60	; 0x3c
    15fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1600:	9e ad       	ldd	r25, Y+62	; 0x3e
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e8       	ldi	r20, 0x80	; 128
    1608:	5f e3       	ldi	r21, 0x3F	; 63
    160a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    160e:	88 23       	and	r24, r24
    1610:	2c f4       	brge	.+10     	; 0x161c <LCD_void_INIT+0x70>
		__ticks = 1;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	9a af       	std	Y+58, r25	; 0x3a
    1618:	89 af       	std	Y+57, r24	; 0x39
    161a:	41 c0       	rjmp	.+130    	; 0x169e <LCD_void_INIT+0xf2>
	else if (__tmp > 65535)
    161c:	6b ad       	ldd	r22, Y+59	; 0x3b
    161e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1620:	8d ad       	ldd	r24, Y+61	; 0x3d
    1622:	9e ad       	ldd	r25, Y+62	; 0x3e
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	3f ef       	ldi	r19, 0xFF	; 255
    1628:	4f e7       	ldi	r20, 0x7F	; 127
    162a:	57 e4       	ldi	r21, 0x47	; 71
    162c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1630:	18 16       	cp	r1, r24
    1632:	5c f5       	brge	.+86     	; 0x168a <LCD_void_INIT+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1634:	fe 01       	movw	r30, r28
    1636:	ff 96       	adiw	r30, 0x3f	; 63
    1638:	60 81       	ld	r22, Z
    163a:	71 81       	ldd	r23, Z+1	; 0x01
    163c:	82 81       	ldd	r24, Z+2	; 0x02
    163e:	93 81       	ldd	r25, Z+3	; 0x03
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e2       	ldi	r20, 0x20	; 32
    1646:	51 e4       	ldi	r21, 0x41	; 65
    1648:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	9a af       	std	Y+58, r25	; 0x3a
    165e:	89 af       	std	Y+57, r24	; 0x39
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <LCD_void_INIT+0xd4>
    1662:	89 e1       	ldi	r24, 0x19	; 25
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	98 af       	std	Y+56, r25	; 0x38
    1668:	8f ab       	std	Y+55, r24	; 0x37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    166a:	8f a9       	ldd	r24, Y+55	; 0x37
    166c:	98 ad       	ldd	r25, Y+56	; 0x38
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <LCD_void_INIT+0xc2>
    1672:	98 af       	std	Y+56, r25	; 0x38
    1674:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1676:	89 ad       	ldd	r24, Y+57	; 0x39
    1678:	9a ad       	ldd	r25, Y+58	; 0x3a
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	9a af       	std	Y+58, r25	; 0x3a
    167e:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1680:	89 ad       	ldd	r24, Y+57	; 0x39
    1682:	9a ad       	ldd	r25, Y+58	; 0x3a
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	69 f7       	brne	.-38     	; 0x1662 <LCD_void_INIT+0xb6>
    1688:	14 c0       	rjmp	.+40     	; 0x16b2 <LCD_void_INIT+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168a:	6b ad       	ldd	r22, Y+59	; 0x3b
    168c:	7c ad       	ldd	r23, Y+60	; 0x3c
    168e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1690:	9e ad       	ldd	r25, Y+62	; 0x3e
    1692:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	9a af       	std	Y+58, r25	; 0x3a
    169c:	89 af       	std	Y+57, r24	; 0x39
    169e:	89 ad       	ldd	r24, Y+57	; 0x39
    16a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    16a2:	9e ab       	std	Y+54, r25	; 0x36
    16a4:	8d ab       	std	Y+53, r24	; 0x35
    16a6:	8d a9       	ldd	r24, Y+53	; 0x35
    16a8:	9e a9       	ldd	r25, Y+54	; 0x36
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <LCD_void_INIT+0xfe>
    16ae:	9e ab       	std	Y+54, r25	; 0x36
    16b0:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(35);
//to set CMND
	LCD_void_Send_Comnd(FUN_SET_8BIT_2LINES_5X7);
    16b2:	88 e3       	ldi	r24, 0x38	; 56
    16b4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <LCD_void_Send_Comnd>
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	a0 e2       	ldi	r26, 0x20	; 32
    16be:	b2 e4       	ldi	r27, 0x42	; 66
    16c0:	89 ab       	std	Y+49, r24	; 0x31
    16c2:	9a ab       	std	Y+50, r25	; 0x32
    16c4:	ab ab       	std	Y+51, r26	; 0x33
    16c6:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16c8:	69 a9       	ldd	r22, Y+49	; 0x31
    16ca:	7a a9       	ldd	r23, Y+50	; 0x32
    16cc:	8b a9       	ldd	r24, Y+51	; 0x33
    16ce:	9c a9       	ldd	r25, Y+52	; 0x34
    16d0:	2b ea       	ldi	r18, 0xAB	; 171
    16d2:	3a ea       	ldi	r19, 0xAA	; 170
    16d4:	4a ea       	ldi	r20, 0xAA	; 170
    16d6:	5e e3       	ldi	r21, 0x3E	; 62
    16d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	8d a7       	std	Y+45, r24	; 0x2d
    16e2:	9e a7       	std	Y+46, r25	; 0x2e
    16e4:	af a7       	std	Y+47, r26	; 0x2f
    16e6:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    16e8:	6d a5       	ldd	r22, Y+45	; 0x2d
    16ea:	7e a5       	ldd	r23, Y+46	; 0x2e
    16ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ee:	98 a9       	ldd	r25, Y+48	; 0x30
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e8       	ldi	r20, 0x80	; 128
    16f6:	5f e3       	ldi	r21, 0x3F	; 63
    16f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16fc:	88 23       	and	r24, r24
    16fe:	1c f4       	brge	.+6      	; 0x1706 <LCD_void_INIT+0x15a>
		__ticks = 1;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	8c a7       	std	Y+44, r24	; 0x2c
    1704:	91 c0       	rjmp	.+290    	; 0x1828 <LCD_void_INIT+0x27c>
	else if (__tmp > 255)
    1706:	6d a5       	ldd	r22, Y+45	; 0x2d
    1708:	7e a5       	ldd	r23, Y+46	; 0x2e
    170a:	8f a5       	ldd	r24, Y+47	; 0x2f
    170c:	98 a9       	ldd	r25, Y+48	; 0x30
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	4f e7       	ldi	r20, 0x7F	; 127
    1714:	53 e4       	ldi	r21, 0x43	; 67
    1716:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    171a:	18 16       	cp	r1, r24
    171c:	0c f0       	brlt	.+2      	; 0x1720 <LCD_void_INIT+0x174>
    171e:	7b c0       	rjmp	.+246    	; 0x1816 <LCD_void_INIT+0x26a>
	{
		_delay_ms(__us / 1000.0);
    1720:	69 a9       	ldd	r22, Y+49	; 0x31
    1722:	7a a9       	ldd	r23, Y+50	; 0x32
    1724:	8b a9       	ldd	r24, Y+51	; 0x33
    1726:	9c a9       	ldd	r25, Y+52	; 0x34
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	4a e7       	ldi	r20, 0x7A	; 122
    172e:	54 e4       	ldi	r21, 0x44	; 68
    1730:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	88 a7       	std	Y+40, r24	; 0x28
    173a:	99 a7       	std	Y+41, r25	; 0x29
    173c:	aa a7       	std	Y+42, r26	; 0x2a
    173e:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1740:	68 a5       	ldd	r22, Y+40	; 0x28
    1742:	79 a5       	ldd	r23, Y+41	; 0x29
    1744:	8a a5       	ldd	r24, Y+42	; 0x2a
    1746:	9b a5       	ldd	r25, Y+43	; 0x2b
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	4a e7       	ldi	r20, 0x7A	; 122
    174e:	53 e4       	ldi	r21, 0x43	; 67
    1750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	8c a3       	std	Y+36, r24	; 0x24
    175a:	9d a3       	std	Y+37, r25	; 0x25
    175c:	ae a3       	std	Y+38, r26	; 0x26
    175e:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1760:	6c a1       	ldd	r22, Y+36	; 0x24
    1762:	7d a1       	ldd	r23, Y+37	; 0x25
    1764:	8e a1       	ldd	r24, Y+38	; 0x26
    1766:	9f a1       	ldd	r25, Y+39	; 0x27
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e8       	ldi	r20, 0x80	; 128
    176e:	5f e3       	ldi	r21, 0x3F	; 63
    1770:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1774:	88 23       	and	r24, r24
    1776:	2c f4       	brge	.+10     	; 0x1782 <LCD_void_INIT+0x1d6>
		__ticks = 1;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	9b a3       	std	Y+35, r25	; 0x23
    177e:	8a a3       	std	Y+34, r24	; 0x22
    1780:	3f c0       	rjmp	.+126    	; 0x1800 <LCD_void_INIT+0x254>
	else if (__tmp > 65535)
    1782:	6c a1       	ldd	r22, Y+36	; 0x24
    1784:	7d a1       	ldd	r23, Y+37	; 0x25
    1786:	8e a1       	ldd	r24, Y+38	; 0x26
    1788:	9f a1       	ldd	r25, Y+39	; 0x27
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	3f ef       	ldi	r19, 0xFF	; 255
    178e:	4f e7       	ldi	r20, 0x7F	; 127
    1790:	57 e4       	ldi	r21, 0x47	; 71
    1792:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1796:	18 16       	cp	r1, r24
    1798:	4c f5       	brge	.+82     	; 0x17ec <LCD_void_INIT+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179a:	68 a5       	ldd	r22, Y+40	; 0x28
    179c:	79 a5       	ldd	r23, Y+41	; 0x29
    179e:	8a a5       	ldd	r24, Y+42	; 0x2a
    17a0:	9b a5       	ldd	r25, Y+43	; 0x2b
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e2       	ldi	r20, 0x20	; 32
    17a8:	51 e4       	ldi	r21, 0x41	; 65
    17aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	bc 01       	movw	r22, r24
    17b4:	cd 01       	movw	r24, r26
    17b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	9b a3       	std	Y+35, r25	; 0x23
    17c0:	8a a3       	std	Y+34, r24	; 0x22
    17c2:	0f c0       	rjmp	.+30     	; 0x17e2 <LCD_void_INIT+0x236>
    17c4:	89 e1       	ldi	r24, 0x19	; 25
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	99 a3       	std	Y+33, r25	; 0x21
    17ca:	88 a3       	std	Y+32, r24	; 0x20
    17cc:	88 a1       	ldd	r24, Y+32	; 0x20
    17ce:	99 a1       	ldd	r25, Y+33	; 0x21
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <LCD_void_INIT+0x224>
    17d4:	99 a3       	std	Y+33, r25	; 0x21
    17d6:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d8:	8a a1       	ldd	r24, Y+34	; 0x22
    17da:	9b a1       	ldd	r25, Y+35	; 0x23
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	9b a3       	std	Y+35, r25	; 0x23
    17e0:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e2:	8a a1       	ldd	r24, Y+34	; 0x22
    17e4:	9b a1       	ldd	r25, Y+35	; 0x23
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	69 f7       	brne	.-38     	; 0x17c4 <LCD_void_INIT+0x218>
    17ea:	24 c0       	rjmp	.+72     	; 0x1834 <LCD_void_INIT+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ec:	6c a1       	ldd	r22, Y+36	; 0x24
    17ee:	7d a1       	ldd	r23, Y+37	; 0x25
    17f0:	8e a1       	ldd	r24, Y+38	; 0x26
    17f2:	9f a1       	ldd	r25, Y+39	; 0x27
    17f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	9b a3       	std	Y+35, r25	; 0x23
    17fe:	8a a3       	std	Y+34, r24	; 0x22
    1800:	8a a1       	ldd	r24, Y+34	; 0x22
    1802:	9b a1       	ldd	r25, Y+35	; 0x23
    1804:	9f 8f       	std	Y+31, r25	; 0x1f
    1806:	8e 8f       	std	Y+30, r24	; 0x1e
    1808:	8e 8d       	ldd	r24, Y+30	; 0x1e
    180a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <LCD_void_INIT+0x260>
    1810:	9f 8f       	std	Y+31, r25	; 0x1f
    1812:	8e 8f       	std	Y+30, r24	; 0x1e
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <LCD_void_INIT+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1816:	6d a5       	ldd	r22, Y+45	; 0x2d
    1818:	7e a5       	ldd	r23, Y+46	; 0x2e
    181a:	8f a5       	ldd	r24, Y+47	; 0x2f
    181c:	98 a9       	ldd	r25, Y+48	; 0x30
    181e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	8c a7       	std	Y+44, r24	; 0x2c
    1828:	8c a5       	ldd	r24, Y+44	; 0x2c
    182a:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    182c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    182e:	8a 95       	dec	r24
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_void_INIT+0x282>
    1832:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(40);
	LCD_void_Send_Comnd(DIS_ON_CURSOR_ON_BLINKING);
    1834:	8f e0       	ldi	r24, 0x0F	; 15
    1836:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <LCD_void_Send_Comnd>
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	a0 e2       	ldi	r26, 0x20	; 32
    1840:	b2 e4       	ldi	r27, 0x42	; 66
    1842:	89 8f       	std	Y+25, r24	; 0x19
    1844:	9a 8f       	std	Y+26, r25	; 0x1a
    1846:	ab 8f       	std	Y+27, r26	; 0x1b
    1848:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184a:	69 8d       	ldd	r22, Y+25	; 0x19
    184c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    184e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	4a e7       	ldi	r20, 0x7A	; 122
    1858:	53 e4       	ldi	r21, 0x43	; 67
    185a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	8d 8b       	std	Y+21, r24	; 0x15
    1864:	9e 8b       	std	Y+22, r25	; 0x16
    1866:	af 8b       	std	Y+23, r26	; 0x17
    1868:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    186a:	6d 89       	ldd	r22, Y+21	; 0x15
    186c:	7e 89       	ldd	r23, Y+22	; 0x16
    186e:	8f 89       	ldd	r24, Y+23	; 0x17
    1870:	98 8d       	ldd	r25, Y+24	; 0x18
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e8       	ldi	r20, 0x80	; 128
    1878:	5f e3       	ldi	r21, 0x3F	; 63
    187a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    187e:	88 23       	and	r24, r24
    1880:	2c f4       	brge	.+10     	; 0x188c <LCD_void_INIT+0x2e0>
		__ticks = 1;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	9c 8b       	std	Y+20, r25	; 0x14
    1888:	8b 8b       	std	Y+19, r24	; 0x13
    188a:	3f c0       	rjmp	.+126    	; 0x190a <LCD_void_INIT+0x35e>
	else if (__tmp > 65535)
    188c:	6d 89       	ldd	r22, Y+21	; 0x15
    188e:	7e 89       	ldd	r23, Y+22	; 0x16
    1890:	8f 89       	ldd	r24, Y+23	; 0x17
    1892:	98 8d       	ldd	r25, Y+24	; 0x18
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	4f e7       	ldi	r20, 0x7F	; 127
    189a:	57 e4       	ldi	r21, 0x47	; 71
    189c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18a0:	18 16       	cp	r1, r24
    18a2:	4c f5       	brge	.+82     	; 0x18f6 <LCD_void_INIT+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a4:	69 8d       	ldd	r22, Y+25	; 0x19
    18a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e2       	ldi	r20, 0x20	; 32
    18b2:	51 e4       	ldi	r21, 0x41	; 65
    18b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	bc 01       	movw	r22, r24
    18be:	cd 01       	movw	r24, r26
    18c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	9c 8b       	std	Y+20, r25	; 0x14
    18ca:	8b 8b       	std	Y+19, r24	; 0x13
    18cc:	0f c0       	rjmp	.+30     	; 0x18ec <LCD_void_INIT+0x340>
    18ce:	89 e1       	ldi	r24, 0x19	; 25
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9a 8b       	std	Y+18, r25	; 0x12
    18d4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18d6:	89 89       	ldd	r24, Y+17	; 0x11
    18d8:	9a 89       	ldd	r25, Y+18	; 0x12
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <LCD_void_INIT+0x32e>
    18de:	9a 8b       	std	Y+18, r25	; 0x12
    18e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e2:	8b 89       	ldd	r24, Y+19	; 0x13
    18e4:	9c 89       	ldd	r25, Y+20	; 0x14
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	9c 8b       	std	Y+20, r25	; 0x14
    18ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ec:	8b 89       	ldd	r24, Y+19	; 0x13
    18ee:	9c 89       	ldd	r25, Y+20	; 0x14
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	69 f7       	brne	.-38     	; 0x18ce <LCD_void_INIT+0x322>
    18f4:	14 c0       	rjmp	.+40     	; 0x191e <LCD_void_INIT+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f6:	6d 89       	ldd	r22, Y+21	; 0x15
    18f8:	7e 89       	ldd	r23, Y+22	; 0x16
    18fa:	8f 89       	ldd	r24, Y+23	; 0x17
    18fc:	98 8d       	ldd	r25, Y+24	; 0x18
    18fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	9c 8b       	std	Y+20, r25	; 0x14
    1908:	8b 8b       	std	Y+19, r24	; 0x13
    190a:	8b 89       	ldd	r24, Y+19	; 0x13
    190c:	9c 89       	ldd	r25, Y+20	; 0x14
    190e:	98 8b       	std	Y+16, r25	; 0x10
    1910:	8f 87       	std	Y+15, r24	; 0x0f
    1912:	8f 85       	ldd	r24, Y+15	; 0x0f
    1914:	98 89       	ldd	r25, Y+16	; 0x10
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <LCD_void_INIT+0x36a>
    191a:	98 8b       	std	Y+16, r25	; 0x10
    191c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	LCD_void_Send_Comnd(DISPLAY_CLEAR);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <LCD_void_Send_Comnd>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a0 e8       	ldi	r26, 0x80	; 128
    192a:	bf e3       	ldi	r27, 0x3F	; 63
    192c:	8b 87       	std	Y+11, r24	; 0x0b
    192e:	9c 87       	std	Y+12, r25	; 0x0c
    1930:	ad 87       	std	Y+13, r26	; 0x0d
    1932:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1934:	6b 85       	ldd	r22, Y+11	; 0x0b
    1936:	7c 85       	ldd	r23, Y+12	; 0x0c
    1938:	8d 85       	ldd	r24, Y+13	; 0x0d
    193a:	9e 85       	ldd	r25, Y+14	; 0x0e
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4a e7       	ldi	r20, 0x7A	; 122
    1942:	53 e4       	ldi	r21, 0x43	; 67
    1944:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	8f 83       	std	Y+7, r24	; 0x07
    194e:	98 87       	std	Y+8, r25	; 0x08
    1950:	a9 87       	std	Y+9, r26	; 0x09
    1952:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1954:	6f 81       	ldd	r22, Y+7	; 0x07
    1956:	78 85       	ldd	r23, Y+8	; 0x08
    1958:	89 85       	ldd	r24, Y+9	; 0x09
    195a:	9a 85       	ldd	r25, Y+10	; 0x0a
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e8       	ldi	r20, 0x80	; 128
    1962:	5f e3       	ldi	r21, 0x3F	; 63
    1964:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1968:	88 23       	and	r24, r24
    196a:	2c f4       	brge	.+10     	; 0x1976 <LCD_void_INIT+0x3ca>
		__ticks = 1;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
    1974:	3f c0       	rjmp	.+126    	; 0x19f4 <LCD_void_INIT+0x448>
	else if (__tmp > 65535)
    1976:	6f 81       	ldd	r22, Y+7	; 0x07
    1978:	78 85       	ldd	r23, Y+8	; 0x08
    197a:	89 85       	ldd	r24, Y+9	; 0x09
    197c:	9a 85       	ldd	r25, Y+10	; 0x0a
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	3f ef       	ldi	r19, 0xFF	; 255
    1982:	4f e7       	ldi	r20, 0x7F	; 127
    1984:	57 e4       	ldi	r21, 0x47	; 71
    1986:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    198a:	18 16       	cp	r1, r24
    198c:	4c f5       	brge	.+82     	; 0x19e0 <LCD_void_INIT+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1990:	7c 85       	ldd	r23, Y+12	; 0x0c
    1992:	8d 85       	ldd	r24, Y+13	; 0x0d
    1994:	9e 85       	ldd	r25, Y+14	; 0x0e
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e2       	ldi	r20, 0x20	; 32
    199c:	51 e4       	ldi	r21, 0x41	; 65
    199e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	0f c0       	rjmp	.+30     	; 0x19d6 <LCD_void_INIT+0x42a>
    19b8:	89 e1       	ldi	r24, 0x19	; 25
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9c 83       	std	Y+4, r25	; 0x04
    19be:	8b 83       	std	Y+3, r24	; 0x03
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	9c 81       	ldd	r25, Y+4	; 0x04
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <LCD_void_INIT+0x418>
    19c8:	9c 83       	std	Y+4, r25	; 0x04
    19ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	69 f7       	brne	.-38     	; 0x19b8 <LCD_void_INIT+0x40c>
    19de:	14 c0       	rjmp	.+40     	; 0x1a08 <LCD_void_INIT+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e0:	6f 81       	ldd	r22, Y+7	; 0x07
    19e2:	78 85       	ldd	r23, Y+8	; 0x08
    19e4:	89 85       	ldd	r24, Y+9	; 0x09
    19e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9e 83       	std	Y+6, r25	; 0x06
    19f2:	8d 83       	std	Y+5, r24	; 0x05
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	9a 83       	std	Y+2, r25	; 0x02
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <LCD_void_INIT+0x454>
    1a04:	9a 83       	std	Y+2, r25	; 0x02
    1a06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_void_Send_Comnd(ENTRY_MOOD);
    1a08:	86 e0       	ldi	r24, 0x06	; 6
    1a0a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <LCD_void_Send_Comnd>

}
    1a0e:	ce 5b       	subi	r28, 0xBE	; 190
    1a10:	df 4f       	sbci	r29, 0xFF	; 255
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <LCD_void_Send_Comnd>:
//to send a command
void LCD_void_Send_Comnd(u8 Copy_u8_Comnd){
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	69 97       	sbiw	r28, 0x19	; 25
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	89 8f       	std	Y+25, r24	; 0x19
//RS =0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_LOW );
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8_Set_Pin_Value>
//RW = 0

 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	61 e0       	ldi	r22, 0x01	; 1
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8_Set_Pin_Value>

//Write Command
 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_Comnd);
    1a4c:	83 e0       	ldi	r24, 0x03	; 3
    1a4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a50:	0e 94 36 0a 	call	0x146c	; 0x146c <DIO_u8_Set_Port_Value>

//E = 1
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	62 e0       	ldi	r22, 0x02	; 2
    1a58:	41 e0       	ldi	r20, 0x01	; 1
    1a5a:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8_Set_Pin_Value>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a0 e8       	ldi	r26, 0x80	; 128
    1a64:	bf e3       	ldi	r27, 0x3F	; 63
    1a66:	8d 8b       	std	Y+21, r24	; 0x15
    1a68:	9e 8b       	std	Y+22, r25	; 0x16
    1a6a:	af 8b       	std	Y+23, r26	; 0x17
    1a6c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a70:	7e 89       	ldd	r23, Y+22	; 0x16
    1a72:	8f 89       	ldd	r24, Y+23	; 0x17
    1a74:	98 8d       	ldd	r25, Y+24	; 0x18
    1a76:	2b ea       	ldi	r18, 0xAB	; 171
    1a78:	3a ea       	ldi	r19, 0xAA	; 170
    1a7a:	4a ea       	ldi	r20, 0xAA	; 170
    1a7c:	5e e3       	ldi	r21, 0x3E	; 62
    1a7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	89 8b       	std	Y+17, r24	; 0x11
    1a88:	9a 8b       	std	Y+18, r25	; 0x12
    1a8a:	ab 8b       	std	Y+19, r26	; 0x13
    1a8c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a8e:	69 89       	ldd	r22, Y+17	; 0x11
    1a90:	7a 89       	ldd	r23, Y+18	; 0x12
    1a92:	8b 89       	ldd	r24, Y+19	; 0x13
    1a94:	9c 89       	ldd	r25, Y+20	; 0x14
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e8       	ldi	r20, 0x80	; 128
    1a9c:	5f e3       	ldi	r21, 0x3F	; 63
    1a9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	1c f4       	brge	.+6      	; 0x1aac <LCD_void_Send_Comnd+0x8a>
		__ticks = 1;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	88 8b       	std	Y+16, r24	; 0x10
    1aaa:	91 c0       	rjmp	.+290    	; 0x1bce <LCD_void_Send_Comnd+0x1ac>
	else if (__tmp > 255)
    1aac:	69 89       	ldd	r22, Y+17	; 0x11
    1aae:	7a 89       	ldd	r23, Y+18	; 0x12
    1ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	4f e7       	ldi	r20, 0x7F	; 127
    1aba:	53 e4       	ldi	r21, 0x43	; 67
    1abc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ac0:	18 16       	cp	r1, r24
    1ac2:	0c f0       	brlt	.+2      	; 0x1ac6 <LCD_void_Send_Comnd+0xa4>
    1ac4:	7b c0       	rjmp	.+246    	; 0x1bbc <LCD_void_Send_Comnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aca:	8f 89       	ldd	r24, Y+23	; 0x17
    1acc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	4a e7       	ldi	r20, 0x7A	; 122
    1ad4:	54 e4       	ldi	r21, 0x44	; 68
    1ad6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	8c 87       	std	Y+12, r24	; 0x0c
    1ae0:	9d 87       	std	Y+13, r25	; 0x0d
    1ae2:	ae 87       	std	Y+14, r26	; 0x0e
    1ae4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ae8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1aea:	8e 85       	ldd	r24, Y+14	; 0x0e
    1aec:	9f 85       	ldd	r25, Y+15	; 0x0f
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	4a e7       	ldi	r20, 0x7A	; 122
    1af4:	53 e4       	ldi	r21, 0x43	; 67
    1af6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	88 87       	std	Y+8, r24	; 0x08
    1b00:	99 87       	std	Y+9, r25	; 0x09
    1b02:	aa 87       	std	Y+10, r26	; 0x0a
    1b04:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b06:	68 85       	ldd	r22, Y+8	; 0x08
    1b08:	79 85       	ldd	r23, Y+9	; 0x09
    1b0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e8       	ldi	r20, 0x80	; 128
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b1a:	88 23       	and	r24, r24
    1b1c:	2c f4       	brge	.+10     	; 0x1b28 <LCD_void_Send_Comnd+0x106>
		__ticks = 1;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9f 83       	std	Y+7, r25	; 0x07
    1b24:	8e 83       	std	Y+6, r24	; 0x06
    1b26:	3f c0       	rjmp	.+126    	; 0x1ba6 <LCD_void_Send_Comnd+0x184>
	else if (__tmp > 65535)
    1b28:	68 85       	ldd	r22, Y+8	; 0x08
    1b2a:	79 85       	ldd	r23, Y+9	; 0x09
    1b2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	3f ef       	ldi	r19, 0xFF	; 255
    1b34:	4f e7       	ldi	r20, 0x7F	; 127
    1b36:	57 e4       	ldi	r21, 0x47	; 71
    1b38:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b3c:	18 16       	cp	r1, r24
    1b3e:	4c f5       	brge	.+82     	; 0x1b92 <LCD_void_Send_Comnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b40:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b42:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b44:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b46:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e2       	ldi	r20, 0x20	; 32
    1b4e:	51 e4       	ldi	r21, 0x41	; 65
    1b50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9f 83       	std	Y+7, r25	; 0x07
    1b66:	8e 83       	std	Y+6, r24	; 0x06
    1b68:	0f c0       	rjmp	.+30     	; 0x1b88 <LCD_void_Send_Comnd+0x166>
    1b6a:	89 e1       	ldi	r24, 0x19	; 25
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9d 83       	std	Y+5, r25	; 0x05
    1b70:	8c 83       	std	Y+4, r24	; 0x04
    1b72:	8c 81       	ldd	r24, Y+4	; 0x04
    1b74:	9d 81       	ldd	r25, Y+5	; 0x05
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <LCD_void_Send_Comnd+0x154>
    1b7a:	9d 83       	std	Y+5, r25	; 0x05
    1b7c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b80:	9f 81       	ldd	r25, Y+7	; 0x07
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	9f 83       	std	Y+7, r25	; 0x07
    1b86:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b88:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	69 f7       	brne	.-38     	; 0x1b6a <LCD_void_Send_Comnd+0x148>
    1b90:	24 c0       	rjmp	.+72     	; 0x1bda <LCD_void_Send_Comnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b92:	68 85       	ldd	r22, Y+8	; 0x08
    1b94:	79 85       	ldd	r23, Y+9	; 0x09
    1b96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	9f 83       	std	Y+7, r25	; 0x07
    1ba4:	8e 83       	std	Y+6, r24	; 0x06
    1ba6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba8:	9f 81       	ldd	r25, Y+7	; 0x07
    1baa:	9b 83       	std	Y+3, r25	; 0x03
    1bac:	8a 83       	std	Y+2, r24	; 0x02
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <LCD_void_Send_Comnd+0x190>
    1bb6:	9b 83       	std	Y+3, r25	; 0x03
    1bb8:	8a 83       	std	Y+2, r24	; 0x02
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <LCD_void_Send_Comnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bbc:	69 89       	ldd	r22, Y+17	; 0x11
    1bbe:	7a 89       	ldd	r23, Y+18	; 0x12
    1bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	88 8b       	std	Y+16, r24	; 0x10
    1bce:	88 89       	ldd	r24, Y+16	; 0x10
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	8a 95       	dec	r24
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_void_Send_Comnd+0x1b2>
    1bd8:	89 83       	std	Y+1, r24	; 0x01
_delay_us(1);

//E = 0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	62 e0       	ldi	r22, 0x02	; 2
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8_Set_Pin_Value>

}
    1be4:	69 96       	adiw	r28, 0x19	; 25
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <LCD_void_Send_char>:
//to send a character
void LCD_void_Send_char(u8 Copy_u8_char){
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	69 97       	sbiw	r28, 0x19	; 25
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	89 8f       	std	Y+25, r24	; 0x19
	//RS =0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_HIGH );
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8_Set_Pin_Value>
	//RW = 0

	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	61 e0       	ldi	r22, 0x01	; 1
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8_Set_Pin_Value>

	//Write char
	 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_char);
    1c20:	83 e0       	ldi	r24, 0x03	; 3
    1c22:	69 8d       	ldd	r22, Y+25	; 0x19
    1c24:	0e 94 36 0a 	call	0x146c	; 0x146c <DIO_u8_Set_Port_Value>

	//E = 1
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	62 e0       	ldi	r22, 0x02	; 2
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8_Set_Pin_Value>
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a0 e8       	ldi	r26, 0x80	; 128
    1c38:	bf e3       	ldi	r27, 0x3F	; 63
    1c3a:	8d 8b       	std	Y+21, r24	; 0x15
    1c3c:	9e 8b       	std	Y+22, r25	; 0x16
    1c3e:	af 8b       	std	Y+23, r26	; 0x17
    1c40:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c42:	6d 89       	ldd	r22, Y+21	; 0x15
    1c44:	7e 89       	ldd	r23, Y+22	; 0x16
    1c46:	8f 89       	ldd	r24, Y+23	; 0x17
    1c48:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4a:	2b ea       	ldi	r18, 0xAB	; 171
    1c4c:	3a ea       	ldi	r19, 0xAA	; 170
    1c4e:	4a ea       	ldi	r20, 0xAA	; 170
    1c50:	5e e3       	ldi	r21, 0x3E	; 62
    1c52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	89 8b       	std	Y+17, r24	; 0x11
    1c5c:	9a 8b       	std	Y+18, r25	; 0x12
    1c5e:	ab 8b       	std	Y+19, r26	; 0x13
    1c60:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c62:	69 89       	ldd	r22, Y+17	; 0x11
    1c64:	7a 89       	ldd	r23, Y+18	; 0x12
    1c66:	8b 89       	ldd	r24, Y+19	; 0x13
    1c68:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e8       	ldi	r20, 0x80	; 128
    1c70:	5f e3       	ldi	r21, 0x3F	; 63
    1c72:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c76:	88 23       	and	r24, r24
    1c78:	1c f4       	brge	.+6      	; 0x1c80 <LCD_void_Send_char+0x8a>
		__ticks = 1;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	88 8b       	std	Y+16, r24	; 0x10
    1c7e:	91 c0       	rjmp	.+290    	; 0x1da2 <LCD_void_Send_char+0x1ac>
	else if (__tmp > 255)
    1c80:	69 89       	ldd	r22, Y+17	; 0x11
    1c82:	7a 89       	ldd	r23, Y+18	; 0x12
    1c84:	8b 89       	ldd	r24, Y+19	; 0x13
    1c86:	9c 89       	ldd	r25, Y+20	; 0x14
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	4f e7       	ldi	r20, 0x7F	; 127
    1c8e:	53 e4       	ldi	r21, 0x43	; 67
    1c90:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c94:	18 16       	cp	r1, r24
    1c96:	0c f0       	brlt	.+2      	; 0x1c9a <LCD_void_Send_char+0xa4>
    1c98:	7b c0       	rjmp	.+246    	; 0x1d90 <LCD_void_Send_char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1c9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	4a e7       	ldi	r20, 0x7A	; 122
    1ca8:	54 e4       	ldi	r21, 0x44	; 68
    1caa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8c 87       	std	Y+12, r24	; 0x0c
    1cb4:	9d 87       	std	Y+13, r25	; 0x0d
    1cb6:	ae 87       	std	Y+14, r26	; 0x0e
    1cb8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cba:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cbc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a e7       	ldi	r20, 0x7A	; 122
    1cc8:	53 e4       	ldi	r21, 0x43	; 67
    1cca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	88 87       	std	Y+8, r24	; 0x08
    1cd4:	99 87       	std	Y+9, r25	; 0x09
    1cd6:	aa 87       	std	Y+10, r26	; 0x0a
    1cd8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1cda:	68 85       	ldd	r22, Y+8	; 0x08
    1cdc:	79 85       	ldd	r23, Y+9	; 0x09
    1cde:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ce0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <LCD_void_Send_char+0x106>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9f 83       	std	Y+7, r25	; 0x07
    1cf8:	8e 83       	std	Y+6, r24	; 0x06
    1cfa:	3f c0       	rjmp	.+126    	; 0x1d7a <LCD_void_Send_char+0x184>
	else if (__tmp > 65535)
    1cfc:	68 85       	ldd	r22, Y+8	; 0x08
    1cfe:	79 85       	ldd	r23, Y+9	; 0x09
    1d00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d02:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	3f ef       	ldi	r19, 0xFF	; 255
    1d08:	4f e7       	ldi	r20, 0x7F	; 127
    1d0a:	57 e4       	ldi	r21, 0x47	; 71
    1d0c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d10:	18 16       	cp	r1, r24
    1d12:	4c f5       	brge	.+82     	; 0x1d66 <LCD_void_Send_char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d14:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d16:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d18:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e2       	ldi	r20, 0x20	; 32
    1d22:	51 e4       	ldi	r21, 0x41	; 65
    1d24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9f 83       	std	Y+7, r25	; 0x07
    1d3a:	8e 83       	std	Y+6, r24	; 0x06
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <LCD_void_Send_char+0x166>
    1d3e:	89 e1       	ldi	r24, 0x19	; 25
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9d 83       	std	Y+5, r25	; 0x05
    1d44:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d46:	8c 81       	ldd	r24, Y+4	; 0x04
    1d48:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <LCD_void_Send_char+0x154>
    1d4e:	9d 83       	std	Y+5, r25	; 0x05
    1d50:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d52:	8e 81       	ldd	r24, Y+6	; 0x06
    1d54:	9f 81       	ldd	r25, Y+7	; 0x07
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	9f 83       	std	Y+7, r25	; 0x07
    1d5a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	69 f7       	brne	.-38     	; 0x1d3e <LCD_void_Send_char+0x148>
    1d64:	24 c0       	rjmp	.+72     	; 0x1dae <LCD_void_Send_char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	68 85       	ldd	r22, Y+8	; 0x08
    1d68:	79 85       	ldd	r23, Y+9	; 0x09
    1d6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9f 83       	std	Y+7, r25	; 0x07
    1d78:	8e 83       	std	Y+6, r24	; 0x06
    1d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d7e:	9b 83       	std	Y+3, r25	; 0x03
    1d80:	8a 83       	std	Y+2, r24	; 0x02
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	9b 81       	ldd	r25, Y+3	; 0x03
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <LCD_void_Send_char+0x190>
    1d8a:	9b 83       	std	Y+3, r25	; 0x03
    1d8c:	8a 83       	std	Y+2, r24	; 0x02
    1d8e:	0f c0       	rjmp	.+30     	; 0x1dae <LCD_void_Send_char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d90:	69 89       	ldd	r22, Y+17	; 0x11
    1d92:	7a 89       	ldd	r23, Y+18	; 0x12
    1d94:	8b 89       	ldd	r24, Y+19	; 0x13
    1d96:	9c 89       	ldd	r25, Y+20	; 0x14
    1d98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	88 8b       	std	Y+16, r24	; 0x10
    1da2:	88 89       	ldd	r24, Y+16	; 0x10
    1da4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	8a 95       	dec	r24
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <LCD_void_Send_char+0x1b2>
    1dac:	89 83       	std	Y+1, r24	; 0x01
	 _delay_us(1);

	//E = 0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	62 e0       	ldi	r22, 0x02	; 2
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8_Set_Pin_Value>

}
    1db8:	69 96       	adiw	r28, 0x19	; 25
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	cf 91       	pop	r28
    1dc6:	df 91       	pop	r29
    1dc8:	08 95       	ret

00001dca <LCD_u8_GO_TO_XY>:
//function to set a location
u8 LCD_u8_GO_TO_XY (u8 Copy_u8_line_Num , u8 Copy_u8_Location ){
    1dca:	df 93       	push	r29
    1dcc:	cf 93       	push	r28
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <LCD_u8_GO_TO_XY+0x6>
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <LCD_u8_GO_TO_XY+0x8>
    1dd2:	0f 92       	push	r0
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	8a 83       	std	Y+2, r24	; 0x02
    1dda:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8_Location <= 39 ){
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	88 32       	cpi	r24, 0x28	; 40
    1de4:	e0 f4       	brcc	.+56     	; 0x1e1e <LCD_u8_GO_TO_XY+0x54>
		switch (Copy_u8_line_Num)
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	3d 83       	std	Y+5, r19	; 0x05
    1dee:	2c 83       	std	Y+4, r18	; 0x04
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	9d 81       	ldd	r25, Y+5	; 0x05
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	91 05       	cpc	r25, r1
    1df8:	31 f0       	breq	.+12     	; 0x1e06 <LCD_u8_GO_TO_XY+0x3c>
    1dfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfe:	22 30       	cpi	r18, 0x02	; 2
    1e00:	31 05       	cpc	r19, r1
    1e02:	31 f0       	breq	.+12     	; 0x1e10 <LCD_u8_GO_TO_XY+0x46>
    1e04:	0a c0       	rjmp	.+20     	; 0x1e1a <LCD_u8_GO_TO_XY+0x50>
		{
		case LCD_u8_LINE1 : LCD_void_Send_Comnd(ADDRESS_OF_LINE1+Copy_u8_Location);break;
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	80 58       	subi	r24, 0x80	; 128
    1e0a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <LCD_void_Send_Comnd>
    1e0e:	08 c0       	rjmp	.+16     	; 0x1e20 <LCD_u8_GO_TO_XY+0x56>
		case LCD_u8_LINE2 : LCD_void_Send_Comnd(ADDRESS_OF_LINE2+Copy_u8_Location);break;
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	80 54       	subi	r24, 0x40	; 64
    1e14:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <LCD_void_Send_Comnd>
    1e18:	03 c0       	rjmp	.+6      	; 0x1e20 <LCD_u8_GO_TO_XY+0x56>
        default   :  Local_u8_Erorr_State = ES_NOK;
    1e1a:	19 82       	std	Y+1, r1	; 0x01
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <LCD_u8_GO_TO_XY+0x56>

		}
	}
		else {
			Local_u8_Erorr_State = ES_NOK;
    1e1e:	19 82       	std	Y+1, r1	; 0x01


	}
return Local_u8_Erorr_State;
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <delay>:
#include "../libraries/types.h"
//#include "../libraries/math.h"

//#include<util/delay.h>
void delay(void)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <delay+0x6>
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <delay+0x8>
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
	for(int x=0;x<500;x++)
    1e3e:	1c 82       	std	Y+4, r1	; 0x04
    1e40:	1b 82       	std	Y+3, r1	; 0x03
    1e42:	14 c0       	rjmp	.+40     	; 0x1e6c <delay+0x3a>
		for(int y=0;y<500;y++)
    1e44:	1a 82       	std	Y+2, r1	; 0x02
    1e46:	19 82       	std	Y+1, r1	; 0x01
    1e48:	06 c0       	rjmp	.+12     	; 0x1e56 <delay+0x24>
			__asm("NOP");
    1e4a:	00 00       	nop

//#include<util/delay.h>
void delay(void)
{
	for(int x=0;x<500;x++)
		for(int y=0;y<500;y++)
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	21 e0       	ldi	r18, 0x01	; 1
    1e5c:	84 3f       	cpi	r24, 0xF4	; 244
    1e5e:	92 07       	cpc	r25, r18
    1e60:	a4 f3       	brlt	.-24     	; 0x1e4a <delay+0x18>
//#include "../libraries/math.h"

//#include<util/delay.h>
void delay(void)
{
	for(int x=0;x<500;x++)
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	9c 83       	std	Y+4, r25	; 0x04
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e70:	21 e0       	ldi	r18, 0x01	; 1
    1e72:	84 3f       	cpi	r24, 0xF4	; 244
    1e74:	92 07       	cpc	r25, r18
    1e76:	34 f3       	brlt	.-52     	; 0x1e44 <delay+0x12>
		for(int y=0;y<500;y++)
			__asm("NOP");
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <main>:

int main(void){
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
//	while(1){
	DIO_voidInit();
    1e8e:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidInit>
	LCD_void_INIT();
    1e92:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCD_void_INIT>

	LCD_u8_GO_TO_XY(LCD_u8_LINE2,4);
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	64 e0       	ldi	r22, 0x04	; 4
    1e9a:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <LCD_u8_GO_TO_XY>

	LCD_void_Send_char('E');
    1e9e:	85 e4       	ldi	r24, 0x45	; 69
    1ea0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_void_Send_char>
	LCD_void_Send_char('M');
    1ea4:	8d e4       	ldi	r24, 0x4D	; 77
    1ea6:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_void_Send_char>
	LCD_void_Send_char('A');
    1eaa:	81 e4       	ldi	r24, 0x41	; 65
    1eac:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_void_Send_char>
	LCD_void_Send_char('N');
    1eb0:	8e e4       	ldi	r24, 0x4E	; 78
    1eb2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_void_Send_char>
		delay();
    1eb6:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <delay>
    1eba:	ff cf       	rjmp	.-2      	; 0x1eba <main+0x34>

00001ebc <__prologue_saves__>:
    1ebc:	2f 92       	push	r2
    1ebe:	3f 92       	push	r3
    1ec0:	4f 92       	push	r4
    1ec2:	5f 92       	push	r5
    1ec4:	6f 92       	push	r6
    1ec6:	7f 92       	push	r7
    1ec8:	8f 92       	push	r8
    1eca:	9f 92       	push	r9
    1ecc:	af 92       	push	r10
    1ece:	bf 92       	push	r11
    1ed0:	cf 92       	push	r12
    1ed2:	df 92       	push	r13
    1ed4:	ef 92       	push	r14
    1ed6:	ff 92       	push	r15
    1ed8:	0f 93       	push	r16
    1eda:	1f 93       	push	r17
    1edc:	cf 93       	push	r28
    1ede:	df 93       	push	r29
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	ca 1b       	sub	r28, r26
    1ee6:	db 0b       	sbc	r29, r27
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	09 94       	ijmp

00001ef4 <__epilogue_restores__>:
    1ef4:	2a 88       	ldd	r2, Y+18	; 0x12
    1ef6:	39 88       	ldd	r3, Y+17	; 0x11
    1ef8:	48 88       	ldd	r4, Y+16	; 0x10
    1efa:	5f 84       	ldd	r5, Y+15	; 0x0f
    1efc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1efe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f00:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f02:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f04:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f06:	b9 84       	ldd	r11, Y+9	; 0x09
    1f08:	c8 84       	ldd	r12, Y+8	; 0x08
    1f0a:	df 80       	ldd	r13, Y+7	; 0x07
    1f0c:	ee 80       	ldd	r14, Y+6	; 0x06
    1f0e:	fd 80       	ldd	r15, Y+5	; 0x05
    1f10:	0c 81       	ldd	r16, Y+4	; 0x04
    1f12:	1b 81       	ldd	r17, Y+3	; 0x03
    1f14:	aa 81       	ldd	r26, Y+2	; 0x02
    1f16:	b9 81       	ldd	r27, Y+1	; 0x01
    1f18:	ce 0f       	add	r28, r30
    1f1a:	d1 1d       	adc	r29, r1
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	ed 01       	movw	r28, r26
    1f28:	08 95       	ret

00001f2a <_exit>:
    1f2a:	f8 94       	cli

00001f2c <__stop_program>:
    1f2c:	ff cf       	rjmp	.-2      	; 0x1f2c <__stop_program>

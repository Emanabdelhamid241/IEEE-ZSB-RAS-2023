
TIMER1_SERVO1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000295c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000295c  000029f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800068  00800068  000029f8  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  000029f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000137e  00000000  00000000  000051b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006536  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006696  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006825  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000886a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000996b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a8f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000aa70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ad32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__vector_10>
      2c:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 37       	cpi	r26, 0x73	; 115
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e5       	ldi	r30, 0x5C	; 92
      78:	f9 e2       	ldi	r31, 0x29	; 41
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 d6 13 	call	0x27ac	; 0x27ac <main>
      8a:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 85 14 	jmp	0x290a	; 0x290a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIMERS_enum_TIMER0_INIT>:

/*Global pointer to function to TIMER0 OVF*/
static void (*TIMERS_pf_TIMER0_OVF)(void) = NULL;
/*Global pointer to function to TIMER0 CTC MODE*/
static void (*TIMERS_pf_TIMER0_CTC)(void) = NULL;
ES_t TIMERS_enum_TIMER0_INIT(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enu_Erorr_State = ES_OK ;
     ca8:	19 82       	std	Y+1, r1	; 0x01
		SET_BIT(TIMERS_u8_TCCR0_REG,timers_COM01_BIT5);
		CLR_BIT(TIMERS_u8_TCCR0_REG,timers_COM00_BIT4);

#elif TIMER_MODE == PHASE_CORRECT_PWM_MODE
	/*Select FAST PWM mode*/
		 CLR_BIT(TIMERS_u8_TCCR0_REG,timers_WGM01_BIT3);
     caa:	a3 e5       	ldi	r26, 0x53	; 83
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e3 e5       	ldi	r30, 0x53	; 83
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	87 7f       	andi	r24, 0xF7	; 247
     cb6:	8c 93       	st	X, r24
		 SET_BIT(TIMERS_u8_TCCR0_REG,timers_WGM00_BIT6);
     cb8:	a3 e5       	ldi	r26, 0x53	; 83
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e3 e5       	ldi	r30, 0x53	; 83
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	80 64       	ori	r24, 0x40	; 64
     cc4:	8c 93       	st	X, r24

		 /*Select HW Action on oc0 pin to non interting*/
		SET_BIT(TIMERS_u8_TCCR0_REG,timers_COM01_BIT5);
     cc6:	a3 e5       	ldi	r26, 0x53	; 83
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e3 e5       	ldi	r30, 0x53	; 83
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	80 62       	ori	r24, 0x20	; 32
     cd2:	8c 93       	st	X, r24
		CLR_BIT(TIMERS_u8_TCCR0_REG,timers_COM00_BIT4);
     cd4:	a3 e5       	ldi	r26, 0x53	; 83
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e3 e5       	ldi	r30, 0x53	; 83
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8f 7e       	andi	r24, 0xEF	; 239
     ce0:	8c 93       	st	X, r24


#endif
/*set prescaler value CLK/8 */
CLR_BIT(TIMERS_u8_TCCR0_REG,timers_CS00_BIT0);
     ce2:	a3 e5       	ldi	r26, 0x53	; 83
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e3 e5       	ldi	r30, 0x53	; 83
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8e 7f       	andi	r24, 0xFE	; 254
     cee:	8c 93       	st	X, r24
SET_BIT(TIMERS_u8_TCCR0_REG,timers_CS01_BIT1);
     cf0:	a3 e5       	ldi	r26, 0x53	; 83
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e3 e5       	ldi	r30, 0x53	; 83
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	82 60       	ori	r24, 0x02	; 2
     cfc:	8c 93       	st	X, r24
CLR_BIT(TIMERS_u8_TCCR0_REG,timers_CS02_BIT2);
     cfe:	a3 e5       	ldi	r26, 0x53	; 83
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e3 e5       	ldi	r30, 0x53	; 83
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8b 7f       	andi	r24, 0xFB	; 251
     d0a:	8c 93       	st	X, r24


return Local_enu_Erorr_State;
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <TIMERS_enum_TIMER1_INIT>:
ES_t TIMERS_enum_TIMER1_INIT(void)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	0f 92       	push	r0
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State = ES_OK ;
     d20:	19 82       	std	Y+1, r1	; 0x01
	/*select timer1 mode --> 14(fast PWM) (ICR1=Top Value)*/
	CLR_BIT(TIMERS_u8_TCCR1A_REG,timers_WGM10_BIT0);
     d22:	af e4       	ldi	r26, 0x4F	; 79
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	ef e4       	ldi	r30, 0x4F	; 79
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8e 7f       	andi	r24, 0xFE	; 254
     d2e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,timers_WGM11_BIT1);
     d30:	af e4       	ldi	r26, 0x4F	; 79
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	ef e4       	ldi	r30, 0x4F	; 79
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	82 60       	ori	r24, 0x02	; 2
     d3c:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,timers_WGM12_BIT3);
     d3e:	ae e4       	ldi	r26, 0x4E	; 78
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	ee e4       	ldi	r30, 0x4E	; 78
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	88 60       	ori	r24, 0x08	; 8
     d4a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,timers_WGM13_BIT4);
     d4c:	ae e4       	ldi	r26, 0x4E	; 78
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	ee e4       	ldi	r30, 0x4E	; 78
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	80 61       	ori	r24, 0x10	; 16
     d58:	8c 93       	st	X, r24

	/*SELECT HM Action on OC1A Pin --> non inverting*/
	CLR_BIT(TIMERS_u8_TCCR1A_REG,timers_COM1A0_BIT6);
     d5a:	af e4       	ldi	r26, 0x4F	; 79
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	ef e4       	ldi	r30, 0x4F	; 79
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8f 7b       	andi	r24, 0xBF	; 191
     d66:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,timers_COM1A1_BIT7);
     d68:	af e4       	ldi	r26, 0x4F	; 79
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	ef e4       	ldi	r30, 0x4F	; 79
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	80 68       	ori	r24, 0x80	; 128
     d74:	8c 93       	st	X, r24

	/*SET TOP Value IN OCI1 */
	TIMERS_u16_ICR1_REG = TIMER1_u16_TOP_Value_IN_OCI1;
     d76:	e6 e4       	ldi	r30, 0x46	; 70
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	8f e1       	ldi	r24, 0x1F	; 31
     d7c:	9e e4       	ldi	r25, 0x4E	; 78
     d7e:	91 83       	std	Z+1, r25	; 0x01
     d80:	80 83       	st	Z, r24
	/*Angle of servo motor = 180 */
//		TIMERS_u16_OCR1A_REG = TIMER1_u16_angle_180  ;


	/*set prescaler value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG,timers_CS10_BIT0);
     d82:	ae e4       	ldi	r26, 0x4E	; 78
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ee e4       	ldi	r30, 0x4E	; 78
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8e 7f       	andi	r24, 0xFE	; 254
     d8e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,timers_CS11_BIT1);
     d90:	ae e4       	ldi	r26, 0x4E	; 78
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ee e4       	ldi	r30, 0x4E	; 78
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	82 60       	ori	r24, 0x02	; 2
     d9c:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,timers_CS12_BIT2);
     d9e:	ae e4       	ldi	r26, 0x4E	; 78
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	ee e4       	ldi	r30, 0x4E	; 78
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	8b 7f       	andi	r24, 0xFB	; 251
     daa:	8c 93       	st	X, r24

	return Local_enu_Erorr_State;
     dac:	89 81       	ldd	r24, Y+1	; 0x01

}
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <TIMERS_enum_TIMER0_SET_CALL_BACK>:
ES_t TIMERS_enum_TIMER0_SET_CALL_BACK(void(*Copy_pf_TIMER0_OVF)(void)){
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	00 d0       	rcall	.+0      	; 0xdbc <TIMERS_enum_TIMER0_SET_CALL_BACK+0x6>
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	9b 83       	std	Y+3, r25	; 0x03
     dc4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State = ES_OK ;
     dc6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pf_TIMER0_OVF !=NULL)
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	39 f0       	breq	.+14     	; 0xdde <TIMERS_enum_TIMER0_SET_CALL_BACK+0x28>
	{
		TIMERS_pf_TIMER0_OVF=Copy_pf_TIMER0_OVF;
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	9b 81       	ldd	r25, Y+3	; 0x03
     dd4:	90 93 69 00 	sts	0x0069, r25
     dd8:	80 93 68 00 	sts	0x0068, r24
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <TIMERS_enum_TIMER0_SET_CALL_BACK+0x2c>

	}
	else
	{
		Local_enu_Erorr_State=ES_NOK;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enu_Erorr_State;
     de2:	89 81       	ldd	r24, Y+1	; 0x01
}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <TIMERS_enum_TIMER0_CTC_SET_CALL_BACK>:
ES_t TIMERS_enum_TIMER0_CTC_SET_CALL_BACK(void(*Copy_pf_TIMERO_CTC)(void))
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <TIMERS_enum_TIMER0_CTC_SET_CALL_BACK+0x6>
     df6:	0f 92       	push	r0
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	9b 83       	std	Y+3, r25	; 0x03
     dfe:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State = ES_OK ;
     e00:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pf_TIMERO_CTC !=NULL)
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	9b 81       	ldd	r25, Y+3	; 0x03
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	39 f0       	breq	.+14     	; 0xe18 <TIMERS_enum_TIMER0_CTC_SET_CALL_BACK+0x28>
		{
		TIMERS_pf_TIMER0_CTC=Copy_pf_TIMERO_CTC;
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	9b 81       	ldd	r25, Y+3	; 0x03
     e0e:	90 93 6b 00 	sts	0x006B, r25
     e12:	80 93 6a 00 	sts	0x006A, r24
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <TIMERS_enum_TIMER0_CTC_SET_CALL_BACK+0x2c>

		}
		else
		{
			Local_enu_Erorr_State=ES_NOK;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enu_Erorr_State;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01

}
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <TIMERS_enum_TIMER0_SET_COMPARE_MATCH_VALUE>:
ES_t TIMERS_enum_TIMER0_SET_COMPARE_MATCH_VALUE(u8 Copy_u8_OCRO_Value)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <TIMERS_enum_TIMER0_SET_COMPARE_MATCH_VALUE+0x6>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
     e36:	19 82       	std	Y+1, r1	; 0x01
    TIMERS_u8_OCR0_REG = Copy_u8_OCRO_Value;
     e38:	ec e5       	ldi	r30, 0x5C	; 92
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	80 83       	st	Z, r24

	return Local_enu_Erorr_State;
     e40:	89 81       	ldd	r24, Y+1	; 0x01

}
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <TIMERS_enum_TIMER1_SET_COMPARE_MATCH_VALUE_A>:
ES_t TIMERS_enum_TIMER1_SET_COMPARE_MATCH_VALUE_A(u16 Copy_u16_OCR_Value)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	00 d0       	rcall	.+0      	; 0xe52 <TIMERS_enum_TIMER1_SET_COMPARE_MATCH_VALUE_A+0x6>
     e52:	0f 92       	push	r0
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	9b 83       	std	Y+3, r25	; 0x03
     e5a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
     e5c:	19 82       	std	Y+1, r1	; 0x01
	TIMERS_u16_ICR1_REG = Copy_u16_OCR_Value;
     e5e:	e6 e4       	ldi	r30, 0x46	; 70
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	9b 81       	ldd	r25, Y+3	; 0x03
     e66:	91 83       	std	Z+1, r25	; 0x01
     e68:	80 83       	st	Z, r24

		return Local_enu_Erorr_State;
     e6a:	89 81       	ldd	r24, Y+1	; 0x01

}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle>:
ES_t TIMERS_enum_TIMER1_SET_Servo_Motor_Angle(u16 Copy_u16_Servo_Motor_Angle)
{
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle+0xa>
     e82:	0f 92       	push	r0
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	9b 83       	std	Y+3, r25	; 0x03
     e8a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
     e8c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u16_Servo_Motor_Angle <= TIMERS_SERVO_u8_MAX_ANGLE){
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	9b 81       	ldd	r25, Y+3	; 0x03
     e92:	85 3b       	cpi	r24, 0xB5	; 181
     e94:	91 05       	cpc	r25, r1
     e96:	08 f5       	brcc	.+66     	; 0xeda <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle+0x62>
		TIMERS_u16_OCR1A_REG =((1000UL *Copy_u16_Servo_Motor_Angle) / 1023) + TIMER1_u16_angle_zero;
     e98:	0a e4       	ldi	r16, 0x4A	; 74
     e9a:	10 e0       	ldi	r17, 0x00	; 0
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ea0:	cc 01       	movw	r24, r24
     ea2:	a0 e0       	ldi	r26, 0x00	; 0
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	28 ee       	ldi	r18, 0xE8	; 232
     ea8:	33 e0       	ldi	r19, 0x03	; 3
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	bc 01       	movw	r22, r24
     eb0:	cd 01       	movw	r24, r26
     eb2:	0e 94 34 14 	call	0x2868	; 0x2868 <__mulsi3>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	2f ef       	ldi	r18, 0xFF	; 255
     ebc:	33 e0       	ldi	r19, 0x03	; 3
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	bc 01       	movw	r22, r24
     ec4:	cd 01       	movw	r24, r26
     ec6:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__udivmodsi4>
     eca:	da 01       	movw	r26, r20
     ecc:	c9 01       	movw	r24, r18
     ece:	89 51       	subi	r24, 0x19	; 25
     ed0:	9c 4f       	sbci	r25, 0xFC	; 252
     ed2:	f8 01       	movw	r30, r16
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	80 83       	st	Z, r24
     ed8:	02 c0       	rjmp	.+4      	; 0xede <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle+0x66>
	}
	else{
		Local_enu_Erorr_State= ES_NOK;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	89 83       	std	Y+1, r24	; 0x01

	}
			return Local_enu_Erorr_State;
     ede:	89 81       	ldd	r24, Y+1	; 0x01

}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret

00000ef0 <__vector_11>:

/* prototype FOR ISR of TIMER0 OVF */
void __vector_11(void)        __attribute__((signal));
void __vector_11(void)
{
     ef0:	1f 92       	push	r1
     ef2:	0f 92       	push	r0
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	0f 92       	push	r0
     ef8:	11 24       	eor	r1, r1
     efa:	2f 93       	push	r18
     efc:	3f 93       	push	r19
     efe:	4f 93       	push	r20
     f00:	5f 93       	push	r21
     f02:	6f 93       	push	r22
     f04:	7f 93       	push	r23
     f06:	8f 93       	push	r24
     f08:	9f 93       	push	r25
     f0a:	af 93       	push	r26
     f0c:	bf 93       	push	r27
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
static u16 Local_TIMERS_u16_Counter_OVF =TIMERS_u8_intial_counter_value;
Local_TIMERS_u16_Counter_OVF++;
     f1a:	80 91 6c 00 	lds	r24, 0x006C
     f1e:	90 91 6d 00 	lds	r25, 0x006D
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	90 93 6d 00 	sts	0x006D, r25
     f28:	80 93 6c 00 	sts	0x006C, r24
if(Local_TIMERS_u16_Counter_OVF==TIMER0_u8_Counter_of_OVF)
     f2c:	80 91 6c 00 	lds	r24, 0x006C
     f30:	90 91 6d 00 	lds	r25, 0x006D
     f34:	2f e0       	ldi	r18, 0x0F	; 15
     f36:	83 34       	cpi	r24, 0x43	; 67
     f38:	92 07       	cpc	r25, r18
     f3a:	99 f4       	brne	.+38     	; 0xf62 <__vector_11+0x72>
{
	/*update preload value*/
	TIMERS_u8_TCNT0_REG=TIMERO_u8_preload_value;
     f3c:	e2 e5       	ldi	r30, 0x52	; 82
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 ec       	ldi	r24, 0xC0	; 192
     f42:	80 83       	st	Z, r24
	/*Clear OVF counter*/
	Local_TIMERS_u16_Counter_OVF=TIMERS_u8_intial_counter_value;
     f44:	10 92 6d 00 	sts	0x006D, r1
     f48:	10 92 6c 00 	sts	0x006C, r1
	/*Call APP Function*/
	if(TIMERS_pf_TIMER0_OVF != NULL)
     f4c:	80 91 68 00 	lds	r24, 0x0068
     f50:	90 91 69 00 	lds	r25, 0x0069
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	29 f0       	breq	.+10     	; 0xf62 <__vector_11+0x72>
	{
		TIMERS_pf_TIMER0_OVF();
     f58:	e0 91 68 00 	lds	r30, 0x0068
     f5c:	f0 91 69 00 	lds	r31, 0x0069
     f60:	09 95       	icall
	}

}
}
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	ff 91       	pop	r31
     f68:	ef 91       	pop	r30
     f6a:	bf 91       	pop	r27
     f6c:	af 91       	pop	r26
     f6e:	9f 91       	pop	r25
     f70:	8f 91       	pop	r24
     f72:	7f 91       	pop	r23
     f74:	6f 91       	pop	r22
     f76:	5f 91       	pop	r21
     f78:	4f 91       	pop	r20
     f7a:	3f 91       	pop	r19
     f7c:	2f 91       	pop	r18
     f7e:	0f 90       	pop	r0
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	0f 90       	pop	r0
     f84:	1f 90       	pop	r1
     f86:	18 95       	reti

00000f88 <__vector_10>:
/* prototype FOR ISR of CTC MODE */
void __vector_10(void)        __attribute__((signal));
void __vector_10(void)
{
     f88:	1f 92       	push	r1
     f8a:	0f 92       	push	r0
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	0f 92       	push	r0
     f90:	11 24       	eor	r1, r1
     f92:	2f 93       	push	r18
     f94:	3f 93       	push	r19
     f96:	4f 93       	push	r20
     f98:	5f 93       	push	r21
     f9a:	6f 93       	push	r22
     f9c:	7f 93       	push	r23
     f9e:	8f 93       	push	r24
     fa0:	9f 93       	push	r25
     fa2:	af 93       	push	r26
     fa4:	bf 93       	push	r27
     fa6:	ef 93       	push	r30
     fa8:	ff 93       	push	r31
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
static u16 Local_TIMERS_u16_Counter_OVF_CTC =TIMERS_u8_intial_counter_value;
Local_TIMERS_u16_Counter_OVF_CTC++;
     fb2:	80 91 6e 00 	lds	r24, 0x006E
     fb6:	90 91 6f 00 	lds	r25, 0x006F
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	90 93 6f 00 	sts	0x006F, r25
     fc0:	80 93 6e 00 	sts	0x006E, r24
if(Local_TIMERS_u16_Counter_OVF_CTC==TIMER0_u8_Counter_of_OVF_CTC)
     fc4:	80 91 6e 00 	lds	r24, 0x006E
     fc8:	90 91 6f 00 	lds	r25, 0x006F
     fcc:	27 e2       	ldi	r18, 0x27	; 39
     fce:	80 31       	cpi	r24, 0x10	; 16
     fd0:	92 07       	cpc	r25, r18
     fd2:	79 f4       	brne	.+30     	; 0xff2 <__vector_10+0x6a>
{

	/*Clear OVF counter*/
	Local_TIMERS_u16_Counter_OVF_CTC=TIMERS_u8_intial_counter_value;
     fd4:	10 92 6f 00 	sts	0x006F, r1
     fd8:	10 92 6e 00 	sts	0x006E, r1
	/*Call APP Function*/
	if(TIMERS_pf_TIMER0_CTC != NULL)
     fdc:	80 91 6a 00 	lds	r24, 0x006A
     fe0:	90 91 6b 00 	lds	r25, 0x006B
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	29 f0       	breq	.+10     	; 0xff2 <__vector_10+0x6a>
	{
		TIMERS_pf_TIMER0_CTC();
     fe8:	e0 91 6a 00 	lds	r30, 0x006A
     fec:	f0 91 6b 00 	lds	r31, 0x006B
     ff0:	09 95       	icall
	}

}
}
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	ff 91       	pop	r31
     ff8:	ef 91       	pop	r30
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <ADC_enum_ADC_INIT>:
/*Global pointer to function*/
static void (*ADC_pf_ADC_notification)(u16) = NULL;
/*ADC busy flag*/
static u8 ADC_u8_busy_flag=0;

ES_t  ADC_enum_ADC_INIT(void){
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	0f 92       	push	r0
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enu_Erorr_State = ES_OK ;
    1022:	19 82       	std	Y+1, r1	; 0x01

	 /* 1- select Vref = AVCC*/
    CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_REFS1_BIT7);
    1024:	a7 e2       	ldi	r26, 0x27	; 39
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e7 e2       	ldi	r30, 0x27	; 39
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	8f 77       	andi	r24, 0x7F	; 127
    1030:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_REFS0_BIT6);
    1032:	a7 e2       	ldi	r26, 0x27	; 39
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e7 e2       	ldi	r30, 0x27	; 39
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	80 64       	ori	r24, 0x40	; 64
    103e:	8c 93       	st	X, r24

	 /* 2-Right Adjust */
    CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADLAR_BIT5);
    1040:	a7 e2       	ldi	r26, 0x27	; 39
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e7 e2       	ldi	r30, 0x27	; 39
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8f 7d       	andi	r24, 0xDF	; 223
    104c:	8c 93       	st	X, r24

	 /* 3-Enable AutoTrigger */
    CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADATE_BIT5);
    104e:	a6 e2       	ldi	r26, 0x26	; 38
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e6 e2       	ldi	r30, 0x26	; 38
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	8f 7d       	andi	r24, 0xDF	; 223
    105a:	8c 93       	st	X, r24

	 /* 4-Select CLK/64  */
    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADPS2_BIT2);
    105c:	a6 e2       	ldi	r26, 0x26	; 38
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e6 e2       	ldi	r30, 0x26	; 38
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	84 60       	ori	r24, 0x04	; 4
    1068:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADPS1_BIT1);
    106a:	a6 e2       	ldi	r26, 0x26	; 38
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e6 e2       	ldi	r30, 0x26	; 38
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	82 60       	ori	r24, 0x02	; 2
    1076:	8c 93       	st	X, r24
    CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADPS0_BIT0);
    1078:	a6 e2       	ldi	r26, 0x26	; 38
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e6 e2       	ldi	r30, 0x26	; 38
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8e 7f       	andi	r24, 0xFE	; 254
    1084:	8c 93       	st	X, r24


	 /* 5-Enable ADC */
    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADEN_BIT7);
    1086:	a6 e2       	ldi	r26, 0x26	; 38
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e6 e2       	ldi	r30, 0x26	; 38
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	80 68       	ori	r24, 0x80	; 128
    1092:	8c 93       	st	X, r24

	 return Local_enu_Erorr_State;
    1094:	89 81       	ldd	r24, Y+1	; 0x01

}
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking>:

ES_t  ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking(u8 Copy_u8_ADC_Channel_NB,u16 * Copy_pu16_ADC_Digital_Value){
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	28 97       	sbiw	r28, 0x08	; 8
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	8e 83       	std	Y+6, r24	; 0x06
    10b4:	78 87       	std	Y+8, r23	; 0x08
    10b6:	6f 83       	std	Y+7, r22	; 0x07
	 ES_t Local_enu_Erorr_State = ES_OK ;
    10b8:	1d 82       	std	Y+5, r1	; 0x05
	 u32 Local_u32_ADC_TiomeOut_Counter = ADC_u8_initial_counter ;
    10ba:	19 82       	std	Y+1, r1	; 0x01
    10bc:	1a 82       	std	Y+2, r1	; 0x02
    10be:	1b 82       	std	Y+3, r1	; 0x03
    10c0:	1c 82       	std	Y+4, r1	; 0x04

     if((Copy_u8_ADC_Channel_NB < ADC_u8_Max_Channels_NB) && (Copy_u8_ADC_Channel_NB != NULL) && (ADC_u8_busy_flag ==0)){
    10c2:	8e 81       	ldd	r24, Y+6	; 0x06
    10c4:	80 32       	cpi	r24, 0x20	; 32
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x2c>
    10c8:	63 c0       	rjmp	.+198    	; 0x1190 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf2>
    10ca:	8e 81       	ldd	r24, Y+6	; 0x06
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x38>
    10d4:	5d c0       	rjmp	.+186    	; 0x1190 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf2>
    10d6:	80 91 72 00 	lds	r24, 0x0072
    10da:	88 23       	and	r24, r24
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x42>
    10de:	58 c0       	rjmp	.+176    	; 0x1190 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf2>
    	 /*set ADC flag is busy*/
    	 	 	ADC_u8_busy_flag=1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 93 72 00 	sts	0x0072, r24
    	 /*1- clear MUX4....0*/
    	 ADC_u8_ADMUX_REG &= CLEAR_MUX_BITS;
    10e6:	a7 e2       	ldi	r26, 0x27	; 39
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e7 e2       	ldi	r30, 0x27	; 39
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 7e       	andi	r24, 0xE0	; 224
    10f2:	8c 93       	st	X, r24

    	 /*2- Select Channel NB*/
    	 ADC_u8_ADMUX_REG |= Copy_u8_ADC_Channel_NB;
    10f4:	a7 e2       	ldi	r26, 0x27	; 39
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e7 e2       	ldi	r30, 0x27	; 39
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	90 81       	ld	r25, Z
    10fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1100:	89 2b       	or	r24, r25
    1102:	8c 93       	st	X, r24

    	 /*3- Start Conversion*/
    	    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC_BIT6);
    1104:	a6 e2       	ldi	r26, 0x26	; 38
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e6 e2       	ldi	r30, 0x26	; 38
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 64       	ori	r24, 0x40	; 64
    1110:	8c 93       	st	X, r24
    1112:	0b c0       	rjmp	.+22     	; 0x112a <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x8c>

    	    /*4- wait flag=1*/
    	    while ((!GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT4))&&(Local_u32_ADC_TiomeOut_Counter<ADC_u32_TIME_OUT_MAX_VALUE))
    	    {
    	    	Local_u32_ADC_TiomeOut_Counter++;
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	ab 81       	ldd	r26, Y+3	; 0x03
    111a:	bc 81       	ldd	r27, Y+4	; 0x04
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	a1 1d       	adc	r26, r1
    1120:	b1 1d       	adc	r27, r1
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	ab 83       	std	Y+3, r26	; 0x03
    1128:	bc 83       	std	Y+4, r27	; 0x04

    	 /*3- Start Conversion*/
    	    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC_BIT6);

    	    /*4- wait flag=1*/
    	    while ((!GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT4))&&(Local_u32_ADC_TiomeOut_Counter<ADC_u32_TIME_OUT_MAX_VALUE))
    112a:	e6 e2       	ldi	r30, 0x26	; 38
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	80 71       	andi	r24, 0x10	; 16
    1136:	90 70       	andi	r25, 0x00	; 0
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	61 f4       	brne	.+24     	; 0x1154 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xb6>
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	9a 81       	ldd	r25, Y+2	; 0x02
    1140:	ab 81       	ldd	r26, Y+3	; 0x03
    1142:	bc 81       	ldd	r27, Y+4	; 0x04
    1144:	88 38       	cpi	r24, 0x88	; 136
    1146:	23 e1       	ldi	r18, 0x13	; 19
    1148:	92 07       	cpc	r25, r18
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	a2 07       	cpc	r26, r18
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	b2 07       	cpc	r27, r18
    1152:	00 f3       	brcs	.-64     	; 0x1114 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x76>
    	    {
    	    	Local_u32_ADC_TiomeOut_Counter++;
    	    }
    	    if(GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT4)!=0)/*Local_u32_ADC_TiomeOut_Counter<ADC_u32_TIME_OUT_MAX_VALUE*/
    1154:	e6 e2       	ldi	r30, 0x26	; 38
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	80 71       	andi	r24, 0x10	; 16
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	91 f0       	breq	.+36     	; 0x118a <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xec>
    	    {

    	    /*5-Clear flag*/
    	    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT4);
    1166:	a6 e2       	ldi	r26, 0x26	; 38
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e6 e2       	ldi	r30, 0x26	; 38
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	80 61       	ori	r24, 0x10	; 16
    1172:	8c 93       	st	X, r24
    	    /*clear ADC busy flag*/
    	      ADC_u8_busy_flag=0;
    1174:	10 92 72 00 	sts	0x0072, r1
    	    /*6-Read DIGITAL Value*/
    	    *Copy_pu16_ADC_Digital_Value = ADC_u16_ADC_REG ;
    1178:	e4 e2       	ldi	r30, 0x24	; 36
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	91 81       	ldd	r25, Z+1	; 0x01
    1180:	ef 81       	ldd	r30, Y+7	; 0x07
    1182:	f8 85       	ldd	r31, Y+8	; 0x08
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	80 83       	st	Z, r24
    1188:	05 c0       	rjmp	.+10     	; 0x1194 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf6>
    	    }
    	    else{
    	    	 Local_enu_Erorr_State= ES_NOK;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf6>

    	    }

     }
     else{
    	 Local_enu_Erorr_State= ES_NOK;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	8d 83       	std	Y+5, r24	; 0x05
     }
	 return Local_enu_Erorr_State;
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1196:	28 96       	adiw	r28, 0x08	; 8
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <ADC_enum_GET_DIGITAL_VALUE_ASynch>:

ES_t  ADC_enum_GET_DIGITAL_VALUE_ASynch(u8 Copy_u8_ADC_Channel_NB,void(*Copy_pf_ADC_notifction)(u16))
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x6>
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x8>
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	8a 83       	std	Y+2, r24	; 0x02
    11b6:	7c 83       	std	Y+4, r23	; 0x04
    11b8:	6b 83       	std	Y+3, r22	; 0x03
		 ES_t Local_enu_Erorr_State = ES_OK ;
    11ba:	19 82       	std	Y+1, r1	; 0x01
     if((Copy_u8_ADC_Channel_NB < ADC_u8_Max_Channels_NB) && (Copy_u8_ADC_Channel_NB != NULL) && (ADC_u8_busy_flag ==0)){
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	80 32       	cpi	r24, 0x20	; 32
    11c0:	80 f5       	brcc	.+96     	; 0x1222 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x7a>
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	59 f1       	breq	.+86     	; 0x1222 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x7a>
    11cc:	80 91 72 00 	lds	r24, 0x0072
    11d0:	88 23       	and	r24, r24
    11d2:	39 f5       	brne	.+78     	; 0x1222 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x7a>
    	 /*set ADC flag is busy*/
    	 	ADC_u8_busy_flag=1;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 93 72 00 	sts	0x0072, r24

    	 /*Update  pointer to function*/
    	 ADC_pf_ADC_notification=Copy_pf_ADC_notifction;
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	90 93 71 00 	sts	0x0071, r25
    11e2:	80 93 70 00 	sts	0x0070, r24
    	 /*Enable ADC interrupt*/
   	    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIE_BIT3);
    11e6:	a6 e2       	ldi	r26, 0x26	; 38
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e6 e2       	ldi	r30, 0x26	; 38
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	88 60       	ori	r24, 0x08	; 8
    11f2:	8c 93       	st	X, r24
       /*1- clear MUX4....0*/
   	  ADC_u8_ADMUX_REG &= CLEAR_MUX_BITS;
    11f4:	a7 e2       	ldi	r26, 0x27	; 39
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e7 e2       	ldi	r30, 0x27	; 39
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	80 7e       	andi	r24, 0xE0	; 224
    1200:	8c 93       	st	X, r24
       	 /*2- Select Channel NB*/
   	   	 ADC_u8_ADMUX_REG |= Copy_u8_ADC_Channel_NB;
    1202:	a7 e2       	ldi	r26, 0x27	; 39
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e7 e2       	ldi	r30, 0x27	; 39
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	90 81       	ld	r25, Z
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	89 2b       	or	r24, r25
    1210:	8c 93       	st	X, r24
       	 /*3- Start Conversion*/
         SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC_BIT6);
    1212:	a6 e2       	ldi	r26, 0x26	; 38
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e6 e2       	ldi	r30, 0x26	; 38
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	80 64       	ori	r24, 0x40	; 64
    121e:	8c 93       	st	X, r24
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x7e>


     }
     else{
        	 Local_enu_Erorr_State= ES_NOK;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	89 83       	std	Y+1, r24	; 0x01
         }

	 return Local_enu_Erorr_State;
    1226:	89 81       	ldd	r24, Y+1	; 0x01

}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <ADC_enum_GET_ADC_REG_VALUE>:
ES_t  ADC_enum_GET_ADC_REG_VALUE(u16 * Copy_pu16_ADC_Value)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	00 d0       	rcall	.+0      	; 0x123c <ADC_enum_GET_ADC_REG_VALUE+0x6>
    123c:	0f 92       	push	r0
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	9b 83       	std	Y+3, r25	; 0x03
    1244:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enu_Erorr_State = ES_OK ;
    1246:	19 82       	std	Y+1, r1	; 0x01
	 if(Copy_pu16_ADC_Value!= NULL)
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	9b 81       	ldd	r25, Y+3	; 0x03
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	49 f0       	breq	.+18     	; 0x1262 <ADC_enum_GET_ADC_REG_VALUE+0x2c>
	 {
		 /*read ADC REG*/
		 *Copy_pu16_ADC_Value= ADC_u16_ADC_REG ;
    1250:	e4 e2       	ldi	r30, 0x24	; 36
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	ea 81       	ldd	r30, Y+2	; 0x02
    125a:	fb 81       	ldd	r31, Y+3	; 0x03
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	80 83       	st	Z, r24
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <ADC_enum_GET_ADC_REG_VALUE+0x30>

	 }
	 else{
    	 Local_enu_Erorr_State= ES_NOK;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	89 83       	std	Y+1, r24	; 0x01
     }

	 return Local_enu_Erorr_State;
    1266:	89 81       	ldd	r24, Y+1	; 0x01

}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <__vector_16>:
//prototype FOR ISR
void __vector_16(void)        __attribute__((signal));
void __vector_16(void)
{
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	2f 93       	push	r18
    1280:	3f 93       	push	r19
    1282:	4f 93       	push	r20
    1284:	5f 93       	push	r21
    1286:	6f 93       	push	r22
    1288:	7f 93       	push	r23
    128a:	8f 93       	push	r24
    128c:	9f 93       	push	r25
    128e:	af 93       	push	r26
    1290:	bf 93       	push	r27
    1292:	ef 93       	push	r30
    1294:	ff 93       	push	r31
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pf_ADC_notification!= NULL)
    129e:	80 91 70 00 	lds	r24, 0x0070
    12a2:	90 91 71 00 	lds	r25, 0x0071
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	99 f0       	breq	.+38     	; 0x12d0 <__vector_16+0x5c>
	{
		/*clear ADC busy flag */
		 ADC_u8_busy_flag=0;
    12aa:	10 92 72 00 	sts	0x0072, r1
		/*clear PIE of ADC */
   	    CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIE_BIT3);
    12ae:	a6 e2       	ldi	r26, 0x26	; 38
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e6 e2       	ldi	r30, 0x26	; 38
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	87 7f       	andi	r24, 0xF7	; 247
    12ba:	8c 93       	st	X, r24
   	   	/*calling notification function*/
   		ADC_pf_ADC_notification(ADC_u16_ADC_REG);
    12bc:	20 91 70 00 	lds	r18, 0x0070
    12c0:	30 91 71 00 	lds	r19, 0x0071
    12c4:	e4 e2       	ldi	r30, 0x24	; 36
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    12cc:	f9 01       	movw	r30, r18
    12ce:	09 95       	icall
	}

	}
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	0f 90       	pop	r0
    12f2:	1f 90       	pop	r1
    12f4:	18 95       	reti

000012f6 <GI_enum_GI_Enable>:
//MCAL
//#include "GI_config.h"
//#include "GI_private.h"
#include "GI_interface.h"

ES_t  GI_enum_GI_Enable(void){
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG_REG,GI_u8_PIN7);
    12fe:	af e5       	ldi	r26, 0x5F	; 95
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ef e5       	ldi	r30, 0x5F	; 95
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	80 68       	ori	r24, 0x80	; 128
    130a:	8c 93       	st	X, r24
return ES_OK;
    130c:	80 e0       	ldi	r24, 0x00	; 0
}
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <GI_enum_GI_Disable>:
ES_t  GI_enum_GI_Disable(void){
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG_REG,GI_u8_PIN7);
    131c:	af e5       	ldi	r26, 0x5F	; 95
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	ef e5       	ldi	r30, 0x5F	; 95
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	8f 77       	andi	r24, 0x7F	; 127
    1328:	8c 93       	st	X, r24
	return ES_OK;
    132a:	80 e0       	ldi	r24, 0x00	; 0

}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <DIO_voidInit>:
//MCAL Layer
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidInit(void){
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = CONC(DIO_U8_PA7_INTIAL_DIRECTION, DIO_U8_PA6_INTIAL_DIRECTION, DIO_U8_PA5_INTIAL_DIRECTION, DIO_U8_PA4_INTIAL_DIRECTION,
    133a:	ea e3       	ldi	r30, 0x3A	; 58
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 83       	st	Z, r24
		                   DIO_U8_PA3_INTIAL_DIRECTION, DIO_U8_PA2_INTIAL_DIRECTION, DIO_U8_PA1_INTIAL_DIRECTION, DIO_U8_PA0_INTIAL_DIRECTION);
		                 			
	DIO_u8_DDRB_REG = CONC(DIO_U8_PB7_INTIAL_DIRECTION, DIO_U8_PB6_INTIAL_DIRECTION, DIO_U8_PB5_INTIAL_DIRECTION, DIO_U8_PB4_INTIAL_DIRECTION,
    1342:	e7 e3       	ldi	r30, 0x37	; 55
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	87 e2       	ldi	r24, 0x27	; 39
    1348:	80 83       	st	Z, r24
				           DIO_U8_PB3_INTIAL_DIRECTION, DIO_U8_PB2_INTIAL_DIRECTION, DIO_U8_PB1_INTIAL_DIRECTION, DIO_U8_PB0_INTIAL_DIRECTION);
					                                                                                                                      
	DIO_u8_DDRC_REG = CONC(DIO_U8_PC7_INTIAL_DIRECTION, DIO_U8_PC6_INTIAL_DIRECTION, DIO_U8_PC5_INTIAL_DIRECTION, DIO_U8_PC4_INTIAL_DIRECTION,
    134a:	e4 e3       	ldi	r30, 0x34	; 52
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	10 82       	st	Z, r1
		                   DIO_U8_PC3_INTIAL_DIRECTION, DIO_U8_PC2_INTIAL_DIRECTION, DIO_U8_PC1_INTIAL_DIRECTION, DIO_U8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = CONC(DIO_U8_PD7_INTIAL_DIRECTION, DIO_U8_PD6_INTIAL_DIRECTION, DIO_U8_PD5_INTIAL_DIRECTION, DIO_U8_PD4_INTIAL_DIRECTION,
    1350:	e1 e3       	ldi	r30, 0x31	; 49
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	80 83       	st	Z, r24
				           DIO_U8_PD3_INTIAL_DIRECTION, DIO_U8_PD2_INTIAL_DIRECTION, DIO_U8_PD1_INTIAL_DIRECTION, DIO_U8_PD0_INTIAL_DIRECTION);

	DIO_u8_PORTA_REG = CONC(DIO_U8_PA7_INTIAL_VALUE, DIO_U8_PA6_INTIAL_VALUE, DIO_U8_PA5_INTIAL_VALUE, DIO_U8_PA4_INTIAL_VALUE,
    1358:	eb e3       	ldi	r30, 0x3B	; 59
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	10 82       	st	Z, r1
						    DIO_U8_PA3_INTIAL_VALUE, DIO_U8_PA2_INTIAL_VALUE, DIO_U8_PA1_INTIAL_VALUE, DIO_U8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = CONC(DIO_U8_PB7_INTIAL_VALUE, DIO_U8_PB6_INTIAL_VALUE, DIO_U8_PB5_INTIAL_VALUE, DIO_U8_PB4_INTIAL_VALUE,
    135e:	e8 e3       	ldi	r30, 0x38	; 56
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	10 82       	st	Z, r1
						   	DIO_U8_PB3_INTIAL_VALUE, DIO_U8_PB2_INTIAL_VALUE, DIO_U8_PB1_INTIAL_VALUE, DIO_U8_PB0_INTIAL_VALUE);
												 
    DIO_u8_PORTC_REG = CONC(DIO_U8_PC7_INTIAL_VALUE, DIO_U8_PC6_INTIAL_VALUE, DIO_U8_PC5_INTIAL_VALUE, DIO_U8_PC4_INTIAL_VALUE,
    1364:	e5 e3       	ldi	r30, 0x35	; 53
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	10 82       	st	Z, r1
					        DIO_U8_PC3_INTIAL_VALUE, DIO_U8_PC2_INTIAL_VALUE, DIO_U8_PC1_INTIAL_VALUE, DIO_U8_PC0_INTIAL_VALUE);
																		   
    DIO_u8_PORTD_REG = CONC(DIO_U8_PD7_INTIAL_VALUE, DIO_U8_PD6_INTIAL_VALUE, DIO_U8_PD5_INTIAL_VALUE, DIO_U8_PD4_INTIAL_VALUE,
    136a:	e2 e3       	ldi	r30, 0x32	; 50
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	10 82       	st	Z, r1
						    DIO_U8_PD3_INTIAL_VALUE, DIO_U8_PD2_INTIAL_VALUE, DIO_U8_PD1_INTIAL_VALUE, DIO_U8_PD0_INTIAL_VALUE);
    }
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <DIO_u8_Set_Pin_Direction>:

u8 DIO_u8_Set_Pin_Direction  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Direction ){
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	2e 97       	sbiw	r28, 0x0e	; 14
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	8a 83       	std	Y+2, r24	; 0x02
    138c:	6b 83       	std	Y+3, r22	; 0x03
    138e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
    1390:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Direction == DIO_u8_INTIAL_INPUT)||(Copy_u8_Pin_Direction == DIO_u8_INTIAL_OUTPUT)))
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	84 30       	cpi	r24, 0x04	; 4
    1396:	08 f0       	brcs	.+2      	; 0x139a <DIO_u8_Set_Pin_Direction+0x24>
    1398:	15 c1       	rjmp	.+554    	; 0x15c4 <DIO_u8_Set_Pin_Direction+0x24e>
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 30       	cpi	r24, 0x08	; 8
    139e:	08 f0       	brcs	.+2      	; 0x13a2 <DIO_u8_Set_Pin_Direction+0x2c>
    13a0:	11 c1       	rjmp	.+546    	; 0x15c4 <DIO_u8_Set_Pin_Direction+0x24e>
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	88 23       	and	r24, r24
    13a6:	21 f0       	breq	.+8      	; 0x13b0 <DIO_u8_Set_Pin_Direction+0x3a>
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <DIO_u8_Set_Pin_Direction+0x3a>
    13ae:	0a c1       	rjmp	.+532    	; 0x15c4 <DIO_u8_Set_Pin_Direction+0x24e>
	{
        switch (Copy_u8_Port_ID)
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3e 87       	std	Y+14, r19	; 0x0e
    13b8:	2d 87       	std	Y+13, r18	; 0x0d
    13ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    13bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	91 05       	cpc	r25, r1
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <DIO_u8_Set_Pin_Direction+0x50>
    13c4:	51 c0       	rjmp	.+162    	; 0x1468 <DIO_u8_Set_Pin_Direction+0xf2>
    13c6:	2d 85       	ldd	r18, Y+13	; 0x0d
    13c8:	3e 85       	ldd	r19, Y+14	; 0x0e
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	2c f4       	brge	.+10     	; 0x13da <DIO_u8_Set_Pin_Direction+0x64>
    13d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	71 f0       	breq	.+28     	; 0x13f4 <DIO_u8_Set_Pin_Direction+0x7e>
    13d8:	f7 c0       	rjmp	.+494    	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>
    13da:	2d 85       	ldd	r18, Y+13	; 0x0d
    13dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <DIO_u8_Set_Pin_Direction+0x70>
    13e4:	7b c0       	rjmp	.+246    	; 0x14dc <DIO_u8_Set_Pin_Direction+0x166>
    13e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <DIO_u8_Set_Pin_Direction+0x7c>
    13f0:	af c0       	rjmp	.+350    	; 0x1550 <DIO_u8_Set_Pin_Direction+0x1da>
    13f2:	ea c0       	rjmp	.+468    	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>
        {
               case DIO_u8_PORTA:
            	   switch (Copy_u8_Pin_Direction)
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	3c 87       	std	Y+12, r19	; 0x0c
    13fc:	2b 87       	std	Y+11, r18	; 0x0b
    13fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1400:	9c 85       	ldd	r25, Y+12	; 0x0c
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	c9 f0       	breq	.+50     	; 0x1438 <DIO_u8_Set_Pin_Direction+0xc2>
    1406:	2b 85       	ldd	r18, Y+11	; 0x0b
    1408:	3c 85       	ldd	r19, Y+12	; 0x0c
    140a:	21 30       	cpi	r18, 0x01	; 1
    140c:	31 05       	cpc	r19, r1
    140e:	49 f5       	brne	.+82     	; 0x1462 <DIO_u8_Set_Pin_Direction+0xec>
            	   {
                    	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
    1410:	aa e3       	ldi	r26, 0x3A	; 58
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ea e3       	ldi	r30, 0x3A	; 58
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_u8_Set_Pin_Direction+0xb8>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_u8_Set_Pin_Direction+0xb4>
    1432:	84 2b       	or	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	c8 c0       	rjmp	.+400    	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>
                    	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
    1438:	aa e3       	ldi	r26, 0x3A	; 58
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ea e3       	ldi	r30, 0x3A	; 58
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_u8_Set_Pin_Direction+0xe0>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_u8_Set_Pin_Direction+0xdc>
    145a:	80 95       	com	r24
    145c:	84 23       	and	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	b3 c0       	rjmp	.+358    	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	b0 c0       	rjmp	.+352    	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>

            	   }
                  break;
               case DIO_u8_PORTB:
             	   switch (Copy_u8_Pin_Direction)
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	3a 87       	std	Y+10, r19	; 0x0a
    1470:	29 87       	std	Y+9, r18	; 0x09
    1472:	89 85       	ldd	r24, Y+9	; 0x09
    1474:	9a 85       	ldd	r25, Y+10	; 0x0a
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	c9 f0       	breq	.+50     	; 0x14ac <DIO_u8_Set_Pin_Direction+0x136>
    147a:	29 85       	ldd	r18, Y+9	; 0x09
    147c:	3a 85       	ldd	r19, Y+10	; 0x0a
    147e:	21 30       	cpi	r18, 0x01	; 1
    1480:	31 05       	cpc	r19, r1
    1482:	49 f5       	brne	.+82     	; 0x14d6 <DIO_u8_Set_Pin_Direction+0x160>
             	   {
                     	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    1484:	a7 e3       	ldi	r26, 0x37	; 55
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e7 e3       	ldi	r30, 0x37	; 55
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_u8_Set_Pin_Direction+0x12c>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_u8_Set_Pin_Direction+0x128>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	8e c0       	rjmp	.+284    	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>
                     	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    14ac:	a7 e3       	ldi	r26, 0x37	; 55
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e7 e3       	ldi	r30, 0x37	; 55
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <DIO_u8_Set_Pin_Direction+0x154>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <DIO_u8_Set_Pin_Direction+0x150>
    14ce:	80 95       	com	r24
    14d0:	84 23       	and	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	79 c0       	rjmp	.+242    	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	76 c0       	rjmp	.+236    	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>

             	   }
                   break;
               case DIO_u8_PORTC:
                   switch (Copy_u8_Pin_Direction)
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	38 87       	std	Y+8, r19	; 0x08
    14e4:	2f 83       	std	Y+7, r18	; 0x07
    14e6:	8f 81       	ldd	r24, Y+7	; 0x07
    14e8:	98 85       	ldd	r25, Y+8	; 0x08
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	c9 f0       	breq	.+50     	; 0x1520 <DIO_u8_Set_Pin_Direction+0x1aa>
    14ee:	2f 81       	ldd	r18, Y+7	; 0x07
    14f0:	38 85       	ldd	r19, Y+8	; 0x08
    14f2:	21 30       	cpi	r18, 0x01	; 1
    14f4:	31 05       	cpc	r19, r1
    14f6:	49 f5       	brne	.+82     	; 0x154a <DIO_u8_Set_Pin_Direction+0x1d4>
                 	   {
                         	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    14f8:	a4 e3       	ldi	r26, 0x34	; 52
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e4 e3       	ldi	r30, 0x34	; 52
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <DIO_u8_Set_Pin_Direction+0x1a0>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <DIO_u8_Set_Pin_Direction+0x19c>
    151a:	84 2b       	or	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	54 c0       	rjmp	.+168    	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>
                         	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    1520:	a4 e3       	ldi	r26, 0x34	; 52
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e4 e3       	ldi	r30, 0x34	; 52
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_u8_Set_Pin_Direction+0x1c8>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_u8_Set_Pin_Direction+0x1c4>
    1542:	80 95       	com	r24
    1544:	84 23       	and	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	3f c0       	rjmp	.+126    	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>
  			           	     default :Local_u8_Erorr_State = ES_NOK ;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	3c c0       	rjmp	.+120    	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>

                 	   }
                       break;

               case DIO_u8_PORTD:
                    switch (Copy_u8_Pin_Direction)
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	3e 83       	std	Y+6, r19	; 0x06
    1558:	2d 83       	std	Y+5, r18	; 0x05
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	9e 81       	ldd	r25, Y+6	; 0x06
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	c9 f0       	breq	.+50     	; 0x1594 <DIO_u8_Set_Pin_Direction+0x21e>
    1562:	2d 81       	ldd	r18, Y+5	; 0x05
    1564:	3e 81       	ldd	r19, Y+6	; 0x06
    1566:	21 30       	cpi	r18, 0x01	; 1
    1568:	31 05       	cpc	r19, r1
    156a:	49 f5       	brne	.+82     	; 0x15be <DIO_u8_Set_Pin_Direction+0x248>
                     	   {
                             	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    156c:	a1 e3       	ldi	r26, 0x31	; 49
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e1 e3       	ldi	r30, 0x31	; 49
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <DIO_u8_Set_Pin_Direction+0x214>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <DIO_u8_Set_Pin_Direction+0x210>
    158e:	84 2b       	or	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	1a c0       	rjmp	.+52     	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>
                             	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    1594:	a1 e3       	ldi	r26, 0x31	; 49
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e1 e3       	ldi	r30, 0x31	; 49
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 2e       	mov	r0, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <DIO_u8_Set_Pin_Direction+0x23c>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	0a 94       	dec	r0
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <DIO_u8_Set_Pin_Direction+0x238>
    15b6:	80 95       	com	r24
    15b8:	84 23       	and	r24, r20
    15ba:	8c 93       	st	X, r24
    15bc:	05 c0       	rjmp	.+10     	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>
      			           	     default :Local_u8_Erorr_State = ES_NOK ;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_u8_Set_Pin_Direction+0x252>
                     	   }
                           break;
        }
	}
	else {
		Local_u8_Erorr_State = ES_NOK ;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_Erorr_State ;
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ca:	2e 96       	adiw	r28, 0x0e	; 14
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <DIO_u8_Set_Pin_Value>:

u8 DIO_u8_Set_Pin_Value  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Value ){
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	2e 97       	sbiw	r28, 0x0e	; 14
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	8a 83       	std	Y+2, r24	; 0x02
    15f2:	6b 83       	std	Y+3, r22	; 0x03
    15f4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
    15f6:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Value == DIO_u8_INPUT)||(Copy_u8_Pin_Value == DIO_u8_OUTPUT)))
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	84 30       	cpi	r24, 0x04	; 4
    15fc:	08 f0       	brcs	.+2      	; 0x1600 <DIO_u8_Set_Pin_Value+0x24>
    15fe:	15 c1       	rjmp	.+554    	; 0x182a <DIO_u8_Set_Pin_Value+0x24e>
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	88 30       	cpi	r24, 0x08	; 8
    1604:	08 f0       	brcs	.+2      	; 0x1608 <DIO_u8_Set_Pin_Value+0x2c>
    1606:	11 c1       	rjmp	.+546    	; 0x182a <DIO_u8_Set_Pin_Value+0x24e>
    1608:	8c 81       	ldd	r24, Y+4	; 0x04
    160a:	88 23       	and	r24, r24
    160c:	21 f0       	breq	.+8      	; 0x1616 <DIO_u8_Set_Pin_Value+0x3a>
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	09 f0       	breq	.+2      	; 0x1616 <DIO_u8_Set_Pin_Value+0x3a>
    1614:	0a c1       	rjmp	.+532    	; 0x182a <DIO_u8_Set_Pin_Value+0x24e>
	{
		switch (Copy_u8_Port_ID)
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	3e 87       	std	Y+14, r19	; 0x0e
    161e:	2d 87       	std	Y+13, r18	; 0x0d
    1620:	8d 85       	ldd	r24, Y+13	; 0x0d
    1622:	9e 85       	ldd	r25, Y+14	; 0x0e
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	91 05       	cpc	r25, r1
    1628:	09 f4       	brne	.+2      	; 0x162c <DIO_u8_Set_Pin_Value+0x50>
    162a:	51 c0       	rjmp	.+162    	; 0x16ce <DIO_u8_Set_Pin_Value+0xf2>
    162c:	2d 85       	ldd	r18, Y+13	; 0x0d
    162e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1630:	22 30       	cpi	r18, 0x02	; 2
    1632:	31 05       	cpc	r19, r1
    1634:	2c f4       	brge	.+10     	; 0x1640 <DIO_u8_Set_Pin_Value+0x64>
    1636:	8d 85       	ldd	r24, Y+13	; 0x0d
    1638:	9e 85       	ldd	r25, Y+14	; 0x0e
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	71 f0       	breq	.+28     	; 0x165a <DIO_u8_Set_Pin_Value+0x7e>
    163e:	f7 c0       	rjmp	.+494    	; 0x182e <DIO_u8_Set_Pin_Value+0x252>
    1640:	2d 85       	ldd	r18, Y+13	; 0x0d
    1642:	3e 85       	ldd	r19, Y+14	; 0x0e
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	31 05       	cpc	r19, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <DIO_u8_Set_Pin_Value+0x70>
    164a:	7b c0       	rjmp	.+246    	; 0x1742 <DIO_u8_Set_Pin_Value+0x166>
    164c:	8d 85       	ldd	r24, Y+13	; 0x0d
    164e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	91 05       	cpc	r25, r1
    1654:	09 f4       	brne	.+2      	; 0x1658 <DIO_u8_Set_Pin_Value+0x7c>
    1656:	af c0       	rjmp	.+350    	; 0x17b6 <DIO_u8_Set_Pin_Value+0x1da>
    1658:	ea c0       	rjmp	.+468    	; 0x182e <DIO_u8_Set_Pin_Value+0x252>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Pin_Value)
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	3c 87       	std	Y+12, r19	; 0x0c
    1662:	2b 87       	std	Y+11, r18	; 0x0b
    1664:	8b 85       	ldd	r24, Y+11	; 0x0b
    1666:	9c 85       	ldd	r25, Y+12	; 0x0c
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	c9 f0       	breq	.+50     	; 0x169e <DIO_u8_Set_Pin_Value+0xc2>
    166c:	2b 85       	ldd	r18, Y+11	; 0x0b
    166e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1670:	21 30       	cpi	r18, 0x01	; 1
    1672:	31 05       	cpc	r19, r1
    1674:	49 f5       	brne	.+82     	; 0x16c8 <DIO_u8_Set_Pin_Value+0xec>
			{
			     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    1676:	ab e3       	ldi	r26, 0x3B	; 59
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	eb e3       	ldi	r30, 0x3B	; 59
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_u8_Set_Pin_Value+0xb8>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <DIO_u8_Set_Pin_Value+0xb4>
    1698:	84 2b       	or	r24, r20
    169a:	8c 93       	st	X, r24
    169c:	c8 c0       	rjmp	.+400    	; 0x182e <DIO_u8_Set_Pin_Value+0x252>
           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    169e:	ab e3       	ldi	r26, 0x3B	; 59
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	eb e3       	ldi	r30, 0x3B	; 59
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_u8_Set_Pin_Value+0xe0>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <DIO_u8_Set_Pin_Value+0xdc>
    16c0:	80 95       	com	r24
    16c2:	84 23       	and	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	b3 c0       	rjmp	.+358    	; 0x182e <DIO_u8_Set_Pin_Value+0x252>
           	     default :Local_u8_Erorr_State = ES_NOK ;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	b0 c0       	rjmp	.+352    	; 0x182e <DIO_u8_Set_Pin_Value+0x252>

			}
			break;
		case DIO_u8_PORTB :
			switch (Copy_u8_Pin_Value)
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	3a 87       	std	Y+10, r19	; 0x0a
    16d6:	29 87       	std	Y+9, r18	; 0x09
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	c9 f0       	breq	.+50     	; 0x1712 <DIO_u8_Set_Pin_Value+0x136>
    16e0:	29 85       	ldd	r18, Y+9	; 0x09
    16e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    16e4:	21 30       	cpi	r18, 0x01	; 1
    16e6:	31 05       	cpc	r19, r1
    16e8:	49 f5       	brne	.+82     	; 0x173c <DIO_u8_Set_Pin_Value+0x160>
				{
				     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    16ea:	a8 e3       	ldi	r26, 0x38	; 56
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e8 e3       	ldi	r30, 0x38	; 56
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_u8_Set_Pin_Value+0x12c>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <DIO_u8_Set_Pin_Value+0x128>
    170c:	84 2b       	or	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	8e c0       	rjmp	.+284    	; 0x182e <DIO_u8_Set_Pin_Value+0x252>
	           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    1712:	a8 e3       	ldi	r26, 0x38	; 56
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e8 e3       	ldi	r30, 0x38	; 56
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_u8_Set_Pin_Value+0x154>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_u8_Set_Pin_Value+0x150>
    1734:	80 95       	com	r24
    1736:	84 23       	and	r24, r20
    1738:	8c 93       	st	X, r24
    173a:	79 c0       	rjmp	.+242    	; 0x182e <DIO_u8_Set_Pin_Value+0x252>
	           	     default :Local_u8_Erorr_State = ES_NOK ;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	76 c0       	rjmp	.+236    	; 0x182e <DIO_u8_Set_Pin_Value+0x252>

				}
	     	break;
		case DIO_u8_PORTC :
			switch (Copy_u8_Pin_Value)
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	38 87       	std	Y+8, r19	; 0x08
    174a:	2f 83       	std	Y+7, r18	; 0x07
    174c:	8f 81       	ldd	r24, Y+7	; 0x07
    174e:	98 85       	ldd	r25, Y+8	; 0x08
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	c9 f0       	breq	.+50     	; 0x1786 <DIO_u8_Set_Pin_Value+0x1aa>
    1754:	2f 81       	ldd	r18, Y+7	; 0x07
    1756:	38 85       	ldd	r19, Y+8	; 0x08
    1758:	21 30       	cpi	r18, 0x01	; 1
    175a:	31 05       	cpc	r19, r1
    175c:	49 f5       	brne	.+82     	; 0x17b0 <DIO_u8_Set_Pin_Value+0x1d4>
					{
					     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    175e:	a5 e3       	ldi	r26, 0x35	; 53
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e5 e3       	ldi	r30, 0x35	; 53
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 2e       	mov	r0, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_u8_Set_Pin_Value+0x1a0>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_u8_Set_Pin_Value+0x19c>
    1780:	84 2b       	or	r24, r20
    1782:	8c 93       	st	X, r24
    1784:	54 c0       	rjmp	.+168    	; 0x182e <DIO_u8_Set_Pin_Value+0x252>
		           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    1786:	a5 e3       	ldi	r26, 0x35	; 53
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e5 e3       	ldi	r30, 0x35	; 53
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	48 2f       	mov	r20, r24
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	02 2e       	mov	r0, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <DIO_u8_Set_Pin_Value+0x1c8>
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	0a 94       	dec	r0
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <DIO_u8_Set_Pin_Value+0x1c4>
    17a8:	80 95       	com	r24
    17aa:	84 23       	and	r24, r20
    17ac:	8c 93       	st	X, r24
    17ae:	3f c0       	rjmp	.+126    	; 0x182e <DIO_u8_Set_Pin_Value+0x252>
		           	     default :Local_u8_Erorr_State = ES_NOK ;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	3c c0       	rjmp	.+120    	; 0x182e <DIO_u8_Set_Pin_Value+0x252>

					}
		   break;
		case DIO_u8_PORTD :
			switch (Copy_u8_Pin_Value)
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3e 83       	std	Y+6, r19	; 0x06
    17be:	2d 83       	std	Y+5, r18	; 0x05
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	c9 f0       	breq	.+50     	; 0x17fa <DIO_u8_Set_Pin_Value+0x21e>
    17c8:	2d 81       	ldd	r18, Y+5	; 0x05
    17ca:	3e 81       	ldd	r19, Y+6	; 0x06
    17cc:	21 30       	cpi	r18, 0x01	; 1
    17ce:	31 05       	cpc	r19, r1
    17d0:	49 f5       	brne	.+82     	; 0x1824 <DIO_u8_Set_Pin_Value+0x248>
						{
						     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    17d2:	a2 e3       	ldi	r26, 0x32	; 50
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e2 e3       	ldi	r30, 0x32	; 50
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_u8_Set_Pin_Value+0x214>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_u8_Set_Pin_Value+0x210>
    17f4:	84 2b       	or	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	1a c0       	rjmp	.+52     	; 0x182e <DIO_u8_Set_Pin_Value+0x252>
			           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    17fa:	a2 e3       	ldi	r26, 0x32	; 50
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e2 e3       	ldi	r30, 0x32	; 50
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_u8_Set_Pin_Value+0x23c>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <DIO_u8_Set_Pin_Value+0x238>
    181c:	80 95       	com	r24
    181e:	84 23       	and	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	05 c0       	rjmp	.+10     	; 0x182e <DIO_u8_Set_Pin_Value+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	02 c0       	rjmp	.+4      	; 0x182e <DIO_u8_Set_Pin_Value+0x252>
						}
			break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8_Erorr_State ;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1830:	2e 96       	adiw	r28, 0x0e	; 14
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <DIO_u8_Get_Pin_Value>:

u8 DIO_u8_Get_Pin_Value      (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 *Copy_u8_Returned_Pin_Value ){
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	28 97       	sbiw	r28, 0x08	; 8
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	8b 83       	std	Y+3, r24	; 0x03
    1858:	6c 83       	std	Y+4, r22	; 0x04
    185a:	5e 83       	std	Y+6, r21	; 0x06
    185c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8_Erorr_State = ES_OK ;
    185e:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Pin_Value ;
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && (Copy_u8_Returned_Pin_Value != NULL)){
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	84 30       	cpi	r24, 0x04	; 4
    1864:	08 f0       	brcs	.+2      	; 0x1868 <DIO_u8_Get_Pin_Value+0x26>
    1866:	9e c0       	rjmp	.+316    	; 0x19a4 <DIO_u8_Get_Pin_Value+0x162>
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	88 30       	cpi	r24, 0x08	; 8
    186c:	08 f0       	brcs	.+2      	; 0x1870 <DIO_u8_Get_Pin_Value+0x2e>
    186e:	9a c0       	rjmp	.+308    	; 0x19a4 <DIO_u8_Get_Pin_Value+0x162>
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	9e 81       	ldd	r25, Y+6	; 0x06
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	09 f4       	brne	.+2      	; 0x187a <DIO_u8_Get_Pin_Value+0x38>
    1878:	95 c0       	rjmp	.+298    	; 0x19a4 <DIO_u8_Get_Pin_Value+0x162>
		switch (Copy_u8_Port_ID)
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	38 87       	std	Y+8, r19	; 0x08
    1882:	2f 83       	std	Y+7, r18	; 0x07
    1884:	8f 81       	ldd	r24, Y+7	; 0x07
    1886:	98 85       	ldd	r25, Y+8	; 0x08
    1888:	81 30       	cpi	r24, 0x01	; 1
    188a:	91 05       	cpc	r25, r1
    188c:	a1 f1       	breq	.+104    	; 0x18f6 <DIO_u8_Get_Pin_Value+0xb4>
    188e:	2f 81       	ldd	r18, Y+7	; 0x07
    1890:	38 85       	ldd	r19, Y+8	; 0x08
    1892:	22 30       	cpi	r18, 0x02	; 2
    1894:	31 05       	cpc	r19, r1
    1896:	2c f4       	brge	.+10     	; 0x18a2 <DIO_u8_Get_Pin_Value+0x60>
    1898:	8f 81       	ldd	r24, Y+7	; 0x07
    189a:	98 85       	ldd	r25, Y+8	; 0x08
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	71 f0       	breq	.+28     	; 0x18bc <DIO_u8_Get_Pin_Value+0x7a>
    18a0:	83 c0       	rjmp	.+262    	; 0x19a8 <DIO_u8_Get_Pin_Value+0x166>
    18a2:	2f 81       	ldd	r18, Y+7	; 0x07
    18a4:	38 85       	ldd	r19, Y+8	; 0x08
    18a6:	22 30       	cpi	r18, 0x02	; 2
    18a8:	31 05       	cpc	r19, r1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <DIO_u8_Get_Pin_Value+0x6c>
    18ac:	41 c0       	rjmp	.+130    	; 0x1930 <DIO_u8_Get_Pin_Value+0xee>
    18ae:	8f 81       	ldd	r24, Y+7	; 0x07
    18b0:	98 85       	ldd	r25, Y+8	; 0x08
    18b2:	83 30       	cpi	r24, 0x03	; 3
    18b4:	91 05       	cpc	r25, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <DIO_u8_Get_Pin_Value+0x78>
    18b8:	58 c0       	rjmp	.+176    	; 0x196a <DIO_u8_Get_Pin_Value+0x128>
    18ba:	76 c0       	rjmp	.+236    	; 0x19a8 <DIO_u8_Get_Pin_Value+0x166>
		{
		     case DIO_u8_PORTA :
		      Local_u8_Pin_Value = GET_BIT (DIO_u8_PINA_REG, Copy_u8_Pin_ID) ;
    18bc:	e9 e3       	ldi	r30, 0x39	; 57
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	48 2f       	mov	r20, r24
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	02 2e       	mov	r0, r18
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <DIO_u8_Get_Pin_Value+0x94>
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	0a 94       	dec	r0
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <DIO_u8_Get_Pin_Value+0x90>
    18da:	84 23       	and	r24, r20
    18dc:	89 83       	std	Y+1, r24	; 0x01

		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	88 23       	and	r24, r24
    18e2:	21 f4       	brne	.+8      	; 0x18ec <DIO_u8_Get_Pin_Value+0xaa>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    18e4:	ed 81       	ldd	r30, Y+5	; 0x05
    18e6:	fe 81       	ldd	r31, Y+6	; 0x06
    18e8:	10 82       	st	Z, r1
    18ea:	5e c0       	rjmp	.+188    	; 0x19a8 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		    	 else
		    	 {
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    18ec:	ed 81       	ldd	r30, Y+5	; 0x05
    18ee:	fe 81       	ldd	r31, Y+6	; 0x06
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	80 83       	st	Z, r24
    18f4:	59 c0       	rjmp	.+178    	; 0x19a8 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		     break;
		     case DIO_u8_PORTB :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINB_REG,Copy_u8_Pin_ID ) ;
    18f6:	e6 e3       	ldi	r30, 0x36	; 54
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_u8_Get_Pin_Value+0xce>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <DIO_u8_Get_Pin_Value+0xca>
    1914:	84 23       	and	r24, r20
    1916:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	88 23       	and	r24, r24
    191c:	21 f4       	brne	.+8      	; 0x1926 <DIO_u8_Get_Pin_Value+0xe4>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    191e:	ed 81       	ldd	r30, Y+5	; 0x05
    1920:	fe 81       	ldd	r31, Y+6	; 0x06
    1922:	10 82       	st	Z, r1
    1924:	41 c0       	rjmp	.+130    	; 0x19a8 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1926:	ed 81       	ldd	r30, Y+5	; 0x05
    1928:	fe 81       	ldd	r31, Y+6	; 0x06
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	80 83       	st	Z, r24
    192e:	3c c0       	rjmp	.+120    	; 0x19a8 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTC :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINC_REG,Copy_u8_Pin_ID ) ;
    1930:	e3 e3       	ldi	r30, 0x33	; 51
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	48 2f       	mov	r20, r24
    1938:	8c 81       	ldd	r24, Y+4	; 0x04
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 2e       	mov	r0, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <DIO_u8_Get_Pin_Value+0x108>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <DIO_u8_Get_Pin_Value+0x104>
    194e:	84 23       	and	r24, r20
    1950:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	88 23       	and	r24, r24
    1956:	21 f4       	brne	.+8      	; 0x1960 <DIO_u8_Get_Pin_Value+0x11e>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    1958:	ed 81       	ldd	r30, Y+5	; 0x05
    195a:	fe 81       	ldd	r31, Y+6	; 0x06
    195c:	10 82       	st	Z, r1
    195e:	24 c0       	rjmp	.+72     	; 0x19a8 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1960:	ed 81       	ldd	r30, Y+5	; 0x05
    1962:	fe 81       	ldd	r31, Y+6	; 0x06
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	80 83       	st	Z, r24
    1968:	1f c0       	rjmp	.+62     	; 0x19a8 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTD :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PIND_REG,Copy_u8_Pin_ID ) ;
    196a:	e0 e3       	ldi	r30, 0x30	; 48
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_u8_Get_Pin_Value+0x142>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_u8_Get_Pin_Value+0x13e>
    1988:	84 23       	and	r24, r20
    198a:	89 83       	std	Y+1, r24	; 0x01
		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	88 23       	and	r24, r24
    1990:	21 f4       	brne	.+8      	; 0x199a <DIO_u8_Get_Pin_Value+0x158>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    1992:	ed 81       	ldd	r30, Y+5	; 0x05
    1994:	fe 81       	ldd	r31, Y+6	; 0x06
    1996:	10 82       	st	Z, r1
    1998:	07 c0       	rjmp	.+14     	; 0x19a8 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    199a:	ed 81       	ldd	r30, Y+5	; 0x05
    199c:	fe 81       	ldd	r31, Y+6	; 0x06
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	80 83       	st	Z, r24
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	8a 83       	std	Y+2, r24	; 0x02
		}
		return Local_u8_Erorr_State ;
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    19aa:	28 96       	adiw	r28, 0x08	; 8
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <DIO_u8_Set_Port_Direction>:

u8 DIO_u8_Set_Port_Direction (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Direction ){
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	2d 97       	sbiw	r28, 0x0d	; 13
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	8a 83       	std	Y+2, r24	; 0x02
    19d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    19d4:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && ((Copy_u8_Port_Direction == DIO_u8_INPUT)||(Copy_u8_Port_Direction == DIO_u8_OUTPUT)))
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	84 30       	cpi	r24, 0x04	; 4
    19da:	08 f0       	brcs	.+2      	; 0x19de <DIO_u8_Set_Port_Direction+0x22>
    19dc:	87 c0       	rjmp	.+270    	; 0x1aec <DIO_u8_Set_Port_Direction+0x130>
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	88 23       	and	r24, r24
    19e2:	21 f0       	breq	.+8      	; 0x19ec <DIO_u8_Set_Port_Direction+0x30>
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	09 f0       	breq	.+2      	; 0x19ec <DIO_u8_Set_Port_Direction+0x30>
    19ea:	80 c0       	rjmp	.+256    	; 0x1aec <DIO_u8_Set_Port_Direction+0x130>
	{
		switch (Copy_u8_Port_ID)
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	3d 87       	std	Y+13, r19	; 0x0d
    19f4:	2c 87       	std	Y+12, r18	; 0x0c
    19f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    19f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	91 05       	cpc	r25, r1
    19fe:	71 f1       	breq	.+92     	; 0x1a5c <DIO_u8_Set_Port_Direction+0xa0>
    1a00:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a02:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a04:	22 30       	cpi	r18, 0x02	; 2
    1a06:	31 05       	cpc	r19, r1
    1a08:	2c f4       	brge	.+10     	; 0x1a14 <DIO_u8_Set_Port_Direction+0x58>
    1a0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	69 f0       	breq	.+26     	; 0x1a2c <DIO_u8_Set_Port_Direction+0x70>
    1a12:	69 c0       	rjmp	.+210    	; 0x1ae6 <DIO_u8_Set_Port_Direction+0x12a>
    1a14:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a16:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a18:	22 30       	cpi	r18, 0x02	; 2
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	b1 f1       	breq	.+108    	; 0x1a8a <DIO_u8_Set_Port_Direction+0xce>
    1a1e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a20:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a22:	83 30       	cpi	r24, 0x03	; 3
    1a24:	91 05       	cpc	r25, r1
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <DIO_u8_Set_Port_Direction+0x6e>
    1a28:	47 c0       	rjmp	.+142    	; 0x1ab8 <DIO_u8_Set_Port_Direction+0xfc>
    1a2a:	5d c0       	rjmp	.+186    	; 0x1ae6 <DIO_u8_Set_Port_Direction+0x12a>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Port_Direction)
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	3b 87       	std	Y+11, r19	; 0x0b
    1a34:	2a 87       	std	Y+10, r18	; 0x0a
    1a36:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a38:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	59 f0       	breq	.+22     	; 0x1a54 <DIO_u8_Set_Port_Direction+0x98>
    1a3e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a40:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a42:	21 30       	cpi	r18, 0x01	; 1
    1a44:	31 05       	cpc	r19, r1
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <DIO_u8_Set_Port_Direction+0x8e>
    1a48:	53 c0       	rjmp	.+166    	; 0x1af0 <DIO_u8_Set_Port_Direction+0x134>
			{
			    case DIO_u8_OUTPUT : DIO_u8_PORTA_REG = 0xff;break;
    1a4a:	eb e3       	ldi	r30, 0x3B	; 59
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	8f ef       	ldi	r24, 0xFF	; 255
    1a50:	80 83       	st	Z, r24
    1a52:	4e c0       	rjmp	.+156    	; 0x1af0 <DIO_u8_Set_Port_Direction+0x134>
			    case DIO_u8_INPUT : DIO_u8_PORTA_REG = 0x00;break;
    1a54:	eb e3       	ldi	r30, 0x3B	; 59
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	10 82       	st	Z, r1
    1a5a:	4a c0       	rjmp	.+148    	; 0x1af0 <DIO_u8_Set_Port_Direction+0x134>
			}
			break;
			case DIO_u8_PORTB :
				switch (Copy_u8_Port_Direction)
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	39 87       	std	Y+9, r19	; 0x09
    1a64:	28 87       	std	Y+8, r18	; 0x08
    1a66:	88 85       	ldd	r24, Y+8	; 0x08
    1a68:	99 85       	ldd	r25, Y+9	; 0x09
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	51 f0       	breq	.+20     	; 0x1a82 <DIO_u8_Set_Port_Direction+0xc6>
    1a6e:	28 85       	ldd	r18, Y+8	; 0x08
    1a70:	39 85       	ldd	r19, Y+9	; 0x09
    1a72:	21 30       	cpi	r18, 0x01	; 1
    1a74:	31 05       	cpc	r19, r1
    1a76:	e1 f5       	brne	.+120    	; 0x1af0 <DIO_u8_Set_Port_Direction+0x134>
				{
				    case DIO_u8_OUTPUT : DIO_u8_PORTB_REG = 0xff;break;
    1a78:	e8 e3       	ldi	r30, 0x38	; 56
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
    1a7e:	80 83       	st	Z, r24
    1a80:	37 c0       	rjmp	.+110    	; 0x1af0 <DIO_u8_Set_Port_Direction+0x134>
				    case DIO_u8_INPUT : DIO_u8_PORTB_REG = 0x00;break;
    1a82:	e8 e3       	ldi	r30, 0x38	; 56
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	10 82       	st	Z, r1
    1a88:	33 c0       	rjmp	.+102    	; 0x1af0 <DIO_u8_Set_Port_Direction+0x134>
				}
				break;
				case DIO_u8_PORTC :
					switch (Copy_u8_Port_Direction)
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	3f 83       	std	Y+7, r19	; 0x07
    1a92:	2e 83       	std	Y+6, r18	; 0x06
    1a94:	8e 81       	ldd	r24, Y+6	; 0x06
    1a96:	9f 81       	ldd	r25, Y+7	; 0x07
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	51 f0       	breq	.+20     	; 0x1ab0 <DIO_u8_Set_Port_Direction+0xf4>
    1a9c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a9e:	3f 81       	ldd	r19, Y+7	; 0x07
    1aa0:	21 30       	cpi	r18, 0x01	; 1
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	29 f5       	brne	.+74     	; 0x1af0 <DIO_u8_Set_Port_Direction+0x134>
					{
					    case DIO_u8_OUTPUT : DIO_u8_PORTC_REG = 0xff;break;
    1aa6:	e5 e3       	ldi	r30, 0x35	; 53
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	80 83       	st	Z, r24
    1aae:	20 c0       	rjmp	.+64     	; 0x1af0 <DIO_u8_Set_Port_Direction+0x134>
					    case DIO_u8_INPUT : DIO_u8_PORTC_REG = 0x00;break;
    1ab0:	e5 e3       	ldi	r30, 0x35	; 53
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	10 82       	st	Z, r1
    1ab6:	1c c0       	rjmp	.+56     	; 0x1af0 <DIO_u8_Set_Port_Direction+0x134>
					}
					break;
					case DIO_u8_PORTD :
						switch (Copy_u8_Port_Direction)
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	3d 83       	std	Y+5, r19	; 0x05
    1ac0:	2c 83       	std	Y+4, r18	; 0x04
    1ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	51 f0       	breq	.+20     	; 0x1ade <DIO_u8_Set_Port_Direction+0x122>
    1aca:	2c 81       	ldd	r18, Y+4	; 0x04
    1acc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ace:	21 30       	cpi	r18, 0x01	; 1
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	71 f4       	brne	.+28     	; 0x1af0 <DIO_u8_Set_Port_Direction+0x134>
						{
						    case DIO_u8_OUTPUT : DIO_u8_PORTD_REG = 0xff;break;
    1ad4:	e2 e3       	ldi	r30, 0x32	; 50
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	8f ef       	ldi	r24, 0xFF	; 255
    1ada:	80 83       	st	Z, r24
    1adc:	09 c0       	rjmp	.+18     	; 0x1af0 <DIO_u8_Set_Port_Direction+0x134>
						    case DIO_u8_INPUT : DIO_u8_PORTD_REG = 0x00;break;
    1ade:	e2 e3       	ldi	r30, 0x32	; 50
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	10 82       	st	Z, r1
    1ae4:	05 c0       	rjmp	.+10     	; 0x1af0 <DIO_u8_Set_Port_Direction+0x134>
						}
						break;
						default:Local_u8_Erorr_State = ES_NOK ;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_u8_Set_Port_Direction+0x134>

		}
	}
	else {
				Local_u8_Erorr_State = ES_NOK ;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    1af0:	89 81       	ldd	r24, Y+1	; 0x01

}
    1af2:	2d 96       	adiw	r28, 0x0d	; 13
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <DIO_u8_Set_Port_Value>:

u8 DIO_u8_Set_Port_Value     (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Value ){
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <DIO_u8_Set_Port_Value+0x6>
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <DIO_u8_Set_Port_Value+0x8>
    1b0c:	0f 92       	push	r0
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	8a 83       	std	Y+2, r24	; 0x02
    1b14:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1b16:	19 82       	std	Y+1, r1	; 0x01

			switch (Copy_u8_Port_ID)
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3d 83       	std	Y+5, r19	; 0x05
    1b20:	2c 83       	std	Y+4, r18	; 0x04
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	91 05       	cpc	r25, r1
    1b2a:	d1 f0       	breq	.+52     	; 0x1b60 <DIO_u8_Set_Port_Value+0x5c>
    1b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b30:	22 30       	cpi	r18, 0x02	; 2
    1b32:	31 05       	cpc	r19, r1
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <DIO_u8_Set_Port_Value+0x3c>
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	61 f0       	breq	.+24     	; 0x1b56 <DIO_u8_Set_Port_Value+0x52>
    1b3e:	1f c0       	rjmp	.+62     	; 0x1b7e <DIO_u8_Set_Port_Value+0x7a>
    1b40:	2c 81       	ldd	r18, Y+4	; 0x04
    1b42:	3d 81       	ldd	r19, Y+5	; 0x05
    1b44:	22 30       	cpi	r18, 0x02	; 2
    1b46:	31 05       	cpc	r19, r1
    1b48:	81 f0       	breq	.+32     	; 0x1b6a <DIO_u8_Set_Port_Value+0x66>
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4e:	83 30       	cpi	r24, 0x03	; 3
    1b50:	91 05       	cpc	r25, r1
    1b52:	81 f0       	breq	.+32     	; 0x1b74 <DIO_u8_Set_Port_Value+0x70>
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <DIO_u8_Set_Port_Value+0x7a>
			{
			case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8_Port_Value; break;
    1b56:	eb e3       	ldi	r30, 0x3B	; 59
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	80 83       	st	Z, r24
    1b5e:	11 c0       	rjmp	.+34     	; 0x1b82 <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8_Port_Value; break;
    1b60:	e8 e3       	ldi	r30, 0x38	; 56
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	80 83       	st	Z, r24
    1b68:	0c c0       	rjmp	.+24     	; 0x1b82 <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8_Port_Value; break;
    1b6a:	e5 e3       	ldi	r30, 0x35	; 53
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	80 83       	st	Z, r24
    1b72:	07 c0       	rjmp	.+14     	; 0x1b82 <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8_Port_Value; break;
    1b74:	e2 e3       	ldi	r30, 0x32	; 50
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	80 83       	st	Z, r24
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <DIO_u8_Set_Port_Value+0x7e>
			default :Local_u8_Erorr_State = ES_NOK;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <DIO_u8_Get_Port_Value>:

u8 DIO_u8_Get_Port_Value     (u8 Copy_u8_Port_ID, u8 * Copy_u8_Returned_Port_Value ){
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <DIO_u8_Get_Port_Value+0x6>
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <DIO_u8_Get_Port_Value+0x8>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <DIO_u8_Get_Port_Value+0xa>
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	8a 83       	std	Y+2, r24	; 0x02
    1ba4:	7c 83       	std	Y+4, r23	; 0x04
    1ba6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1ba8:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8_Returned_Port_Value != NULL){
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <DIO_u8_Get_Port_Value+0x20>
    1bb2:	3e c0       	rjmp	.+124    	; 0x1c30 <DIO_u8_Get_Port_Value+0x9c>
		switch (Copy_u8_Port_ID)
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	3e 83       	std	Y+6, r19	; 0x06
    1bbc:	2d 83       	std	Y+5, r18	; 0x05
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	e1 f0       	breq	.+56     	; 0x1c00 <DIO_u8_Get_Port_Value+0x6c>
    1bc8:	2d 81       	ldd	r18, Y+5	; 0x05
    1bca:	3e 81       	ldd	r19, Y+6	; 0x06
    1bcc:	22 30       	cpi	r18, 0x02	; 2
    1bce:	31 05       	cpc	r19, r1
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <DIO_u8_Get_Port_Value+0x48>
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	61 f0       	breq	.+24     	; 0x1bf2 <DIO_u8_Get_Port_Value+0x5e>
    1bda:	27 c0       	rjmp	.+78     	; 0x1c2a <DIO_u8_Get_Port_Value+0x96>
    1bdc:	2d 81       	ldd	r18, Y+5	; 0x05
    1bde:	3e 81       	ldd	r19, Y+6	; 0x06
    1be0:	22 30       	cpi	r18, 0x02	; 2
    1be2:	31 05       	cpc	r19, r1
    1be4:	a1 f0       	breq	.+40     	; 0x1c0e <DIO_u8_Get_Port_Value+0x7a>
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bea:	83 30       	cpi	r24, 0x03	; 3
    1bec:	91 05       	cpc	r25, r1
    1bee:	b1 f0       	breq	.+44     	; 0x1c1c <DIO_u8_Get_Port_Value+0x88>
    1bf0:	1c c0       	rjmp	.+56     	; 0x1c2a <DIO_u8_Get_Port_Value+0x96>
		{
		case DIO_u8_PORTA :* Copy_u8_Returned_Port_Value =DIO_u8_PORTA_REG; break;
    1bf2:	eb e3       	ldi	r30, 0x3B	; 59
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1bfc:	80 83       	st	Z, r24
    1bfe:	1a c0       	rjmp	.+52     	; 0x1c34 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTB :* Copy_u8_Returned_Port_Value =DIO_u8_PORTB_REG; break;
    1c00:	e8 e3       	ldi	r30, 0x38	; 56
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	eb 81       	ldd	r30, Y+3	; 0x03
    1c08:	fc 81       	ldd	r31, Y+4	; 0x04
    1c0a:	80 83       	st	Z, r24
    1c0c:	13 c0       	rjmp	.+38     	; 0x1c34 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTC :* Copy_u8_Returned_Port_Value =DIO_u8_PORTC_REG; break;
    1c0e:	e5 e3       	ldi	r30, 0x35	; 53
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	eb 81       	ldd	r30, Y+3	; 0x03
    1c16:	fc 81       	ldd	r31, Y+4	; 0x04
    1c18:	80 83       	st	Z, r24
    1c1a:	0c c0       	rjmp	.+24     	; 0x1c34 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTD :* Copy_u8_Returned_Port_Value =DIO_u8_PORTD_REG; break;
    1c1c:	e2 e3       	ldi	r30, 0x32	; 50
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	eb 81       	ldd	r30, Y+3	; 0x03
    1c24:	fc 81       	ldd	r31, Y+4	; 0x04
    1c26:	80 83       	st	Z, r24
    1c28:	05 c0       	rjmp	.+10     	; 0x1c34 <DIO_u8_Get_Port_Value+0xa0>
		default :Local_u8_Erorr_State = ES_NOK;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <DIO_u8_Get_Port_Value+0xa0>
		}}
		else {
			Local_u8_Erorr_State = ES_NOK ;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8_Erorr_State ;
    1c34:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c36:	26 96       	adiw	r28, 0x06	; 6
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <LCD_enum_INIT>:
#include"LCD_private.h"

//#define F_CPU 8000000UL
#include<util/delay.h>

ES_t LCD_enum_INIT (void){
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	c2 54       	subi	r28, 0x42	; 66
    1c52:	d0 40       	sbci	r29, 0x00	; 0
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	fe 01       	movw	r30, r28
    1c60:	ff 96       	adiw	r30, 0x3f	; 63
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	ac e0       	ldi	r26, 0x0C	; 12
    1c68:	b2 e4       	ldi	r27, 0x42	; 66
    1c6a:	80 83       	st	Z, r24
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	a2 83       	std	Z+2, r26	; 0x02
    1c70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c72:	fe 01       	movw	r30, r28
    1c74:	ff 96       	adiw	r30, 0x3f	; 63
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a e7       	ldi	r20, 0x7A	; 122
    1c84:	53 e4       	ldi	r21, 0x43	; 67
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8b af       	std	Y+59, r24	; 0x3b
    1c90:	9c af       	std	Y+60, r25	; 0x3c
    1c92:	ad af       	std	Y+61, r26	; 0x3d
    1c94:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    1c96:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c98:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <LCD_enum_INIT+0x70>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9a af       	std	Y+58, r25	; 0x3a
    1cb4:	89 af       	std	Y+57, r24	; 0x39
    1cb6:	41 c0       	rjmp	.+130    	; 0x1d3a <LCD_enum_INIT+0xf2>
	else if (__tmp > 65535)
    1cb8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1cba:	7c ad       	ldd	r23, Y+60	; 0x3c
    1cbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cbe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	3f ef       	ldi	r19, 0xFF	; 255
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	5c f5       	brge	.+86     	; 0x1d26 <LCD_enum_INIT+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	ff 96       	adiw	r30, 0x3f	; 63
    1cd4:	60 81       	ld	r22, Z
    1cd6:	71 81       	ldd	r23, Z+1	; 0x01
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e2       	ldi	r20, 0x20	; 32
    1ce2:	51 e4       	ldi	r21, 0x41	; 65
    1ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	9a af       	std	Y+58, r25	; 0x3a
    1cfa:	89 af       	std	Y+57, r24	; 0x39
    1cfc:	0f c0       	rjmp	.+30     	; 0x1d1c <LCD_enum_INIT+0xd4>
    1cfe:	89 e1       	ldi	r24, 0x19	; 25
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	98 af       	std	Y+56, r25	; 0x38
    1d04:	8f ab       	std	Y+55, r24	; 0x37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d06:	8f a9       	ldd	r24, Y+55	; 0x37
    1d08:	98 ad       	ldd	r25, Y+56	; 0x38
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <LCD_enum_INIT+0xc2>
    1d0e:	98 af       	std	Y+56, r25	; 0x38
    1d10:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d12:	89 ad       	ldd	r24, Y+57	; 0x39
    1d14:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	9a af       	std	Y+58, r25	; 0x3a
    1d1a:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	69 f7       	brne	.-38     	; 0x1cfe <LCD_enum_INIT+0xb6>
    1d24:	14 c0       	rjmp	.+40     	; 0x1d4e <LCD_enum_INIT+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d26:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d28:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	9a af       	std	Y+58, r25	; 0x3a
    1d38:	89 af       	std	Y+57, r24	; 0x39
    1d3a:	89 ad       	ldd	r24, Y+57	; 0x39
    1d3c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d3e:	9e ab       	std	Y+54, r25	; 0x36
    1d40:	8d ab       	std	Y+53, r24	; 0x35
    1d42:	8d a9       	ldd	r24, Y+53	; 0x35
    1d44:	9e a9       	ldd	r25, Y+54	; 0x36
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <LCD_enum_INIT+0xfe>
    1d4a:	9e ab       	std	Y+54, r25	; 0x36
    1d4c:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(35);
//to set CMND
	LCD_enum_Send_Comnd(FUN_SET_8BIT_2LINES_5X7);
    1d4e:	88 e3       	ldi	r24, 0x38	; 56
    1d50:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_enum_Send_Comnd>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e2       	ldi	r26, 0x20	; 32
    1d5a:	b2 e4       	ldi	r27, 0x42	; 66
    1d5c:	89 ab       	std	Y+49, r24	; 0x31
    1d5e:	9a ab       	std	Y+50, r25	; 0x32
    1d60:	ab ab       	std	Y+51, r26	; 0x33
    1d62:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d64:	69 a9       	ldd	r22, Y+49	; 0x31
    1d66:	7a a9       	ldd	r23, Y+50	; 0x32
    1d68:	8b a9       	ldd	r24, Y+51	; 0x33
    1d6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d6c:	2b ea       	ldi	r18, 0xAB	; 171
    1d6e:	3a ea       	ldi	r19, 0xAA	; 170
    1d70:	4a ea       	ldi	r20, 0xAA	; 170
    1d72:	5e e3       	ldi	r21, 0x3E	; 62
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8d a7       	std	Y+45, r24	; 0x2d
    1d7e:	9e a7       	std	Y+46, r25	; 0x2e
    1d80:	af a7       	std	Y+47, r26	; 0x2f
    1d82:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1d84:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d86:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	1c f4       	brge	.+6      	; 0x1da2 <LCD_enum_INIT+0x15a>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	8c a7       	std	Y+44, r24	; 0x2c
    1da0:	91 c0       	rjmp	.+290    	; 0x1ec4 <LCD_enum_INIT+0x27c>
	else if (__tmp > 255)
    1da2:	6d a5       	ldd	r22, Y+45	; 0x2d
    1da4:	7e a5       	ldd	r23, Y+46	; 0x2e
    1da6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1da8:	98 a9       	ldd	r25, Y+48	; 0x30
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	4f e7       	ldi	r20, 0x7F	; 127
    1db0:	53 e4       	ldi	r21, 0x43	; 67
    1db2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db6:	18 16       	cp	r1, r24
    1db8:	0c f0       	brlt	.+2      	; 0x1dbc <LCD_enum_INIT+0x174>
    1dba:	7b c0       	rjmp	.+246    	; 0x1eb2 <LCD_enum_INIT+0x26a>
	{
		_delay_ms(__us / 1000.0);
    1dbc:	69 a9       	ldd	r22, Y+49	; 0x31
    1dbe:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc0:	8b a9       	ldd	r24, Y+51	; 0x33
    1dc2:	9c a9       	ldd	r25, Y+52	; 0x34
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a e7       	ldi	r20, 0x7A	; 122
    1dca:	54 e4       	ldi	r21, 0x44	; 68
    1dcc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	88 a7       	std	Y+40, r24	; 0x28
    1dd6:	99 a7       	std	Y+41, r25	; 0x29
    1dd8:	aa a7       	std	Y+42, r26	; 0x2a
    1dda:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ddc:	68 a5       	ldd	r22, Y+40	; 0x28
    1dde:	79 a5       	ldd	r23, Y+41	; 0x29
    1de0:	8a a5       	ldd	r24, Y+42	; 0x2a
    1de2:	9b a5       	ldd	r25, Y+43	; 0x2b
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	4a e7       	ldi	r20, 0x7A	; 122
    1dea:	53 e4       	ldi	r21, 0x43	; 67
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	8c a3       	std	Y+36, r24	; 0x24
    1df6:	9d a3       	std	Y+37, r25	; 0x25
    1df8:	ae a3       	std	Y+38, r26	; 0x26
    1dfa:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1dfc:	6c a1       	ldd	r22, Y+36	; 0x24
    1dfe:	7d a1       	ldd	r23, Y+37	; 0x25
    1e00:	8e a1       	ldd	r24, Y+38	; 0x26
    1e02:	9f a1       	ldd	r25, Y+39	; 0x27
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e8       	ldi	r20, 0x80	; 128
    1e0a:	5f e3       	ldi	r21, 0x3F	; 63
    1e0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e10:	88 23       	and	r24, r24
    1e12:	2c f4       	brge	.+10     	; 0x1e1e <LCD_enum_INIT+0x1d6>
		__ticks = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9b a3       	std	Y+35, r25	; 0x23
    1e1a:	8a a3       	std	Y+34, r24	; 0x22
    1e1c:	3f c0       	rjmp	.+126    	; 0x1e9c <LCD_enum_INIT+0x254>
	else if (__tmp > 65535)
    1e1e:	6c a1       	ldd	r22, Y+36	; 0x24
    1e20:	7d a1       	ldd	r23, Y+37	; 0x25
    1e22:	8e a1       	ldd	r24, Y+38	; 0x26
    1e24:	9f a1       	ldd	r25, Y+39	; 0x27
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	3f ef       	ldi	r19, 0xFF	; 255
    1e2a:	4f e7       	ldi	r20, 0x7F	; 127
    1e2c:	57 e4       	ldi	r21, 0x47	; 71
    1e2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e32:	18 16       	cp	r1, r24
    1e34:	4c f5       	brge	.+82     	; 0x1e88 <LCD_enum_INIT+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e36:	68 a5       	ldd	r22, Y+40	; 0x28
    1e38:	79 a5       	ldd	r23, Y+41	; 0x29
    1e3a:	8a a5       	ldd	r24, Y+42	; 0x2a
    1e3c:	9b a5       	ldd	r25, Y+43	; 0x2b
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e2       	ldi	r20, 0x20	; 32
    1e44:	51 e4       	ldi	r21, 0x41	; 65
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9b a3       	std	Y+35, r25	; 0x23
    1e5c:	8a a3       	std	Y+34, r24	; 0x22
    1e5e:	0f c0       	rjmp	.+30     	; 0x1e7e <LCD_enum_INIT+0x236>
    1e60:	89 e1       	ldi	r24, 0x19	; 25
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	99 a3       	std	Y+33, r25	; 0x21
    1e66:	88 a3       	std	Y+32, r24	; 0x20
    1e68:	88 a1       	ldd	r24, Y+32	; 0x20
    1e6a:	99 a1       	ldd	r25, Y+33	; 0x21
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <LCD_enum_INIT+0x224>
    1e70:	99 a3       	std	Y+33, r25	; 0x21
    1e72:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e74:	8a a1       	ldd	r24, Y+34	; 0x22
    1e76:	9b a1       	ldd	r25, Y+35	; 0x23
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	9b a3       	std	Y+35, r25	; 0x23
    1e7c:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7e:	8a a1       	ldd	r24, Y+34	; 0x22
    1e80:	9b a1       	ldd	r25, Y+35	; 0x23
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	69 f7       	brne	.-38     	; 0x1e60 <LCD_enum_INIT+0x218>
    1e86:	24 c0       	rjmp	.+72     	; 0x1ed0 <LCD_enum_INIT+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e88:	6c a1       	ldd	r22, Y+36	; 0x24
    1e8a:	7d a1       	ldd	r23, Y+37	; 0x25
    1e8c:	8e a1       	ldd	r24, Y+38	; 0x26
    1e8e:	9f a1       	ldd	r25, Y+39	; 0x27
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	9b a3       	std	Y+35, r25	; 0x23
    1e9a:	8a a3       	std	Y+34, r24	; 0x22
    1e9c:	8a a1       	ldd	r24, Y+34	; 0x22
    1e9e:	9b a1       	ldd	r25, Y+35	; 0x23
    1ea0:	9f 8f       	std	Y+31, r25	; 0x1f
    1ea2:	8e 8f       	std	Y+30, r24	; 0x1e
    1ea4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ea6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <LCD_enum_INIT+0x260>
    1eac:	9f 8f       	std	Y+31, r25	; 0x1f
    1eae:	8e 8f       	std	Y+30, r24	; 0x1e
    1eb0:	0f c0       	rjmp	.+30     	; 0x1ed0 <LCD_enum_INIT+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eb2:	6d a5       	ldd	r22, Y+45	; 0x2d
    1eb4:	7e a5       	ldd	r23, Y+46	; 0x2e
    1eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8c a7       	std	Y+44, r24	; 0x2c
    1ec4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ec6:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eca:	8a 95       	dec	r24
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <LCD_enum_INIT+0x282>
    1ece:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(40);
	LCD_enum_Send_Comnd(DIS_ON_CURSOR_ON_BLINKING);
    1ed0:	8f e0       	ldi	r24, 0x0F	; 15
    1ed2:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_enum_Send_Comnd>
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e2       	ldi	r26, 0x20	; 32
    1edc:	b2 e4       	ldi	r27, 0x42	; 66
    1ede:	89 8f       	std	Y+25, r24	; 0x19
    1ee0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ee2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ee4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	4a e7       	ldi	r20, 0x7A	; 122
    1ef4:	53 e4       	ldi	r21, 0x43	; 67
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	8d 8b       	std	Y+21, r24	; 0x15
    1f00:	9e 8b       	std	Y+22, r25	; 0x16
    1f02:	af 8b       	std	Y+23, r26	; 0x17
    1f04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f06:	6d 89       	ldd	r22, Y+21	; 0x15
    1f08:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e8       	ldi	r20, 0x80	; 128
    1f14:	5f e3       	ldi	r21, 0x3F	; 63
    1f16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f1a:	88 23       	and	r24, r24
    1f1c:	2c f4       	brge	.+10     	; 0x1f28 <LCD_enum_INIT+0x2e0>
		__ticks = 1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	9c 8b       	std	Y+20, r25	; 0x14
    1f24:	8b 8b       	std	Y+19, r24	; 0x13
    1f26:	3f c0       	rjmp	.+126    	; 0x1fa6 <LCD_enum_INIT+0x35e>
	else if (__tmp > 65535)
    1f28:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	3f ef       	ldi	r19, 0xFF	; 255
    1f34:	4f e7       	ldi	r20, 0x7F	; 127
    1f36:	57 e4       	ldi	r21, 0x47	; 71
    1f38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f3c:	18 16       	cp	r1, r24
    1f3e:	4c f5       	brge	.+82     	; 0x1f92 <LCD_enum_INIT+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f40:	69 8d       	ldd	r22, Y+25	; 0x19
    1f42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e2       	ldi	r20, 0x20	; 32
    1f4e:	51 e4       	ldi	r21, 0x41	; 65
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	bc 01       	movw	r22, r24
    1f5a:	cd 01       	movw	r24, r26
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9c 8b       	std	Y+20, r25	; 0x14
    1f66:	8b 8b       	std	Y+19, r24	; 0x13
    1f68:	0f c0       	rjmp	.+30     	; 0x1f88 <LCD_enum_INIT+0x340>
    1f6a:	89 e1       	ldi	r24, 0x19	; 25
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	9a 8b       	std	Y+18, r25	; 0x12
    1f70:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f72:	89 89       	ldd	r24, Y+17	; 0x11
    1f74:	9a 89       	ldd	r25, Y+18	; 0x12
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <LCD_enum_INIT+0x32e>
    1f7a:	9a 8b       	std	Y+18, r25	; 0x12
    1f7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f80:	9c 89       	ldd	r25, Y+20	; 0x14
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	9c 8b       	std	Y+20, r25	; 0x14
    1f86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f88:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	69 f7       	brne	.-38     	; 0x1f6a <LCD_enum_INIT+0x322>
    1f90:	14 c0       	rjmp	.+40     	; 0x1fba <LCD_enum_INIT+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f92:	6d 89       	ldd	r22, Y+21	; 0x15
    1f94:	7e 89       	ldd	r23, Y+22	; 0x16
    1f96:	8f 89       	ldd	r24, Y+23	; 0x17
    1f98:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	9c 8b       	std	Y+20, r25	; 0x14
    1fa4:	8b 8b       	std	Y+19, r24	; 0x13
    1fa6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa8:	9c 89       	ldd	r25, Y+20	; 0x14
    1faa:	98 8b       	std	Y+16, r25	; 0x10
    1fac:	8f 87       	std	Y+15, r24	; 0x0f
    1fae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb0:	98 89       	ldd	r25, Y+16	; 0x10
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <LCD_enum_INIT+0x36a>
    1fb6:	98 8b       	std	Y+16, r25	; 0x10
    1fb8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	LCD_enum_Send_Comnd(DISPLAY_CLEAR);
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_enum_Send_Comnd>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a0 e8       	ldi	r26, 0x80	; 128
    1fc6:	bf e3       	ldi	r27, 0x3F	; 63
    1fc8:	8b 87       	std	Y+11, r24	; 0x0b
    1fca:	9c 87       	std	Y+12, r25	; 0x0c
    1fcc:	ad 87       	std	Y+13, r26	; 0x0d
    1fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a e7       	ldi	r20, 0x7A	; 122
    1fde:	53 e4       	ldi	r21, 0x43	; 67
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	8f 83       	std	Y+7, r24	; 0x07
    1fea:	98 87       	std	Y+8, r25	; 0x08
    1fec:	a9 87       	std	Y+9, r26	; 0x09
    1fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff2:	78 85       	ldd	r23, Y+8	; 0x08
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <LCD_enum_INIT+0x3ca>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
    2010:	3f c0       	rjmp	.+126    	; 0x2090 <LCD_enum_INIT+0x448>
	else if (__tmp > 65535)
    2012:	6f 81       	ldd	r22, Y+7	; 0x07
    2014:	78 85       	ldd	r23, Y+8	; 0x08
    2016:	89 85       	ldd	r24, Y+9	; 0x09
    2018:	9a 85       	ldd	r25, Y+10	; 0x0a
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	4c f5       	brge	.+82     	; 0x207c <LCD_enum_INIT+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202a:	6b 85       	ldd	r22, Y+11	; 0x0b
    202c:	7c 85       	ldd	r23, Y+12	; 0x0c
    202e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2030:	9e 85       	ldd	r25, Y+14	; 0x0e
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <LCD_enum_INIT+0x42a>
    2054:	89 e1       	ldi	r24, 0x19	; 25
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9c 83       	std	Y+4, r25	; 0x04
    205a:	8b 83       	std	Y+3, r24	; 0x03
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_enum_INIT+0x418>
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	69 f7       	brne	.-38     	; 0x2054 <LCD_enum_INIT+0x40c>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <LCD_enum_INIT+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207c:	6f 81       	ldd	r22, Y+7	; 0x07
    207e:	78 85       	ldd	r23, Y+8	; 0x08
    2080:	89 85       	ldd	r24, Y+9	; 0x09
    2082:	9a 85       	ldd	r25, Y+10	; 0x0a
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	9e 81       	ldd	r25, Y+6	; 0x06
    2094:	9a 83       	std	Y+2, r25	; 0x02
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	9a 81       	ldd	r25, Y+2	; 0x02
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_enum_INIT+0x454>
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_enum_Send_Comnd(ENTRY_MOOD);
    20a4:	86 e0       	ldi	r24, 0x06	; 6
    20a6:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_enum_Send_Comnd>
    return ES_OK;
    20aa:	80 e0       	ldi	r24, 0x00	; 0
}
    20ac:	ce 5b       	subi	r28, 0xBE	; 190
    20ae:	df 4f       	sbci	r29, 0xFF	; 255
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <LCD_enum_Send_Comnd>:
//to send a command
ES_t LCD_enum_Send_Comnd(u8 Copy_u8_Comnd){
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	69 97       	sbiw	r28, 0x19	; 25
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	89 8f       	std	Y+25, r24	; 0x19
#if  LCD_u8_MODE == LCD_u8_MODE_8_bit
//RS =0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_LOW );
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_u8_Set_Pin_Value>
//RW = 0

 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	61 e0       	ldi	r22, 0x01	; 1
    20e4:	40 e0       	ldi	r20, 0x00	; 0
    20e6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_u8_Set_Pin_Value>

//Write Command
 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_Comnd);
    20ea:	83 e0       	ldi	r24, 0x03	; 3
    20ec:	69 8d       	ldd	r22, Y+25	; 0x19
    20ee:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <DIO_u8_Set_Port_Value>

//E = 1
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	62 e0       	ldi	r22, 0x02	; 2
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_u8_Set_Pin_Value>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a0 e8       	ldi	r26, 0x80	; 128
    2102:	bf e3       	ldi	r27, 0x3F	; 63
    2104:	8d 8b       	std	Y+21, r24	; 0x15
    2106:	9e 8b       	std	Y+22, r25	; 0x16
    2108:	af 8b       	std	Y+23, r26	; 0x17
    210a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    210c:	6d 89       	ldd	r22, Y+21	; 0x15
    210e:	7e 89       	ldd	r23, Y+22	; 0x16
    2110:	8f 89       	ldd	r24, Y+23	; 0x17
    2112:	98 8d       	ldd	r25, Y+24	; 0x18
    2114:	2b ea       	ldi	r18, 0xAB	; 171
    2116:	3a ea       	ldi	r19, 0xAA	; 170
    2118:	4a ea       	ldi	r20, 0xAA	; 170
    211a:	5e e3       	ldi	r21, 0x3E	; 62
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	89 8b       	std	Y+17, r24	; 0x11
    2126:	9a 8b       	std	Y+18, r25	; 0x12
    2128:	ab 8b       	std	Y+19, r26	; 0x13
    212a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    212c:	69 89       	ldd	r22, Y+17	; 0x11
    212e:	7a 89       	ldd	r23, Y+18	; 0x12
    2130:	8b 89       	ldd	r24, Y+19	; 0x13
    2132:	9c 89       	ldd	r25, Y+20	; 0x14
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2140:	88 23       	and	r24, r24
    2142:	1c f4       	brge	.+6      	; 0x214a <LCD_enum_Send_Comnd+0x8a>
		__ticks = 1;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	88 8b       	std	Y+16, r24	; 0x10
    2148:	91 c0       	rjmp	.+290    	; 0x226c <LCD_enum_Send_Comnd+0x1ac>
	else if (__tmp > 255)
    214a:	69 89       	ldd	r22, Y+17	; 0x11
    214c:	7a 89       	ldd	r23, Y+18	; 0x12
    214e:	8b 89       	ldd	r24, Y+19	; 0x13
    2150:	9c 89       	ldd	r25, Y+20	; 0x14
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	53 e4       	ldi	r21, 0x43	; 67
    215a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	0c f0       	brlt	.+2      	; 0x2164 <LCD_enum_Send_Comnd+0xa4>
    2162:	7b c0       	rjmp	.+246    	; 0x225a <LCD_enum_Send_Comnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2164:	6d 89       	ldd	r22, Y+21	; 0x15
    2166:	7e 89       	ldd	r23, Y+22	; 0x16
    2168:	8f 89       	ldd	r24, Y+23	; 0x17
    216a:	98 8d       	ldd	r25, Y+24	; 0x18
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	4a e7       	ldi	r20, 0x7A	; 122
    2172:	54 e4       	ldi	r21, 0x44	; 68
    2174:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	8c 87       	std	Y+12, r24	; 0x0c
    217e:	9d 87       	std	Y+13, r25	; 0x0d
    2180:	ae 87       	std	Y+14, r26	; 0x0e
    2182:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	6c 85       	ldd	r22, Y+12	; 0x0c
    2186:	7d 85       	ldd	r23, Y+13	; 0x0d
    2188:	8e 85       	ldd	r24, Y+14	; 0x0e
    218a:	9f 85       	ldd	r25, Y+15	; 0x0f
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4a e7       	ldi	r20, 0x7A	; 122
    2192:	53 e4       	ldi	r21, 0x43	; 67
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	88 87       	std	Y+8, r24	; 0x08
    219e:	99 87       	std	Y+9, r25	; 0x09
    21a0:	aa 87       	std	Y+10, r26	; 0x0a
    21a2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    21a4:	68 85       	ldd	r22, Y+8	; 0x08
    21a6:	79 85       	ldd	r23, Y+9	; 0x09
    21a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    21aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <LCD_enum_Send_Comnd+0x106>
		__ticks = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9f 83       	std	Y+7, r25	; 0x07
    21c2:	8e 83       	std	Y+6, r24	; 0x06
    21c4:	3f c0       	rjmp	.+126    	; 0x2244 <LCD_enum_Send_Comnd+0x184>
	else if (__tmp > 65535)
    21c6:	68 85       	ldd	r22, Y+8	; 0x08
    21c8:	79 85       	ldd	r23, Y+9	; 0x09
    21ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    21cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	4c f5       	brge	.+82     	; 0x2230 <LCD_enum_Send_Comnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21de:	6c 85       	ldd	r22, Y+12	; 0x0c
    21e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    21e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    21e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9f 83       	std	Y+7, r25	; 0x07
    2204:	8e 83       	std	Y+6, r24	; 0x06
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <LCD_enum_Send_Comnd+0x166>
    2208:	89 e1       	ldi	r24, 0x19	; 25
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9d 83       	std	Y+5, r25	; 0x05
    220e:	8c 83       	std	Y+4, r24	; 0x04
    2210:	8c 81       	ldd	r24, Y+4	; 0x04
    2212:	9d 81       	ldd	r25, Y+5	; 0x05
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <LCD_enum_Send_Comnd+0x154>
    2218:	9d 83       	std	Y+5, r25	; 0x05
    221a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221c:	8e 81       	ldd	r24, Y+6	; 0x06
    221e:	9f 81       	ldd	r25, Y+7	; 0x07
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	9f 83       	std	Y+7, r25	; 0x07
    2224:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	8e 81       	ldd	r24, Y+6	; 0x06
    2228:	9f 81       	ldd	r25, Y+7	; 0x07
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	69 f7       	brne	.-38     	; 0x2208 <LCD_enum_Send_Comnd+0x148>
    222e:	24 c0       	rjmp	.+72     	; 0x2278 <LCD_enum_Send_Comnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2230:	68 85       	ldd	r22, Y+8	; 0x08
    2232:	79 85       	ldd	r23, Y+9	; 0x09
    2234:	8a 85       	ldd	r24, Y+10	; 0x0a
    2236:	9b 85       	ldd	r25, Y+11	; 0x0b
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9f 83       	std	Y+7, r25	; 0x07
    2242:	8e 83       	std	Y+6, r24	; 0x06
    2244:	8e 81       	ldd	r24, Y+6	; 0x06
    2246:	9f 81       	ldd	r25, Y+7	; 0x07
    2248:	9b 83       	std	Y+3, r25	; 0x03
    224a:	8a 83       	std	Y+2, r24	; 0x02
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	9b 81       	ldd	r25, Y+3	; 0x03
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD_enum_Send_Comnd+0x190>
    2254:	9b 83       	std	Y+3, r25	; 0x03
    2256:	8a 83       	std	Y+2, r24	; 0x02
    2258:	0f c0       	rjmp	.+30     	; 0x2278 <LCD_enum_Send_Comnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    225a:	69 89       	ldd	r22, Y+17	; 0x11
    225c:	7a 89       	ldd	r23, Y+18	; 0x12
    225e:	8b 89       	ldd	r24, Y+19	; 0x13
    2260:	9c 89       	ldd	r25, Y+20	; 0x14
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	88 8b       	std	Y+16, r24	; 0x10
    226c:	88 89       	ldd	r24, Y+16	; 0x10
    226e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	8a 95       	dec	r24
    2274:	f1 f7       	brne	.-4      	; 0x2272 <LCD_enum_Send_Comnd+0x1b2>
    2276:	89 83       	std	Y+1, r24	; 0x01
_delay_us(1);

//E = 0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	62 e0       	ldi	r22, 0x02	; 2
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_u8_Set_Pin_Value>
 return ES_OK;
    2282:	80 e0       	ldi	r24, 0x00	; 0
    DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
return ES_OK;

#endif

}
    2284:	69 96       	adiw	r28, 0x19	; 25
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	cd bf       	out	0x3d, r28	; 61
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <LCD_enum_Send_char>:
//function to send a character
ES_t LCD_enum_Send_char(u8 Copy_u8_char){
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	69 97       	sbiw	r28, 0x19	; 25
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	de bf       	out	0x3e, r29	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	cd bf       	out	0x3d, r28	; 61
    22aa:	89 8f       	std	Y+25, r24	; 0x19
	//RS =0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_HIGH );
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	41 e0       	ldi	r20, 0x01	; 1
    22b2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_u8_Set_Pin_Value>
	//RW = 0

	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	61 e0       	ldi	r22, 0x01	; 1
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_u8_Set_Pin_Value>

	//Write char
	 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_char);
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	69 8d       	ldd	r22, Y+25	; 0x19
    22c4:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <DIO_u8_Set_Port_Value>

	//E = 1
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	62 e0       	ldi	r22, 0x02	; 2
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_u8_Set_Pin_Value>
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a0 e8       	ldi	r26, 0x80	; 128
    22d8:	bf e3       	ldi	r27, 0x3F	; 63
    22da:	8d 8b       	std	Y+21, r24	; 0x15
    22dc:	9e 8b       	std	Y+22, r25	; 0x16
    22de:	af 8b       	std	Y+23, r26	; 0x17
    22e0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22e2:	6d 89       	ldd	r22, Y+21	; 0x15
    22e4:	7e 89       	ldd	r23, Y+22	; 0x16
    22e6:	8f 89       	ldd	r24, Y+23	; 0x17
    22e8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ea:	2b ea       	ldi	r18, 0xAB	; 171
    22ec:	3a ea       	ldi	r19, 0xAA	; 170
    22ee:	4a ea       	ldi	r20, 0xAA	; 170
    22f0:	5e e3       	ldi	r21, 0x3E	; 62
    22f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	89 8b       	std	Y+17, r24	; 0x11
    22fc:	9a 8b       	std	Y+18, r25	; 0x12
    22fe:	ab 8b       	std	Y+19, r26	; 0x13
    2300:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2302:	69 89       	ldd	r22, Y+17	; 0x11
    2304:	7a 89       	ldd	r23, Y+18	; 0x12
    2306:	8b 89       	ldd	r24, Y+19	; 0x13
    2308:	9c 89       	ldd	r25, Y+20	; 0x14
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5f e3       	ldi	r21, 0x3F	; 63
    2312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2316:	88 23       	and	r24, r24
    2318:	1c f4       	brge	.+6      	; 0x2320 <LCD_enum_Send_char+0x8a>
		__ticks = 1;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	88 8b       	std	Y+16, r24	; 0x10
    231e:	91 c0       	rjmp	.+290    	; 0x2442 <LCD_enum_Send_char+0x1ac>
	else if (__tmp > 255)
    2320:	69 89       	ldd	r22, Y+17	; 0x11
    2322:	7a 89       	ldd	r23, Y+18	; 0x12
    2324:	8b 89       	ldd	r24, Y+19	; 0x13
    2326:	9c 89       	ldd	r25, Y+20	; 0x14
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	53 e4       	ldi	r21, 0x43	; 67
    2330:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2334:	18 16       	cp	r1, r24
    2336:	0c f0       	brlt	.+2      	; 0x233a <LCD_enum_Send_char+0xa4>
    2338:	7b c0       	rjmp	.+246    	; 0x2430 <LCD_enum_Send_char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    233a:	6d 89       	ldd	r22, Y+21	; 0x15
    233c:	7e 89       	ldd	r23, Y+22	; 0x16
    233e:	8f 89       	ldd	r24, Y+23	; 0x17
    2340:	98 8d       	ldd	r25, Y+24	; 0x18
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	4a e7       	ldi	r20, 0x7A	; 122
    2348:	54 e4       	ldi	r21, 0x44	; 68
    234a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	8c 87       	std	Y+12, r24	; 0x0c
    2354:	9d 87       	std	Y+13, r25	; 0x0d
    2356:	ae 87       	std	Y+14, r26	; 0x0e
    2358:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	6c 85       	ldd	r22, Y+12	; 0x0c
    235c:	7d 85       	ldd	r23, Y+13	; 0x0d
    235e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2360:	9f 85       	ldd	r25, Y+15	; 0x0f
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a e7       	ldi	r20, 0x7A	; 122
    2368:	53 e4       	ldi	r21, 0x43	; 67
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	88 87       	std	Y+8, r24	; 0x08
    2374:	99 87       	std	Y+9, r25	; 0x09
    2376:	aa 87       	std	Y+10, r26	; 0x0a
    2378:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    237a:	68 85       	ldd	r22, Y+8	; 0x08
    237c:	79 85       	ldd	r23, Y+9	; 0x09
    237e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2380:	9b 85       	ldd	r25, Y+11	; 0x0b
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <LCD_enum_Send_char+0x106>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9f 83       	std	Y+7, r25	; 0x07
    2398:	8e 83       	std	Y+6, r24	; 0x06
    239a:	3f c0       	rjmp	.+126    	; 0x241a <LCD_enum_Send_char+0x184>
	else if (__tmp > 65535)
    239c:	68 85       	ldd	r22, Y+8	; 0x08
    239e:	79 85       	ldd	r23, Y+9	; 0x09
    23a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	4c f5       	brge	.+82     	; 0x2406 <LCD_enum_Send_char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    23b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    23b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    23ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9f 83       	std	Y+7, r25	; 0x07
    23da:	8e 83       	std	Y+6, r24	; 0x06
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <LCD_enum_Send_char+0x166>
    23de:	89 e1       	ldi	r24, 0x19	; 25
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9d 83       	std	Y+5, r25	; 0x05
    23e4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e6:	8c 81       	ldd	r24, Y+4	; 0x04
    23e8:	9d 81       	ldd	r25, Y+5	; 0x05
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_enum_Send_char+0x154>
    23ee:	9d 83       	std	Y+5, r25	; 0x05
    23f0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f2:	8e 81       	ldd	r24, Y+6	; 0x06
    23f4:	9f 81       	ldd	r25, Y+7	; 0x07
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	9f 83       	std	Y+7, r25	; 0x07
    23fa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fc:	8e 81       	ldd	r24, Y+6	; 0x06
    23fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	69 f7       	brne	.-38     	; 0x23de <LCD_enum_Send_char+0x148>
    2404:	24 c0       	rjmp	.+72     	; 0x244e <LCD_enum_Send_char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	68 85       	ldd	r22, Y+8	; 0x08
    2408:	79 85       	ldd	r23, Y+9	; 0x09
    240a:	8a 85       	ldd	r24, Y+10	; 0x0a
    240c:	9b 85       	ldd	r25, Y+11	; 0x0b
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9f 83       	std	Y+7, r25	; 0x07
    2418:	8e 83       	std	Y+6, r24	; 0x06
    241a:	8e 81       	ldd	r24, Y+6	; 0x06
    241c:	9f 81       	ldd	r25, Y+7	; 0x07
    241e:	9b 83       	std	Y+3, r25	; 0x03
    2420:	8a 83       	std	Y+2, r24	; 0x02
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	9b 81       	ldd	r25, Y+3	; 0x03
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_enum_Send_char+0x190>
    242a:	9b 83       	std	Y+3, r25	; 0x03
    242c:	8a 83       	std	Y+2, r24	; 0x02
    242e:	0f c0       	rjmp	.+30     	; 0x244e <LCD_enum_Send_char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2430:	69 89       	ldd	r22, Y+17	; 0x11
    2432:	7a 89       	ldd	r23, Y+18	; 0x12
    2434:	8b 89       	ldd	r24, Y+19	; 0x13
    2436:	9c 89       	ldd	r25, Y+20	; 0x14
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	88 8b       	std	Y+16, r24	; 0x10
    2442:	88 89       	ldd	r24, Y+16	; 0x10
    2444:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	8a 95       	dec	r24
    244a:	f1 f7       	brne	.-4      	; 0x2448 <LCD_enum_Send_char+0x1b2>
    244c:	89 83       	std	Y+1, r24	; 0x01
	 _delay_us(1);

	//E = 0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	62 e0       	ldi	r22, 0x02	; 2
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_u8_Set_Pin_Value>
	    return ES_OK;
    2458:	80 e0       	ldi	r24, 0x00	; 0

}
    245a:	69 96       	adiw	r28, 0x19	; 25
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	f8 94       	cli
    2460:	de bf       	out	0x3e, r29	; 62
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	cd bf       	out	0x3d, r28	; 61
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <LCD_enum_GO_TO_XY>:
//function to set a location
ES_t LCD_enum_GO_TO_XY (u8 Copy_u8_line_Num , u8 Copy_u8_Location ){
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	00 d0       	rcall	.+0      	; 0x2472 <LCD_enum_GO_TO_XY+0x6>
    2472:	00 d0       	rcall	.+0      	; 0x2474 <LCD_enum_GO_TO_XY+0x8>
    2474:	0f 92       	push	r0
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	6a 83       	std	Y+2, r22	; 0x02
//	u8 Local_u8_Erorr_State = ES_OK;
	if(Copy_u8_Location <= 39 ){
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	88 32       	cpi	r24, 0x28	; 40
    2482:	f8 f4       	brcc	.+62     	; 0x24c2 <LCD_enum_GO_TO_XY+0x56>
		switch (Copy_u8_line_Num)
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	28 2f       	mov	r18, r24
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	3d 83       	std	Y+5, r19	; 0x05
    248c:	2c 83       	std	Y+4, r18	; 0x04
    248e:	8c 81       	ldd	r24, Y+4	; 0x04
    2490:	9d 81       	ldd	r25, Y+5	; 0x05
    2492:	81 30       	cpi	r24, 0x01	; 1
    2494:	91 05       	cpc	r25, r1
    2496:	31 f0       	breq	.+12     	; 0x24a4 <LCD_enum_GO_TO_XY+0x38>
    2498:	2c 81       	ldd	r18, Y+4	; 0x04
    249a:	3d 81       	ldd	r19, Y+5	; 0x05
    249c:	22 30       	cpi	r18, 0x02	; 2
    249e:	31 05       	cpc	r19, r1
    24a0:	31 f0       	breq	.+12     	; 0x24ae <LCD_enum_GO_TO_XY+0x42>
    24a2:	0a c0       	rjmp	.+20     	; 0x24b8 <LCD_enum_GO_TO_XY+0x4c>
		{
		case LCD_u8_LINE1 : LCD_enum_Send_Comnd(ADDRESS_OF_LINE1+Copy_u8_Location);break;
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	80 58       	subi	r24, 0x80	; 128
    24a8:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_enum_Send_Comnd>
    24ac:	08 c0       	rjmp	.+16     	; 0x24be <LCD_enum_GO_TO_XY+0x52>
		case LCD_u8_LINE2 : LCD_enum_Send_Comnd(ADDRESS_OF_LINE2+Copy_u8_Location);break;
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	80 54       	subi	r24, 0x40	; 64
    24b2:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_enum_Send_Comnd>
    24b6:	03 c0       	rjmp	.+6      	; 0x24be <LCD_enum_GO_TO_XY+0x52>
        default   :  return ES_NOK;
    24b8:	31 e0       	ldi	r19, 0x01	; 1
    24ba:	3b 83       	std	Y+3, r19	; 0x03
    24bc:	04 c0       	rjmp	.+8      	; 0x24c6 <LCD_enum_GO_TO_XY+0x5a>
		else {
			return ES_NOK;


	}
    return ES_OK;
    24be:	1b 82       	std	Y+3, r1	; 0x03
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <LCD_enum_GO_TO_XY+0x5a>

		}

	}
		else {
			return ES_NOK;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	8b 83       	std	Y+3, r24	; 0x03
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03


	}
    return ES_OK;
}
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <LCD_enum_Send_String>:
//function to send string
ES_t LCD_enum_Send_String(u8 *copy_pu8_string){
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	00 d0       	rcall	.+0      	; 0x24de <LCD_enum_Send_String+0x6>
    24de:	0f 92       	push	r0
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	9b 83       	std	Y+3, r25	; 0x03
    24e6:	8a 83       	std	Y+2, r24	; 0x02
    24e8:	0e c0       	rjmp	.+28     	; 0x2506 <LCD_enum_Send_String+0x2e>
	for (u8 i ; copy_pu8_string[i] != '\0'; i++){
		LCD_enum_Send_char(copy_pu8_string[i]);
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	28 2f       	mov	r18, r24
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	9b 81       	ldd	r25, Y+3	; 0x03
    24f4:	fc 01       	movw	r30, r24
    24f6:	e2 0f       	add	r30, r18
    24f8:	f3 1f       	adc	r31, r19
    24fa:	80 81       	ld	r24, Z
    24fc:	0e 94 4b 11 	call	0x2296	; 0x2296 <LCD_enum_Send_char>
	}
    return ES_OK;
}
//function to send string
ES_t LCD_enum_Send_String(u8 *copy_pu8_string){
	for (u8 i ; copy_pu8_string[i] != '\0'; i++){
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	8f 5f       	subi	r24, 0xFF	; 255
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	28 2f       	mov	r18, r24
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	9b 81       	ldd	r25, Y+3	; 0x03
    2510:	fc 01       	movw	r30, r24
    2512:	e2 0f       	add	r30, r18
    2514:	f3 1f       	adc	r31, r19
    2516:	80 81       	ld	r24, Z
    2518:	88 23       	and	r24, r24
    251a:	39 f7       	brne	.-50     	; 0x24ea <LCD_enum_Send_String+0x12>
		LCD_enum_Send_char(copy_pu8_string[i]);
	}
	return ES_OK;
    251c:	80 e0       	ldi	r24, 0x00	; 0
}
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <LCD_enum_Clear>:

//function to clear
ES_t LCD_enum_Clear (void){
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	2e 97       	sbiw	r28, 0x0e	; 14
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
	LCD_enum_Send_Comnd(DISPLAY_CLEAR);
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_enum_Send_Comnd>
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	a0 e8       	ldi	r26, 0x80	; 128
    254a:	bf e3       	ldi	r27, 0x3F	; 63
    254c:	8b 87       	std	Y+11, r24	; 0x0b
    254e:	9c 87       	std	Y+12, r25	; 0x0c
    2550:	ad 87       	std	Y+13, r26	; 0x0d
    2552:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2554:	6b 85       	ldd	r22, Y+11	; 0x0b
    2556:	7c 85       	ldd	r23, Y+12	; 0x0c
    2558:	8d 85       	ldd	r24, Y+13	; 0x0d
    255a:	9e 85       	ldd	r25, Y+14	; 0x0e
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	4a e7       	ldi	r20, 0x7A	; 122
    2562:	53 e4       	ldi	r21, 0x43	; 67
    2564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	8f 83       	std	Y+7, r24	; 0x07
    256e:	98 87       	std	Y+8, r25	; 0x08
    2570:	a9 87       	std	Y+9, r26	; 0x09
    2572:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2574:	6f 81       	ldd	r22, Y+7	; 0x07
    2576:	78 85       	ldd	r23, Y+8	; 0x08
    2578:	89 85       	ldd	r24, Y+9	; 0x09
    257a:	9a 85       	ldd	r25, Y+10	; 0x0a
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e8       	ldi	r20, 0x80	; 128
    2582:	5f e3       	ldi	r21, 0x3F	; 63
    2584:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2588:	88 23       	and	r24, r24
    258a:	2c f4       	brge	.+10     	; 0x2596 <LCD_enum_Clear+0x6c>
		__ticks = 1;
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	3f c0       	rjmp	.+126    	; 0x2614 <LCD_enum_Clear+0xea>
	else if (__tmp > 65535)
    2596:	6f 81       	ldd	r22, Y+7	; 0x07
    2598:	78 85       	ldd	r23, Y+8	; 0x08
    259a:	89 85       	ldd	r24, Y+9	; 0x09
    259c:	9a 85       	ldd	r25, Y+10	; 0x0a
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	3f ef       	ldi	r19, 0xFF	; 255
    25a2:	4f e7       	ldi	r20, 0x7F	; 127
    25a4:	57 e4       	ldi	r21, 0x47	; 71
    25a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25aa:	18 16       	cp	r1, r24
    25ac:	4c f5       	brge	.+82     	; 0x2600 <LCD_enum_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e2       	ldi	r20, 0x20	; 32
    25bc:	51 e4       	ldi	r21, 0x41	; 65
    25be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	bc 01       	movw	r22, r24
    25c8:	cd 01       	movw	r24, r26
    25ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	9e 83       	std	Y+6, r25	; 0x06
    25d4:	8d 83       	std	Y+5, r24	; 0x05
    25d6:	0f c0       	rjmp	.+30     	; 0x25f6 <LCD_enum_Clear+0xcc>
    25d8:	89 e1       	ldi	r24, 0x19	; 25
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	9c 83       	std	Y+4, r25	; 0x04
    25de:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <LCD_enum_Clear+0xba>
    25e8:	9c 83       	std	Y+4, r25	; 0x04
    25ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ec:	8d 81       	ldd	r24, Y+5	; 0x05
    25ee:	9e 81       	ldd	r25, Y+6	; 0x06
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	9e 83       	std	Y+6, r25	; 0x06
    25f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f6:	8d 81       	ldd	r24, Y+5	; 0x05
    25f8:	9e 81       	ldd	r25, Y+6	; 0x06
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	69 f7       	brne	.-38     	; 0x25d8 <LCD_enum_Clear+0xae>
    25fe:	14 c0       	rjmp	.+40     	; 0x2628 <LCD_enum_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2600:	6f 81       	ldd	r22, Y+7	; 0x07
    2602:	78 85       	ldd	r23, Y+8	; 0x08
    2604:	89 85       	ldd	r24, Y+9	; 0x09
    2606:	9a 85       	ldd	r25, Y+10	; 0x0a
    2608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <LCD_enum_Clear+0xf6>
    2624:	9a 83       	std	Y+2, r25	; 0x02
    2626:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	return ES_OK;
    2628:	80 e0       	ldi	r24, 0x00	; 0
}
    262a:	2e 96       	adiw	r28, 0x0e	; 14
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <LCD_enum_Send_Custom_char>:

//function to send custom char
ES_t LCD_enum_Send_Custom_char(u8 Copy_u8_Location , u8 * Copy_pu8_char_Array){
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	00 d0       	rcall	.+0      	; 0x2642 <LCD_enum_Send_Custom_char+0x6>
    2642:	00 d0       	rcall	.+0      	; 0x2644 <LCD_enum_Send_Custom_char+0x8>
    2644:	0f 92       	push	r0
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	8a 83       	std	Y+2, r24	; 0x02
    264c:	7c 83       	std	Y+4, r23	; 0x04
    264e:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_pu8_char_Array != NULL && Copy_u8_Location < MAX_CHARACTERS )
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	9c 81       	ldd	r25, Y+4	; 0x04
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	41 f1       	breq	.+80     	; 0x26a8 <LCD_enum_Send_Custom_char+0x6c>
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	88 30       	cpi	r24, 0x08	; 8
    265c:	28 f5       	brcc	.+74     	; 0x26a8 <LCD_enum_Send_Custom_char+0x6c>
	    {
		LCD_enum_Send_Comnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS ));
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	88 2f       	mov	r24, r24
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	08 96       	adiw	r24, 0x08	; 8
    2666:	88 0f       	add	r24, r24
    2668:	99 1f       	adc	r25, r25
    266a:	88 0f       	add	r24, r24
    266c:	99 1f       	adc	r25, r25
    266e:	88 0f       	add	r24, r24
    2670:	99 1f       	adc	r25, r25
    2672:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_enum_Send_Comnd>
	        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS ; Local_u8_Counter++)
    2676:	19 82       	std	Y+1, r1	; 0x01
    2678:	0e c0       	rjmp	.+28     	; 0x2696 <LCD_enum_Send_Custom_char+0x5a>
	        {
	        	LCD_enum_Send_char(Copy_pu8_char_Array[Local_u8_Counter]);
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	fc 01       	movw	r30, r24
    2686:	e2 0f       	add	r30, r18
    2688:	f3 1f       	adc	r31, r19
    268a:	80 81       	ld	r24, Z
    268c:	0e 94 4b 11 	call	0x2296	; 0x2296 <LCD_enum_Send_char>
//function to send custom char
ES_t LCD_enum_Send_Custom_char(u8 Copy_u8_Location , u8 * Copy_pu8_char_Array){
	if(Copy_pu8_char_Array != NULL && Copy_u8_Location < MAX_CHARACTERS )
	    {
		LCD_enum_Send_Comnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS ));
	        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS ; Local_u8_Counter++)
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	8f 5f       	subi	r24, 0xFF	; 255
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	88 30       	cpi	r24, 0x08	; 8
    269a:	78 f3       	brcs	.-34     	; 0x267a <LCD_enum_Send_Custom_char+0x3e>
	        {
	        	LCD_enum_Send_char(Copy_pu8_char_Array[Local_u8_Counter]);
	        }
	        LCD_enum_GO_TO_XY(LCD_u8_LINE1,0);
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_enum_GO_TO_XY>
//	        LCD_enum_Send_char(Copy_u8_Location);
	        return ES_OK;
    26a4:	1d 82       	std	Y+5, r1	; 0x05
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <LCD_enum_Send_Custom_char+0x70>

	    }
	    else
	    {
	        return ES_NOK;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
	    }

}
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <LCD_enum_Send_Num>:
ES_t LCD_enum_Send_Num(u32 Copy_LCD_u32_Num)
{
    26be:	0f 93       	push	r16
    26c0:	1f 93       	push	r17
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	60 97       	sbiw	r28, 0x10	; 16
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	6d 87       	std	Y+13, r22	; 0x0d
    26d8:	7e 87       	std	Y+14, r23	; 0x0e
    26da:	8f 87       	std	Y+15, r24	; 0x0f
    26dc:	98 8b       	std	Y+16, r25	; 0x10
	u8 arr[10], i = 0, j = 0;
    26de:	1a 82       	std	Y+2, r1	; 0x02
    26e0:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_LCD_u32_Num == 0)
    26e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e6:	af 85       	ldd	r26, Y+15	; 0x0f
    26e8:	b8 89       	ldd	r27, Y+16	; 0x10
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	a1 05       	cpc	r26, r1
    26ee:	b1 05       	cpc	r27, r1
    26f0:	91 f5       	brne	.+100    	; 0x2756 <LCD_enum_Send_Num+0x98>
	{
		LCD_enum_Send_char('0');
    26f2:	80 e3       	ldi	r24, 0x30	; 48
    26f4:	0e 94 4b 11 	call	0x2296	; 0x2296 <LCD_enum_Send_char>
    26f8:	4d c0       	rjmp	.+154    	; 0x2794 <LCD_enum_Send_Num+0xd6>
	}
	else
	{
		while (Copy_LCD_u32_Num)
		{
			arr[i] = Copy_LCD_u32_Num % 10 + '0';
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	08 2f       	mov	r16, r24
    26fe:	10 e0       	ldi	r17, 0x00	; 0
    2700:	8d 85       	ldd	r24, Y+13	; 0x0d
    2702:	9e 85       	ldd	r25, Y+14	; 0x0e
    2704:	af 85       	ldd	r26, Y+15	; 0x0f
    2706:	b8 89       	ldd	r27, Y+16	; 0x10
    2708:	2a e0       	ldi	r18, 0x0A	; 10
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	50 e0       	ldi	r21, 0x00	; 0
    2710:	bc 01       	movw	r22, r24
    2712:	cd 01       	movw	r24, r26
    2714:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__udivmodsi4>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	28 2f       	mov	r18, r24
    271e:	20 5d       	subi	r18, 0xD0	; 208
    2720:	ce 01       	movw	r24, r28
    2722:	03 96       	adiw	r24, 0x03	; 3
    2724:	fc 01       	movw	r30, r24
    2726:	e0 0f       	add	r30, r16
    2728:	f1 1f       	adc	r31, r17
    272a:	20 83       	st	Z, r18
			Copy_LCD_u32_Num /= 10;
    272c:	8d 85       	ldd	r24, Y+13	; 0x0d
    272e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2730:	af 85       	ldd	r26, Y+15	; 0x0f
    2732:	b8 89       	ldd	r27, Y+16	; 0x10
    2734:	2a e0       	ldi	r18, 0x0A	; 10
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	bc 01       	movw	r22, r24
    273e:	cd 01       	movw	r24, r26
    2740:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__udivmodsi4>
    2744:	da 01       	movw	r26, r20
    2746:	c9 01       	movw	r24, r18
    2748:	8d 87       	std	Y+13, r24	; 0x0d
    274a:	9e 87       	std	Y+14, r25	; 0x0e
    274c:	af 87       	std	Y+15, r26	; 0x0f
    274e:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	8f 5f       	subi	r24, 0xFF	; 255
    2754:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_enum_Send_char('0');
	}
	else
	{
		while (Copy_LCD_u32_Num)
    2756:	8d 85       	ldd	r24, Y+13	; 0x0d
    2758:	9e 85       	ldd	r25, Y+14	; 0x0e
    275a:	af 85       	ldd	r26, Y+15	; 0x0f
    275c:	b8 89       	ldd	r27, Y+16	; 0x10
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	a1 05       	cpc	r26, r1
    2762:	b1 05       	cpc	r27, r1
    2764:	51 f6       	brne	.-108    	; 0x26fa <LCD_enum_Send_Num+0x3c>
			arr[i] = Copy_LCD_u32_Num % 10 + '0';
			Copy_LCD_u32_Num /= 10;
			i++;
		}

		for (j = i; j > 0; j--)
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	11 c0       	rjmp	.+34     	; 0x278e <LCD_enum_Send_Num+0xd0>
		{
			LCD_enum_Send_char(arr[j - 1]);
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	88 2f       	mov	r24, r24
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 01       	movw	r18, r24
    2774:	21 50       	subi	r18, 0x01	; 1
    2776:	30 40       	sbci	r19, 0x00	; 0
    2778:	ce 01       	movw	r24, r28
    277a:	03 96       	adiw	r24, 0x03	; 3
    277c:	fc 01       	movw	r30, r24
    277e:	e2 0f       	add	r30, r18
    2780:	f3 1f       	adc	r31, r19
    2782:	80 81       	ld	r24, Z
    2784:	0e 94 4b 11 	call	0x2296	; 0x2296 <LCD_enum_Send_char>
			arr[i] = Copy_LCD_u32_Num % 10 + '0';
			Copy_LCD_u32_Num /= 10;
			i++;
		}

		for (j = i; j > 0; j--)
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	81 50       	subi	r24, 0x01	; 1
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	88 23       	and	r24, r24
    2792:	61 f7       	brne	.-40     	; 0x276c <LCD_enum_Send_Num+0xae>
		{
			LCD_enum_Send_char(arr[j - 1]);
		}
	}
    return ES_NOK;
    2794:	81 e0       	ldi	r24, 0x01	; 1
}
    2796:	60 96       	adiw	r28, 0x10	; 16
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	1f 91       	pop	r17
    27a8:	0f 91       	pop	r16
    27aa:	08 95       	ret

000027ac <main>:
//HAL
#include "../HAL/1-LCD/LCD_interface.h"

#include <util/delay.h>

int main(){
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	2a 97       	sbiw	r28, 0x0a	; 10
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
//	u8 local_u8_compare_match_value =0;
	u16 local_u16_degital_value_servo=0, local_u16_servo_motor_value=0;
    27c0:	18 86       	std	Y+8, r1	; 0x08
    27c2:	1f 82       	std	Y+7, r1	; 0x07
    27c4:	1e 82       	std	Y+6, r1	; 0x06
    27c6:	1d 82       	std	Y+5, r1	; 0x05
	u16 local_u16__led_brightness_value=0,local_u16_degital_value_led=0 ;
    27c8:	1c 82       	std	Y+4, r1	; 0x04
    27ca:	1b 82       	std	Y+3, r1	; 0x03
    27cc:	1a 82       	std	Y+2, r1	; 0x02
    27ce:	19 82       	std	Y+1, r1	; 0x01
	u16 local_u16_degital_value=0;
    27d0:	1a 86       	std	Y+10, r1	; 0x0a
    27d2:	19 86       	std	Y+9, r1	; 0x09

		        DIO_voidInit();
    27d4:	0e 94 99 09 	call	0x1332	; 0x1332 <DIO_voidInit>
		        ADC_enum_ADC_INIT();
    27d8:	0e 94 0c 08 	call	0x1018	; 0x1018 <ADC_enum_ADC_INIT>
		        DIO_u8_Set_Pin_Direction(0,0,0);
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_u8_Set_Pin_Direction>

DIO_u8_Set_Pin_Direction(3,5,1);
    27e6:	83 e0       	ldi	r24, 0x03	; 3
    27e8:	65 e0       	ldi	r22, 0x05	; 5
    27ea:	41 e0       	ldi	r20, 0x01	; 1
    27ec:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_u8_Set_Pin_Direction>
DIO_u8_Set_Pin_Direction(1,3,1);
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	63 e0       	ldi	r22, 0x03	; 3
    27f4:	41 e0       	ldi	r20, 0x01	; 1
    27f6:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_u8_Set_Pin_Direction>

		    TIMERS_enum_TIMER0_INIT();
    27fa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TIMERS_enum_TIMER0_INIT>
		    TIMERS_enum_TIMER1_INIT();
    27fe:	0e 94 8b 06 	call	0xd16	; 0xd16 <TIMERS_enum_TIMER1_INIT>


	while(1){
		ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking(ADC_u8_CHANNEL_0,&local_u16_degital_value);
    2802:	9e 01       	movw	r18, r28
    2804:	27 5f       	subi	r18, 0xF7	; 247
    2806:	3f 4f       	sbci	r19, 0xFF	; 255
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	b9 01       	movw	r22, r18
    280c:	0e 94 4f 08 	call	0x109e	; 0x109e <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking>
//				local_u16_servo_motor_value=((1000UL *local_u16_degital_value_servo) / 1023) + TIMER1_u16_angle_zero;
				TIMERS_enum_TIMER1_SET_Servo_Motor_Angle(local_u16_degital_value);
    2810:	89 85       	ldd	r24, Y+9	; 0x09
    2812:	9a 85       	ldd	r25, Y+10	; 0x0a
    2814:	0e 94 3c 07 	call	0xe78	; 0xe78 <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle>
//				TIMERS_enum_TIMER1_SET_COMPARE_MATCH_VALUE_A(local_u16_servo_motor_value);
//				local_u16_servo_motor_value++;
//					            _delay_ms(100);

				ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking(ADC_u8_CHANNEL_0,&local_u16_degital_value);
    2818:	9e 01       	movw	r18, r28
    281a:	27 5f       	subi	r18, 0xF7	; 247
    281c:	3f 4f       	sbci	r19, 0xFF	; 255
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	b9 01       	movw	r22, r18
    2822:	0e 94 4f 08 	call	0x109e	; 0x109e <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking>
				local_u16__led_brightness_value=((255UL * local_u16_degital_value)/ 1023)+999;
    2826:	89 85       	ldd	r24, Y+9	; 0x09
    2828:	9a 85       	ldd	r25, Y+10	; 0x0a
    282a:	cc 01       	movw	r24, r24
    282c:	a0 e0       	ldi	r26, 0x00	; 0
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	2f ef       	ldi	r18, 0xFF	; 255
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e0       	ldi	r20, 0x00	; 0
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	bc 01       	movw	r22, r24
    283a:	cd 01       	movw	r24, r26
    283c:	0e 94 34 14 	call	0x2868	; 0x2868 <__mulsi3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	2f ef       	ldi	r18, 0xFF	; 255
    2846:	33 e0       	ldi	r19, 0x03	; 3
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	bc 01       	movw	r22, r24
    284e:	cd 01       	movw	r24, r26
    2850:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__udivmodsi4>
    2854:	da 01       	movw	r26, r20
    2856:	c9 01       	movw	r24, r18
    2858:	89 51       	subi	r24, 0x19	; 25
    285a:	9c 4f       	sbci	r25, 0xFC	; 252
    285c:	9c 83       	std	Y+4, r25	; 0x04
    285e:	8b 83       	std	Y+3, r24	; 0x03
	            TIMERS_enum_TIMER0_SET_COMPARE_MATCH_VALUE(local_u16__led_brightness_value);
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	0e 94 15 07 	call	0xe2a	; 0xe2a <TIMERS_enum_TIMER0_SET_COMPARE_MATCH_VALUE>
    2866:	cd cf       	rjmp	.-102    	; 0x2802 <main+0x56>

00002868 <__mulsi3>:
    2868:	62 9f       	mul	r22, r18
    286a:	d0 01       	movw	r26, r0
    286c:	73 9f       	mul	r23, r19
    286e:	f0 01       	movw	r30, r0
    2870:	82 9f       	mul	r24, r18
    2872:	e0 0d       	add	r30, r0
    2874:	f1 1d       	adc	r31, r1
    2876:	64 9f       	mul	r22, r20
    2878:	e0 0d       	add	r30, r0
    287a:	f1 1d       	adc	r31, r1
    287c:	92 9f       	mul	r25, r18
    287e:	f0 0d       	add	r31, r0
    2880:	83 9f       	mul	r24, r19
    2882:	f0 0d       	add	r31, r0
    2884:	74 9f       	mul	r23, r20
    2886:	f0 0d       	add	r31, r0
    2888:	65 9f       	mul	r22, r21
    288a:	f0 0d       	add	r31, r0
    288c:	99 27       	eor	r25, r25
    288e:	72 9f       	mul	r23, r18
    2890:	b0 0d       	add	r27, r0
    2892:	e1 1d       	adc	r30, r1
    2894:	f9 1f       	adc	r31, r25
    2896:	63 9f       	mul	r22, r19
    2898:	b0 0d       	add	r27, r0
    289a:	e1 1d       	adc	r30, r1
    289c:	f9 1f       	adc	r31, r25
    289e:	bd 01       	movw	r22, r26
    28a0:	cf 01       	movw	r24, r30
    28a2:	11 24       	eor	r1, r1
    28a4:	08 95       	ret

000028a6 <__udivmodsi4>:
    28a6:	a1 e2       	ldi	r26, 0x21	; 33
    28a8:	1a 2e       	mov	r1, r26
    28aa:	aa 1b       	sub	r26, r26
    28ac:	bb 1b       	sub	r27, r27
    28ae:	fd 01       	movw	r30, r26
    28b0:	0d c0       	rjmp	.+26     	; 0x28cc <__udivmodsi4_ep>

000028b2 <__udivmodsi4_loop>:
    28b2:	aa 1f       	adc	r26, r26
    28b4:	bb 1f       	adc	r27, r27
    28b6:	ee 1f       	adc	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	a2 17       	cp	r26, r18
    28bc:	b3 07       	cpc	r27, r19
    28be:	e4 07       	cpc	r30, r20
    28c0:	f5 07       	cpc	r31, r21
    28c2:	20 f0       	brcs	.+8      	; 0x28cc <__udivmodsi4_ep>
    28c4:	a2 1b       	sub	r26, r18
    28c6:	b3 0b       	sbc	r27, r19
    28c8:	e4 0b       	sbc	r30, r20
    28ca:	f5 0b       	sbc	r31, r21

000028cc <__udivmodsi4_ep>:
    28cc:	66 1f       	adc	r22, r22
    28ce:	77 1f       	adc	r23, r23
    28d0:	88 1f       	adc	r24, r24
    28d2:	99 1f       	adc	r25, r25
    28d4:	1a 94       	dec	r1
    28d6:	69 f7       	brne	.-38     	; 0x28b2 <__udivmodsi4_loop>
    28d8:	60 95       	com	r22
    28da:	70 95       	com	r23
    28dc:	80 95       	com	r24
    28de:	90 95       	com	r25
    28e0:	9b 01       	movw	r18, r22
    28e2:	ac 01       	movw	r20, r24
    28e4:	bd 01       	movw	r22, r26
    28e6:	cf 01       	movw	r24, r30
    28e8:	08 95       	ret

000028ea <__prologue_saves__>:
    28ea:	2f 92       	push	r2
    28ec:	3f 92       	push	r3
    28ee:	4f 92       	push	r4
    28f0:	5f 92       	push	r5
    28f2:	6f 92       	push	r6
    28f4:	7f 92       	push	r7
    28f6:	8f 92       	push	r8
    28f8:	9f 92       	push	r9
    28fa:	af 92       	push	r10
    28fc:	bf 92       	push	r11
    28fe:	cf 92       	push	r12
    2900:	df 92       	push	r13
    2902:	ef 92       	push	r14
    2904:	ff 92       	push	r15
    2906:	0f 93       	push	r16
    2908:	1f 93       	push	r17
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	ca 1b       	sub	r28, r26
    2914:	db 0b       	sbc	r29, r27
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61
    2920:	09 94       	ijmp

00002922 <__epilogue_restores__>:
    2922:	2a 88       	ldd	r2, Y+18	; 0x12
    2924:	39 88       	ldd	r3, Y+17	; 0x11
    2926:	48 88       	ldd	r4, Y+16	; 0x10
    2928:	5f 84       	ldd	r5, Y+15	; 0x0f
    292a:	6e 84       	ldd	r6, Y+14	; 0x0e
    292c:	7d 84       	ldd	r7, Y+13	; 0x0d
    292e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2930:	9b 84       	ldd	r9, Y+11	; 0x0b
    2932:	aa 84       	ldd	r10, Y+10	; 0x0a
    2934:	b9 84       	ldd	r11, Y+9	; 0x09
    2936:	c8 84       	ldd	r12, Y+8	; 0x08
    2938:	df 80       	ldd	r13, Y+7	; 0x07
    293a:	ee 80       	ldd	r14, Y+6	; 0x06
    293c:	fd 80       	ldd	r15, Y+5	; 0x05
    293e:	0c 81       	ldd	r16, Y+4	; 0x04
    2940:	1b 81       	ldd	r17, Y+3	; 0x03
    2942:	aa 81       	ldd	r26, Y+2	; 0x02
    2944:	b9 81       	ldd	r27, Y+1	; 0x01
    2946:	ce 0f       	add	r28, r30
    2948:	d1 1d       	adc	r29, r1
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	ed 01       	movw	r28, r26
    2956:	08 95       	ret

00002958 <_exit>:
    2958:	f8 94       	cli

0000295a <__stop_program>:
    295a:	ff cf       	rjmp	.-2      	; 0x295a <__stop_program>

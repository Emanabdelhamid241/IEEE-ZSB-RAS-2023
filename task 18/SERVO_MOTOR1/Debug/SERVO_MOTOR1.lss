
SERVO_MOTOR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001d2a  00001dbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800068  00800068  00001dc6  2**0
                  ALLOC
  3 .stab         00001c14  00000000  00000000  00001dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010bc  00000000  00000000  000039dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006991  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000787c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000862c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000878c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000091e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__vector_10>
      2c:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 37       	cpi	r26, 0x73	; 115
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e2       	ldi	r30, 0x2A	; 42
      78:	fd e1       	ldi	r31, 0x1D	; 29
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 76 0d 	call	0x1aec	; 0x1aec <main>
      8a:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMERS_enum_TIMER0_INIT>:

/*Global pointer to function to TIMER0 OVF*/
static void (*TIMERS_pf_TIMER0_OVF)(void) = NULL;
/*Global pointer to function to TIMER0 CTC MODE*/
static void (*TIMERS_pf_TIMER0_CTC)(void) = NULL;
ES_t TIMERS_enum_TIMER0_INIT(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enu_Erorr_State = ES_OK ;
     b50:	19 82       	std	Y+1, r1	; 0x01
		/*set compare match unit register*/
		TIMERS_u8_OCR0_REG=COMPARE_MATCH_VALUE;

#elif TIMER_MODE == FAST_PWM_MODE
	/*Select FAST PWM mode*/
		 SET_BIT(TIMERS_u8_TCCR0_REG,timers_WGM01_BIT3);
     b52:	a3 e5       	ldi	r26, 0x53	; 83
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e3 e5       	ldi	r30, 0x53	; 83
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	88 60       	ori	r24, 0x08	; 8
     b5e:	8c 93       	st	X, r24
		 SET_BIT(TIMERS_u8_TCCR0_REG,timers_WGM00_BIT6);
     b60:	a3 e5       	ldi	r26, 0x53	; 83
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e3 e5       	ldi	r30, 0x53	; 83
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 64       	ori	r24, 0x40	; 64
     b6c:	8c 93       	st	X, r24

		 /*Select HW Action on oc0 pin to non interting*/
		SET_BIT(TIMERS_u8_TCCR0_REG,timers_COM01_BIT5);
     b6e:	a3 e5       	ldi	r26, 0x53	; 83
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e3 e5       	ldi	r30, 0x53	; 83
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	80 62       	ori	r24, 0x20	; 32
     b7a:	8c 93       	st	X, r24
		CLR_BIT(TIMERS_u8_TCCR0_REG,timers_COM00_BIT4);
     b7c:	a3 e5       	ldi	r26, 0x53	; 83
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e3 e5       	ldi	r30, 0x53	; 83
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	8f 7e       	andi	r24, 0xEF	; 239
     b88:	8c 93       	st	X, r24
		CLR_BIT(TIMERS_u8_TCCR0_REG,timers_COM00_BIT4);


#endif
/*set prescaler value CLK/8 */
CLR_BIT(TIMERS_u8_TCCR0_REG,timers_CS00_BIT0);
     b8a:	a3 e5       	ldi	r26, 0x53	; 83
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e3 e5       	ldi	r30, 0x53	; 83
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	8e 7f       	andi	r24, 0xFE	; 254
     b96:	8c 93       	st	X, r24
SET_BIT(TIMERS_u8_TCCR0_REG,timers_CS01_BIT1);
     b98:	a3 e5       	ldi	r26, 0x53	; 83
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e3 e5       	ldi	r30, 0x53	; 83
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	82 60       	ori	r24, 0x02	; 2
     ba4:	8c 93       	st	X, r24
CLR_BIT(TIMERS_u8_TCCR0_REG,timers_CS02_BIT2);
     ba6:	a3 e5       	ldi	r26, 0x53	; 83
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e3 e5       	ldi	r30, 0x53	; 83
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	8b 7f       	andi	r24, 0xFB	; 251
     bb2:	8c 93       	st	X, r24


return Local_enu_Erorr_State;
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     bb6:	0f 90       	pop	r0
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <TIMERS_enum_TIMER1_INIT>:
ES_t TIMERS_enum_TIMER1_INIT(void)
{
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	0f 92       	push	r0
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State = ES_OK ;
     bc8:	19 82       	std	Y+1, r1	; 0x01
	/*select timer1 mode --> 14(fast PWM) (ICR1=Top Value)*/
	CLR_BIT(TIMERS_u8_TCCR1A_REG,timers_WGM10_BIT0);
     bca:	af e4       	ldi	r26, 0x4F	; 79
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	ef e4       	ldi	r30, 0x4F	; 79
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8e 7f       	andi	r24, 0xFE	; 254
     bd6:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,timers_WGM11_BIT1);
     bd8:	af e4       	ldi	r26, 0x4F	; 79
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	ef e4       	ldi	r30, 0x4F	; 79
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	82 60       	ori	r24, 0x02	; 2
     be4:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,timers_WGM12_BIT3);
     be6:	ae e4       	ldi	r26, 0x4E	; 78
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	ee e4       	ldi	r30, 0x4E	; 78
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	88 60       	ori	r24, 0x08	; 8
     bf2:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,timers_WGM13_BIT4);
     bf4:	ae e4       	ldi	r26, 0x4E	; 78
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	ee e4       	ldi	r30, 0x4E	; 78
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	80 61       	ori	r24, 0x10	; 16
     c00:	8c 93       	st	X, r24

	/*SELECT HM Action on OC1A Pin --> non inverting*/
	CLR_BIT(TIMERS_u8_TCCR1A_REG,timers_COM1A0_BIT6);
     c02:	af e4       	ldi	r26, 0x4F	; 79
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	ef e4       	ldi	r30, 0x4F	; 79
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	8f 7b       	andi	r24, 0xBF	; 191
     c0e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,timers_COM1A1_BIT7);
     c10:	af e4       	ldi	r26, 0x4F	; 79
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	ef e4       	ldi	r30, 0x4F	; 79
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	80 68       	ori	r24, 0x80	; 128
     c1c:	8c 93       	st	X, r24

	/*SET TOP Value IN OCI1 */
	TIMERS_u16_ICR1_REG = TIMER1_u16_TOP_Value_IN_OCI1;
     c1e:	e6 e4       	ldi	r30, 0x46	; 70
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	8f e1       	ldi	r24, 0x1F	; 31
     c24:	9e e4       	ldi	r25, 0x4E	; 78
     c26:	91 83       	std	Z+1, r25	; 0x01
     c28:	80 83       	st	Z, r24
	/*Angle of servo motor = 180 */
//		TIMERS_u16_OCR1A_REG = TIMER1_u16_angle_180  ;


	/*set prescaler value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG,timers_CS10_BIT0);
     c2a:	ae e4       	ldi	r26, 0x4E	; 78
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	ee e4       	ldi	r30, 0x4E	; 78
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	8e 7f       	andi	r24, 0xFE	; 254
     c36:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,timers_CS11_BIT1);
     c38:	ae e4       	ldi	r26, 0x4E	; 78
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	ee e4       	ldi	r30, 0x4E	; 78
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	82 60       	ori	r24, 0x02	; 2
     c44:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,timers_CS12_BIT2);
     c46:	ae e4       	ldi	r26, 0x4E	; 78
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	ee e4       	ldi	r30, 0x4E	; 78
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	8b 7f       	andi	r24, 0xFB	; 251
     c52:	8c 93       	st	X, r24

	return Local_enu_Erorr_State;
     c54:	89 81       	ldd	r24, Y+1	; 0x01

}
     c56:	0f 90       	pop	r0
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <TIMERS_enum_TIMER0_SET_CALL_BACK>:
ES_t TIMERS_enum_TIMER0_SET_CALL_BACK(void(*Copy_pf_TIMER0_OVF)(void)){
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	00 d0       	rcall	.+0      	; 0xc64 <TIMERS_enum_TIMER0_SET_CALL_BACK+0x6>
     c64:	0f 92       	push	r0
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	9b 83       	std	Y+3, r25	; 0x03
     c6c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State = ES_OK ;
     c6e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pf_TIMER0_OVF !=NULL)
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	9b 81       	ldd	r25, Y+3	; 0x03
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	39 f0       	breq	.+14     	; 0xc86 <TIMERS_enum_TIMER0_SET_CALL_BACK+0x28>
	{
		TIMERS_pf_TIMER0_OVF=Copy_pf_TIMER0_OVF;
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	9b 81       	ldd	r25, Y+3	; 0x03
     c7c:	90 93 69 00 	sts	0x0069, r25
     c80:	80 93 68 00 	sts	0x0068, r24
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <TIMERS_enum_TIMER0_SET_CALL_BACK+0x2c>

	}
	else
	{
		Local_enu_Erorr_State=ES_NOK;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enu_Erorr_State;
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <TIMERS_enum_TIMER0_CTC_SET_CALL_BACK>:
ES_t TIMERS_enum_TIMER0_CTC_SET_CALL_BACK(void(*Copy_pf_TIMERO_CTC)(void))
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <TIMERS_enum_TIMER0_CTC_SET_CALL_BACK+0x6>
     c9e:	0f 92       	push	r0
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	9b 83       	std	Y+3, r25	; 0x03
     ca6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State = ES_OK ;
     ca8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pf_TIMERO_CTC !=NULL)
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	9b 81       	ldd	r25, Y+3	; 0x03
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	39 f0       	breq	.+14     	; 0xcc0 <TIMERS_enum_TIMER0_CTC_SET_CALL_BACK+0x28>
		{
		TIMERS_pf_TIMER0_CTC=Copy_pf_TIMERO_CTC;
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	90 93 6b 00 	sts	0x006B, r25
     cba:	80 93 6a 00 	sts	0x006A, r24
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <TIMERS_enum_TIMER0_CTC_SET_CALL_BACK+0x2c>

		}
		else
		{
			Local_enu_Erorr_State=ES_NOK;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enu_Erorr_State;
     cc4:	89 81       	ldd	r24, Y+1	; 0x01

}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <TIMERS_enum_TIMER0_SET_COMPARE_MATCH_VALUE>:
ES_t TIMERS_enum_TIMER0_SET_COMPARE_MATCH_VALUE(u8 Copy_u8_OCR0_Value)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <TIMERS_enum_TIMER0_SET_COMPARE_MATCH_VALUE+0x6>
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
     cde:	19 82       	std	Y+1, r1	; 0x01
    TIMERS_u8_OCR0_REG = Copy_u8_OCR0_Value;
     ce0:	ec e5       	ldi	r30, 0x5C	; 92
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	80 83       	st	Z, r24

	return Local_enu_Erorr_State;
     ce8:	89 81       	ldd	r24, Y+1	; 0x01

}
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <TIMERS_enum_TIMER1_SET_COMPARE_MATCH_VALUE_A>:
ES_t TIMERS_enum_TIMER1_SET_COMPARE_MATCH_VALUE_A(u16 Copy_u16_OCR1_Value)
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <TIMERS_enum_TIMER1_SET_COMPARE_MATCH_VALUE_A+0x6>
     cfa:	0f 92       	push	r0
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	9b 83       	std	Y+3, r25	; 0x03
     d02:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
     d04:	19 82       	std	Y+1, r1	; 0x01
	TIMERS_u16_ICR1_REG = Copy_u16_OCR1_Value;
     d06:	e6 e4       	ldi	r30, 0x46	; 70
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	9b 81       	ldd	r25, Y+3	; 0x03
     d0e:	91 83       	std	Z+1, r25	; 0x01
     d10:	80 83       	st	Z, r24

		return Local_enu_Erorr_State;
     d12:	89 81       	ldd	r24, Y+1	; 0x01

}
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle>:
ES_t TIMERS_enum_TIMER1_SET_Servo_Motor_Angle(u16 Copy_u16_Servo_Motor_Angle)
{
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	00 d0       	rcall	.+0      	; 0xd2a <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle+0xa>
     d2a:	0f 92       	push	r0
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	9b 83       	std	Y+3, r25	; 0x03
     d32:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
     d34:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u16_Servo_Motor_Angle <= TIMERS_SERVO_u8_MAX_ANGLE){
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	9b 81       	ldd	r25, Y+3	; 0x03
     d3a:	85 3b       	cpi	r24, 0xB5	; 181
     d3c:	91 05       	cpc	r25, r1
     d3e:	08 f5       	brcc	.+66     	; 0xd82 <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle+0x62>
		TIMERS_u16_OCR1A_REG = ((Copy_u16_Servo_Motor_Angle*1000UL)/TIMERS_SERVO_u8_MAX_ANGLE)+999;
     d40:	0a e4       	ldi	r16, 0x4A	; 74
     d42:	10 e0       	ldi	r17, 0x00	; 0
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	cc 01       	movw	r24, r24
     d4a:	a0 e0       	ldi	r26, 0x00	; 0
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	28 ee       	ldi	r18, 0xE8	; 232
     d50:	33 e0       	ldi	r19, 0x03	; 3
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	bc 01       	movw	r22, r24
     d58:	cd 01       	movw	r24, r26
     d5a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__mulsi3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	24 eb       	ldi	r18, 0xB4	; 180
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	bc 01       	movw	r22, r24
     d6c:	cd 01       	movw	r24, r26
     d6e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__udivmodsi4>
     d72:	da 01       	movw	r26, r20
     d74:	c9 01       	movw	r24, r18
     d76:	89 51       	subi	r24, 0x19	; 25
     d78:	9c 4f       	sbci	r25, 0xFC	; 252
     d7a:	f8 01       	movw	r30, r16
     d7c:	91 83       	std	Z+1, r25	; 0x01
     d7e:	80 83       	st	Z, r24
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle+0x66>

	}
	else{
		Local_enu_Erorr_State= ES_NOK;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	89 83       	std	Y+1, r24	; 0x01

	}
			return Local_enu_Erorr_State;
     d86:	89 81       	ldd	r24, Y+1	; 0x01

}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	08 95       	ret

00000d98 <__vector_11>:

/* prototype FOR ISR of TIMER0 OVF */
void __vector_11(void)        __attribute__((signal));
void __vector_11(void)
{
     d98:	1f 92       	push	r1
     d9a:	0f 92       	push	r0
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	2f 93       	push	r18
     da4:	3f 93       	push	r19
     da6:	4f 93       	push	r20
     da8:	5f 93       	push	r21
     daa:	6f 93       	push	r22
     dac:	7f 93       	push	r23
     dae:	8f 93       	push	r24
     db0:	9f 93       	push	r25
     db2:	af 93       	push	r26
     db4:	bf 93       	push	r27
     db6:	ef 93       	push	r30
     db8:	ff 93       	push	r31
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
static u16 Local_TIMERS_u16_Counter_OVF =TIMERS_u8_intial_counter_value;
Local_TIMERS_u16_Counter_OVF++;
     dc2:	80 91 6c 00 	lds	r24, 0x006C
     dc6:	90 91 6d 00 	lds	r25, 0x006D
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	90 93 6d 00 	sts	0x006D, r25
     dd0:	80 93 6c 00 	sts	0x006C, r24
if(Local_TIMERS_u16_Counter_OVF==TIMER0_u8_Counter_of_OVF)
     dd4:	80 91 6c 00 	lds	r24, 0x006C
     dd8:	90 91 6d 00 	lds	r25, 0x006D
     ddc:	2f e0       	ldi	r18, 0x0F	; 15
     dde:	83 34       	cpi	r24, 0x43	; 67
     de0:	92 07       	cpc	r25, r18
     de2:	99 f4       	brne	.+38     	; 0xe0a <__vector_11+0x72>
{
	/*update preload value*/
	TIMERS_u8_TCNT0_REG=TIMERO_u8_preload_value;
     de4:	e2 e5       	ldi	r30, 0x52	; 82
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 ec       	ldi	r24, 0xC0	; 192
     dea:	80 83       	st	Z, r24
	/*Clear OVF counter*/
	Local_TIMERS_u16_Counter_OVF=TIMERS_u8_intial_counter_value;
     dec:	10 92 6d 00 	sts	0x006D, r1
     df0:	10 92 6c 00 	sts	0x006C, r1
	/*Call APP Function*/
	if(TIMERS_pf_TIMER0_OVF != NULL)
     df4:	80 91 68 00 	lds	r24, 0x0068
     df8:	90 91 69 00 	lds	r25, 0x0069
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	29 f0       	breq	.+10     	; 0xe0a <__vector_11+0x72>
	{
		TIMERS_pf_TIMER0_OVF();
     e00:	e0 91 68 00 	lds	r30, 0x0068
     e04:	f0 91 69 00 	lds	r31, 0x0069
     e08:	09 95       	icall
	}

}
}
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	ff 91       	pop	r31
     e10:	ef 91       	pop	r30
     e12:	bf 91       	pop	r27
     e14:	af 91       	pop	r26
     e16:	9f 91       	pop	r25
     e18:	8f 91       	pop	r24
     e1a:	7f 91       	pop	r23
     e1c:	6f 91       	pop	r22
     e1e:	5f 91       	pop	r21
     e20:	4f 91       	pop	r20
     e22:	3f 91       	pop	r19
     e24:	2f 91       	pop	r18
     e26:	0f 90       	pop	r0
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	0f 90       	pop	r0
     e2c:	1f 90       	pop	r1
     e2e:	18 95       	reti

00000e30 <__vector_10>:
/* prototype FOR ISR of CTC MODE */
void __vector_10(void)        __attribute__((signal));
void __vector_10(void)
{
     e30:	1f 92       	push	r1
     e32:	0f 92       	push	r0
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	0f 92       	push	r0
     e38:	11 24       	eor	r1, r1
     e3a:	2f 93       	push	r18
     e3c:	3f 93       	push	r19
     e3e:	4f 93       	push	r20
     e40:	5f 93       	push	r21
     e42:	6f 93       	push	r22
     e44:	7f 93       	push	r23
     e46:	8f 93       	push	r24
     e48:	9f 93       	push	r25
     e4a:	af 93       	push	r26
     e4c:	bf 93       	push	r27
     e4e:	ef 93       	push	r30
     e50:	ff 93       	push	r31
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
static u16 Local_TIMERS_u16_Counter_OVF_CTC =TIMERS_u8_intial_counter_value;
Local_TIMERS_u16_Counter_OVF_CTC++;
     e5a:	80 91 6e 00 	lds	r24, 0x006E
     e5e:	90 91 6f 00 	lds	r25, 0x006F
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	90 93 6f 00 	sts	0x006F, r25
     e68:	80 93 6e 00 	sts	0x006E, r24
if(Local_TIMERS_u16_Counter_OVF_CTC==TIMER0_u8_Counter_of_OVF_CTC)
     e6c:	80 91 6e 00 	lds	r24, 0x006E
     e70:	90 91 6f 00 	lds	r25, 0x006F
     e74:	27 e2       	ldi	r18, 0x27	; 39
     e76:	80 31       	cpi	r24, 0x10	; 16
     e78:	92 07       	cpc	r25, r18
     e7a:	79 f4       	brne	.+30     	; 0xe9a <__vector_10+0x6a>
{

	/*Clear OVF counter*/
	Local_TIMERS_u16_Counter_OVF_CTC=TIMERS_u8_intial_counter_value;
     e7c:	10 92 6f 00 	sts	0x006F, r1
     e80:	10 92 6e 00 	sts	0x006E, r1
	/*Call APP Function*/
	if(TIMERS_pf_TIMER0_CTC != NULL)
     e84:	80 91 6a 00 	lds	r24, 0x006A
     e88:	90 91 6b 00 	lds	r25, 0x006B
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	29 f0       	breq	.+10     	; 0xe9a <__vector_10+0x6a>
	{
		TIMERS_pf_TIMER0_CTC();
     e90:	e0 91 6a 00 	lds	r30, 0x006A
     e94:	f0 91 6b 00 	lds	r31, 0x006B
     e98:	09 95       	icall
	}

}
}
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti

00000ec0 <ADC_enum_ADC_INIT>:
/*Global pointer to function*/
static void (*ADC_pf_ADC_notification)(u16) = NULL;
/*ADC busy flag*/
static u8 ADC_u8_busy_flag=0;

ES_t  ADC_enum_ADC_INIT(void){
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	0f 92       	push	r0
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enu_Erorr_State = ES_OK ;
     eca:	19 82       	std	Y+1, r1	; 0x01

	 /* 1- select Vref = AVCC*/
    CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_REFS1_BIT7);
     ecc:	a7 e2       	ldi	r26, 0x27	; 39
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e7 e2       	ldi	r30, 0x27	; 39
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8f 77       	andi	r24, 0x7F	; 127
     ed8:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_REFS0_BIT6);
     eda:	a7 e2       	ldi	r26, 0x27	; 39
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e7 e2       	ldi	r30, 0x27	; 39
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	80 64       	ori	r24, 0x40	; 64
     ee6:	8c 93       	st	X, r24

	 /* 2-Right Adjust */
    CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADLAR_BIT5);
     ee8:	a7 e2       	ldi	r26, 0x27	; 39
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e7 e2       	ldi	r30, 0x27	; 39
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8f 7d       	andi	r24, 0xDF	; 223
     ef4:	8c 93       	st	X, r24

	 /* 3-Enable AutoTrigger */
    CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADATE_BIT5);
     ef6:	a6 e2       	ldi	r26, 0x26	; 38
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e6 e2       	ldi	r30, 0x26	; 38
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8f 7d       	andi	r24, 0xDF	; 223
     f02:	8c 93       	st	X, r24

	 /* 4-Select CLK/64  */
    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADPS2_BIT2);
     f04:	a6 e2       	ldi	r26, 0x26	; 38
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e6 e2       	ldi	r30, 0x26	; 38
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	84 60       	ori	r24, 0x04	; 4
     f10:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADPS1_BIT1);
     f12:	a6 e2       	ldi	r26, 0x26	; 38
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e6 e2       	ldi	r30, 0x26	; 38
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	82 60       	ori	r24, 0x02	; 2
     f1e:	8c 93       	st	X, r24
    CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADPS0_BIT0);
     f20:	a6 e2       	ldi	r26, 0x26	; 38
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e6 e2       	ldi	r30, 0x26	; 38
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8e 7f       	andi	r24, 0xFE	; 254
     f2c:	8c 93       	st	X, r24


	 /* 5-Enable ADC */
    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADEN_BIT7);
     f2e:	a6 e2       	ldi	r26, 0x26	; 38
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e6 e2       	ldi	r30, 0x26	; 38
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	80 68       	ori	r24, 0x80	; 128
     f3a:	8c 93       	st	X, r24

	 return Local_enu_Erorr_State;
     f3c:	89 81       	ldd	r24, Y+1	; 0x01

}
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking>:

ES_t  ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking(u8 Copy_u8_ADC_Channel_NB,u16 * Copy_pu16_ADC_Digital_Value){
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	28 97       	sbiw	r28, 0x08	; 8
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	8e 83       	std	Y+6, r24	; 0x06
     f5c:	78 87       	std	Y+8, r23	; 0x08
     f5e:	6f 83       	std	Y+7, r22	; 0x07
	 ES_t Local_enu_Erorr_State = ES_OK ;
     f60:	1d 82       	std	Y+5, r1	; 0x05
	 u32 Local_u32_ADC_TiomeOut_Counter = ADC_u8_initial_counter ;
     f62:	19 82       	std	Y+1, r1	; 0x01
     f64:	1a 82       	std	Y+2, r1	; 0x02
     f66:	1b 82       	std	Y+3, r1	; 0x03
     f68:	1c 82       	std	Y+4, r1	; 0x04

     if((Copy_u8_ADC_Channel_NB < ADC_u8_Max_Channels_NB) && (Copy_pu16_ADC_Digital_Value != NULL) && (ADC_u8_busy_flag ==0)){
     f6a:	8e 81       	ldd	r24, Y+6	; 0x06
     f6c:	80 32       	cpi	r24, 0x20	; 32
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x2c>
     f70:	62 c0       	rjmp	.+196    	; 0x1036 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf0>
     f72:	8f 81       	ldd	r24, Y+7	; 0x07
     f74:	98 85       	ldd	r25, Y+8	; 0x08
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	09 f4       	brne	.+2      	; 0xf7c <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x36>
     f7a:	5d c0       	rjmp	.+186    	; 0x1036 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf0>
     f7c:	80 91 72 00 	lds	r24, 0x0072
     f80:	88 23       	and	r24, r24
     f82:	09 f0       	breq	.+2      	; 0xf86 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x40>
     f84:	58 c0       	rjmp	.+176    	; 0x1036 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf0>
    	 /*set ADC flag is busy*/
    	 	 	ADC_u8_busy_flag=1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	80 93 72 00 	sts	0x0072, r24
    	 /*1- clear MUX4....0*/
    	 ADC_u8_ADMUX_REG &= CLEAR_MUX_BITS;
     f8c:	a7 e2       	ldi	r26, 0x27	; 39
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e7 e2       	ldi	r30, 0x27	; 39
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	80 7e       	andi	r24, 0xE0	; 224
     f98:	8c 93       	st	X, r24

    	 /*2- Select Channel NB*/
    	 ADC_u8_ADMUX_REG |= Copy_u8_ADC_Channel_NB;
     f9a:	a7 e2       	ldi	r26, 0x27	; 39
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e7 e2       	ldi	r30, 0x27	; 39
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	90 81       	ld	r25, Z
     fa4:	8e 81       	ldd	r24, Y+6	; 0x06
     fa6:	89 2b       	or	r24, r25
     fa8:	8c 93       	st	X, r24

    	 /*3- Start Conversion*/
    	    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC_BIT6);
     faa:	a6 e2       	ldi	r26, 0x26	; 38
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e6 e2       	ldi	r30, 0x26	; 38
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	80 64       	ori	r24, 0x40	; 64
     fb6:	8c 93       	st	X, r24
     fb8:	0b c0       	rjmp	.+22     	; 0xfd0 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x8a>

    	    /*4- wait flag=1*/
    	    while ((!GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT4))&&(Local_u32_ADC_TiomeOut_Counter<ADC_u32_TIME_OUT_MAX_VALUE))
    	    {
    	    	Local_u32_ADC_TiomeOut_Counter++;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	ab 81       	ldd	r26, Y+3	; 0x03
     fc0:	bc 81       	ldd	r27, Y+4	; 0x04
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	a1 1d       	adc	r26, r1
     fc6:	b1 1d       	adc	r27, r1
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	9a 83       	std	Y+2, r25	; 0x02
     fcc:	ab 83       	std	Y+3, r26	; 0x03
     fce:	bc 83       	std	Y+4, r27	; 0x04

    	 /*3- Start Conversion*/
    	    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC_BIT6);

    	    /*4- wait flag=1*/
    	    while ((!GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT4))&&(Local_u32_ADC_TiomeOut_Counter<ADC_u32_TIME_OUT_MAX_VALUE))
     fd0:	e6 e2       	ldi	r30, 0x26	; 38
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	80 71       	andi	r24, 0x10	; 16
     fdc:	90 70       	andi	r25, 0x00	; 0
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	61 f4       	brne	.+24     	; 0xffa <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xb4>
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	ab 81       	ldd	r26, Y+3	; 0x03
     fe8:	bc 81       	ldd	r27, Y+4	; 0x04
     fea:	88 38       	cpi	r24, 0x88	; 136
     fec:	23 e1       	ldi	r18, 0x13	; 19
     fee:	92 07       	cpc	r25, r18
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	a2 07       	cpc	r26, r18
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	b2 07       	cpc	r27, r18
     ff8:	00 f3       	brcs	.-64     	; 0xfba <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x74>
    	    {
    	    	Local_u32_ADC_TiomeOut_Counter++;
    	    }
    	    if(GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT4)!=0)/*Local_u32_ADC_TiomeOut_Counter<ADC_u32_TIME_OUT_MAX_VALUE*/
     ffa:	e6 e2       	ldi	r30, 0x26	; 38
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	80 71       	andi	r24, 0x10	; 16
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	91 f0       	breq	.+36     	; 0x1030 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xea>
    	    {

    	    /*5-Clear flag*/
    	    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT4);
    100c:	a6 e2       	ldi	r26, 0x26	; 38
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e6 e2       	ldi	r30, 0x26	; 38
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	80 61       	ori	r24, 0x10	; 16
    1018:	8c 93       	st	X, r24
    	    /*clear ADC busy flag*/
    	      ADC_u8_busy_flag=0;
    101a:	10 92 72 00 	sts	0x0072, r1
    	    /*6-Read DIGITAL Value*/
    	    *Copy_pu16_ADC_Digital_Value = ADC_u16_ADC_REG ;
    101e:	e4 e2       	ldi	r30, 0x24	; 36
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	91 81       	ldd	r25, Z+1	; 0x01
    1026:	ef 81       	ldd	r30, Y+7	; 0x07
    1028:	f8 85       	ldd	r31, Y+8	; 0x08
    102a:	91 83       	std	Z+1, r25	; 0x01
    102c:	80 83       	st	Z, r24
    102e:	05 c0       	rjmp	.+10     	; 0x103a <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf4>
    	    }
    	    else{
    	    	 Local_enu_Erorr_State= ES_NOK;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	8d 83       	std	Y+5, r24	; 0x05
    1034:	02 c0       	rjmp	.+4      	; 0x103a <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf4>

    	    }

     }
     else{
    	 Local_enu_Erorr_State= ES_NOK;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	8d 83       	std	Y+5, r24	; 0x05
     }
	 return Local_enu_Erorr_State;
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    103c:	28 96       	adiw	r28, 0x08	; 8
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <ADC_enum_GET_DIGITAL_VALUE_ASynch>:

ES_t  ADC_enum_GET_DIGITAL_VALUE_ASynch(u8 Copy_u8_ADC_Channel_NB,void(*Copy_pf_ADC_notifction)(u16))
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	00 d0       	rcall	.+0      	; 0x1054 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x6>
    1054:	00 d0       	rcall	.+0      	; 0x1056 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x8>
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	8a 83       	std	Y+2, r24	; 0x02
    105c:	7c 83       	std	Y+4, r23	; 0x04
    105e:	6b 83       	std	Y+3, r22	; 0x03
		 ES_t Local_enu_Erorr_State = ES_OK ;
    1060:	19 82       	std	Y+1, r1	; 0x01
     if((Copy_u8_ADC_Channel_NB < ADC_u8_Max_Channels_NB) && (Copy_pf_ADC_notifction != NULL) && (ADC_u8_busy_flag ==0)){
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	80 32       	cpi	r24, 0x20	; 32
    1066:	78 f5       	brcc	.+94     	; 0x10c6 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x78>
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	59 f1       	breq	.+86     	; 0x10c6 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x78>
    1070:	80 91 72 00 	lds	r24, 0x0072
    1074:	88 23       	and	r24, r24
    1076:	39 f5       	brne	.+78     	; 0x10c6 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x78>
    	 /*set ADC flag is busy*/
    	 	ADC_u8_busy_flag=1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	80 93 72 00 	sts	0x0072, r24

    	 /*Update  pointer to function*/
    	 ADC_pf_ADC_notification=Copy_pf_ADC_notifction;
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	90 93 71 00 	sts	0x0071, r25
    1086:	80 93 70 00 	sts	0x0070, r24
    	 /*Enable ADC interrupt*/
   	    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIE_BIT3);
    108a:	a6 e2       	ldi	r26, 0x26	; 38
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e6 e2       	ldi	r30, 0x26	; 38
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	88 60       	ori	r24, 0x08	; 8
    1096:	8c 93       	st	X, r24
       /*1- clear MUX4....0*/
   	  ADC_u8_ADMUX_REG &= CLEAR_MUX_BITS;
    1098:	a7 e2       	ldi	r26, 0x27	; 39
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e7 e2       	ldi	r30, 0x27	; 39
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	80 7e       	andi	r24, 0xE0	; 224
    10a4:	8c 93       	st	X, r24
       	 /*2- Select Channel NB*/
   	   	 ADC_u8_ADMUX_REG |= Copy_u8_ADC_Channel_NB;
    10a6:	a7 e2       	ldi	r26, 0x27	; 39
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e7 e2       	ldi	r30, 0x27	; 39
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	90 81       	ld	r25, Z
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	89 2b       	or	r24, r25
    10b4:	8c 93       	st	X, r24
       	 /*3- Start Conversion*/
         SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC_BIT6);
    10b6:	a6 e2       	ldi	r26, 0x26	; 38
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e6 e2       	ldi	r30, 0x26	; 38
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	80 64       	ori	r24, 0x40	; 64
    10c2:	8c 93       	st	X, r24
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x7c>


     }
     else{
        	 Local_enu_Erorr_State= ES_NOK;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	89 83       	std	Y+1, r24	; 0x01
         }

	 return Local_enu_Erorr_State;
    10ca:	89 81       	ldd	r24, Y+1	; 0x01

}
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <ADC_enum_GET_ADC_REG_VALUE>:
ES_t  ADC_enum_GET_ADC_REG_VALUE(u16 * Copy_pu16_ADC_Value)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <ADC_enum_GET_ADC_REG_VALUE+0x6>
    10e0:	0f 92       	push	r0
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	9b 83       	std	Y+3, r25	; 0x03
    10e8:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enu_Erorr_State = ES_OK ;
    10ea:	19 82       	std	Y+1, r1	; 0x01
	 if(Copy_pu16_ADC_Value!= NULL)
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	9b 81       	ldd	r25, Y+3	; 0x03
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	49 f0       	breq	.+18     	; 0x1106 <ADC_enum_GET_ADC_REG_VALUE+0x2c>
	 {
		 /*read ADC REG*/
		 *Copy_pu16_ADC_Value= ADC_u16_ADC_REG ;
    10f4:	e4 e2       	ldi	r30, 0x24	; 36
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	ea 81       	ldd	r30, Y+2	; 0x02
    10fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
    1104:	02 c0       	rjmp	.+4      	; 0x110a <ADC_enum_GET_ADC_REG_VALUE+0x30>

	 }
	 else{
    	 Local_enu_Erorr_State= ES_NOK;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01
     }

	 return Local_enu_Erorr_State;
    110a:	89 81       	ldd	r24, Y+1	; 0x01

}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <__vector_16>:
//prototype FOR ISR
void __vector_16(void)        __attribute__((signal));
void __vector_16(void)
{
    1118:	1f 92       	push	r1
    111a:	0f 92       	push	r0
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	0f 92       	push	r0
    1120:	11 24       	eor	r1, r1
    1122:	2f 93       	push	r18
    1124:	3f 93       	push	r19
    1126:	4f 93       	push	r20
    1128:	5f 93       	push	r21
    112a:	6f 93       	push	r22
    112c:	7f 93       	push	r23
    112e:	8f 93       	push	r24
    1130:	9f 93       	push	r25
    1132:	af 93       	push	r26
    1134:	bf 93       	push	r27
    1136:	ef 93       	push	r30
    1138:	ff 93       	push	r31
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pf_ADC_notification!= NULL)
    1142:	80 91 70 00 	lds	r24, 0x0070
    1146:	90 91 71 00 	lds	r25, 0x0071
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	99 f0       	breq	.+38     	; 0x1174 <__vector_16+0x5c>
	{
		/*clear ADC busy flag */
		 ADC_u8_busy_flag=0;
    114e:	10 92 72 00 	sts	0x0072, r1
		/*clear PIE of ADC */
   	    CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIE_BIT3);
    1152:	a6 e2       	ldi	r26, 0x26	; 38
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e6 e2       	ldi	r30, 0x26	; 38
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	87 7f       	andi	r24, 0xF7	; 247
    115e:	8c 93       	st	X, r24
   	   	/*calling notification function*/
   		ADC_pf_ADC_notification(ADC_u16_ADC_REG);
    1160:	20 91 70 00 	lds	r18, 0x0070
    1164:	30 91 71 00 	lds	r19, 0x0071
    1168:	e4 e2       	ldi	r30, 0x24	; 36
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	91 81       	ldd	r25, Z+1	; 0x01
    1170:	f9 01       	movw	r30, r18
    1172:	09 95       	icall
	}

	}
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	ff 91       	pop	r31
    117a:	ef 91       	pop	r30
    117c:	bf 91       	pop	r27
    117e:	af 91       	pop	r26
    1180:	9f 91       	pop	r25
    1182:	8f 91       	pop	r24
    1184:	7f 91       	pop	r23
    1186:	6f 91       	pop	r22
    1188:	5f 91       	pop	r21
    118a:	4f 91       	pop	r20
    118c:	3f 91       	pop	r19
    118e:	2f 91       	pop	r18
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	0f 90       	pop	r0
    1196:	1f 90       	pop	r1
    1198:	18 95       	reti

0000119a <GI_enum_GI_Enable>:
//MCAL
//#include "GI_config.h"
//#include "GI_private.h"
#include "GI_interface.h"

ES_t  GI_enum_GI_Enable(void){
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG_REG,GI_u8_PIN7);
    11a2:	af e5       	ldi	r26, 0x5F	; 95
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ef e5       	ldi	r30, 0x5F	; 95
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	80 68       	ori	r24, 0x80	; 128
    11ae:	8c 93       	st	X, r24
return ES_OK;
    11b0:	80 e0       	ldi	r24, 0x00	; 0
}
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <GI_enum_GI_Disable>:
ES_t  GI_enum_GI_Disable(void){
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG_REG,GI_u8_PIN7);
    11c0:	af e5       	ldi	r26, 0x5F	; 95
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ef e5       	ldi	r30, 0x5F	; 95
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8f 77       	andi	r24, 0x7F	; 127
    11cc:	8c 93       	st	X, r24
	return ES_OK;
    11ce:	80 e0       	ldi	r24, 0x00	; 0

}
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <DIO_voidInit>:
//MCAL Layer
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidInit(void){
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = CONC(DIO_U8_PA7_INTIAL_DIRECTION, DIO_U8_PA6_INTIAL_DIRECTION, DIO_U8_PA5_INTIAL_DIRECTION, DIO_U8_PA4_INTIAL_DIRECTION,
    11de:	ea e3       	ldi	r30, 0x3A	; 58
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	80 83       	st	Z, r24
		                   DIO_U8_PA3_INTIAL_DIRECTION, DIO_U8_PA2_INTIAL_DIRECTION, DIO_U8_PA1_INTIAL_DIRECTION, DIO_U8_PA0_INTIAL_DIRECTION);
		                 			
	DIO_u8_DDRB_REG = CONC(DIO_U8_PB7_INTIAL_DIRECTION, DIO_U8_PB6_INTIAL_DIRECTION, DIO_U8_PB5_INTIAL_DIRECTION, DIO_U8_PB4_INTIAL_DIRECTION,
    11e6:	e7 e3       	ldi	r30, 0x37	; 55
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	87 e2       	ldi	r24, 0x27	; 39
    11ec:	80 83       	st	Z, r24
				           DIO_U8_PB3_INTIAL_DIRECTION, DIO_U8_PB2_INTIAL_DIRECTION, DIO_U8_PB1_INTIAL_DIRECTION, DIO_U8_PB0_INTIAL_DIRECTION);
					                                                                                                                      
	DIO_u8_DDRC_REG = CONC(DIO_U8_PC7_INTIAL_DIRECTION, DIO_U8_PC6_INTIAL_DIRECTION, DIO_U8_PC5_INTIAL_DIRECTION, DIO_U8_PC4_INTIAL_DIRECTION,
    11ee:	e4 e3       	ldi	r30, 0x34	; 52
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	10 82       	st	Z, r1
		                   DIO_U8_PC3_INTIAL_DIRECTION, DIO_U8_PC2_INTIAL_DIRECTION, DIO_U8_PC1_INTIAL_DIRECTION, DIO_U8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = CONC(DIO_U8_PD7_INTIAL_DIRECTION, DIO_U8_PD6_INTIAL_DIRECTION, DIO_U8_PD5_INTIAL_DIRECTION, DIO_U8_PD4_INTIAL_DIRECTION,
    11f4:	e1 e3       	ldi	r30, 0x31	; 49
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	80 83       	st	Z, r24
				           DIO_U8_PD3_INTIAL_DIRECTION, DIO_U8_PD2_INTIAL_DIRECTION, DIO_U8_PD1_INTIAL_DIRECTION, DIO_U8_PD0_INTIAL_DIRECTION);

	DIO_u8_PORTA_REG = CONC(DIO_U8_PA7_INTIAL_VALUE, DIO_U8_PA6_INTIAL_VALUE, DIO_U8_PA5_INTIAL_VALUE, DIO_U8_PA4_INTIAL_VALUE,
    11fc:	eb e3       	ldi	r30, 0x3B	; 59
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	10 82       	st	Z, r1
						    DIO_U8_PA3_INTIAL_VALUE, DIO_U8_PA2_INTIAL_VALUE, DIO_U8_PA1_INTIAL_VALUE, DIO_U8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = CONC(DIO_U8_PB7_INTIAL_VALUE, DIO_U8_PB6_INTIAL_VALUE, DIO_U8_PB5_INTIAL_VALUE, DIO_U8_PB4_INTIAL_VALUE,
    1202:	e8 e3       	ldi	r30, 0x38	; 56
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	10 82       	st	Z, r1
						   	DIO_U8_PB3_INTIAL_VALUE, DIO_U8_PB2_INTIAL_VALUE, DIO_U8_PB1_INTIAL_VALUE, DIO_U8_PB0_INTIAL_VALUE);
												 
    DIO_u8_PORTC_REG = CONC(DIO_U8_PC7_INTIAL_VALUE, DIO_U8_PC6_INTIAL_VALUE, DIO_U8_PC5_INTIAL_VALUE, DIO_U8_PC4_INTIAL_VALUE,
    1208:	e5 e3       	ldi	r30, 0x35	; 53
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	10 82       	st	Z, r1
					        DIO_U8_PC3_INTIAL_VALUE, DIO_U8_PC2_INTIAL_VALUE, DIO_U8_PC1_INTIAL_VALUE, DIO_U8_PC0_INTIAL_VALUE);
																		   
    DIO_u8_PORTD_REG = CONC(DIO_U8_PD7_INTIAL_VALUE, DIO_U8_PD6_INTIAL_VALUE, DIO_U8_PD5_INTIAL_VALUE, DIO_U8_PD4_INTIAL_VALUE,
    120e:	e2 e3       	ldi	r30, 0x32	; 50
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	10 82       	st	Z, r1
						    DIO_U8_PD3_INTIAL_VALUE, DIO_U8_PD2_INTIAL_VALUE, DIO_U8_PD1_INTIAL_VALUE, DIO_U8_PD0_INTIAL_VALUE);
    }
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <DIO_u8_Set_Pin_Direction>:

u8 DIO_u8_Set_Pin_Direction  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Direction ){
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	2e 97       	sbiw	r28, 0x0e	; 14
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	8a 83       	std	Y+2, r24	; 0x02
    1230:	6b 83       	std	Y+3, r22	; 0x03
    1232:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
    1234:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Direction == DIO_u8_INTIAL_INPUT)||(Copy_u8_Pin_Direction == DIO_u8_INTIAL_OUTPUT)))
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	84 30       	cpi	r24, 0x04	; 4
    123a:	08 f0       	brcs	.+2      	; 0x123e <DIO_u8_Set_Pin_Direction+0x24>
    123c:	15 c1       	rjmp	.+554    	; 0x1468 <DIO_u8_Set_Pin_Direction+0x24e>
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	88 30       	cpi	r24, 0x08	; 8
    1242:	08 f0       	brcs	.+2      	; 0x1246 <DIO_u8_Set_Pin_Direction+0x2c>
    1244:	11 c1       	rjmp	.+546    	; 0x1468 <DIO_u8_Set_Pin_Direction+0x24e>
    1246:	8c 81       	ldd	r24, Y+4	; 0x04
    1248:	88 23       	and	r24, r24
    124a:	21 f0       	breq	.+8      	; 0x1254 <DIO_u8_Set_Pin_Direction+0x3a>
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	09 f0       	breq	.+2      	; 0x1254 <DIO_u8_Set_Pin_Direction+0x3a>
    1252:	0a c1       	rjmp	.+532    	; 0x1468 <DIO_u8_Set_Pin_Direction+0x24e>
	{
        switch (Copy_u8_Port_ID)
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	3e 87       	std	Y+14, r19	; 0x0e
    125c:	2d 87       	std	Y+13, r18	; 0x0d
    125e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1260:	9e 85       	ldd	r25, Y+14	; 0x0e
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	91 05       	cpc	r25, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <DIO_u8_Set_Pin_Direction+0x50>
    1268:	51 c0       	rjmp	.+162    	; 0x130c <DIO_u8_Set_Pin_Direction+0xf2>
    126a:	2d 85       	ldd	r18, Y+13	; 0x0d
    126c:	3e 85       	ldd	r19, Y+14	; 0x0e
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	2c f4       	brge	.+10     	; 0x127e <DIO_u8_Set_Pin_Direction+0x64>
    1274:	8d 85       	ldd	r24, Y+13	; 0x0d
    1276:	9e 85       	ldd	r25, Y+14	; 0x0e
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	71 f0       	breq	.+28     	; 0x1298 <DIO_u8_Set_Pin_Direction+0x7e>
    127c:	f7 c0       	rjmp	.+494    	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>
    127e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1280:	3e 85       	ldd	r19, Y+14	; 0x0e
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	09 f4       	brne	.+2      	; 0x128a <DIO_u8_Set_Pin_Direction+0x70>
    1288:	7b c0       	rjmp	.+246    	; 0x1380 <DIO_u8_Set_Pin_Direction+0x166>
    128a:	8d 85       	ldd	r24, Y+13	; 0x0d
    128c:	9e 85       	ldd	r25, Y+14	; 0x0e
    128e:	83 30       	cpi	r24, 0x03	; 3
    1290:	91 05       	cpc	r25, r1
    1292:	09 f4       	brne	.+2      	; 0x1296 <DIO_u8_Set_Pin_Direction+0x7c>
    1294:	af c0       	rjmp	.+350    	; 0x13f4 <DIO_u8_Set_Pin_Direction+0x1da>
    1296:	ea c0       	rjmp	.+468    	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>
        {
               case DIO_u8_PORTA:
            	   switch (Copy_u8_Pin_Direction)
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3c 87       	std	Y+12, r19	; 0x0c
    12a0:	2b 87       	std	Y+11, r18	; 0x0b
    12a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	c9 f0       	breq	.+50     	; 0x12dc <DIO_u8_Set_Pin_Direction+0xc2>
    12aa:	2b 85       	ldd	r18, Y+11	; 0x0b
    12ac:	3c 85       	ldd	r19, Y+12	; 0x0c
    12ae:	21 30       	cpi	r18, 0x01	; 1
    12b0:	31 05       	cpc	r19, r1
    12b2:	49 f5       	brne	.+82     	; 0x1306 <DIO_u8_Set_Pin_Direction+0xec>
            	   {
                    	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
    12b4:	aa e3       	ldi	r26, 0x3A	; 58
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ea e3       	ldi	r30, 0x3A	; 58
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_u8_Set_Pin_Direction+0xb8>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_u8_Set_Pin_Direction+0xb4>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	c8 c0       	rjmp	.+400    	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>
                    	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
    12dc:	aa e3       	ldi	r26, 0x3A	; 58
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	ea e3       	ldi	r30, 0x3A	; 58
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_u8_Set_Pin_Direction+0xe0>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_u8_Set_Pin_Direction+0xdc>
    12fe:	80 95       	com	r24
    1300:	84 23       	and	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	b3 c0       	rjmp	.+358    	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	b0 c0       	rjmp	.+352    	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>

            	   }
                  break;
               case DIO_u8_PORTB:
             	   switch (Copy_u8_Pin_Direction)
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3a 87       	std	Y+10, r19	; 0x0a
    1314:	29 87       	std	Y+9, r18	; 0x09
    1316:	89 85       	ldd	r24, Y+9	; 0x09
    1318:	9a 85       	ldd	r25, Y+10	; 0x0a
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	c9 f0       	breq	.+50     	; 0x1350 <DIO_u8_Set_Pin_Direction+0x136>
    131e:	29 85       	ldd	r18, Y+9	; 0x09
    1320:	3a 85       	ldd	r19, Y+10	; 0x0a
    1322:	21 30       	cpi	r18, 0x01	; 1
    1324:	31 05       	cpc	r19, r1
    1326:	49 f5       	brne	.+82     	; 0x137a <DIO_u8_Set_Pin_Direction+0x160>
             	   {
                     	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    1328:	a7 e3       	ldi	r26, 0x37	; 55
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e7 e3       	ldi	r30, 0x37	; 55
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_u8_Set_Pin_Direction+0x12c>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_u8_Set_Pin_Direction+0x128>
    134a:	84 2b       	or	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	8e c0       	rjmp	.+284    	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>
                     	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    1350:	a7 e3       	ldi	r26, 0x37	; 55
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e7 e3       	ldi	r30, 0x37	; 55
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_u8_Set_Pin_Direction+0x154>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_u8_Set_Pin_Direction+0x150>
    1372:	80 95       	com	r24
    1374:	84 23       	and	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	79 c0       	rjmp	.+242    	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	76 c0       	rjmp	.+236    	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>

             	   }
                   break;
               case DIO_u8_PORTC:
                   switch (Copy_u8_Pin_Direction)
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	38 87       	std	Y+8, r19	; 0x08
    1388:	2f 83       	std	Y+7, r18	; 0x07
    138a:	8f 81       	ldd	r24, Y+7	; 0x07
    138c:	98 85       	ldd	r25, Y+8	; 0x08
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	c9 f0       	breq	.+50     	; 0x13c4 <DIO_u8_Set_Pin_Direction+0x1aa>
    1392:	2f 81       	ldd	r18, Y+7	; 0x07
    1394:	38 85       	ldd	r19, Y+8	; 0x08
    1396:	21 30       	cpi	r18, 0x01	; 1
    1398:	31 05       	cpc	r19, r1
    139a:	49 f5       	brne	.+82     	; 0x13ee <DIO_u8_Set_Pin_Direction+0x1d4>
                 	   {
                         	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    139c:	a4 e3       	ldi	r26, 0x34	; 52
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e4 e3       	ldi	r30, 0x34	; 52
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_u8_Set_Pin_Direction+0x1a0>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_u8_Set_Pin_Direction+0x19c>
    13be:	84 2b       	or	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	54 c0       	rjmp	.+168    	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>
                         	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    13c4:	a4 e3       	ldi	r26, 0x34	; 52
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e4 e3       	ldi	r30, 0x34	; 52
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_u8_Set_Pin_Direction+0x1c8>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_u8_Set_Pin_Direction+0x1c4>
    13e6:	80 95       	com	r24
    13e8:	84 23       	and	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	3f c0       	rjmp	.+126    	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>
  			           	     default :Local_u8_Erorr_State = ES_NOK ;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	3c c0       	rjmp	.+120    	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>

                 	   }
                       break;

               case DIO_u8_PORTD:
                    switch (Copy_u8_Pin_Direction)
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	3e 83       	std	Y+6, r19	; 0x06
    13fc:	2d 83       	std	Y+5, r18	; 0x05
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	c9 f0       	breq	.+50     	; 0x1438 <DIO_u8_Set_Pin_Direction+0x21e>
    1406:	2d 81       	ldd	r18, Y+5	; 0x05
    1408:	3e 81       	ldd	r19, Y+6	; 0x06
    140a:	21 30       	cpi	r18, 0x01	; 1
    140c:	31 05       	cpc	r19, r1
    140e:	49 f5       	brne	.+82     	; 0x1462 <DIO_u8_Set_Pin_Direction+0x248>
                     	   {
                             	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    1410:	a1 e3       	ldi	r26, 0x31	; 49
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e1 e3       	ldi	r30, 0x31	; 49
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_u8_Set_Pin_Direction+0x214>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_u8_Set_Pin_Direction+0x210>
    1432:	84 2b       	or	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	1a c0       	rjmp	.+52     	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>
                             	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    1438:	a1 e3       	ldi	r26, 0x31	; 49
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e1 e3       	ldi	r30, 0x31	; 49
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_u8_Set_Pin_Direction+0x23c>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_u8_Set_Pin_Direction+0x238>
    145a:	80 95       	com	r24
    145c:	84 23       	and	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	05 c0       	rjmp	.+10     	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>
      			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_u8_Set_Pin_Direction+0x252>
                     	   }
                           break;
        }
	}
	else {
		Local_u8_Erorr_State = ES_NOK ;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_Erorr_State ;
    146c:	89 81       	ldd	r24, Y+1	; 0x01
}
    146e:	2e 96       	adiw	r28, 0x0e	; 14
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <DIO_u8_Set_Pin_Value>:

u8 DIO_u8_Set_Pin_Value  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Value ){
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	2e 97       	sbiw	r28, 0x0e	; 14
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	8a 83       	std	Y+2, r24	; 0x02
    1496:	6b 83       	std	Y+3, r22	; 0x03
    1498:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
    149a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Value == DIO_u8_INPUT)||(Copy_u8_Pin_Value == DIO_u8_OUTPUT)))
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	84 30       	cpi	r24, 0x04	; 4
    14a0:	08 f0       	brcs	.+2      	; 0x14a4 <DIO_u8_Set_Pin_Value+0x24>
    14a2:	15 c1       	rjmp	.+554    	; 0x16ce <DIO_u8_Set_Pin_Value+0x24e>
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	88 30       	cpi	r24, 0x08	; 8
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <DIO_u8_Set_Pin_Value+0x2c>
    14aa:	11 c1       	rjmp	.+546    	; 0x16ce <DIO_u8_Set_Pin_Value+0x24e>
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	88 23       	and	r24, r24
    14b0:	21 f0       	breq	.+8      	; 0x14ba <DIO_u8_Set_Pin_Value+0x3a>
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	09 f0       	breq	.+2      	; 0x14ba <DIO_u8_Set_Pin_Value+0x3a>
    14b8:	0a c1       	rjmp	.+532    	; 0x16ce <DIO_u8_Set_Pin_Value+0x24e>
	{
		switch (Copy_u8_Port_ID)
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3e 87       	std	Y+14, r19	; 0x0e
    14c2:	2d 87       	std	Y+13, r18	; 0x0d
    14c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	91 05       	cpc	r25, r1
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <DIO_u8_Set_Pin_Value+0x50>
    14ce:	51 c0       	rjmp	.+162    	; 0x1572 <DIO_u8_Set_Pin_Value+0xf2>
    14d0:	2d 85       	ldd	r18, Y+13	; 0x0d
    14d2:	3e 85       	ldd	r19, Y+14	; 0x0e
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	2c f4       	brge	.+10     	; 0x14e4 <DIO_u8_Set_Pin_Value+0x64>
    14da:	8d 85       	ldd	r24, Y+13	; 0x0d
    14dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	71 f0       	breq	.+28     	; 0x14fe <DIO_u8_Set_Pin_Value+0x7e>
    14e2:	f7 c0       	rjmp	.+494    	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>
    14e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    14e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    14e8:	22 30       	cpi	r18, 0x02	; 2
    14ea:	31 05       	cpc	r19, r1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <DIO_u8_Set_Pin_Value+0x70>
    14ee:	7b c0       	rjmp	.+246    	; 0x15e6 <DIO_u8_Set_Pin_Value+0x166>
    14f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f4:	83 30       	cpi	r24, 0x03	; 3
    14f6:	91 05       	cpc	r25, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <DIO_u8_Set_Pin_Value+0x7c>
    14fa:	af c0       	rjmp	.+350    	; 0x165a <DIO_u8_Set_Pin_Value+0x1da>
    14fc:	ea c0       	rjmp	.+468    	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Pin_Value)
    14fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	3c 87       	std	Y+12, r19	; 0x0c
    1506:	2b 87       	std	Y+11, r18	; 0x0b
    1508:	8b 85       	ldd	r24, Y+11	; 0x0b
    150a:	9c 85       	ldd	r25, Y+12	; 0x0c
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	c9 f0       	breq	.+50     	; 0x1542 <DIO_u8_Set_Pin_Value+0xc2>
    1510:	2b 85       	ldd	r18, Y+11	; 0x0b
    1512:	3c 85       	ldd	r19, Y+12	; 0x0c
    1514:	21 30       	cpi	r18, 0x01	; 1
    1516:	31 05       	cpc	r19, r1
    1518:	49 f5       	brne	.+82     	; 0x156c <DIO_u8_Set_Pin_Value+0xec>
			{
			     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    151a:	ab e3       	ldi	r26, 0x3B	; 59
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	eb e3       	ldi	r30, 0x3B	; 59
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_u8_Set_Pin_Value+0xb8>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <DIO_u8_Set_Pin_Value+0xb4>
    153c:	84 2b       	or	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	c8 c0       	rjmp	.+400    	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>
           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    1542:	ab e3       	ldi	r26, 0x3B	; 59
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	eb e3       	ldi	r30, 0x3B	; 59
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_u8_Set_Pin_Value+0xe0>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_u8_Set_Pin_Value+0xdc>
    1564:	80 95       	com	r24
    1566:	84 23       	and	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	b3 c0       	rjmp	.+358    	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>
           	     default :Local_u8_Erorr_State = ES_NOK ;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	b0 c0       	rjmp	.+352    	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>

			}
			break;
		case DIO_u8_PORTB :
			switch (Copy_u8_Pin_Value)
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	3a 87       	std	Y+10, r19	; 0x0a
    157a:	29 87       	std	Y+9, r18	; 0x09
    157c:	89 85       	ldd	r24, Y+9	; 0x09
    157e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	c9 f0       	breq	.+50     	; 0x15b6 <DIO_u8_Set_Pin_Value+0x136>
    1584:	29 85       	ldd	r18, Y+9	; 0x09
    1586:	3a 85       	ldd	r19, Y+10	; 0x0a
    1588:	21 30       	cpi	r18, 0x01	; 1
    158a:	31 05       	cpc	r19, r1
    158c:	49 f5       	brne	.+82     	; 0x15e0 <DIO_u8_Set_Pin_Value+0x160>
				{
				     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    158e:	a8 e3       	ldi	r26, 0x38	; 56
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e8 e3       	ldi	r30, 0x38	; 56
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_u8_Set_Pin_Value+0x12c>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_u8_Set_Pin_Value+0x128>
    15b0:	84 2b       	or	r24, r20
    15b2:	8c 93       	st	X, r24
    15b4:	8e c0       	rjmp	.+284    	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>
	           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    15b6:	a8 e3       	ldi	r26, 0x38	; 56
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e8 e3       	ldi	r30, 0x38	; 56
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_u8_Set_Pin_Value+0x154>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_u8_Set_Pin_Value+0x150>
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	79 c0       	rjmp	.+242    	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>
	           	     default :Local_u8_Erorr_State = ES_NOK ;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	76 c0       	rjmp	.+236    	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>

				}
	     	break;
		case DIO_u8_PORTC :
			switch (Copy_u8_Pin_Value)
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	38 87       	std	Y+8, r19	; 0x08
    15ee:	2f 83       	std	Y+7, r18	; 0x07
    15f0:	8f 81       	ldd	r24, Y+7	; 0x07
    15f2:	98 85       	ldd	r25, Y+8	; 0x08
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	c9 f0       	breq	.+50     	; 0x162a <DIO_u8_Set_Pin_Value+0x1aa>
    15f8:	2f 81       	ldd	r18, Y+7	; 0x07
    15fa:	38 85       	ldd	r19, Y+8	; 0x08
    15fc:	21 30       	cpi	r18, 0x01	; 1
    15fe:	31 05       	cpc	r19, r1
    1600:	49 f5       	brne	.+82     	; 0x1654 <DIO_u8_Set_Pin_Value+0x1d4>
					{
					     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    1602:	a5 e3       	ldi	r26, 0x35	; 53
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e5 e3       	ldi	r30, 0x35	; 53
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <DIO_u8_Set_Pin_Value+0x1a0>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <DIO_u8_Set_Pin_Value+0x19c>
    1624:	84 2b       	or	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	54 c0       	rjmp	.+168    	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>
		           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    162a:	a5 e3       	ldi	r26, 0x35	; 53
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e5 e3       	ldi	r30, 0x35	; 53
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <DIO_u8_Set_Pin_Value+0x1c8>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <DIO_u8_Set_Pin_Value+0x1c4>
    164c:	80 95       	com	r24
    164e:	84 23       	and	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	3f c0       	rjmp	.+126    	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>
		           	     default :Local_u8_Erorr_State = ES_NOK ;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	3c c0       	rjmp	.+120    	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>

					}
		   break;
		case DIO_u8_PORTD :
			switch (Copy_u8_Pin_Value)
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	3e 83       	std	Y+6, r19	; 0x06
    1662:	2d 83       	std	Y+5, r18	; 0x05
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	c9 f0       	breq	.+50     	; 0x169e <DIO_u8_Set_Pin_Value+0x21e>
    166c:	2d 81       	ldd	r18, Y+5	; 0x05
    166e:	3e 81       	ldd	r19, Y+6	; 0x06
    1670:	21 30       	cpi	r18, 0x01	; 1
    1672:	31 05       	cpc	r19, r1
    1674:	49 f5       	brne	.+82     	; 0x16c8 <DIO_u8_Set_Pin_Value+0x248>
						{
						     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    1676:	a2 e3       	ldi	r26, 0x32	; 50
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e2 e3       	ldi	r30, 0x32	; 50
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_u8_Set_Pin_Value+0x214>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <DIO_u8_Set_Pin_Value+0x210>
    1698:	84 2b       	or	r24, r20
    169a:	8c 93       	st	X, r24
    169c:	1a c0       	rjmp	.+52     	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>
			           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    169e:	a2 e3       	ldi	r26, 0x32	; 50
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e2 e3       	ldi	r30, 0x32	; 50
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_u8_Set_Pin_Value+0x23c>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <DIO_u8_Set_Pin_Value+0x238>
    16c0:	80 95       	com	r24
    16c2:	84 23       	and	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	05 c0       	rjmp	.+10     	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <DIO_u8_Set_Pin_Value+0x252>
						}
			break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8_Erorr_State ;
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d4:	2e 96       	adiw	r28, 0x0e	; 14
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <DIO_u8_Get_Pin_Value>:

u8 DIO_u8_Get_Pin_Value      (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 *Copy_u8_Returned_Pin_Value ){
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	28 97       	sbiw	r28, 0x08	; 8
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	8b 83       	std	Y+3, r24	; 0x03
    16fc:	6c 83       	std	Y+4, r22	; 0x04
    16fe:	5e 83       	std	Y+6, r21	; 0x06
    1700:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8_Erorr_State = ES_OK ;
    1702:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Pin_Value ;
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && (Copy_u8_Returned_Pin_Value != NULL)){
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	84 30       	cpi	r24, 0x04	; 4
    1708:	08 f0       	brcs	.+2      	; 0x170c <DIO_u8_Get_Pin_Value+0x26>
    170a:	9e c0       	rjmp	.+316    	; 0x1848 <DIO_u8_Get_Pin_Value+0x162>
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	88 30       	cpi	r24, 0x08	; 8
    1710:	08 f0       	brcs	.+2      	; 0x1714 <DIO_u8_Get_Pin_Value+0x2e>
    1712:	9a c0       	rjmp	.+308    	; 0x1848 <DIO_u8_Get_Pin_Value+0x162>
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	09 f4       	brne	.+2      	; 0x171e <DIO_u8_Get_Pin_Value+0x38>
    171c:	95 c0       	rjmp	.+298    	; 0x1848 <DIO_u8_Get_Pin_Value+0x162>
		switch (Copy_u8_Port_ID)
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	38 87       	std	Y+8, r19	; 0x08
    1726:	2f 83       	std	Y+7, r18	; 0x07
    1728:	8f 81       	ldd	r24, Y+7	; 0x07
    172a:	98 85       	ldd	r25, Y+8	; 0x08
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	91 05       	cpc	r25, r1
    1730:	a1 f1       	breq	.+104    	; 0x179a <DIO_u8_Get_Pin_Value+0xb4>
    1732:	2f 81       	ldd	r18, Y+7	; 0x07
    1734:	38 85       	ldd	r19, Y+8	; 0x08
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	2c f4       	brge	.+10     	; 0x1746 <DIO_u8_Get_Pin_Value+0x60>
    173c:	8f 81       	ldd	r24, Y+7	; 0x07
    173e:	98 85       	ldd	r25, Y+8	; 0x08
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	71 f0       	breq	.+28     	; 0x1760 <DIO_u8_Get_Pin_Value+0x7a>
    1744:	83 c0       	rjmp	.+262    	; 0x184c <DIO_u8_Get_Pin_Value+0x166>
    1746:	2f 81       	ldd	r18, Y+7	; 0x07
    1748:	38 85       	ldd	r19, Y+8	; 0x08
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <DIO_u8_Get_Pin_Value+0x6c>
    1750:	41 c0       	rjmp	.+130    	; 0x17d4 <DIO_u8_Get_Pin_Value+0xee>
    1752:	8f 81       	ldd	r24, Y+7	; 0x07
    1754:	98 85       	ldd	r25, Y+8	; 0x08
    1756:	83 30       	cpi	r24, 0x03	; 3
    1758:	91 05       	cpc	r25, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <DIO_u8_Get_Pin_Value+0x78>
    175c:	58 c0       	rjmp	.+176    	; 0x180e <DIO_u8_Get_Pin_Value+0x128>
    175e:	76 c0       	rjmp	.+236    	; 0x184c <DIO_u8_Get_Pin_Value+0x166>
		{
		     case DIO_u8_PORTA :
		      Local_u8_Pin_Value = GET_BIT (DIO_u8_PINA_REG, Copy_u8_Pin_ID) ;
    1760:	e9 e3       	ldi	r30, 0x39	; 57
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8c 81       	ldd	r24, Y+4	; 0x04
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 2e       	mov	r0, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <DIO_u8_Get_Pin_Value+0x94>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 94       	dec	r0
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <DIO_u8_Get_Pin_Value+0x90>
    177e:	84 23       	and	r24, r20
    1780:	89 83       	std	Y+1, r24	; 0x01

		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	88 23       	and	r24, r24
    1786:	21 f4       	brne	.+8      	; 0x1790 <DIO_u8_Get_Pin_Value+0xaa>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    1788:	ed 81       	ldd	r30, Y+5	; 0x05
    178a:	fe 81       	ldd	r31, Y+6	; 0x06
    178c:	10 82       	st	Z, r1
    178e:	5e c0       	rjmp	.+188    	; 0x184c <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		    	 else
		    	 {
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1790:	ed 81       	ldd	r30, Y+5	; 0x05
    1792:	fe 81       	ldd	r31, Y+6	; 0x06
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	80 83       	st	Z, r24
    1798:	59 c0       	rjmp	.+178    	; 0x184c <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		     break;
		     case DIO_u8_PORTB :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINB_REG,Copy_u8_Pin_ID ) ;
    179a:	e6 e3       	ldi	r30, 0x36	; 54
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_u8_Get_Pin_Value+0xce>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_u8_Get_Pin_Value+0xca>
    17b8:	84 23       	and	r24, r20
    17ba:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	88 23       	and	r24, r24
    17c0:	21 f4       	brne	.+8      	; 0x17ca <DIO_u8_Get_Pin_Value+0xe4>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    17c2:	ed 81       	ldd	r30, Y+5	; 0x05
    17c4:	fe 81       	ldd	r31, Y+6	; 0x06
    17c6:	10 82       	st	Z, r1
    17c8:	41 c0       	rjmp	.+130    	; 0x184c <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    17ca:	ed 81       	ldd	r30, Y+5	; 0x05
    17cc:	fe 81       	ldd	r31, Y+6	; 0x06
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	80 83       	st	Z, r24
    17d2:	3c c0       	rjmp	.+120    	; 0x184c <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTC :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINC_REG,Copy_u8_Pin_ID ) ;
    17d4:	e3 e3       	ldi	r30, 0x33	; 51
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8c 81       	ldd	r24, Y+4	; 0x04
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_u8_Get_Pin_Value+0x108>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_u8_Get_Pin_Value+0x104>
    17f2:	84 23       	and	r24, r20
    17f4:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	88 23       	and	r24, r24
    17fa:	21 f4       	brne	.+8      	; 0x1804 <DIO_u8_Get_Pin_Value+0x11e>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    17fc:	ed 81       	ldd	r30, Y+5	; 0x05
    17fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1800:	10 82       	st	Z, r1
    1802:	24 c0       	rjmp	.+72     	; 0x184c <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1804:	ed 81       	ldd	r30, Y+5	; 0x05
    1806:	fe 81       	ldd	r31, Y+6	; 0x06
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	80 83       	st	Z, r24
    180c:	1f c0       	rjmp	.+62     	; 0x184c <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTD :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PIND_REG,Copy_u8_Pin_ID ) ;
    180e:	e0 e3       	ldi	r30, 0x30	; 48
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	48 2f       	mov	r20, r24
    1816:	8c 81       	ldd	r24, Y+4	; 0x04
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 2e       	mov	r0, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <DIO_u8_Get_Pin_Value+0x142>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	0a 94       	dec	r0
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <DIO_u8_Get_Pin_Value+0x13e>
    182c:	84 23       	and	r24, r20
    182e:	89 83       	std	Y+1, r24	; 0x01
		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	88 23       	and	r24, r24
    1834:	21 f4       	brne	.+8      	; 0x183e <DIO_u8_Get_Pin_Value+0x158>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    1836:	ed 81       	ldd	r30, Y+5	; 0x05
    1838:	fe 81       	ldd	r31, Y+6	; 0x06
    183a:	10 82       	st	Z, r1
    183c:	07 c0       	rjmp	.+14     	; 0x184c <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    183e:	ed 81       	ldd	r30, Y+5	; 0x05
    1840:	fe 81       	ldd	r31, Y+6	; 0x06
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	80 83       	st	Z, r24
    1846:	02 c0       	rjmp	.+4      	; 0x184c <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	8a 83       	std	Y+2, r24	; 0x02
		}
		return Local_u8_Erorr_State ;
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    184e:	28 96       	adiw	r28, 0x08	; 8
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <DIO_u8_Set_Port_Direction>:

u8 DIO_u8_Set_Port_Direction (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Direction ){
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	2d 97       	sbiw	r28, 0x0d	; 13
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	8a 83       	std	Y+2, r24	; 0x02
    1876:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1878:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && ((Copy_u8_Port_Direction == DIO_u8_INPUT)||(Copy_u8_Port_Direction == DIO_u8_OUTPUT)))
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	84 30       	cpi	r24, 0x04	; 4
    187e:	08 f0       	brcs	.+2      	; 0x1882 <DIO_u8_Set_Port_Direction+0x22>
    1880:	87 c0       	rjmp	.+270    	; 0x1990 <DIO_u8_Set_Port_Direction+0x130>
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	88 23       	and	r24, r24
    1886:	21 f0       	breq	.+8      	; 0x1890 <DIO_u8_Set_Port_Direction+0x30>
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	09 f0       	breq	.+2      	; 0x1890 <DIO_u8_Set_Port_Direction+0x30>
    188e:	80 c0       	rjmp	.+256    	; 0x1990 <DIO_u8_Set_Port_Direction+0x130>
	{
		switch (Copy_u8_Port_ID)
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	3d 87       	std	Y+13, r19	; 0x0d
    1898:	2c 87       	std	Y+12, r18	; 0x0c
    189a:	8c 85       	ldd	r24, Y+12	; 0x0c
    189c:	9d 85       	ldd	r25, Y+13	; 0x0d
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	91 05       	cpc	r25, r1
    18a2:	71 f1       	breq	.+92     	; 0x1900 <DIO_u8_Set_Port_Direction+0xa0>
    18a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    18a6:	3d 85       	ldd	r19, Y+13	; 0x0d
    18a8:	22 30       	cpi	r18, 0x02	; 2
    18aa:	31 05       	cpc	r19, r1
    18ac:	2c f4       	brge	.+10     	; 0x18b8 <DIO_u8_Set_Port_Direction+0x58>
    18ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    18b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	69 f0       	breq	.+26     	; 0x18d0 <DIO_u8_Set_Port_Direction+0x70>
    18b6:	69 c0       	rjmp	.+210    	; 0x198a <DIO_u8_Set_Port_Direction+0x12a>
    18b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ba:	3d 85       	ldd	r19, Y+13	; 0x0d
    18bc:	22 30       	cpi	r18, 0x02	; 2
    18be:	31 05       	cpc	r19, r1
    18c0:	b1 f1       	breq	.+108    	; 0x192e <DIO_u8_Set_Port_Direction+0xce>
    18c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    18c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    18c6:	83 30       	cpi	r24, 0x03	; 3
    18c8:	91 05       	cpc	r25, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <DIO_u8_Set_Port_Direction+0x6e>
    18cc:	47 c0       	rjmp	.+142    	; 0x195c <DIO_u8_Set_Port_Direction+0xfc>
    18ce:	5d c0       	rjmp	.+186    	; 0x198a <DIO_u8_Set_Port_Direction+0x12a>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Port_Direction)
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	3b 87       	std	Y+11, r19	; 0x0b
    18d8:	2a 87       	std	Y+10, r18	; 0x0a
    18da:	8a 85       	ldd	r24, Y+10	; 0x0a
    18dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	59 f0       	breq	.+22     	; 0x18f8 <DIO_u8_Set_Port_Direction+0x98>
    18e2:	2a 85       	ldd	r18, Y+10	; 0x0a
    18e4:	3b 85       	ldd	r19, Y+11	; 0x0b
    18e6:	21 30       	cpi	r18, 0x01	; 1
    18e8:	31 05       	cpc	r19, r1
    18ea:	09 f0       	breq	.+2      	; 0x18ee <DIO_u8_Set_Port_Direction+0x8e>
    18ec:	53 c0       	rjmp	.+166    	; 0x1994 <DIO_u8_Set_Port_Direction+0x134>
			{
			    case DIO_u8_OUTPUT : DIO_u8_PORTA_REG = 0xff;break;
    18ee:	eb e3       	ldi	r30, 0x3B	; 59
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	8f ef       	ldi	r24, 0xFF	; 255
    18f4:	80 83       	st	Z, r24
    18f6:	4e c0       	rjmp	.+156    	; 0x1994 <DIO_u8_Set_Port_Direction+0x134>
			    case DIO_u8_INPUT : DIO_u8_PORTA_REG = 0x00;break;
    18f8:	eb e3       	ldi	r30, 0x3B	; 59
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	10 82       	st	Z, r1
    18fe:	4a c0       	rjmp	.+148    	; 0x1994 <DIO_u8_Set_Port_Direction+0x134>
			}
			break;
			case DIO_u8_PORTB :
				switch (Copy_u8_Port_Direction)
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	39 87       	std	Y+9, r19	; 0x09
    1908:	28 87       	std	Y+8, r18	; 0x08
    190a:	88 85       	ldd	r24, Y+8	; 0x08
    190c:	99 85       	ldd	r25, Y+9	; 0x09
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	51 f0       	breq	.+20     	; 0x1926 <DIO_u8_Set_Port_Direction+0xc6>
    1912:	28 85       	ldd	r18, Y+8	; 0x08
    1914:	39 85       	ldd	r19, Y+9	; 0x09
    1916:	21 30       	cpi	r18, 0x01	; 1
    1918:	31 05       	cpc	r19, r1
    191a:	e1 f5       	brne	.+120    	; 0x1994 <DIO_u8_Set_Port_Direction+0x134>
				{
				    case DIO_u8_OUTPUT : DIO_u8_PORTB_REG = 0xff;break;
    191c:	e8 e3       	ldi	r30, 0x38	; 56
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	80 83       	st	Z, r24
    1924:	37 c0       	rjmp	.+110    	; 0x1994 <DIO_u8_Set_Port_Direction+0x134>
				    case DIO_u8_INPUT : DIO_u8_PORTB_REG = 0x00;break;
    1926:	e8 e3       	ldi	r30, 0x38	; 56
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	10 82       	st	Z, r1
    192c:	33 c0       	rjmp	.+102    	; 0x1994 <DIO_u8_Set_Port_Direction+0x134>
				}
				break;
				case DIO_u8_PORTC :
					switch (Copy_u8_Port_Direction)
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	3f 83       	std	Y+7, r19	; 0x07
    1936:	2e 83       	std	Y+6, r18	; 0x06
    1938:	8e 81       	ldd	r24, Y+6	; 0x06
    193a:	9f 81       	ldd	r25, Y+7	; 0x07
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	51 f0       	breq	.+20     	; 0x1954 <DIO_u8_Set_Port_Direction+0xf4>
    1940:	2e 81       	ldd	r18, Y+6	; 0x06
    1942:	3f 81       	ldd	r19, Y+7	; 0x07
    1944:	21 30       	cpi	r18, 0x01	; 1
    1946:	31 05       	cpc	r19, r1
    1948:	29 f5       	brne	.+74     	; 0x1994 <DIO_u8_Set_Port_Direction+0x134>
					{
					    case DIO_u8_OUTPUT : DIO_u8_PORTC_REG = 0xff;break;
    194a:	e5 e3       	ldi	r30, 0x35	; 53
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	8f ef       	ldi	r24, 0xFF	; 255
    1950:	80 83       	st	Z, r24
    1952:	20 c0       	rjmp	.+64     	; 0x1994 <DIO_u8_Set_Port_Direction+0x134>
					    case DIO_u8_INPUT : DIO_u8_PORTC_REG = 0x00;break;
    1954:	e5 e3       	ldi	r30, 0x35	; 53
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	10 82       	st	Z, r1
    195a:	1c c0       	rjmp	.+56     	; 0x1994 <DIO_u8_Set_Port_Direction+0x134>
					}
					break;
					case DIO_u8_PORTD :
						switch (Copy_u8_Port_Direction)
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	3d 83       	std	Y+5, r19	; 0x05
    1964:	2c 83       	std	Y+4, r18	; 0x04
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	51 f0       	breq	.+20     	; 0x1982 <DIO_u8_Set_Port_Direction+0x122>
    196e:	2c 81       	ldd	r18, Y+4	; 0x04
    1970:	3d 81       	ldd	r19, Y+5	; 0x05
    1972:	21 30       	cpi	r18, 0x01	; 1
    1974:	31 05       	cpc	r19, r1
    1976:	71 f4       	brne	.+28     	; 0x1994 <DIO_u8_Set_Port_Direction+0x134>
						{
						    case DIO_u8_OUTPUT : DIO_u8_PORTD_REG = 0xff;break;
    1978:	e2 e3       	ldi	r30, 0x32	; 50
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	8f ef       	ldi	r24, 0xFF	; 255
    197e:	80 83       	st	Z, r24
    1980:	09 c0       	rjmp	.+18     	; 0x1994 <DIO_u8_Set_Port_Direction+0x134>
						    case DIO_u8_INPUT : DIO_u8_PORTD_REG = 0x00;break;
    1982:	e2 e3       	ldi	r30, 0x32	; 50
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	10 82       	st	Z, r1
    1988:	05 c0       	rjmp	.+10     	; 0x1994 <DIO_u8_Set_Port_Direction+0x134>
						}
						break;
						default:Local_u8_Erorr_State = ES_NOK ;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_u8_Set_Port_Direction+0x134>

		}
	}
	else {
				Local_u8_Erorr_State = ES_NOK ;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    1994:	89 81       	ldd	r24, Y+1	; 0x01

}
    1996:	2d 96       	adiw	r28, 0x0d	; 13
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <DIO_u8_Set_Port_Value>:

u8 DIO_u8_Set_Port_Value     (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Value ){
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <DIO_u8_Set_Port_Value+0x6>
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <DIO_u8_Set_Port_Value+0x8>
    19b0:	0f 92       	push	r0
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	8a 83       	std	Y+2, r24	; 0x02
    19b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    19ba:	19 82       	std	Y+1, r1	; 0x01

			switch (Copy_u8_Port_ID)
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	3d 83       	std	Y+5, r19	; 0x05
    19c4:	2c 83       	std	Y+4, r18	; 0x04
    19c6:	8c 81       	ldd	r24, Y+4	; 0x04
    19c8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	91 05       	cpc	r25, r1
    19ce:	d1 f0       	breq	.+52     	; 0x1a04 <DIO_u8_Set_Port_Value+0x5c>
    19d0:	2c 81       	ldd	r18, Y+4	; 0x04
    19d2:	3d 81       	ldd	r19, Y+5	; 0x05
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	31 05       	cpc	r19, r1
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <DIO_u8_Set_Port_Value+0x3c>
    19da:	8c 81       	ldd	r24, Y+4	; 0x04
    19dc:	9d 81       	ldd	r25, Y+5	; 0x05
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	61 f0       	breq	.+24     	; 0x19fa <DIO_u8_Set_Port_Value+0x52>
    19e2:	1f c0       	rjmp	.+62     	; 0x1a22 <DIO_u8_Set_Port_Value+0x7a>
    19e4:	2c 81       	ldd	r18, Y+4	; 0x04
    19e6:	3d 81       	ldd	r19, Y+5	; 0x05
    19e8:	22 30       	cpi	r18, 0x02	; 2
    19ea:	31 05       	cpc	r19, r1
    19ec:	81 f0       	breq	.+32     	; 0x1a0e <DIO_u8_Set_Port_Value+0x66>
    19ee:	8c 81       	ldd	r24, Y+4	; 0x04
    19f0:	9d 81       	ldd	r25, Y+5	; 0x05
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	91 05       	cpc	r25, r1
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <DIO_u8_Set_Port_Value+0x70>
    19f8:	14 c0       	rjmp	.+40     	; 0x1a22 <DIO_u8_Set_Port_Value+0x7a>
			{
			case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8_Port_Value; break;
    19fa:	eb e3       	ldi	r30, 0x3B	; 59
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	80 83       	st	Z, r24
    1a02:	11 c0       	rjmp	.+34     	; 0x1a26 <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8_Port_Value; break;
    1a04:	e8 e3       	ldi	r30, 0x38	; 56
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	80 83       	st	Z, r24
    1a0c:	0c c0       	rjmp	.+24     	; 0x1a26 <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8_Port_Value; break;
    1a0e:	e5 e3       	ldi	r30, 0x35	; 53
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	80 83       	st	Z, r24
    1a16:	07 c0       	rjmp	.+14     	; 0x1a26 <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8_Port_Value; break;
    1a18:	e2 e3       	ldi	r30, 0x32	; 50
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	80 83       	st	Z, r24
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_u8_Set_Port_Value+0x7e>
			default :Local_u8_Erorr_State = ES_NOK;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    1a26:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <DIO_u8_Get_Port_Value>:

u8 DIO_u8_Get_Port_Value     (u8 Copy_u8_Port_ID, u8 * Copy_u8_Returned_Port_Value ){
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <DIO_u8_Get_Port_Value+0x6>
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <DIO_u8_Get_Port_Value+0x8>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <DIO_u8_Get_Port_Value+0xa>
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	8a 83       	std	Y+2, r24	; 0x02
    1a48:	7c 83       	std	Y+4, r23	; 0x04
    1a4a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1a4c:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8_Returned_Port_Value != NULL){
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <DIO_u8_Get_Port_Value+0x20>
    1a56:	3e c0       	rjmp	.+124    	; 0x1ad4 <DIO_u8_Get_Port_Value+0x9c>
		switch (Copy_u8_Port_ID)
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	3e 83       	std	Y+6, r19	; 0x06
    1a60:	2d 83       	std	Y+5, r18	; 0x05
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	91 05       	cpc	r25, r1
    1a6a:	e1 f0       	breq	.+56     	; 0x1aa4 <DIO_u8_Get_Port_Value+0x6c>
    1a6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <DIO_u8_Get_Port_Value+0x48>
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	61 f0       	breq	.+24     	; 0x1a96 <DIO_u8_Get_Port_Value+0x5e>
    1a7e:	27 c0       	rjmp	.+78     	; 0x1ace <DIO_u8_Get_Port_Value+0x96>
    1a80:	2d 81       	ldd	r18, Y+5	; 0x05
    1a82:	3e 81       	ldd	r19, Y+6	; 0x06
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	a1 f0       	breq	.+40     	; 0x1ab2 <DIO_u8_Get_Port_Value+0x7a>
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	83 30       	cpi	r24, 0x03	; 3
    1a90:	91 05       	cpc	r25, r1
    1a92:	b1 f0       	breq	.+44     	; 0x1ac0 <DIO_u8_Get_Port_Value+0x88>
    1a94:	1c c0       	rjmp	.+56     	; 0x1ace <DIO_u8_Get_Port_Value+0x96>
		{
		case DIO_u8_PORTA :* Copy_u8_Returned_Port_Value =DIO_u8_PORTA_REG; break;
    1a96:	eb e3       	ldi	r30, 0x3B	; 59
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa0:	80 83       	st	Z, r24
    1aa2:	1a c0       	rjmp	.+52     	; 0x1ad8 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTB :* Copy_u8_Returned_Port_Value =DIO_u8_PORTB_REG; break;
    1aa4:	e8 e3       	ldi	r30, 0x38	; 56
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	eb 81       	ldd	r30, Y+3	; 0x03
    1aac:	fc 81       	ldd	r31, Y+4	; 0x04
    1aae:	80 83       	st	Z, r24
    1ab0:	13 c0       	rjmp	.+38     	; 0x1ad8 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTC :* Copy_u8_Returned_Port_Value =DIO_u8_PORTC_REG; break;
    1ab2:	e5 e3       	ldi	r30, 0x35	; 53
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	eb 81       	ldd	r30, Y+3	; 0x03
    1aba:	fc 81       	ldd	r31, Y+4	; 0x04
    1abc:	80 83       	st	Z, r24
    1abe:	0c c0       	rjmp	.+24     	; 0x1ad8 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTD :* Copy_u8_Returned_Port_Value =DIO_u8_PORTD_REG; break;
    1ac0:	e2 e3       	ldi	r30, 0x32	; 50
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ac8:	fc 81       	ldd	r31, Y+4	; 0x04
    1aca:	80 83       	st	Z, r24
    1acc:	05 c0       	rjmp	.+10     	; 0x1ad8 <DIO_u8_Get_Port_Value+0xa0>
		default :Local_u8_Erorr_State = ES_NOK;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <DIO_u8_Get_Port_Value+0xa0>
		}}
		else {
			Local_u8_Erorr_State = ES_NOK ;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8_Erorr_State ;
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ada:	26 96       	adiw	r28, 0x06	; 6
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <main>:
#include "../MCAL/4-ADC/ADC_interface.h"
#include "../MCAL/5-TIMERS/TIMERS_interface.h"

#include <util/delay.h>

int main(){
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	64 97       	sbiw	r28, 0x14	; 20
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
	u16 local_u16_servo_motor_value=0;
    1b00:	1c 8a       	std	Y+20, r1	; 0x14
    1b02:	1b 8a       	std	Y+19, r1	; 0x13
	u16 local_u16__led_brightness_value=0 ;
    1b04:	1a 8a       	std	Y+18, r1	; 0x12
    1b06:	19 8a       	std	Y+17, r1	; 0x11
	u16 local_u16_degital_value=0;
    1b08:	18 8a       	std	Y+16, r1	; 0x10
    1b0a:	1f 86       	std	Y+15, r1	; 0x0f

		        DIO_voidInit();
    1b0c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_voidInit>
		        DIO_u8_Set_Pin_Direction(0,0,0);
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8_Set_Pin_Direction>
		        DIO_u8_Set_Pin_Direction(1,3,1);
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	63 e0       	ldi	r22, 0x03	; 3
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8_Set_Pin_Direction>


DIO_u8_Set_Pin_Direction(3,5,1);
    1b24:	83 e0       	ldi	r24, 0x03	; 3
    1b26:	65 e0       	ldi	r22, 0x05	; 5
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8_Set_Pin_Direction>
//DIO_u8_Set_Pin_Direction(1,0,1);

		    TIMERS_enum_TIMER0_INIT();
    1b2e:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMERS_enum_TIMER0_INIT>
		    TIMERS_enum_TIMER1_INIT();
    1b32:	0e 94 df 05 	call	0xbbe	; 0xbbe <TIMERS_enum_TIMER1_INIT>
	        ADC_enum_ADC_INIT();
    1b36:	0e 94 60 07 	call	0xec0	; 0xec0 <ADC_enum_ADC_INIT>

	while(1){
//		ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking(ADC_u8_CHANNEL_0,&local_u16_degital_value);
//		local_u16_servo_motor_value=(u8)((local_u16_degital_value * 180UL)/1023) ;
	    TIMERS_enum_TIMER1_SET_Servo_Motor_Angle(60);
    1b3a:	8c e3       	ldi	r24, 0x3C	; 60
    1b3c:	0e 94 90 06 	call	0xd20	; 0xd20 <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle>

//        _delay_ms(100);
//		TIMERS_enum_TIMER1_SET_COMPARE_MATCH_VALUE_A(1999);

				TIMERS_enum_TIMER0_SET_COMPARE_MATCH_VALUE(local_u16__led_brightness_value);
    1b40:	89 89       	ldd	r24, Y+17	; 0x11
    1b42:	0e 94 69 06 	call	0xcd2	; 0xcd2 <TIMERS_enum_TIMER0_SET_COMPARE_MATCH_VALUE>
	            local_u16__led_brightness_value++;
    1b46:	89 89       	ldd	r24, Y+17	; 0x11
    1b48:	9a 89       	ldd	r25, Y+18	; 0x12
    1b4a:	01 96       	adiw	r24, 0x01	; 1
    1b4c:	9a 8b       	std	Y+18, r25	; 0x12
    1b4e:	89 8b       	std	Y+17, r24	; 0x11
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a8 ec       	ldi	r26, 0xC8	; 200
    1b56:	b2 e4       	ldi	r27, 0x42	; 66
    1b58:	8b 87       	std	Y+11, r24	; 0x0b
    1b5a:	9c 87       	std	Y+12, r25	; 0x0c
    1b5c:	ad 87       	std	Y+13, r26	; 0x0d
    1b5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	4a ef       	ldi	r20, 0xFA	; 250
    1b6e:	54 e4       	ldi	r21, 0x44	; 68
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8f 83       	std	Y+7, r24	; 0x07
    1b7a:	98 87       	std	Y+8, r25	; 0x08
    1b7c:	a9 87       	std	Y+9, r26	; 0x09
    1b7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b80:	6f 81       	ldd	r22, Y+7	; 0x07
    1b82:	78 85       	ldd	r23, Y+8	; 0x08
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <main+0xb6>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <main+0x134>
	else if (__tmp > 65535)
    1ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba4:	78 85       	ldd	r23, Y+8	; 0x08
    1ba6:	89 85       	ldd	r24, Y+9	; 0x09
    1ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	4c f5       	brge	.+82     	; 0x1c0c <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e2       	ldi	r20, 0x20	; 32
    1bc8:	51 e4       	ldi	r21, 0x41	; 65
    1bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9e 83       	std	Y+6, r25	; 0x06
    1be0:	8d 83       	std	Y+5, r24	; 0x05
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <main+0x116>
    1be4:	88 ec       	ldi	r24, 0xC8	; 200
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9c 83       	std	Y+4, r25	; 0x04
    1bea:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <main+0x104>
    1bf4:	9c 83       	std	Y+4, r25	; 0x04
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	8d 81       	ldd	r24, Y+5	; 0x05
    1c04:	9e 81       	ldd	r25, Y+6	; 0x06
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <main+0xf8>
    1c0a:	97 cf       	rjmp	.-210    	; 0x1b3a <main+0x4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <main+0x140>
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	82 cf       	rjmp	.-252    	; 0x1b3a <main+0x4e>

00001c36 <__mulsi3>:
    1c36:	62 9f       	mul	r22, r18
    1c38:	d0 01       	movw	r26, r0
    1c3a:	73 9f       	mul	r23, r19
    1c3c:	f0 01       	movw	r30, r0
    1c3e:	82 9f       	mul	r24, r18
    1c40:	e0 0d       	add	r30, r0
    1c42:	f1 1d       	adc	r31, r1
    1c44:	64 9f       	mul	r22, r20
    1c46:	e0 0d       	add	r30, r0
    1c48:	f1 1d       	adc	r31, r1
    1c4a:	92 9f       	mul	r25, r18
    1c4c:	f0 0d       	add	r31, r0
    1c4e:	83 9f       	mul	r24, r19
    1c50:	f0 0d       	add	r31, r0
    1c52:	74 9f       	mul	r23, r20
    1c54:	f0 0d       	add	r31, r0
    1c56:	65 9f       	mul	r22, r21
    1c58:	f0 0d       	add	r31, r0
    1c5a:	99 27       	eor	r25, r25
    1c5c:	72 9f       	mul	r23, r18
    1c5e:	b0 0d       	add	r27, r0
    1c60:	e1 1d       	adc	r30, r1
    1c62:	f9 1f       	adc	r31, r25
    1c64:	63 9f       	mul	r22, r19
    1c66:	b0 0d       	add	r27, r0
    1c68:	e1 1d       	adc	r30, r1
    1c6a:	f9 1f       	adc	r31, r25
    1c6c:	bd 01       	movw	r22, r26
    1c6e:	cf 01       	movw	r24, r30
    1c70:	11 24       	eor	r1, r1
    1c72:	08 95       	ret

00001c74 <__udivmodsi4>:
    1c74:	a1 e2       	ldi	r26, 0x21	; 33
    1c76:	1a 2e       	mov	r1, r26
    1c78:	aa 1b       	sub	r26, r26
    1c7a:	bb 1b       	sub	r27, r27
    1c7c:	fd 01       	movw	r30, r26
    1c7e:	0d c0       	rjmp	.+26     	; 0x1c9a <__udivmodsi4_ep>

00001c80 <__udivmodsi4_loop>:
    1c80:	aa 1f       	adc	r26, r26
    1c82:	bb 1f       	adc	r27, r27
    1c84:	ee 1f       	adc	r30, r30
    1c86:	ff 1f       	adc	r31, r31
    1c88:	a2 17       	cp	r26, r18
    1c8a:	b3 07       	cpc	r27, r19
    1c8c:	e4 07       	cpc	r30, r20
    1c8e:	f5 07       	cpc	r31, r21
    1c90:	20 f0       	brcs	.+8      	; 0x1c9a <__udivmodsi4_ep>
    1c92:	a2 1b       	sub	r26, r18
    1c94:	b3 0b       	sbc	r27, r19
    1c96:	e4 0b       	sbc	r30, r20
    1c98:	f5 0b       	sbc	r31, r21

00001c9a <__udivmodsi4_ep>:
    1c9a:	66 1f       	adc	r22, r22
    1c9c:	77 1f       	adc	r23, r23
    1c9e:	88 1f       	adc	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	1a 94       	dec	r1
    1ca4:	69 f7       	brne	.-38     	; 0x1c80 <__udivmodsi4_loop>
    1ca6:	60 95       	com	r22
    1ca8:	70 95       	com	r23
    1caa:	80 95       	com	r24
    1cac:	90 95       	com	r25
    1cae:	9b 01       	movw	r18, r22
    1cb0:	ac 01       	movw	r20, r24
    1cb2:	bd 01       	movw	r22, r26
    1cb4:	cf 01       	movw	r24, r30
    1cb6:	08 95       	ret

00001cb8 <__prologue_saves__>:
    1cb8:	2f 92       	push	r2
    1cba:	3f 92       	push	r3
    1cbc:	4f 92       	push	r4
    1cbe:	5f 92       	push	r5
    1cc0:	6f 92       	push	r6
    1cc2:	7f 92       	push	r7
    1cc4:	8f 92       	push	r8
    1cc6:	9f 92       	push	r9
    1cc8:	af 92       	push	r10
    1cca:	bf 92       	push	r11
    1ccc:	cf 92       	push	r12
    1cce:	df 92       	push	r13
    1cd0:	ef 92       	push	r14
    1cd2:	ff 92       	push	r15
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	ca 1b       	sub	r28, r26
    1ce2:	db 0b       	sbc	r29, r27
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	09 94       	ijmp

00001cf0 <__epilogue_restores__>:
    1cf0:	2a 88       	ldd	r2, Y+18	; 0x12
    1cf2:	39 88       	ldd	r3, Y+17	; 0x11
    1cf4:	48 88       	ldd	r4, Y+16	; 0x10
    1cf6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cf8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cfa:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cfc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cfe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d00:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d02:	b9 84       	ldd	r11, Y+9	; 0x09
    1d04:	c8 84       	ldd	r12, Y+8	; 0x08
    1d06:	df 80       	ldd	r13, Y+7	; 0x07
    1d08:	ee 80       	ldd	r14, Y+6	; 0x06
    1d0a:	fd 80       	ldd	r15, Y+5	; 0x05
    1d0c:	0c 81       	ldd	r16, Y+4	; 0x04
    1d0e:	1b 81       	ldd	r17, Y+3	; 0x03
    1d10:	aa 81       	ldd	r26, Y+2	; 0x02
    1d12:	b9 81       	ldd	r27, Y+1	; 0x01
    1d14:	ce 0f       	add	r28, r30
    1d16:	d1 1d       	adc	r29, r1
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	ed 01       	movw	r28, r26
    1d24:	08 95       	ret

00001d26 <_exit>:
    1d26:	f8 94       	cli

00001d28 <__stop_program>:
    1d28:	ff cf       	rjmp	.-2      	; 0x1d28 <__stop_program>

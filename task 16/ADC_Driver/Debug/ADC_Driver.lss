
ADC_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000027dc  00002870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006e  0080006e  0000287e  2**0
                  ALLOC
  3 .stab         000020b8  00000000  00000000  00002880  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fdf  00000000  00000000  00004938  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005917  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a112  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <main>
      8a:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_enum_ADC_INIT>:
/*Global pointer to function*/
static void (*ADC_pf_ADC_notification)(u16) = NULL;
/*ADC busy flag*/
static u8 ADC_u8_busy_flag=0;

ES_t  ADC_enum_ADC_INIT(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enu_Erorr_State = ES_OK ;
     ca8:	19 82       	std	Y+1, r1	; 0x01

	 /* 1- select Vref = AVCC*/
    CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_REFS1_BIT7);
     caa:	a7 e2       	ldi	r26, 0x27	; 39
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e7 e2       	ldi	r30, 0x27	; 39
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	8f 77       	andi	r24, 0x7F	; 127
     cb6:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_REFS0_BIT6);
     cb8:	a7 e2       	ldi	r26, 0x27	; 39
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e7 e2       	ldi	r30, 0x27	; 39
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	80 64       	ori	r24, 0x40	; 64
     cc4:	8c 93       	st	X, r24

	 /* 2-Right Adjust */
    CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADLAR_BIT5);
     cc6:	a7 e2       	ldi	r26, 0x27	; 39
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e7 e2       	ldi	r30, 0x27	; 39
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8f 7d       	andi	r24, 0xDF	; 223
     cd2:	8c 93       	st	X, r24

	 /* 3-Enable AutoTrigger */
    CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADATE_BIT5);
     cd4:	a6 e2       	ldi	r26, 0x26	; 38
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e6 e2       	ldi	r30, 0x26	; 38
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8f 7d       	andi	r24, 0xDF	; 223
     ce0:	8c 93       	st	X, r24

	 /* 4-Select CLK/64  */
    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADPS2_BIT2);
     ce2:	a6 e2       	ldi	r26, 0x26	; 38
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e6 e2       	ldi	r30, 0x26	; 38
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	84 60       	ori	r24, 0x04	; 4
     cee:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADPS1_BIT1);
     cf0:	a6 e2       	ldi	r26, 0x26	; 38
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e6 e2       	ldi	r30, 0x26	; 38
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	82 60       	ori	r24, 0x02	; 2
     cfc:	8c 93       	st	X, r24
    CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADPS0_BIT0);
     cfe:	a6 e2       	ldi	r26, 0x26	; 38
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e6 e2       	ldi	r30, 0x26	; 38
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8e 7f       	andi	r24, 0xFE	; 254
     d0a:	8c 93       	st	X, r24


	 /* 5-Enable ADC */
    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADEN_BIT7);
     d0c:	a6 e2       	ldi	r26, 0x26	; 38
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e6 e2       	ldi	r30, 0x26	; 38
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	80 68       	ori	r24, 0x80	; 128
     d18:	8c 93       	st	X, r24

	 return Local_enu_Erorr_State;
     d1a:	89 81       	ldd	r24, Y+1	; 0x01

}
     d1c:	0f 90       	pop	r0
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking>:

ES_t  ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking(u8 Copy_u8_ADC_Channel_NB,u16 * Copy_pu16_ADC_Digital_Value){
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	28 97       	sbiw	r28, 0x08	; 8
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	8e 83       	std	Y+6, r24	; 0x06
     d3a:	78 87       	std	Y+8, r23	; 0x08
     d3c:	6f 83       	std	Y+7, r22	; 0x07
	 ES_t Local_enu_Erorr_State = ES_OK ;
     d3e:	1d 82       	std	Y+5, r1	; 0x05
	 u32 Local_u32_ADC_TiomeOut_Counter = ADC_u8_initial_counter ;
     d40:	19 82       	std	Y+1, r1	; 0x01
     d42:	1a 82       	std	Y+2, r1	; 0x02
     d44:	1b 82       	std	Y+3, r1	; 0x03
     d46:	1c 82       	std	Y+4, r1	; 0x04

     if((Copy_u8_ADC_Channel_NB < ADC_u8_Max_Channels_NB) && (Copy_u8_ADC_Channel_NB != NULL) && (ADC_u8_busy_flag ==0)){
     d48:	8e 81       	ldd	r24, Y+6	; 0x06
     d4a:	80 32       	cpi	r24, 0x20	; 32
     d4c:	08 f0       	brcs	.+2      	; 0xd50 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x2c>
     d4e:	63 c0       	rjmp	.+198    	; 0xe16 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf2>
     d50:	8e 81       	ldd	r24, Y+6	; 0x06
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	09 f4       	brne	.+2      	; 0xd5c <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x38>
     d5a:	5d c0       	rjmp	.+186    	; 0xe16 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf2>
     d5c:	80 91 70 00 	lds	r24, 0x0070
     d60:	88 23       	and	r24, r24
     d62:	09 f0       	breq	.+2      	; 0xd66 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x42>
     d64:	58 c0       	rjmp	.+176    	; 0xe16 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf2>
    	 /*set ADC flag is busy*/
    	 	 	ADC_u8_busy_flag=1;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	80 93 70 00 	sts	0x0070, r24
    	 /*1- clear MUX4....0*/
    	 ADC_u8_ADMUX_REG &= CLEAR_MUX_BITS;
     d6c:	a7 e2       	ldi	r26, 0x27	; 39
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e7 e2       	ldi	r30, 0x27	; 39
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 7e       	andi	r24, 0xE0	; 224
     d78:	8c 93       	st	X, r24

    	 /*2- Select Channel NB*/
    	 ADC_u8_ADMUX_REG |= Copy_u8_ADC_Channel_NB;
     d7a:	a7 e2       	ldi	r26, 0x27	; 39
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e7 e2       	ldi	r30, 0x27	; 39
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	90 81       	ld	r25, Z
     d84:	8e 81       	ldd	r24, Y+6	; 0x06
     d86:	89 2b       	or	r24, r25
     d88:	8c 93       	st	X, r24

    	 /*3- Start Conversion*/
    	    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC_BIT6);
     d8a:	a6 e2       	ldi	r26, 0x26	; 38
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e6 e2       	ldi	r30, 0x26	; 38
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	80 64       	ori	r24, 0x40	; 64
     d96:	8c 93       	st	X, r24
     d98:	0b c0       	rjmp	.+22     	; 0xdb0 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x8c>

    	    /*4- wait flag=1*/
    	    while ((!GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT4))&&(Local_u32_ADC_TiomeOut_Counter<ADC_u32_TIME_OUT_MAX_VALUE))
    	    {
    	    	Local_u32_ADC_TiomeOut_Counter++;
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	ab 81       	ldd	r26, Y+3	; 0x03
     da0:	bc 81       	ldd	r27, Y+4	; 0x04
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	a1 1d       	adc	r26, r1
     da6:	b1 1d       	adc	r27, r1
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	ab 83       	std	Y+3, r26	; 0x03
     dae:	bc 83       	std	Y+4, r27	; 0x04

    	 /*3- Start Conversion*/
    	    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC_BIT6);

    	    /*4- wait flag=1*/
    	    while ((!GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT4))&&(Local_u32_ADC_TiomeOut_Counter<ADC_u32_TIME_OUT_MAX_VALUE))
     db0:	e6 e2       	ldi	r30, 0x26	; 38
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	88 2f       	mov	r24, r24
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	80 71       	andi	r24, 0x10	; 16
     dbc:	90 70       	andi	r25, 0x00	; 0
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	61 f4       	brne	.+24     	; 0xdda <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xb6>
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	9a 81       	ldd	r25, Y+2	; 0x02
     dc6:	ab 81       	ldd	r26, Y+3	; 0x03
     dc8:	bc 81       	ldd	r27, Y+4	; 0x04
     dca:	88 38       	cpi	r24, 0x88	; 136
     dcc:	23 e1       	ldi	r18, 0x13	; 19
     dce:	92 07       	cpc	r25, r18
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	a2 07       	cpc	r26, r18
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	b2 07       	cpc	r27, r18
     dd8:	00 f3       	brcs	.-64     	; 0xd9a <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0x76>
    	    {
    	    	Local_u32_ADC_TiomeOut_Counter++;
    	    }
    	    if(GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT4)!=0)/*Local_u32_ADC_TiomeOut_Counter<ADC_u32_TIME_OUT_MAX_VALUE*/
     dda:	e6 e2       	ldi	r30, 0x26	; 38
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	80 71       	andi	r24, 0x10	; 16
     de6:	90 70       	andi	r25, 0x00	; 0
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	91 f0       	breq	.+36     	; 0xe10 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xec>
    	    {

    	    /*5-Clear flag*/
    	    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT4);
     dec:	a6 e2       	ldi	r26, 0x26	; 38
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e6 e2       	ldi	r30, 0x26	; 38
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	80 61       	ori	r24, 0x10	; 16
     df8:	8c 93       	st	X, r24
    	    /*clear ADC busy flag*/
    	      ADC_u8_busy_flag=0;
     dfa:	10 92 70 00 	sts	0x0070, r1
    	    /*6-Read DIGITAL Value*/
    	    *Copy_pu16_ADC_Digital_Value = ADC_u16_ADC_REG ;
     dfe:	e4 e2       	ldi	r30, 0x24	; 36
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	ef 81       	ldd	r30, Y+7	; 0x07
     e08:	f8 85       	ldd	r31, Y+8	; 0x08
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf6>
    	    }
    	    else{
    	    	 Local_enu_Erorr_State= ES_NOK;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking+0xf6>

    	    }

     }
     else{
    	 Local_enu_Erorr_State= ES_NOK;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	8d 83       	std	Y+5, r24	; 0x05
     }
	 return Local_enu_Erorr_State;
     e1a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e1c:	28 96       	adiw	r28, 0x08	; 8
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <ADC_enum_GET_DIGITAL_VALUE_ASynch>:

ES_t  ADC_enum_GET_DIGITAL_VALUE_ASynch(u8 Copy_u8_ADC_Channel_NB,void(*Copy_pf_ADC_notifction)(u16))
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	8a 83       	std	Y+2, r24	; 0x02
     e3c:	7c 83       	std	Y+4, r23	; 0x04
     e3e:	6b 83       	std	Y+3, r22	; 0x03
		 ES_t Local_enu_Erorr_State = ES_OK ;
     e40:	19 82       	std	Y+1, r1	; 0x01
     if((Copy_u8_ADC_Channel_NB < ADC_u8_Max_Channels_NB) && (Copy_u8_ADC_Channel_NB != NULL) && (ADC_u8_busy_flag ==0)){
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	80 32       	cpi	r24, 0x20	; 32
     e46:	80 f5       	brcc	.+96     	; 0xea8 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x7a>
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	59 f1       	breq	.+86     	; 0xea8 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x7a>
     e52:	80 91 70 00 	lds	r24, 0x0070
     e56:	88 23       	and	r24, r24
     e58:	39 f5       	brne	.+78     	; 0xea8 <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x7a>
    	 /*set ADC flag is busy*/
    	 	ADC_u8_busy_flag=1;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	80 93 70 00 	sts	0x0070, r24

    	 /*Update  pointer to function*/
    	 ADC_pf_ADC_notification=Copy_pf_ADC_notifction;
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	90 93 6f 00 	sts	0x006F, r25
     e68:	80 93 6e 00 	sts	0x006E, r24
    	 /*Enable ADC interrupt*/
   	    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIE_BIT3);
     e6c:	a6 e2       	ldi	r26, 0x26	; 38
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e6 e2       	ldi	r30, 0x26	; 38
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	88 60       	ori	r24, 0x08	; 8
     e78:	8c 93       	st	X, r24
       /*1- clear MUX4....0*/
   	  ADC_u8_ADMUX_REG &= CLEAR_MUX_BITS;
     e7a:	a7 e2       	ldi	r26, 0x27	; 39
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e7 e2       	ldi	r30, 0x27	; 39
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 7e       	andi	r24, 0xE0	; 224
     e86:	8c 93       	st	X, r24
       	 /*2- Select Channel NB*/
   	   	 ADC_u8_ADMUX_REG |= Copy_u8_ADC_Channel_NB;
     e88:	a7 e2       	ldi	r26, 0x27	; 39
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e7 e2       	ldi	r30, 0x27	; 39
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	90 81       	ld	r25, Z
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	89 2b       	or	r24, r25
     e96:	8c 93       	st	X, r24
       	 /*3- Start Conversion*/
         SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC_BIT6);
     e98:	a6 e2       	ldi	r26, 0x26	; 38
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e2       	ldi	r30, 0x26	; 38
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 64       	ori	r24, 0x40	; 64
     ea4:	8c 93       	st	X, r24
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <ADC_enum_GET_DIGITAL_VALUE_ASynch+0x7e>


     }
     else{
        	 Local_enu_Erorr_State= ES_NOK;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	89 83       	std	Y+1, r24	; 0x01
         }

	 return Local_enu_Erorr_State;
     eac:	89 81       	ldd	r24, Y+1	; 0x01

}
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <ADC_enum_GET_ADC_REG_VALUE>:
ES_t  ADC_enum_GET_ADC_REG_VALUE(u16 * Copy_pu16_ADC_Value)
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <ADC_enum_GET_ADC_REG_VALUE+0x6>
     ec2:	0f 92       	push	r0
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	9b 83       	std	Y+3, r25	; 0x03
     eca:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enu_Erorr_State = ES_OK ;
     ecc:	19 82       	std	Y+1, r1	; 0x01
	 if(Copy_pu16_ADC_Value!= NULL)
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	9b 81       	ldd	r25, Y+3	; 0x03
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	49 f0       	breq	.+18     	; 0xee8 <ADC_enum_GET_ADC_REG_VALUE+0x2c>
	 {
		 /*read ADC REG*/
		 *Copy_pu16_ADC_Value= ADC_u16_ADC_REG ;
     ed6:	e4 e2       	ldi	r30, 0x24	; 36
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	91 81       	ldd	r25, Z+1	; 0x01
     ede:	ea 81       	ldd	r30, Y+2	; 0x02
     ee0:	fb 81       	ldd	r31, Y+3	; 0x03
     ee2:	91 83       	std	Z+1, r25	; 0x01
     ee4:	80 83       	st	Z, r24
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <ADC_enum_GET_ADC_REG_VALUE+0x30>

	 }
	 else{
    	 Local_enu_Erorr_State= ES_NOK;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	89 83       	std	Y+1, r24	; 0x01
     }

	 return Local_enu_Erorr_State;
     eec:	89 81       	ldd	r24, Y+1	; 0x01

}
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <__vector_16>:
//prototype FOR ISR
void __vector_16(void)        __attribute__((signal));
void __vector_16(void)
{
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pf_ADC_notification!= NULL)
     f24:	80 91 6e 00 	lds	r24, 0x006E
     f28:	90 91 6f 00 	lds	r25, 0x006F
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	99 f0       	breq	.+38     	; 0xf56 <__vector_16+0x5c>
	{
		/*clear ADC busy flag */
		 ADC_u8_busy_flag=0;
     f30:	10 92 70 00 	sts	0x0070, r1
		/*clear PIE of ADC */
   	    CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIE_BIT3);
     f34:	a6 e2       	ldi	r26, 0x26	; 38
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e6 e2       	ldi	r30, 0x26	; 38
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	87 7f       	andi	r24, 0xF7	; 247
     f40:	8c 93       	st	X, r24
   	   	/*calling notification function*/
   		ADC_pf_ADC_notification(ADC_u16_ADC_REG);
     f42:	20 91 6e 00 	lds	r18, 0x006E
     f46:	30 91 6f 00 	lds	r19, 0x006F
     f4a:	e4 e2       	ldi	r30, 0x24	; 36
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	91 81       	ldd	r25, Z+1	; 0x01
     f52:	f9 01       	movw	r30, r18
     f54:	09 95       	icall
	}

	}
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	ff 91       	pop	r31
     f5c:	ef 91       	pop	r30
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti

00000f7c <DIO_voidInit>:
//MCAL Layer
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidInit(void){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = CONC(DIO_U8_PA7_INTIAL_DIRECTION, DIO_U8_PA6_INTIAL_DIRECTION, DIO_U8_PA5_INTIAL_DIRECTION, DIO_U8_PA4_INTIAL_DIRECTION,
     f84:	ea e3       	ldi	r30, 0x3A	; 58
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	10 82       	st	Z, r1
		                   DIO_U8_PA3_INTIAL_DIRECTION, DIO_U8_PA2_INTIAL_DIRECTION, DIO_U8_PA1_INTIAL_DIRECTION, DIO_U8_PA0_INTIAL_DIRECTION);
		                 			
	DIO_u8_DDRB_REG = CONC(DIO_U8_PB7_INTIAL_DIRECTION, DIO_U8_PB6_INTIAL_DIRECTION, DIO_U8_PB5_INTIAL_DIRECTION, DIO_U8_PB4_INTIAL_DIRECTION,
     f8a:	e7 e3       	ldi	r30, 0x37	; 55
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	87 e0       	ldi	r24, 0x07	; 7
     f90:	80 83       	st	Z, r24
				           DIO_U8_PB3_INTIAL_DIRECTION, DIO_U8_PB2_INTIAL_DIRECTION, DIO_U8_PB1_INTIAL_DIRECTION, DIO_U8_PB0_INTIAL_DIRECTION);
					                                                                                                                      
	DIO_u8_DDRC_REG = CONC(DIO_U8_PC7_INTIAL_DIRECTION, DIO_U8_PC6_INTIAL_DIRECTION, DIO_U8_PC5_INTIAL_DIRECTION, DIO_U8_PC4_INTIAL_DIRECTION,
     f92:	e4 e3       	ldi	r30, 0x34	; 52
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	10 82       	st	Z, r1
		                   DIO_U8_PC3_INTIAL_DIRECTION, DIO_U8_PC2_INTIAL_DIRECTION, DIO_U8_PC1_INTIAL_DIRECTION, DIO_U8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = CONC(DIO_U8_PD7_INTIAL_DIRECTION, DIO_U8_PD6_INTIAL_DIRECTION, DIO_U8_PD5_INTIAL_DIRECTION, DIO_U8_PD4_INTIAL_DIRECTION,
     f98:	e1 e3       	ldi	r30, 0x31	; 49
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	80 83       	st	Z, r24
				           DIO_U8_PD3_INTIAL_DIRECTION, DIO_U8_PD2_INTIAL_DIRECTION, DIO_U8_PD1_INTIAL_DIRECTION, DIO_U8_PD0_INTIAL_DIRECTION);

	DIO_u8_PORTA_REG = CONC(DIO_U8_PA7_INTIAL_VALUE, DIO_U8_PA6_INTIAL_VALUE, DIO_U8_PA5_INTIAL_VALUE, DIO_U8_PA4_INTIAL_VALUE,
     fa0:	eb e3       	ldi	r30, 0x3B	; 59
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	10 82       	st	Z, r1
						    DIO_U8_PA3_INTIAL_VALUE, DIO_U8_PA2_INTIAL_VALUE, DIO_U8_PA1_INTIAL_VALUE, DIO_U8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = CONC(DIO_U8_PB7_INTIAL_VALUE, DIO_U8_PB6_INTIAL_VALUE, DIO_U8_PB5_INTIAL_VALUE, DIO_U8_PB4_INTIAL_VALUE,
     fa6:	e8 e3       	ldi	r30, 0x38	; 56
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	10 82       	st	Z, r1
						   	DIO_U8_PB3_INTIAL_VALUE, DIO_U8_PB2_INTIAL_VALUE, DIO_U8_PB1_INTIAL_VALUE, DIO_U8_PB0_INTIAL_VALUE);
												 
    DIO_u8_PORTC_REG = CONC(DIO_U8_PC7_INTIAL_VALUE, DIO_U8_PC6_INTIAL_VALUE, DIO_U8_PC5_INTIAL_VALUE, DIO_U8_PC4_INTIAL_VALUE,
     fac:	e5 e3       	ldi	r30, 0x35	; 53
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	10 82       	st	Z, r1
					        DIO_U8_PC3_INTIAL_VALUE, DIO_U8_PC2_INTIAL_VALUE, DIO_U8_PC1_INTIAL_VALUE, DIO_U8_PC0_INTIAL_VALUE);
																		   
    DIO_u8_PORTD_REG = CONC(DIO_U8_PD7_INTIAL_VALUE, DIO_U8_PD6_INTIAL_VALUE, DIO_U8_PD5_INTIAL_VALUE, DIO_U8_PD4_INTIAL_VALUE,
     fb2:	e2 e3       	ldi	r30, 0x32	; 50
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	10 82       	st	Z, r1
						    DIO_U8_PD3_INTIAL_VALUE, DIO_U8_PD2_INTIAL_VALUE, DIO_U8_PD1_INTIAL_VALUE, DIO_U8_PD0_INTIAL_VALUE);
    }
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <DIO_u8_Set_Pin_Direction>:

u8 DIO_u8_Set_Pin_Direction  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Direction ){
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	2e 97       	sbiw	r28, 0x0e	; 14
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	8a 83       	std	Y+2, r24	; 0x02
     fd4:	6b 83       	std	Y+3, r22	; 0x03
     fd6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
     fd8:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Direction == DIO_u8_INTIAL_INPUT)||(Copy_u8_Pin_Direction == DIO_u8_INTIAL_OUTPUT)))
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <DIO_u8_Set_Pin_Direction+0x24>
     fe0:	15 c1       	rjmp	.+554    	; 0x120c <DIO_u8_Set_Pin_Direction+0x24e>
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 30       	cpi	r24, 0x08	; 8
     fe6:	08 f0       	brcs	.+2      	; 0xfea <DIO_u8_Set_Pin_Direction+0x2c>
     fe8:	11 c1       	rjmp	.+546    	; 0x120c <DIO_u8_Set_Pin_Direction+0x24e>
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	88 23       	and	r24, r24
     fee:	21 f0       	breq	.+8      	; 0xff8 <DIO_u8_Set_Pin_Direction+0x3a>
     ff0:	8c 81       	ldd	r24, Y+4	; 0x04
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	09 f0       	breq	.+2      	; 0xff8 <DIO_u8_Set_Pin_Direction+0x3a>
     ff6:	0a c1       	rjmp	.+532    	; 0x120c <DIO_u8_Set_Pin_Direction+0x24e>
	{
        switch (Copy_u8_Port_ID)
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	3e 87       	std	Y+14, r19	; 0x0e
    1000:	2d 87       	std	Y+13, r18	; 0x0d
    1002:	8d 85       	ldd	r24, Y+13	; 0x0d
    1004:	9e 85       	ldd	r25, Y+14	; 0x0e
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <DIO_u8_Set_Pin_Direction+0x50>
    100c:	51 c0       	rjmp	.+162    	; 0x10b0 <DIO_u8_Set_Pin_Direction+0xf2>
    100e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1010:	3e 85       	ldd	r19, Y+14	; 0x0e
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	2c f4       	brge	.+10     	; 0x1022 <DIO_u8_Set_Pin_Direction+0x64>
    1018:	8d 85       	ldd	r24, Y+13	; 0x0d
    101a:	9e 85       	ldd	r25, Y+14	; 0x0e
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	71 f0       	breq	.+28     	; 0x103c <DIO_u8_Set_Pin_Direction+0x7e>
    1020:	f7 c0       	rjmp	.+494    	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>
    1022:	2d 85       	ldd	r18, Y+13	; 0x0d
    1024:	3e 85       	ldd	r19, Y+14	; 0x0e
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <DIO_u8_Set_Pin_Direction+0x70>
    102c:	7b c0       	rjmp	.+246    	; 0x1124 <DIO_u8_Set_Pin_Direction+0x166>
    102e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1030:	9e 85       	ldd	r25, Y+14	; 0x0e
    1032:	83 30       	cpi	r24, 0x03	; 3
    1034:	91 05       	cpc	r25, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <DIO_u8_Set_Pin_Direction+0x7c>
    1038:	af c0       	rjmp	.+350    	; 0x1198 <DIO_u8_Set_Pin_Direction+0x1da>
    103a:	ea c0       	rjmp	.+468    	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>
        {
               case DIO_u8_PORTA:
            	   switch (Copy_u8_Pin_Direction)
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3c 87       	std	Y+12, r19	; 0x0c
    1044:	2b 87       	std	Y+11, r18	; 0x0b
    1046:	8b 85       	ldd	r24, Y+11	; 0x0b
    1048:	9c 85       	ldd	r25, Y+12	; 0x0c
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	c9 f0       	breq	.+50     	; 0x1080 <DIO_u8_Set_Pin_Direction+0xc2>
    104e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1050:	3c 85       	ldd	r19, Y+12	; 0x0c
    1052:	21 30       	cpi	r18, 0x01	; 1
    1054:	31 05       	cpc	r19, r1
    1056:	49 f5       	brne	.+82     	; 0x10aa <DIO_u8_Set_Pin_Direction+0xec>
            	   {
                    	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
    1058:	aa e3       	ldi	r26, 0x3A	; 58
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ea e3       	ldi	r30, 0x3A	; 58
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_u8_Set_Pin_Direction+0xb8>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_u8_Set_Pin_Direction+0xb4>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	c8 c0       	rjmp	.+400    	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>
                    	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
    1080:	aa e3       	ldi	r26, 0x3A	; 58
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	ea e3       	ldi	r30, 0x3A	; 58
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_u8_Set_Pin_Direction+0xe0>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_u8_Set_Pin_Direction+0xdc>
    10a2:	80 95       	com	r24
    10a4:	84 23       	and	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	b3 c0       	rjmp	.+358    	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	b0 c0       	rjmp	.+352    	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>

            	   }
                  break;
               case DIO_u8_PORTB:
             	   switch (Copy_u8_Pin_Direction)
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	3a 87       	std	Y+10, r19	; 0x0a
    10b8:	29 87       	std	Y+9, r18	; 0x09
    10ba:	89 85       	ldd	r24, Y+9	; 0x09
    10bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	c9 f0       	breq	.+50     	; 0x10f4 <DIO_u8_Set_Pin_Direction+0x136>
    10c2:	29 85       	ldd	r18, Y+9	; 0x09
    10c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    10c6:	21 30       	cpi	r18, 0x01	; 1
    10c8:	31 05       	cpc	r19, r1
    10ca:	49 f5       	brne	.+82     	; 0x111e <DIO_u8_Set_Pin_Direction+0x160>
             	   {
                     	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    10cc:	a7 e3       	ldi	r26, 0x37	; 55
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e7 e3       	ldi	r30, 0x37	; 55
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_u8_Set_Pin_Direction+0x12c>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_u8_Set_Pin_Direction+0x128>
    10ee:	84 2b       	or	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	8e c0       	rjmp	.+284    	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>
                     	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    10f4:	a7 e3       	ldi	r26, 0x37	; 55
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e7 e3       	ldi	r30, 0x37	; 55
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_u8_Set_Pin_Direction+0x154>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_u8_Set_Pin_Direction+0x150>
    1116:	80 95       	com	r24
    1118:	84 23       	and	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	79 c0       	rjmp	.+242    	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	76 c0       	rjmp	.+236    	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>

             	   }
                   break;
               case DIO_u8_PORTC:
                   switch (Copy_u8_Pin_Direction)
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	38 87       	std	Y+8, r19	; 0x08
    112c:	2f 83       	std	Y+7, r18	; 0x07
    112e:	8f 81       	ldd	r24, Y+7	; 0x07
    1130:	98 85       	ldd	r25, Y+8	; 0x08
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	c9 f0       	breq	.+50     	; 0x1168 <DIO_u8_Set_Pin_Direction+0x1aa>
    1136:	2f 81       	ldd	r18, Y+7	; 0x07
    1138:	38 85       	ldd	r19, Y+8	; 0x08
    113a:	21 30       	cpi	r18, 0x01	; 1
    113c:	31 05       	cpc	r19, r1
    113e:	49 f5       	brne	.+82     	; 0x1192 <DIO_u8_Set_Pin_Direction+0x1d4>
                 	   {
                         	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    1140:	a4 e3       	ldi	r26, 0x34	; 52
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e4 e3       	ldi	r30, 0x34	; 52
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_u8_Set_Pin_Direction+0x1a0>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_u8_Set_Pin_Direction+0x19c>
    1162:	84 2b       	or	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	54 c0       	rjmp	.+168    	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>
                         	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    1168:	a4 e3       	ldi	r26, 0x34	; 52
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e4 e3       	ldi	r30, 0x34	; 52
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_u8_Set_Pin_Direction+0x1c8>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_u8_Set_Pin_Direction+0x1c4>
    118a:	80 95       	com	r24
    118c:	84 23       	and	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	3f c0       	rjmp	.+126    	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>
  			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	3c c0       	rjmp	.+120    	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>

                 	   }
                       break;

               case DIO_u8_PORTD:
                    switch (Copy_u8_Pin_Direction)
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	3e 83       	std	Y+6, r19	; 0x06
    11a0:	2d 83       	std	Y+5, r18	; 0x05
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	c9 f0       	breq	.+50     	; 0x11dc <DIO_u8_Set_Pin_Direction+0x21e>
    11aa:	2d 81       	ldd	r18, Y+5	; 0x05
    11ac:	3e 81       	ldd	r19, Y+6	; 0x06
    11ae:	21 30       	cpi	r18, 0x01	; 1
    11b0:	31 05       	cpc	r19, r1
    11b2:	49 f5       	brne	.+82     	; 0x1206 <DIO_u8_Set_Pin_Direction+0x248>
                     	   {
                             	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    11b4:	a1 e3       	ldi	r26, 0x31	; 49
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e1 e3       	ldi	r30, 0x31	; 49
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_u8_Set_Pin_Direction+0x214>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_u8_Set_Pin_Direction+0x210>
    11d6:	84 2b       	or	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	1a c0       	rjmp	.+52     	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>
                             	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    11dc:	a1 e3       	ldi	r26, 0x31	; 49
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e1 e3       	ldi	r30, 0x31	; 49
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_u8_Set_Pin_Direction+0x23c>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_u8_Set_Pin_Direction+0x238>
    11fe:	80 95       	com	r24
    1200:	84 23       	and	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>
      			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_u8_Set_Pin_Direction+0x252>
                     	   }
                           break;
        }
	}
	else {
		Local_u8_Erorr_State = ES_NOK ;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_Erorr_State ;
    1210:	89 81       	ldd	r24, Y+1	; 0x01
}
    1212:	2e 96       	adiw	r28, 0x0e	; 14
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <DIO_u8_Set_Pin_Value>:

u8 DIO_u8_Set_Pin_Value  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Value ){
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	2e 97       	sbiw	r28, 0x0e	; 14
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	8a 83       	std	Y+2, r24	; 0x02
    123a:	6b 83       	std	Y+3, r22	; 0x03
    123c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
    123e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Value == DIO_u8_INPUT)||(Copy_u8_Pin_Value == DIO_u8_OUTPUT)))
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	84 30       	cpi	r24, 0x04	; 4
    1244:	08 f0       	brcs	.+2      	; 0x1248 <DIO_u8_Set_Pin_Value+0x24>
    1246:	15 c1       	rjmp	.+554    	; 0x1472 <DIO_u8_Set_Pin_Value+0x24e>
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	88 30       	cpi	r24, 0x08	; 8
    124c:	08 f0       	brcs	.+2      	; 0x1250 <DIO_u8_Set_Pin_Value+0x2c>
    124e:	11 c1       	rjmp	.+546    	; 0x1472 <DIO_u8_Set_Pin_Value+0x24e>
    1250:	8c 81       	ldd	r24, Y+4	; 0x04
    1252:	88 23       	and	r24, r24
    1254:	21 f0       	breq	.+8      	; 0x125e <DIO_u8_Set_Pin_Value+0x3a>
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	09 f0       	breq	.+2      	; 0x125e <DIO_u8_Set_Pin_Value+0x3a>
    125c:	0a c1       	rjmp	.+532    	; 0x1472 <DIO_u8_Set_Pin_Value+0x24e>
	{
		switch (Copy_u8_Port_ID)
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3e 87       	std	Y+14, r19	; 0x0e
    1266:	2d 87       	std	Y+13, r18	; 0x0d
    1268:	8d 85       	ldd	r24, Y+13	; 0x0d
    126a:	9e 85       	ldd	r25, Y+14	; 0x0e
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	91 05       	cpc	r25, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <DIO_u8_Set_Pin_Value+0x50>
    1272:	51 c0       	rjmp	.+162    	; 0x1316 <DIO_u8_Set_Pin_Value+0xf2>
    1274:	2d 85       	ldd	r18, Y+13	; 0x0d
    1276:	3e 85       	ldd	r19, Y+14	; 0x0e
    1278:	22 30       	cpi	r18, 0x02	; 2
    127a:	31 05       	cpc	r19, r1
    127c:	2c f4       	brge	.+10     	; 0x1288 <DIO_u8_Set_Pin_Value+0x64>
    127e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1280:	9e 85       	ldd	r25, Y+14	; 0x0e
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	71 f0       	breq	.+28     	; 0x12a2 <DIO_u8_Set_Pin_Value+0x7e>
    1286:	f7 c0       	rjmp	.+494    	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>
    1288:	2d 85       	ldd	r18, Y+13	; 0x0d
    128a:	3e 85       	ldd	r19, Y+14	; 0x0e
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	09 f4       	brne	.+2      	; 0x1294 <DIO_u8_Set_Pin_Value+0x70>
    1292:	7b c0       	rjmp	.+246    	; 0x138a <DIO_u8_Set_Pin_Value+0x166>
    1294:	8d 85       	ldd	r24, Y+13	; 0x0d
    1296:	9e 85       	ldd	r25, Y+14	; 0x0e
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	91 05       	cpc	r25, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <DIO_u8_Set_Pin_Value+0x7c>
    129e:	af c0       	rjmp	.+350    	; 0x13fe <DIO_u8_Set_Pin_Value+0x1da>
    12a0:	ea c0       	rjmp	.+468    	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Pin_Value)
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3c 87       	std	Y+12, r19	; 0x0c
    12aa:	2b 87       	std	Y+11, r18	; 0x0b
    12ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	c9 f0       	breq	.+50     	; 0x12e6 <DIO_u8_Set_Pin_Value+0xc2>
    12b4:	2b 85       	ldd	r18, Y+11	; 0x0b
    12b6:	3c 85       	ldd	r19, Y+12	; 0x0c
    12b8:	21 30       	cpi	r18, 0x01	; 1
    12ba:	31 05       	cpc	r19, r1
    12bc:	49 f5       	brne	.+82     	; 0x1310 <DIO_u8_Set_Pin_Value+0xec>
			{
			     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    12be:	ab e3       	ldi	r26, 0x3B	; 59
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	eb e3       	ldi	r30, 0x3B	; 59
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	48 2f       	mov	r20, r24
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 2e       	mov	r0, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <DIO_u8_Set_Pin_Value+0xb8>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <DIO_u8_Set_Pin_Value+0xb4>
    12e0:	84 2b       	or	r24, r20
    12e2:	8c 93       	st	X, r24
    12e4:	c8 c0       	rjmp	.+400    	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>
           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    12e6:	ab e3       	ldi	r26, 0x3B	; 59
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	eb e3       	ldi	r30, 0x3B	; 59
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_u8_Set_Pin_Value+0xe0>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_u8_Set_Pin_Value+0xdc>
    1308:	80 95       	com	r24
    130a:	84 23       	and	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	b3 c0       	rjmp	.+358    	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>
           	     default :Local_u8_Erorr_State = ES_NOK ;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	b0 c0       	rjmp	.+352    	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>

			}
			break;
		case DIO_u8_PORTB :
			switch (Copy_u8_Pin_Value)
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3a 87       	std	Y+10, r19	; 0x0a
    131e:	29 87       	std	Y+9, r18	; 0x09
    1320:	89 85       	ldd	r24, Y+9	; 0x09
    1322:	9a 85       	ldd	r25, Y+10	; 0x0a
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	c9 f0       	breq	.+50     	; 0x135a <DIO_u8_Set_Pin_Value+0x136>
    1328:	29 85       	ldd	r18, Y+9	; 0x09
    132a:	3a 85       	ldd	r19, Y+10	; 0x0a
    132c:	21 30       	cpi	r18, 0x01	; 1
    132e:	31 05       	cpc	r19, r1
    1330:	49 f5       	brne	.+82     	; 0x1384 <DIO_u8_Set_Pin_Value+0x160>
				{
				     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    1332:	a8 e3       	ldi	r26, 0x38	; 56
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e8 e3       	ldi	r30, 0x38	; 56
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <DIO_u8_Set_Pin_Value+0x12c>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <DIO_u8_Set_Pin_Value+0x128>
    1354:	84 2b       	or	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	8e c0       	rjmp	.+284    	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>
	           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    135a:	a8 e3       	ldi	r26, 0x38	; 56
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e8 e3       	ldi	r30, 0x38	; 56
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 2e       	mov	r0, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <DIO_u8_Set_Pin_Value+0x154>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	0a 94       	dec	r0
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <DIO_u8_Set_Pin_Value+0x150>
    137c:	80 95       	com	r24
    137e:	84 23       	and	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	79 c0       	rjmp	.+242    	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>
	           	     default :Local_u8_Erorr_State = ES_NOK ;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	76 c0       	rjmp	.+236    	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>

				}
	     	break;
		case DIO_u8_PORTC :
			switch (Copy_u8_Pin_Value)
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	38 87       	std	Y+8, r19	; 0x08
    1392:	2f 83       	std	Y+7, r18	; 0x07
    1394:	8f 81       	ldd	r24, Y+7	; 0x07
    1396:	98 85       	ldd	r25, Y+8	; 0x08
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	c9 f0       	breq	.+50     	; 0x13ce <DIO_u8_Set_Pin_Value+0x1aa>
    139c:	2f 81       	ldd	r18, Y+7	; 0x07
    139e:	38 85       	ldd	r19, Y+8	; 0x08
    13a0:	21 30       	cpi	r18, 0x01	; 1
    13a2:	31 05       	cpc	r19, r1
    13a4:	49 f5       	brne	.+82     	; 0x13f8 <DIO_u8_Set_Pin_Value+0x1d4>
					{
					     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    13a6:	a5 e3       	ldi	r26, 0x35	; 53
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e3       	ldi	r30, 0x35	; 53
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	48 2f       	mov	r20, r24
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 2e       	mov	r0, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <DIO_u8_Set_Pin_Value+0x1a0>
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	0a 94       	dec	r0
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <DIO_u8_Set_Pin_Value+0x19c>
    13c8:	84 2b       	or	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	54 c0       	rjmp	.+168    	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>
		           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    13ce:	a5 e3       	ldi	r26, 0x35	; 53
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e5 e3       	ldi	r30, 0x35	; 53
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_u8_Set_Pin_Value+0x1c8>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_u8_Set_Pin_Value+0x1c4>
    13f0:	80 95       	com	r24
    13f2:	84 23       	and	r24, r20
    13f4:	8c 93       	st	X, r24
    13f6:	3f c0       	rjmp	.+126    	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>
		           	     default :Local_u8_Erorr_State = ES_NOK ;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	3c c0       	rjmp	.+120    	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>

					}
		   break;
		case DIO_u8_PORTD :
			switch (Copy_u8_Pin_Value)
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3e 83       	std	Y+6, r19	; 0x06
    1406:	2d 83       	std	Y+5, r18	; 0x05
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	c9 f0       	breq	.+50     	; 0x1442 <DIO_u8_Set_Pin_Value+0x21e>
    1410:	2d 81       	ldd	r18, Y+5	; 0x05
    1412:	3e 81       	ldd	r19, Y+6	; 0x06
    1414:	21 30       	cpi	r18, 0x01	; 1
    1416:	31 05       	cpc	r19, r1
    1418:	49 f5       	brne	.+82     	; 0x146c <DIO_u8_Set_Pin_Value+0x248>
						{
						     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    141a:	a2 e3       	ldi	r26, 0x32	; 50
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e2 e3       	ldi	r30, 0x32	; 50
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_u8_Set_Pin_Value+0x214>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_u8_Set_Pin_Value+0x210>
    143c:	84 2b       	or	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	1a c0       	rjmp	.+52     	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>
			           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    1442:	a2 e3       	ldi	r26, 0x32	; 50
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e2 e3       	ldi	r30, 0x32	; 50
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_u8_Set_Pin_Value+0x23c>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_u8_Set_Pin_Value+0x238>
    1464:	80 95       	com	r24
    1466:	84 23       	and	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	05 c0       	rjmp	.+10     	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_u8_Set_Pin_Value+0x252>
						}
			break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8_Erorr_State ;
    1476:	89 81       	ldd	r24, Y+1	; 0x01
}
    1478:	2e 96       	adiw	r28, 0x0e	; 14
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <DIO_u8_Get_Pin_Value>:

u8 DIO_u8_Get_Pin_Value      (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 *Copy_u8_Returned_Pin_Value ){
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	28 97       	sbiw	r28, 0x08	; 8
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	8b 83       	std	Y+3, r24	; 0x03
    14a0:	6c 83       	std	Y+4, r22	; 0x04
    14a2:	5e 83       	std	Y+6, r21	; 0x06
    14a4:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8_Erorr_State = ES_OK ;
    14a6:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Pin_Value ;
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && (Copy_u8_Returned_Pin_Value != NULL)){
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	84 30       	cpi	r24, 0x04	; 4
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <DIO_u8_Get_Pin_Value+0x26>
    14ae:	9e c0       	rjmp	.+316    	; 0x15ec <DIO_u8_Get_Pin_Value+0x162>
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	88 30       	cpi	r24, 0x08	; 8
    14b4:	08 f0       	brcs	.+2      	; 0x14b8 <DIO_u8_Get_Pin_Value+0x2e>
    14b6:	9a c0       	rjmp	.+308    	; 0x15ec <DIO_u8_Get_Pin_Value+0x162>
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	9e 81       	ldd	r25, Y+6	; 0x06
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	09 f4       	brne	.+2      	; 0x14c2 <DIO_u8_Get_Pin_Value+0x38>
    14c0:	95 c0       	rjmp	.+298    	; 0x15ec <DIO_u8_Get_Pin_Value+0x162>
		switch (Copy_u8_Port_ID)
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	38 87       	std	Y+8, r19	; 0x08
    14ca:	2f 83       	std	Y+7, r18	; 0x07
    14cc:	8f 81       	ldd	r24, Y+7	; 0x07
    14ce:	98 85       	ldd	r25, Y+8	; 0x08
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	91 05       	cpc	r25, r1
    14d4:	a1 f1       	breq	.+104    	; 0x153e <DIO_u8_Get_Pin_Value+0xb4>
    14d6:	2f 81       	ldd	r18, Y+7	; 0x07
    14d8:	38 85       	ldd	r19, Y+8	; 0x08
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	2c f4       	brge	.+10     	; 0x14ea <DIO_u8_Get_Pin_Value+0x60>
    14e0:	8f 81       	ldd	r24, Y+7	; 0x07
    14e2:	98 85       	ldd	r25, Y+8	; 0x08
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	71 f0       	breq	.+28     	; 0x1504 <DIO_u8_Get_Pin_Value+0x7a>
    14e8:	83 c0       	rjmp	.+262    	; 0x15f0 <DIO_u8_Get_Pin_Value+0x166>
    14ea:	2f 81       	ldd	r18, Y+7	; 0x07
    14ec:	38 85       	ldd	r19, Y+8	; 0x08
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <DIO_u8_Get_Pin_Value+0x6c>
    14f4:	41 c0       	rjmp	.+130    	; 0x1578 <DIO_u8_Get_Pin_Value+0xee>
    14f6:	8f 81       	ldd	r24, Y+7	; 0x07
    14f8:	98 85       	ldd	r25, Y+8	; 0x08
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	91 05       	cpc	r25, r1
    14fe:	09 f4       	brne	.+2      	; 0x1502 <DIO_u8_Get_Pin_Value+0x78>
    1500:	58 c0       	rjmp	.+176    	; 0x15b2 <DIO_u8_Get_Pin_Value+0x128>
    1502:	76 c0       	rjmp	.+236    	; 0x15f0 <DIO_u8_Get_Pin_Value+0x166>
		{
		     case DIO_u8_PORTA :
		      Local_u8_Pin_Value = GET_BIT (DIO_u8_PINA_REG, Copy_u8_Pin_ID) ;
    1504:	e9 e3       	ldi	r30, 0x39	; 57
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	48 2f       	mov	r20, r24
    150c:	8c 81       	ldd	r24, Y+4	; 0x04
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 2e       	mov	r0, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <DIO_u8_Get_Pin_Value+0x94>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	0a 94       	dec	r0
    1520:	e2 f7       	brpl	.-8      	; 0x151a <DIO_u8_Get_Pin_Value+0x90>
    1522:	84 23       	and	r24, r20
    1524:	89 83       	std	Y+1, r24	; 0x01

		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	88 23       	and	r24, r24
    152a:	21 f4       	brne	.+8      	; 0x1534 <DIO_u8_Get_Pin_Value+0xaa>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    152c:	ed 81       	ldd	r30, Y+5	; 0x05
    152e:	fe 81       	ldd	r31, Y+6	; 0x06
    1530:	10 82       	st	Z, r1
    1532:	5e c0       	rjmp	.+188    	; 0x15f0 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		    	 else
		    	 {
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1534:	ed 81       	ldd	r30, Y+5	; 0x05
    1536:	fe 81       	ldd	r31, Y+6	; 0x06
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	80 83       	st	Z, r24
    153c:	59 c0       	rjmp	.+178    	; 0x15f0 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		     break;
		     case DIO_u8_PORTB :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINB_REG,Copy_u8_Pin_ID ) ;
    153e:	e6 e3       	ldi	r30, 0x36	; 54
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_u8_Get_Pin_Value+0xce>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_u8_Get_Pin_Value+0xca>
    155c:	84 23       	and	r24, r20
    155e:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	88 23       	and	r24, r24
    1564:	21 f4       	brne	.+8      	; 0x156e <DIO_u8_Get_Pin_Value+0xe4>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    1566:	ed 81       	ldd	r30, Y+5	; 0x05
    1568:	fe 81       	ldd	r31, Y+6	; 0x06
    156a:	10 82       	st	Z, r1
    156c:	41 c0       	rjmp	.+130    	; 0x15f0 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    156e:	ed 81       	ldd	r30, Y+5	; 0x05
    1570:	fe 81       	ldd	r31, Y+6	; 0x06
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	80 83       	st	Z, r24
    1576:	3c c0       	rjmp	.+120    	; 0x15f0 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTC :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINC_REG,Copy_u8_Pin_ID ) ;
    1578:	e3 e3       	ldi	r30, 0x33	; 51
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <DIO_u8_Get_Pin_Value+0x108>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <DIO_u8_Get_Pin_Value+0x104>
    1596:	84 23       	and	r24, r20
    1598:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	88 23       	and	r24, r24
    159e:	21 f4       	brne	.+8      	; 0x15a8 <DIO_u8_Get_Pin_Value+0x11e>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    15a0:	ed 81       	ldd	r30, Y+5	; 0x05
    15a2:	fe 81       	ldd	r31, Y+6	; 0x06
    15a4:	10 82       	st	Z, r1
    15a6:	24 c0       	rjmp	.+72     	; 0x15f0 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    15a8:	ed 81       	ldd	r30, Y+5	; 0x05
    15aa:	fe 81       	ldd	r31, Y+6	; 0x06
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	80 83       	st	Z, r24
    15b0:	1f c0       	rjmp	.+62     	; 0x15f0 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTD :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PIND_REG,Copy_u8_Pin_ID ) ;
    15b2:	e0 e3       	ldi	r30, 0x30	; 48
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 2e       	mov	r0, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_u8_Get_Pin_Value+0x142>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_u8_Get_Pin_Value+0x13e>
    15d0:	84 23       	and	r24, r20
    15d2:	89 83       	std	Y+1, r24	; 0x01
		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	88 23       	and	r24, r24
    15d8:	21 f4       	brne	.+8      	; 0x15e2 <DIO_u8_Get_Pin_Value+0x158>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    15da:	ed 81       	ldd	r30, Y+5	; 0x05
    15dc:	fe 81       	ldd	r31, Y+6	; 0x06
    15de:	10 82       	st	Z, r1
    15e0:	07 c0       	rjmp	.+14     	; 0x15f0 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    15e2:	ed 81       	ldd	r30, Y+5	; 0x05
    15e4:	fe 81       	ldd	r31, Y+6	; 0x06
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	80 83       	st	Z, r24
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	8a 83       	std	Y+2, r24	; 0x02
		}
		return Local_u8_Erorr_State ;
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15f2:	28 96       	adiw	r28, 0x08	; 8
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <DIO_u8_Set_Port_Direction>:

u8 DIO_u8_Set_Port_Direction (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Direction ){
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	2d 97       	sbiw	r28, 0x0d	; 13
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	8a 83       	std	Y+2, r24	; 0x02
    161a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    161c:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && ((Copy_u8_Port_Direction == DIO_u8_INPUT)||(Copy_u8_Port_Direction == DIO_u8_OUTPUT)))
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	84 30       	cpi	r24, 0x04	; 4
    1622:	08 f0       	brcs	.+2      	; 0x1626 <DIO_u8_Set_Port_Direction+0x22>
    1624:	87 c0       	rjmp	.+270    	; 0x1734 <DIO_u8_Set_Port_Direction+0x130>
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	88 23       	and	r24, r24
    162a:	21 f0       	breq	.+8      	; 0x1634 <DIO_u8_Set_Port_Direction+0x30>
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	09 f0       	breq	.+2      	; 0x1634 <DIO_u8_Set_Port_Direction+0x30>
    1632:	80 c0       	rjmp	.+256    	; 0x1734 <DIO_u8_Set_Port_Direction+0x130>
	{
		switch (Copy_u8_Port_ID)
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	3d 87       	std	Y+13, r19	; 0x0d
    163c:	2c 87       	std	Y+12, r18	; 0x0c
    163e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1640:	9d 85       	ldd	r25, Y+13	; 0x0d
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	91 05       	cpc	r25, r1
    1646:	71 f1       	breq	.+92     	; 0x16a4 <DIO_u8_Set_Port_Direction+0xa0>
    1648:	2c 85       	ldd	r18, Y+12	; 0x0c
    164a:	3d 85       	ldd	r19, Y+13	; 0x0d
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	2c f4       	brge	.+10     	; 0x165c <DIO_u8_Set_Port_Direction+0x58>
    1652:	8c 85       	ldd	r24, Y+12	; 0x0c
    1654:	9d 85       	ldd	r25, Y+13	; 0x0d
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	69 f0       	breq	.+26     	; 0x1674 <DIO_u8_Set_Port_Direction+0x70>
    165a:	69 c0       	rjmp	.+210    	; 0x172e <DIO_u8_Set_Port_Direction+0x12a>
    165c:	2c 85       	ldd	r18, Y+12	; 0x0c
    165e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1660:	22 30       	cpi	r18, 0x02	; 2
    1662:	31 05       	cpc	r19, r1
    1664:	b1 f1       	breq	.+108    	; 0x16d2 <DIO_u8_Set_Port_Direction+0xce>
    1666:	8c 85       	ldd	r24, Y+12	; 0x0c
    1668:	9d 85       	ldd	r25, Y+13	; 0x0d
    166a:	83 30       	cpi	r24, 0x03	; 3
    166c:	91 05       	cpc	r25, r1
    166e:	09 f4       	brne	.+2      	; 0x1672 <DIO_u8_Set_Port_Direction+0x6e>
    1670:	47 c0       	rjmp	.+142    	; 0x1700 <DIO_u8_Set_Port_Direction+0xfc>
    1672:	5d c0       	rjmp	.+186    	; 0x172e <DIO_u8_Set_Port_Direction+0x12a>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Port_Direction)
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	3b 87       	std	Y+11, r19	; 0x0b
    167c:	2a 87       	std	Y+10, r18	; 0x0a
    167e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1680:	9b 85       	ldd	r25, Y+11	; 0x0b
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	59 f0       	breq	.+22     	; 0x169c <DIO_u8_Set_Port_Direction+0x98>
    1686:	2a 85       	ldd	r18, Y+10	; 0x0a
    1688:	3b 85       	ldd	r19, Y+11	; 0x0b
    168a:	21 30       	cpi	r18, 0x01	; 1
    168c:	31 05       	cpc	r19, r1
    168e:	09 f0       	breq	.+2      	; 0x1692 <DIO_u8_Set_Port_Direction+0x8e>
    1690:	53 c0       	rjmp	.+166    	; 0x1738 <DIO_u8_Set_Port_Direction+0x134>
			{
			    case DIO_u8_OUTPUT : DIO_u8_PORTA_REG = 0xff;break;
    1692:	eb e3       	ldi	r30, 0x3B	; 59
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	8f ef       	ldi	r24, 0xFF	; 255
    1698:	80 83       	st	Z, r24
    169a:	4e c0       	rjmp	.+156    	; 0x1738 <DIO_u8_Set_Port_Direction+0x134>
			    case DIO_u8_INPUT : DIO_u8_PORTA_REG = 0x00;break;
    169c:	eb e3       	ldi	r30, 0x3B	; 59
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	10 82       	st	Z, r1
    16a2:	4a c0       	rjmp	.+148    	; 0x1738 <DIO_u8_Set_Port_Direction+0x134>
			}
			break;
			case DIO_u8_PORTB :
				switch (Copy_u8_Port_Direction)
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	39 87       	std	Y+9, r19	; 0x09
    16ac:	28 87       	std	Y+8, r18	; 0x08
    16ae:	88 85       	ldd	r24, Y+8	; 0x08
    16b0:	99 85       	ldd	r25, Y+9	; 0x09
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	51 f0       	breq	.+20     	; 0x16ca <DIO_u8_Set_Port_Direction+0xc6>
    16b6:	28 85       	ldd	r18, Y+8	; 0x08
    16b8:	39 85       	ldd	r19, Y+9	; 0x09
    16ba:	21 30       	cpi	r18, 0x01	; 1
    16bc:	31 05       	cpc	r19, r1
    16be:	e1 f5       	brne	.+120    	; 0x1738 <DIO_u8_Set_Port_Direction+0x134>
				{
				    case DIO_u8_OUTPUT : DIO_u8_PORTB_REG = 0xff;break;
    16c0:	e8 e3       	ldi	r30, 0x38	; 56
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	8f ef       	ldi	r24, 0xFF	; 255
    16c6:	80 83       	st	Z, r24
    16c8:	37 c0       	rjmp	.+110    	; 0x1738 <DIO_u8_Set_Port_Direction+0x134>
				    case DIO_u8_INPUT : DIO_u8_PORTB_REG = 0x00;break;
    16ca:	e8 e3       	ldi	r30, 0x38	; 56
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	10 82       	st	Z, r1
    16d0:	33 c0       	rjmp	.+102    	; 0x1738 <DIO_u8_Set_Port_Direction+0x134>
				}
				break;
				case DIO_u8_PORTC :
					switch (Copy_u8_Port_Direction)
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3f 83       	std	Y+7, r19	; 0x07
    16da:	2e 83       	std	Y+6, r18	; 0x06
    16dc:	8e 81       	ldd	r24, Y+6	; 0x06
    16de:	9f 81       	ldd	r25, Y+7	; 0x07
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	51 f0       	breq	.+20     	; 0x16f8 <DIO_u8_Set_Port_Direction+0xf4>
    16e4:	2e 81       	ldd	r18, Y+6	; 0x06
    16e6:	3f 81       	ldd	r19, Y+7	; 0x07
    16e8:	21 30       	cpi	r18, 0x01	; 1
    16ea:	31 05       	cpc	r19, r1
    16ec:	29 f5       	brne	.+74     	; 0x1738 <DIO_u8_Set_Port_Direction+0x134>
					{
					    case DIO_u8_OUTPUT : DIO_u8_PORTC_REG = 0xff;break;
    16ee:	e5 e3       	ldi	r30, 0x35	; 53
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	8f ef       	ldi	r24, 0xFF	; 255
    16f4:	80 83       	st	Z, r24
    16f6:	20 c0       	rjmp	.+64     	; 0x1738 <DIO_u8_Set_Port_Direction+0x134>
					    case DIO_u8_INPUT : DIO_u8_PORTC_REG = 0x00;break;
    16f8:	e5 e3       	ldi	r30, 0x35	; 53
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	10 82       	st	Z, r1
    16fe:	1c c0       	rjmp	.+56     	; 0x1738 <DIO_u8_Set_Port_Direction+0x134>
					}
					break;
					case DIO_u8_PORTD :
						switch (Copy_u8_Port_Direction)
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	3d 83       	std	Y+5, r19	; 0x05
    1708:	2c 83       	std	Y+4, r18	; 0x04
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	9d 81       	ldd	r25, Y+5	; 0x05
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	51 f0       	breq	.+20     	; 0x1726 <DIO_u8_Set_Port_Direction+0x122>
    1712:	2c 81       	ldd	r18, Y+4	; 0x04
    1714:	3d 81       	ldd	r19, Y+5	; 0x05
    1716:	21 30       	cpi	r18, 0x01	; 1
    1718:	31 05       	cpc	r19, r1
    171a:	71 f4       	brne	.+28     	; 0x1738 <DIO_u8_Set_Port_Direction+0x134>
						{
						    case DIO_u8_OUTPUT : DIO_u8_PORTD_REG = 0xff;break;
    171c:	e2 e3       	ldi	r30, 0x32	; 50
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	8f ef       	ldi	r24, 0xFF	; 255
    1722:	80 83       	st	Z, r24
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <DIO_u8_Set_Port_Direction+0x134>
						    case DIO_u8_INPUT : DIO_u8_PORTD_REG = 0x00;break;
    1726:	e2 e3       	ldi	r30, 0x32	; 50
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	10 82       	st	Z, r1
    172c:	05 c0       	rjmp	.+10     	; 0x1738 <DIO_u8_Set_Port_Direction+0x134>
						}
						break;
						default:Local_u8_Erorr_State = ES_NOK ;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <DIO_u8_Set_Port_Direction+0x134>

		}
	}
	else {
				Local_u8_Erorr_State = ES_NOK ;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    1738:	89 81       	ldd	r24, Y+1	; 0x01

}
    173a:	2d 96       	adiw	r28, 0x0d	; 13
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <DIO_u8_Set_Port_Value>:

u8 DIO_u8_Set_Port_Value     (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Value ){
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <DIO_u8_Set_Port_Value+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <DIO_u8_Set_Port_Value+0x8>
    1754:	0f 92       	push	r0
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	8a 83       	std	Y+2, r24	; 0x02
    175c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    175e:	19 82       	std	Y+1, r1	; 0x01

			switch (Copy_u8_Port_ID)
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	3d 83       	std	Y+5, r19	; 0x05
    1768:	2c 83       	std	Y+4, r18	; 0x04
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	9d 81       	ldd	r25, Y+5	; 0x05
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	91 05       	cpc	r25, r1
    1772:	d1 f0       	breq	.+52     	; 0x17a8 <DIO_u8_Set_Port_Value+0x5c>
    1774:	2c 81       	ldd	r18, Y+4	; 0x04
    1776:	3d 81       	ldd	r19, Y+5	; 0x05
    1778:	22 30       	cpi	r18, 0x02	; 2
    177a:	31 05       	cpc	r19, r1
    177c:	2c f4       	brge	.+10     	; 0x1788 <DIO_u8_Set_Port_Value+0x3c>
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	9d 81       	ldd	r25, Y+5	; 0x05
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	61 f0       	breq	.+24     	; 0x179e <DIO_u8_Set_Port_Value+0x52>
    1786:	1f c0       	rjmp	.+62     	; 0x17c6 <DIO_u8_Set_Port_Value+0x7a>
    1788:	2c 81       	ldd	r18, Y+4	; 0x04
    178a:	3d 81       	ldd	r19, Y+5	; 0x05
    178c:	22 30       	cpi	r18, 0x02	; 2
    178e:	31 05       	cpc	r19, r1
    1790:	81 f0       	breq	.+32     	; 0x17b2 <DIO_u8_Set_Port_Value+0x66>
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	83 30       	cpi	r24, 0x03	; 3
    1798:	91 05       	cpc	r25, r1
    179a:	81 f0       	breq	.+32     	; 0x17bc <DIO_u8_Set_Port_Value+0x70>
    179c:	14 c0       	rjmp	.+40     	; 0x17c6 <DIO_u8_Set_Port_Value+0x7a>
			{
			case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8_Port_Value; break;
    179e:	eb e3       	ldi	r30, 0x3B	; 59
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	80 83       	st	Z, r24
    17a6:	11 c0       	rjmp	.+34     	; 0x17ca <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8_Port_Value; break;
    17a8:	e8 e3       	ldi	r30, 0x38	; 56
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	80 83       	st	Z, r24
    17b0:	0c c0       	rjmp	.+24     	; 0x17ca <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8_Port_Value; break;
    17b2:	e5 e3       	ldi	r30, 0x35	; 53
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	80 83       	st	Z, r24
    17ba:	07 c0       	rjmp	.+14     	; 0x17ca <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8_Port_Value; break;
    17bc:	e2 e3       	ldi	r30, 0x32	; 50
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	80 83       	st	Z, r24
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_u8_Set_Port_Value+0x7e>
			default :Local_u8_Erorr_State = ES_NOK;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    17ca:	89 81       	ldd	r24, Y+1	; 0x01

}
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <DIO_u8_Get_Port_Value>:

u8 DIO_u8_Get_Port_Value     (u8 Copy_u8_Port_ID, u8 * Copy_u8_Returned_Port_Value ){
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <DIO_u8_Get_Port_Value+0x6>
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <DIO_u8_Get_Port_Value+0x8>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <DIO_u8_Get_Port_Value+0xa>
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	8a 83       	std	Y+2, r24	; 0x02
    17ec:	7c 83       	std	Y+4, r23	; 0x04
    17ee:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    17f0:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8_Returned_Port_Value != NULL){
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	09 f4       	brne	.+2      	; 0x17fc <DIO_u8_Get_Port_Value+0x20>
    17fa:	3e c0       	rjmp	.+124    	; 0x1878 <DIO_u8_Get_Port_Value+0x9c>
		switch (Copy_u8_Port_ID)
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	3e 83       	std	Y+6, r19	; 0x06
    1804:	2d 83       	std	Y+5, r18	; 0x05
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	91 05       	cpc	r25, r1
    180e:	e1 f0       	breq	.+56     	; 0x1848 <DIO_u8_Get_Port_Value+0x6c>
    1810:	2d 81       	ldd	r18, Y+5	; 0x05
    1812:	3e 81       	ldd	r19, Y+6	; 0x06
    1814:	22 30       	cpi	r18, 0x02	; 2
    1816:	31 05       	cpc	r19, r1
    1818:	2c f4       	brge	.+10     	; 0x1824 <DIO_u8_Get_Port_Value+0x48>
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	61 f0       	breq	.+24     	; 0x183a <DIO_u8_Get_Port_Value+0x5e>
    1822:	27 c0       	rjmp	.+78     	; 0x1872 <DIO_u8_Get_Port_Value+0x96>
    1824:	2d 81       	ldd	r18, Y+5	; 0x05
    1826:	3e 81       	ldd	r19, Y+6	; 0x06
    1828:	22 30       	cpi	r18, 0x02	; 2
    182a:	31 05       	cpc	r19, r1
    182c:	a1 f0       	breq	.+40     	; 0x1856 <DIO_u8_Get_Port_Value+0x7a>
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	9e 81       	ldd	r25, Y+6	; 0x06
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	91 05       	cpc	r25, r1
    1836:	b1 f0       	breq	.+44     	; 0x1864 <DIO_u8_Get_Port_Value+0x88>
    1838:	1c c0       	rjmp	.+56     	; 0x1872 <DIO_u8_Get_Port_Value+0x96>
		{
		case DIO_u8_PORTA :* Copy_u8_Returned_Port_Value =DIO_u8_PORTA_REG; break;
    183a:	eb e3       	ldi	r30, 0x3B	; 59
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	eb 81       	ldd	r30, Y+3	; 0x03
    1842:	fc 81       	ldd	r31, Y+4	; 0x04
    1844:	80 83       	st	Z, r24
    1846:	1a c0       	rjmp	.+52     	; 0x187c <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTB :* Copy_u8_Returned_Port_Value =DIO_u8_PORTB_REG; break;
    1848:	e8 e3       	ldi	r30, 0x38	; 56
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	eb 81       	ldd	r30, Y+3	; 0x03
    1850:	fc 81       	ldd	r31, Y+4	; 0x04
    1852:	80 83       	st	Z, r24
    1854:	13 c0       	rjmp	.+38     	; 0x187c <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTC :* Copy_u8_Returned_Port_Value =DIO_u8_PORTC_REG; break;
    1856:	e5 e3       	ldi	r30, 0x35	; 53
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	eb 81       	ldd	r30, Y+3	; 0x03
    185e:	fc 81       	ldd	r31, Y+4	; 0x04
    1860:	80 83       	st	Z, r24
    1862:	0c c0       	rjmp	.+24     	; 0x187c <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTD :* Copy_u8_Returned_Port_Value =DIO_u8_PORTD_REG; break;
    1864:	e2 e3       	ldi	r30, 0x32	; 50
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	eb 81       	ldd	r30, Y+3	; 0x03
    186c:	fc 81       	ldd	r31, Y+4	; 0x04
    186e:	80 83       	st	Z, r24
    1870:	05 c0       	rjmp	.+10     	; 0x187c <DIO_u8_Get_Port_Value+0xa0>
		default :Local_u8_Erorr_State = ES_NOK;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_u8_Get_Port_Value+0xa0>
		}}
		else {
			Local_u8_Erorr_State = ES_NOK ;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8_Erorr_State ;
    187c:	89 81       	ldd	r24, Y+1	; 0x01

}
    187e:	26 96       	adiw	r28, 0x06	; 6
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <LCD_enum_INIT>:
#include"LCD_private.h"

//#define F_CPU 8000000UL
#include<util/delay.h>

ES_t LCD_enum_INIT (void){
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	c2 54       	subi	r28, 0x42	; 66
    189a:	d0 40       	sbci	r29, 0x00	; 0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	fe 01       	movw	r30, r28
    18a8:	ff 96       	adiw	r30, 0x3f	; 63
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	ac e0       	ldi	r26, 0x0C	; 12
    18b0:	b2 e4       	ldi	r27, 0x42	; 66
    18b2:	80 83       	st	Z, r24
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	a2 83       	std	Z+2, r26	; 0x02
    18b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ba:	fe 01       	movw	r30, r28
    18bc:	ff 96       	adiw	r30, 0x3f	; 63
    18be:	60 81       	ld	r22, Z
    18c0:	71 81       	ldd	r23, Z+1	; 0x01
    18c2:	82 81       	ldd	r24, Z+2	; 0x02
    18c4:	93 81       	ldd	r25, Z+3	; 0x03
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a e7       	ldi	r20, 0x7A	; 122
    18cc:	53 e4       	ldi	r21, 0x43	; 67
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8b af       	std	Y+59, r24	; 0x3b
    18d8:	9c af       	std	Y+60, r25	; 0x3c
    18da:	ad af       	std	Y+61, r26	; 0x3d
    18dc:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    18de:	6b ad       	ldd	r22, Y+59	; 0x3b
    18e0:	7c ad       	ldd	r23, Y+60	; 0x3c
    18e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    18e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e8       	ldi	r20, 0x80	; 128
    18ec:	5f e3       	ldi	r21, 0x3F	; 63
    18ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f2:	88 23       	and	r24, r24
    18f4:	2c f4       	brge	.+10     	; 0x1900 <LCD_enum_INIT+0x70>
		__ticks = 1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9a af       	std	Y+58, r25	; 0x3a
    18fc:	89 af       	std	Y+57, r24	; 0x39
    18fe:	41 c0       	rjmp	.+130    	; 0x1982 <LCD_enum_INIT+0xf2>
	else if (__tmp > 65535)
    1900:	6b ad       	ldd	r22, Y+59	; 0x3b
    1902:	7c ad       	ldd	r23, Y+60	; 0x3c
    1904:	8d ad       	ldd	r24, Y+61	; 0x3d
    1906:	9e ad       	ldd	r25, Y+62	; 0x3e
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	3f ef       	ldi	r19, 0xFF	; 255
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	57 e4       	ldi	r21, 0x47	; 71
    1910:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	5c f5       	brge	.+86     	; 0x196e <LCD_enum_INIT+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1918:	fe 01       	movw	r30, r28
    191a:	ff 96       	adiw	r30, 0x3f	; 63
    191c:	60 81       	ld	r22, Z
    191e:	71 81       	ldd	r23, Z+1	; 0x01
    1920:	82 81       	ldd	r24, Z+2	; 0x02
    1922:	93 81       	ldd	r25, Z+3	; 0x03
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e2       	ldi	r20, 0x20	; 32
    192a:	51 e4       	ldi	r21, 0x41	; 65
    192c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	bc 01       	movw	r22, r24
    1936:	cd 01       	movw	r24, r26
    1938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	9a af       	std	Y+58, r25	; 0x3a
    1942:	89 af       	std	Y+57, r24	; 0x39
    1944:	0f c0       	rjmp	.+30     	; 0x1964 <LCD_enum_INIT+0xd4>
    1946:	89 e1       	ldi	r24, 0x19	; 25
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	98 af       	std	Y+56, r25	; 0x38
    194c:	8f ab       	std	Y+55, r24	; 0x37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    194e:	8f a9       	ldd	r24, Y+55	; 0x37
    1950:	98 ad       	ldd	r25, Y+56	; 0x38
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <LCD_enum_INIT+0xc2>
    1956:	98 af       	std	Y+56, r25	; 0x38
    1958:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195a:	89 ad       	ldd	r24, Y+57	; 0x39
    195c:	9a ad       	ldd	r25, Y+58	; 0x3a
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	9a af       	std	Y+58, r25	; 0x3a
    1962:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1964:	89 ad       	ldd	r24, Y+57	; 0x39
    1966:	9a ad       	ldd	r25, Y+58	; 0x3a
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	69 f7       	brne	.-38     	; 0x1946 <LCD_enum_INIT+0xb6>
    196c:	14 c0       	rjmp	.+40     	; 0x1996 <LCD_enum_INIT+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1970:	7c ad       	ldd	r23, Y+60	; 0x3c
    1972:	8d ad       	ldd	r24, Y+61	; 0x3d
    1974:	9e ad       	ldd	r25, Y+62	; 0x3e
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9a af       	std	Y+58, r25	; 0x3a
    1980:	89 af       	std	Y+57, r24	; 0x39
    1982:	89 ad       	ldd	r24, Y+57	; 0x39
    1984:	9a ad       	ldd	r25, Y+58	; 0x3a
    1986:	9e ab       	std	Y+54, r25	; 0x36
    1988:	8d ab       	std	Y+53, r24	; 0x35
    198a:	8d a9       	ldd	r24, Y+53	; 0x35
    198c:	9e a9       	ldd	r25, Y+54	; 0x36
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	f1 f7       	brne	.-4      	; 0x198e <LCD_enum_INIT+0xfe>
    1992:	9e ab       	std	Y+54, r25	; 0x36
    1994:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(35);
//to set CMND
	LCD_enum_Send_Comnd(FUN_SET_8BIT_2LINES_5X7);
    1996:	88 e3       	ldi	r24, 0x38	; 56
    1998:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <LCD_enum_Send_Comnd>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	a0 e2       	ldi	r26, 0x20	; 32
    19a2:	b2 e4       	ldi	r27, 0x42	; 66
    19a4:	89 ab       	std	Y+49, r24	; 0x31
    19a6:	9a ab       	std	Y+50, r25	; 0x32
    19a8:	ab ab       	std	Y+51, r26	; 0x33
    19aa:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19ac:	69 a9       	ldd	r22, Y+49	; 0x31
    19ae:	7a a9       	ldd	r23, Y+50	; 0x32
    19b0:	8b a9       	ldd	r24, Y+51	; 0x33
    19b2:	9c a9       	ldd	r25, Y+52	; 0x34
    19b4:	2b ea       	ldi	r18, 0xAB	; 171
    19b6:	3a ea       	ldi	r19, 0xAA	; 170
    19b8:	4a ea       	ldi	r20, 0xAA	; 170
    19ba:	5e e3       	ldi	r21, 0x3E	; 62
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	8d a7       	std	Y+45, r24	; 0x2d
    19c6:	9e a7       	std	Y+46, r25	; 0x2e
    19c8:	af a7       	std	Y+47, r26	; 0x2f
    19ca:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    19cc:	6d a5       	ldd	r22, Y+45	; 0x2d
    19ce:	7e a5       	ldd	r23, Y+46	; 0x2e
    19d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d2:	98 a9       	ldd	r25, Y+48	; 0x30
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e8       	ldi	r20, 0x80	; 128
    19da:	5f e3       	ldi	r21, 0x3F	; 63
    19dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19e0:	88 23       	and	r24, r24
    19e2:	1c f4       	brge	.+6      	; 0x19ea <LCD_enum_INIT+0x15a>
		__ticks = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	8c a7       	std	Y+44, r24	; 0x2c
    19e8:	91 c0       	rjmp	.+290    	; 0x1b0c <LCD_enum_INIT+0x27c>
	else if (__tmp > 255)
    19ea:	6d a5       	ldd	r22, Y+45	; 0x2d
    19ec:	7e a5       	ldd	r23, Y+46	; 0x2e
    19ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f0:	98 a9       	ldd	r25, Y+48	; 0x30
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	4f e7       	ldi	r20, 0x7F	; 127
    19f8:	53 e4       	ldi	r21, 0x43	; 67
    19fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19fe:	18 16       	cp	r1, r24
    1a00:	0c f0       	brlt	.+2      	; 0x1a04 <LCD_enum_INIT+0x174>
    1a02:	7b c0       	rjmp	.+246    	; 0x1afa <LCD_enum_INIT+0x26a>
	{
		_delay_ms(__us / 1000.0);
    1a04:	69 a9       	ldd	r22, Y+49	; 0x31
    1a06:	7a a9       	ldd	r23, Y+50	; 0x32
    1a08:	8b a9       	ldd	r24, Y+51	; 0x33
    1a0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	4a e7       	ldi	r20, 0x7A	; 122
    1a12:	54 e4       	ldi	r21, 0x44	; 68
    1a14:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	88 a7       	std	Y+40, r24	; 0x28
    1a1e:	99 a7       	std	Y+41, r25	; 0x29
    1a20:	aa a7       	std	Y+42, r26	; 0x2a
    1a22:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a24:	68 a5       	ldd	r22, Y+40	; 0x28
    1a26:	79 a5       	ldd	r23, Y+41	; 0x29
    1a28:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a2a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	4a e7       	ldi	r20, 0x7A	; 122
    1a32:	53 e4       	ldi	r21, 0x43	; 67
    1a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	8c a3       	std	Y+36, r24	; 0x24
    1a3e:	9d a3       	std	Y+37, r25	; 0x25
    1a40:	ae a3       	std	Y+38, r26	; 0x26
    1a42:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1a44:	6c a1       	ldd	r22, Y+36	; 0x24
    1a46:	7d a1       	ldd	r23, Y+37	; 0x25
    1a48:	8e a1       	ldd	r24, Y+38	; 0x26
    1a4a:	9f a1       	ldd	r25, Y+39	; 0x27
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e8       	ldi	r20, 0x80	; 128
    1a52:	5f e3       	ldi	r21, 0x3F	; 63
    1a54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a58:	88 23       	and	r24, r24
    1a5a:	2c f4       	brge	.+10     	; 0x1a66 <LCD_enum_INIT+0x1d6>
		__ticks = 1;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	9b a3       	std	Y+35, r25	; 0x23
    1a62:	8a a3       	std	Y+34, r24	; 0x22
    1a64:	3f c0       	rjmp	.+126    	; 0x1ae4 <LCD_enum_INIT+0x254>
	else if (__tmp > 65535)
    1a66:	6c a1       	ldd	r22, Y+36	; 0x24
    1a68:	7d a1       	ldd	r23, Y+37	; 0x25
    1a6a:	8e a1       	ldd	r24, Y+38	; 0x26
    1a6c:	9f a1       	ldd	r25, Y+39	; 0x27
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	3f ef       	ldi	r19, 0xFF	; 255
    1a72:	4f e7       	ldi	r20, 0x7F	; 127
    1a74:	57 e4       	ldi	r21, 0x47	; 71
    1a76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a7a:	18 16       	cp	r1, r24
    1a7c:	4c f5       	brge	.+82     	; 0x1ad0 <LCD_enum_INIT+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7e:	68 a5       	ldd	r22, Y+40	; 0x28
    1a80:	79 a5       	ldd	r23, Y+41	; 0x29
    1a82:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a84:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e2       	ldi	r20, 0x20	; 32
    1a8c:	51 e4       	ldi	r21, 0x41	; 65
    1a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	bc 01       	movw	r22, r24
    1a98:	cd 01       	movw	r24, r26
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	9b a3       	std	Y+35, r25	; 0x23
    1aa4:	8a a3       	std	Y+34, r24	; 0x22
    1aa6:	0f c0       	rjmp	.+30     	; 0x1ac6 <LCD_enum_INIT+0x236>
    1aa8:	89 e1       	ldi	r24, 0x19	; 25
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	99 a3       	std	Y+33, r25	; 0x21
    1aae:	88 a3       	std	Y+32, r24	; 0x20
    1ab0:	88 a1       	ldd	r24, Y+32	; 0x20
    1ab2:	99 a1       	ldd	r25, Y+33	; 0x21
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <LCD_enum_INIT+0x224>
    1ab8:	99 a3       	std	Y+33, r25	; 0x21
    1aba:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abc:	8a a1       	ldd	r24, Y+34	; 0x22
    1abe:	9b a1       	ldd	r25, Y+35	; 0x23
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	9b a3       	std	Y+35, r25	; 0x23
    1ac4:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac6:	8a a1       	ldd	r24, Y+34	; 0x22
    1ac8:	9b a1       	ldd	r25, Y+35	; 0x23
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	69 f7       	brne	.-38     	; 0x1aa8 <LCD_enum_INIT+0x218>
    1ace:	24 c0       	rjmp	.+72     	; 0x1b18 <LCD_enum_INIT+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad0:	6c a1       	ldd	r22, Y+36	; 0x24
    1ad2:	7d a1       	ldd	r23, Y+37	; 0x25
    1ad4:	8e a1       	ldd	r24, Y+38	; 0x26
    1ad6:	9f a1       	ldd	r25, Y+39	; 0x27
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9b a3       	std	Y+35, r25	; 0x23
    1ae2:	8a a3       	std	Y+34, r24	; 0x22
    1ae4:	8a a1       	ldd	r24, Y+34	; 0x22
    1ae6:	9b a1       	ldd	r25, Y+35	; 0x23
    1ae8:	9f 8f       	std	Y+31, r25	; 0x1f
    1aea:	8e 8f       	std	Y+30, r24	; 0x1e
    1aec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <LCD_enum_INIT+0x260>
    1af4:	9f 8f       	std	Y+31, r25	; 0x1f
    1af6:	8e 8f       	std	Y+30, r24	; 0x1e
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <LCD_enum_INIT+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1afa:	6d a5       	ldd	r22, Y+45	; 0x2d
    1afc:	7e a5       	ldd	r23, Y+46	; 0x2e
    1afe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b00:	98 a9       	ldd	r25, Y+48	; 0x30
    1b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8c a7       	std	Y+44, r24	; 0x2c
    1b0c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b0e:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b12:	8a 95       	dec	r24
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <LCD_enum_INIT+0x282>
    1b16:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(40);
	LCD_enum_Send_Comnd(DIS_ON_CURSOR_ON_BLINKING);
    1b18:	8f e0       	ldi	r24, 0x0F	; 15
    1b1a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <LCD_enum_Send_Comnd>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a0 e2       	ldi	r26, 0x20	; 32
    1b24:	b2 e4       	ldi	r27, 0x42	; 66
    1b26:	89 8f       	std	Y+25, r24	; 0x19
    1b28:	9a 8f       	std	Y+26, r25	; 0x1a
    1b2a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	4a e7       	ldi	r20, 0x7A	; 122
    1b3c:	53 e4       	ldi	r21, 0x43	; 67
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	8d 8b       	std	Y+21, r24	; 0x15
    1b48:	9e 8b       	std	Y+22, r25	; 0x16
    1b4a:	af 8b       	std	Y+23, r26	; 0x17
    1b4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b50:	7e 89       	ldd	r23, Y+22	; 0x16
    1b52:	8f 89       	ldd	r24, Y+23	; 0x17
    1b54:	98 8d       	ldd	r25, Y+24	; 0x18
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e8       	ldi	r20, 0x80	; 128
    1b5c:	5f e3       	ldi	r21, 0x3F	; 63
    1b5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b62:	88 23       	and	r24, r24
    1b64:	2c f4       	brge	.+10     	; 0x1b70 <LCD_enum_INIT+0x2e0>
		__ticks = 1;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9c 8b       	std	Y+20, r25	; 0x14
    1b6c:	8b 8b       	std	Y+19, r24	; 0x13
    1b6e:	3f c0       	rjmp	.+126    	; 0x1bee <LCD_enum_INIT+0x35e>
	else if (__tmp > 65535)
    1b70:	6d 89       	ldd	r22, Y+21	; 0x15
    1b72:	7e 89       	ldd	r23, Y+22	; 0x16
    1b74:	8f 89       	ldd	r24, Y+23	; 0x17
    1b76:	98 8d       	ldd	r25, Y+24	; 0x18
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	3f ef       	ldi	r19, 0xFF	; 255
    1b7c:	4f e7       	ldi	r20, 0x7F	; 127
    1b7e:	57 e4       	ldi	r21, 0x47	; 71
    1b80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b84:	18 16       	cp	r1, r24
    1b86:	4c f5       	brge	.+82     	; 0x1bda <LCD_enum_INIT+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b88:	69 8d       	ldd	r22, Y+25	; 0x19
    1b8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e2       	ldi	r20, 0x20	; 32
    1b96:	51 e4       	ldi	r21, 0x41	; 65
    1b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	9c 8b       	std	Y+20, r25	; 0x14
    1bae:	8b 8b       	std	Y+19, r24	; 0x13
    1bb0:	0f c0       	rjmp	.+30     	; 0x1bd0 <LCD_enum_INIT+0x340>
    1bb2:	89 e1       	ldi	r24, 0x19	; 25
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	9a 8b       	std	Y+18, r25	; 0x12
    1bb8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bba:	89 89       	ldd	r24, Y+17	; 0x11
    1bbc:	9a 89       	ldd	r25, Y+18	; 0x12
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <LCD_enum_INIT+0x32e>
    1bc2:	9a 8b       	std	Y+18, r25	; 0x12
    1bc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	9c 8b       	std	Y+20, r25	; 0x14
    1bce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	69 f7       	brne	.-38     	; 0x1bb2 <LCD_enum_INIT+0x322>
    1bd8:	14 c0       	rjmp	.+40     	; 0x1c02 <LCD_enum_INIT+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bda:	6d 89       	ldd	r22, Y+21	; 0x15
    1bdc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bde:	8f 89       	ldd	r24, Y+23	; 0x17
    1be0:	98 8d       	ldd	r25, Y+24	; 0x18
    1be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	9c 8b       	std	Y+20, r25	; 0x14
    1bec:	8b 8b       	std	Y+19, r24	; 0x13
    1bee:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf2:	98 8b       	std	Y+16, r25	; 0x10
    1bf4:	8f 87       	std	Y+15, r24	; 0x0f
    1bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf8:	98 89       	ldd	r25, Y+16	; 0x10
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_enum_INIT+0x36a>
    1bfe:	98 8b       	std	Y+16, r25	; 0x10
    1c00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	LCD_enum_Send_Comnd(DISPLAY_CLEAR);
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <LCD_enum_Send_Comnd>
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	a0 e8       	ldi	r26, 0x80	; 128
    1c0e:	bf e3       	ldi	r27, 0x3F	; 63
    1c10:	8b 87       	std	Y+11, r24	; 0x0b
    1c12:	9c 87       	std	Y+12, r25	; 0x0c
    1c14:	ad 87       	std	Y+13, r26	; 0x0d
    1c16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	4a e7       	ldi	r20, 0x7A	; 122
    1c26:	53 e4       	ldi	r21, 0x43	; 67
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	8f 83       	std	Y+7, r24	; 0x07
    1c32:	98 87       	std	Y+8, r25	; 0x08
    1c34:	a9 87       	std	Y+9, r26	; 0x09
    1c36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c38:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3a:	78 85       	ldd	r23, Y+8	; 0x08
    1c3c:	89 85       	ldd	r24, Y+9	; 0x09
    1c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e8       	ldi	r20, 0x80	; 128
    1c46:	5f e3       	ldi	r21, 0x3F	; 63
    1c48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c4c:	88 23       	and	r24, r24
    1c4e:	2c f4       	brge	.+10     	; 0x1c5a <LCD_enum_INIT+0x3ca>
		__ticks = 1;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9e 83       	std	Y+6, r25	; 0x06
    1c56:	8d 83       	std	Y+5, r24	; 0x05
    1c58:	3f c0       	rjmp	.+126    	; 0x1cd8 <LCD_enum_INIT+0x448>
	else if (__tmp > 65535)
    1c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5c:	78 85       	ldd	r23, Y+8	; 0x08
    1c5e:	89 85       	ldd	r24, Y+9	; 0x09
    1c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	3f ef       	ldi	r19, 0xFF	; 255
    1c66:	4f e7       	ldi	r20, 0x7F	; 127
    1c68:	57 e4       	ldi	r21, 0x47	; 71
    1c6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c6e:	18 16       	cp	r1, r24
    1c70:	4c f5       	brge	.+82     	; 0x1cc4 <LCD_enum_INIT+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e2       	ldi	r20, 0x20	; 32
    1c80:	51 e4       	ldi	r21, 0x41	; 65
    1c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9e 83       	std	Y+6, r25	; 0x06
    1c98:	8d 83       	std	Y+5, r24	; 0x05
    1c9a:	0f c0       	rjmp	.+30     	; 0x1cba <LCD_enum_INIT+0x42a>
    1c9c:	89 e1       	ldi	r24, 0x19	; 25
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9c 83       	std	Y+4, r25	; 0x04
    1ca2:	8b 83       	std	Y+3, r24	; 0x03
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <LCD_enum_INIT+0x418>
    1cac:	9c 83       	std	Y+4, r25	; 0x04
    1cae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	69 f7       	brne	.-38     	; 0x1c9c <LCD_enum_INIT+0x40c>
    1cc2:	14 c0       	rjmp	.+40     	; 0x1cec <LCD_enum_INIT+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc6:	78 85       	ldd	r23, Y+8	; 0x08
    1cc8:	89 85       	ldd	r24, Y+9	; 0x09
    1cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	9e 83       	std	Y+6, r25	; 0x06
    1cd6:	8d 83       	std	Y+5, r24	; 0x05
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	9a 83       	std	Y+2, r25	; 0x02
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <LCD_enum_INIT+0x454>
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_enum_Send_Comnd(ENTRY_MOOD);
    1cec:	86 e0       	ldi	r24, 0x06	; 6
    1cee:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <LCD_enum_Send_Comnd>
    return ES_OK;
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
}
    1cf4:	ce 5b       	subi	r28, 0xBE	; 190
    1cf6:	df 4f       	sbci	r29, 0xFF	; 255
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <LCD_enum_Send_Comnd>:
//to send a command
ES_t LCD_enum_Send_Comnd(u8 Copy_u8_Comnd){
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	69 97       	sbiw	r28, 0x19	; 25
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	89 8f       	std	Y+25, r24	; 0x19
#if  LCD_u8_MODE == LCD_u8_MODE_8_bit
//RS =0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_LOW );
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_u8_Set_Pin_Value>
//RW = 0

 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_u8_Set_Pin_Value>

//Write Command
 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_Comnd);
    1d32:	83 e0       	ldi	r24, 0x03	; 3
    1d34:	69 8d       	ldd	r22, Y+25	; 0x19
    1d36:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_u8_Set_Port_Value>

//E = 1
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	62 e0       	ldi	r22, 0x02	; 2
    1d3e:	41 e0       	ldi	r20, 0x01	; 1
    1d40:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_u8_Set_Pin_Value>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e8       	ldi	r26, 0x80	; 128
    1d4a:	bf e3       	ldi	r27, 0x3F	; 63
    1d4c:	8d 8b       	std	Y+21, r24	; 0x15
    1d4e:	9e 8b       	std	Y+22, r25	; 0x16
    1d50:	af 8b       	std	Y+23, r26	; 0x17
    1d52:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d54:	6d 89       	ldd	r22, Y+21	; 0x15
    1d56:	7e 89       	ldd	r23, Y+22	; 0x16
    1d58:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5c:	2b ea       	ldi	r18, 0xAB	; 171
    1d5e:	3a ea       	ldi	r19, 0xAA	; 170
    1d60:	4a ea       	ldi	r20, 0xAA	; 170
    1d62:	5e e3       	ldi	r21, 0x3E	; 62
    1d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	89 8b       	std	Y+17, r24	; 0x11
    1d6e:	9a 8b       	std	Y+18, r25	; 0x12
    1d70:	ab 8b       	std	Y+19, r26	; 0x13
    1d72:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d74:	69 89       	ldd	r22, Y+17	; 0x11
    1d76:	7a 89       	ldd	r23, Y+18	; 0x12
    1d78:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e8       	ldi	r20, 0x80	; 128
    1d82:	5f e3       	ldi	r21, 0x3F	; 63
    1d84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d88:	88 23       	and	r24, r24
    1d8a:	1c f4       	brge	.+6      	; 0x1d92 <LCD_enum_Send_Comnd+0x8a>
		__ticks = 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	88 8b       	std	Y+16, r24	; 0x10
    1d90:	91 c0       	rjmp	.+290    	; 0x1eb4 <LCD_enum_Send_Comnd+0x1ac>
	else if (__tmp > 255)
    1d92:	69 89       	ldd	r22, Y+17	; 0x11
    1d94:	7a 89       	ldd	r23, Y+18	; 0x12
    1d96:	8b 89       	ldd	r24, Y+19	; 0x13
    1d98:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4f e7       	ldi	r20, 0x7F	; 127
    1da0:	53 e4       	ldi	r21, 0x43	; 67
    1da2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	0c f0       	brlt	.+2      	; 0x1dac <LCD_enum_Send_Comnd+0xa4>
    1daa:	7b c0       	rjmp	.+246    	; 0x1ea2 <LCD_enum_Send_Comnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1dac:	6d 89       	ldd	r22, Y+21	; 0x15
    1dae:	7e 89       	ldd	r23, Y+22	; 0x16
    1db0:	8f 89       	ldd	r24, Y+23	; 0x17
    1db2:	98 8d       	ldd	r25, Y+24	; 0x18
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	4a e7       	ldi	r20, 0x7A	; 122
    1dba:	54 e4       	ldi	r21, 0x44	; 68
    1dbc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	8c 87       	std	Y+12, r24	; 0x0c
    1dc6:	9d 87       	std	Y+13, r25	; 0x0d
    1dc8:	ae 87       	std	Y+14, r26	; 0x0e
    1dca:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dcc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dce:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	4a e7       	ldi	r20, 0x7A	; 122
    1dda:	53 e4       	ldi	r21, 0x43	; 67
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	88 87       	std	Y+8, r24	; 0x08
    1de6:	99 87       	std	Y+9, r25	; 0x09
    1de8:	aa 87       	std	Y+10, r26	; 0x0a
    1dea:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1dec:	68 85       	ldd	r22, Y+8	; 0x08
    1dee:	79 85       	ldd	r23, Y+9	; 0x09
    1df0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1df2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e8       	ldi	r20, 0x80	; 128
    1dfa:	5f e3       	ldi	r21, 0x3F	; 63
    1dfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	2c f4       	brge	.+10     	; 0x1e0e <LCD_enum_Send_Comnd+0x106>
		__ticks = 1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9f 83       	std	Y+7, r25	; 0x07
    1e0a:	8e 83       	std	Y+6, r24	; 0x06
    1e0c:	3f c0       	rjmp	.+126    	; 0x1e8c <LCD_enum_Send_Comnd+0x184>
	else if (__tmp > 65535)
    1e0e:	68 85       	ldd	r22, Y+8	; 0x08
    1e10:	79 85       	ldd	r23, Y+9	; 0x09
    1e12:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e14:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e22:	18 16       	cp	r1, r24
    1e24:	4c f5       	brge	.+82     	; 0x1e78 <LCD_enum_Send_Comnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e26:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e28:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e2       	ldi	r20, 0x20	; 32
    1e34:	51 e4       	ldi	r21, 0x41	; 65
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9f 83       	std	Y+7, r25	; 0x07
    1e4c:	8e 83       	std	Y+6, r24	; 0x06
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <LCD_enum_Send_Comnd+0x166>
    1e50:	89 e1       	ldi	r24, 0x19	; 25
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	9d 83       	std	Y+5, r25	; 0x05
    1e56:	8c 83       	std	Y+4, r24	; 0x04
    1e58:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_enum_Send_Comnd+0x154>
    1e60:	9d 83       	std	Y+5, r25	; 0x05
    1e62:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e64:	8e 81       	ldd	r24, Y+6	; 0x06
    1e66:	9f 81       	ldd	r25, Y+7	; 0x07
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	9f 83       	std	Y+7, r25	; 0x07
    1e6c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e70:	9f 81       	ldd	r25, Y+7	; 0x07
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	69 f7       	brne	.-38     	; 0x1e50 <LCD_enum_Send_Comnd+0x148>
    1e76:	24 c0       	rjmp	.+72     	; 0x1ec0 <LCD_enum_Send_Comnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e78:	68 85       	ldd	r22, Y+8	; 0x08
    1e7a:	79 85       	ldd	r23, Y+9	; 0x09
    1e7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9f 83       	std	Y+7, r25	; 0x07
    1e8a:	8e 83       	std	Y+6, r24	; 0x06
    1e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e90:	9b 83       	std	Y+3, r25	; 0x03
    1e92:	8a 83       	std	Y+2, r24	; 0x02
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	9b 81       	ldd	r25, Y+3	; 0x03
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <LCD_enum_Send_Comnd+0x190>
    1e9c:	9b 83       	std	Y+3, r25	; 0x03
    1e9e:	8a 83       	std	Y+2, r24	; 0x02
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <LCD_enum_Send_Comnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ea2:	69 89       	ldd	r22, Y+17	; 0x11
    1ea4:	7a 89       	ldd	r23, Y+18	; 0x12
    1ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	88 8b       	std	Y+16, r24	; 0x10
    1eb4:	88 89       	ldd	r24, Y+16	; 0x10
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	8a 95       	dec	r24
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <LCD_enum_Send_Comnd+0x1b2>
    1ebe:	89 83       	std	Y+1, r24	; 0x01
_delay_us(1);

//E = 0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	62 e0       	ldi	r22, 0x02	; 2
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_u8_Set_Pin_Value>
 return ES_OK;
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
return ES_OK;

#endif

}
    1ecc:	69 96       	adiw	r28, 0x19	; 25
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <LCD_enum_Send_char>:
//function to send a character
ES_t LCD_enum_Send_char(u8 Copy_u8_char){
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	69 97       	sbiw	r28, 0x19	; 25
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	89 8f       	std	Y+25, r24	; 0x19
	//RS =0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_HIGH );
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	41 e0       	ldi	r20, 0x01	; 1
    1efa:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_u8_Set_Pin_Value>
	//RW = 0

	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	61 e0       	ldi	r22, 0x01	; 1
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_u8_Set_Pin_Value>

	//Write char
	 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_char);
    1f08:	83 e0       	ldi	r24, 0x03	; 3
    1f0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f0c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_u8_Set_Port_Value>

	//E = 1
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	62 e0       	ldi	r22, 0x02	; 2
    1f14:	41 e0       	ldi	r20, 0x01	; 1
    1f16:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_u8_Set_Pin_Value>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a0 e8       	ldi	r26, 0x80	; 128
    1f20:	bf e3       	ldi	r27, 0x3F	; 63
    1f22:	8d 8b       	std	Y+21, r24	; 0x15
    1f24:	9e 8b       	std	Y+22, r25	; 0x16
    1f26:	af 8b       	std	Y+23, r26	; 0x17
    1f28:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f30:	98 8d       	ldd	r25, Y+24	; 0x18
    1f32:	2b ea       	ldi	r18, 0xAB	; 171
    1f34:	3a ea       	ldi	r19, 0xAA	; 170
    1f36:	4a ea       	ldi	r20, 0xAA	; 170
    1f38:	5e e3       	ldi	r21, 0x3E	; 62
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	89 8b       	std	Y+17, r24	; 0x11
    1f44:	9a 8b       	std	Y+18, r25	; 0x12
    1f46:	ab 8b       	std	Y+19, r26	; 0x13
    1f48:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f4a:	69 89       	ldd	r22, Y+17	; 0x11
    1f4c:	7a 89       	ldd	r23, Y+18	; 0x12
    1f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f50:	9c 89       	ldd	r25, Y+20	; 0x14
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	1c f4       	brge	.+6      	; 0x1f68 <LCD_enum_Send_char+0x8a>
		__ticks = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	88 8b       	std	Y+16, r24	; 0x10
    1f66:	91 c0       	rjmp	.+290    	; 0x208a <LCD_enum_Send_char+0x1ac>
	else if (__tmp > 255)
    1f68:	69 89       	ldd	r22, Y+17	; 0x11
    1f6a:	7a 89       	ldd	r23, Y+18	; 0x12
    1f6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	4f e7       	ldi	r20, 0x7F	; 127
    1f76:	53 e4       	ldi	r21, 0x43	; 67
    1f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f7c:	18 16       	cp	r1, r24
    1f7e:	0c f0       	brlt	.+2      	; 0x1f82 <LCD_enum_Send_char+0xa4>
    1f80:	7b c0       	rjmp	.+246    	; 0x2078 <LCD_enum_Send_char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1f82:	6d 89       	ldd	r22, Y+21	; 0x15
    1f84:	7e 89       	ldd	r23, Y+22	; 0x16
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	4a e7       	ldi	r20, 0x7A	; 122
    1f90:	54 e4       	ldi	r21, 0x44	; 68
    1f92:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	8c 87       	std	Y+12, r24	; 0x0c
    1f9c:	9d 87       	std	Y+13, r25	; 0x0d
    1f9e:	ae 87       	std	Y+14, r26	; 0x0e
    1fa0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fa4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fa6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fa8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	4a e7       	ldi	r20, 0x7A	; 122
    1fb0:	53 e4       	ldi	r21, 0x43	; 67
    1fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	88 87       	std	Y+8, r24	; 0x08
    1fbc:	99 87       	std	Y+9, r25	; 0x09
    1fbe:	aa 87       	std	Y+10, r26	; 0x0a
    1fc0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1fc2:	68 85       	ldd	r22, Y+8	; 0x08
    1fc4:	79 85       	ldd	r23, Y+9	; 0x09
    1fc6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fc8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e8       	ldi	r20, 0x80	; 128
    1fd0:	5f e3       	ldi	r21, 0x3F	; 63
    1fd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fd6:	88 23       	and	r24, r24
    1fd8:	2c f4       	brge	.+10     	; 0x1fe4 <LCD_enum_Send_char+0x106>
		__ticks = 1;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	9f 83       	std	Y+7, r25	; 0x07
    1fe0:	8e 83       	std	Y+6, r24	; 0x06
    1fe2:	3f c0       	rjmp	.+126    	; 0x2062 <LCD_enum_Send_char+0x184>
	else if (__tmp > 65535)
    1fe4:	68 85       	ldd	r22, Y+8	; 0x08
    1fe6:	79 85       	ldd	r23, Y+9	; 0x09
    1fe8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fea:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	3f ef       	ldi	r19, 0xFF	; 255
    1ff0:	4f e7       	ldi	r20, 0x7F	; 127
    1ff2:	57 e4       	ldi	r21, 0x47	; 71
    1ff4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ff8:	18 16       	cp	r1, r24
    1ffa:	4c f5       	brge	.+82     	; 0x204e <LCD_enum_Send_char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ffe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2000:	8e 85       	ldd	r24, Y+14	; 0x0e
    2002:	9f 85       	ldd	r25, Y+15	; 0x0f
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e2       	ldi	r20, 0x20	; 32
    200a:	51 e4       	ldi	r21, 0x41	; 65
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	bc 01       	movw	r22, r24
    2016:	cd 01       	movw	r24, r26
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9f 83       	std	Y+7, r25	; 0x07
    2022:	8e 83       	std	Y+6, r24	; 0x06
    2024:	0f c0       	rjmp	.+30     	; 0x2044 <LCD_enum_Send_char+0x166>
    2026:	89 e1       	ldi	r24, 0x19	; 25
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9d 83       	std	Y+5, r25	; 0x05
    202c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    202e:	8c 81       	ldd	r24, Y+4	; 0x04
    2030:	9d 81       	ldd	r25, Y+5	; 0x05
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <LCD_enum_Send_char+0x154>
    2036:	9d 83       	std	Y+5, r25	; 0x05
    2038:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203a:	8e 81       	ldd	r24, Y+6	; 0x06
    203c:	9f 81       	ldd	r25, Y+7	; 0x07
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	9f 83       	std	Y+7, r25	; 0x07
    2042:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2044:	8e 81       	ldd	r24, Y+6	; 0x06
    2046:	9f 81       	ldd	r25, Y+7	; 0x07
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	69 f7       	brne	.-38     	; 0x2026 <LCD_enum_Send_char+0x148>
    204c:	24 c0       	rjmp	.+72     	; 0x2096 <LCD_enum_Send_char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204e:	68 85       	ldd	r22, Y+8	; 0x08
    2050:	79 85       	ldd	r23, Y+9	; 0x09
    2052:	8a 85       	ldd	r24, Y+10	; 0x0a
    2054:	9b 85       	ldd	r25, Y+11	; 0x0b
    2056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	9f 83       	std	Y+7, r25	; 0x07
    2060:	8e 83       	std	Y+6, r24	; 0x06
    2062:	8e 81       	ldd	r24, Y+6	; 0x06
    2064:	9f 81       	ldd	r25, Y+7	; 0x07
    2066:	9b 83       	std	Y+3, r25	; 0x03
    2068:	8a 83       	std	Y+2, r24	; 0x02
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_enum_Send_char+0x190>
    2072:	9b 83       	std	Y+3, r25	; 0x03
    2074:	8a 83       	std	Y+2, r24	; 0x02
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <LCD_enum_Send_char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2078:	69 89       	ldd	r22, Y+17	; 0x11
    207a:	7a 89       	ldd	r23, Y+18	; 0x12
    207c:	8b 89       	ldd	r24, Y+19	; 0x13
    207e:	9c 89       	ldd	r25, Y+20	; 0x14
    2080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	88 8b       	std	Y+16, r24	; 0x10
    208a:	88 89       	ldd	r24, Y+16	; 0x10
    208c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	8a 95       	dec	r24
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_enum_Send_char+0x1b2>
    2094:	89 83       	std	Y+1, r24	; 0x01
	 _delay_us(1);

	//E = 0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	62 e0       	ldi	r22, 0x02	; 2
    209a:	40 e0       	ldi	r20, 0x00	; 0
    209c:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_u8_Set_Pin_Value>
	    return ES_OK;
    20a0:	80 e0       	ldi	r24, 0x00	; 0

}
    20a2:	69 96       	adiw	r28, 0x19	; 25
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <LCD_enum_GO_TO_XY>:
//function to set a location
ES_t LCD_enum_GO_TO_XY (u8 Copy_u8_line_Num , u8 Copy_u8_Location ){
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <LCD_enum_GO_TO_XY+0x6>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <LCD_enum_GO_TO_XY+0x8>
    20bc:	0f 92       	push	r0
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	6a 83       	std	Y+2, r22	; 0x02
//	u8 Local_u8_Erorr_State = ES_OK;
	if(Copy_u8_Location <= 39 ){
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	88 32       	cpi	r24, 0x28	; 40
    20ca:	f8 f4       	brcc	.+62     	; 0x210a <LCD_enum_GO_TO_XY+0x56>
		switch (Copy_u8_line_Num)
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	3d 83       	std	Y+5, r19	; 0x05
    20d4:	2c 83       	std	Y+4, r18	; 0x04
    20d6:	8c 81       	ldd	r24, Y+4	; 0x04
    20d8:	9d 81       	ldd	r25, Y+5	; 0x05
    20da:	81 30       	cpi	r24, 0x01	; 1
    20dc:	91 05       	cpc	r25, r1
    20de:	31 f0       	breq	.+12     	; 0x20ec <LCD_enum_GO_TO_XY+0x38>
    20e0:	2c 81       	ldd	r18, Y+4	; 0x04
    20e2:	3d 81       	ldd	r19, Y+5	; 0x05
    20e4:	22 30       	cpi	r18, 0x02	; 2
    20e6:	31 05       	cpc	r19, r1
    20e8:	31 f0       	breq	.+12     	; 0x20f6 <LCD_enum_GO_TO_XY+0x42>
    20ea:	0a c0       	rjmp	.+20     	; 0x2100 <LCD_enum_GO_TO_XY+0x4c>
		{
		case LCD_u8_LINE1 : LCD_enum_Send_Comnd(ADDRESS_OF_LINE1+Copy_u8_Location);break;
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	80 58       	subi	r24, 0x80	; 128
    20f0:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <LCD_enum_Send_Comnd>
    20f4:	08 c0       	rjmp	.+16     	; 0x2106 <LCD_enum_GO_TO_XY+0x52>
		case LCD_u8_LINE2 : LCD_enum_Send_Comnd(ADDRESS_OF_LINE2+Copy_u8_Location);break;
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	80 54       	subi	r24, 0x40	; 64
    20fa:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <LCD_enum_Send_Comnd>
    20fe:	03 c0       	rjmp	.+6      	; 0x2106 <LCD_enum_GO_TO_XY+0x52>
        default   :  return ES_NOK;
    2100:	31 e0       	ldi	r19, 0x01	; 1
    2102:	3b 83       	std	Y+3, r19	; 0x03
    2104:	04 c0       	rjmp	.+8      	; 0x210e <LCD_enum_GO_TO_XY+0x5a>
		else {
			return ES_NOK;


	}
    return ES_OK;
    2106:	1b 82       	std	Y+3, r1	; 0x03
    2108:	02 c0       	rjmp	.+4      	; 0x210e <LCD_enum_GO_TO_XY+0x5a>

		}

	}
		else {
			return ES_NOK;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	8b 83       	std	Y+3, r24	; 0x03
    210e:	8b 81       	ldd	r24, Y+3	; 0x03


	}
    return ES_OK;
}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <LCD_enum_Send_String>:
//function to send string
ES_t LCD_enum_Send_String(u8 *copy_pu8_string){
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <LCD_enum_Send_String+0x6>
    2126:	0f 92       	push	r0
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	9b 83       	std	Y+3, r25	; 0x03
    212e:	8a 83       	std	Y+2, r24	; 0x02
    2130:	0e c0       	rjmp	.+28     	; 0x214e <LCD_enum_Send_String+0x2e>
	for (u8 i ; copy_pu8_string[i] != '\0'; i++){
		LCD_enum_Send_char(copy_pu8_string[i]);
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	9b 81       	ldd	r25, Y+3	; 0x03
    213c:	fc 01       	movw	r30, r24
    213e:	e2 0f       	add	r30, r18
    2140:	f3 1f       	adc	r31, r19
    2142:	80 81       	ld	r24, Z
    2144:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <LCD_enum_Send_char>
	}
    return ES_OK;
}
//function to send string
ES_t LCD_enum_Send_String(u8 *copy_pu8_string){
	for (u8 i ; copy_pu8_string[i] != '\0'; i++){
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	8f 5f       	subi	r24, 0xFF	; 255
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	28 2f       	mov	r18, r24
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	9b 81       	ldd	r25, Y+3	; 0x03
    2158:	fc 01       	movw	r30, r24
    215a:	e2 0f       	add	r30, r18
    215c:	f3 1f       	adc	r31, r19
    215e:	80 81       	ld	r24, Z
    2160:	88 23       	and	r24, r24
    2162:	39 f7       	brne	.-50     	; 0x2132 <LCD_enum_Send_String+0x12>
		LCD_enum_Send_char(copy_pu8_string[i]);
	}
	return ES_OK;
    2164:	80 e0       	ldi	r24, 0x00	; 0
}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <LCD_enum_Clear>:

//function to clear
ES_t LCD_enum_Clear (void){
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	2e 97       	sbiw	r28, 0x0e	; 14
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
	LCD_enum_Send_Comnd(DISPLAY_CLEAR);
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <LCD_enum_Send_Comnd>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a0 e8       	ldi	r26, 0x80	; 128
    2192:	bf e3       	ldi	r27, 0x3F	; 63
    2194:	8b 87       	std	Y+11, r24	; 0x0b
    2196:	9c 87       	std	Y+12, r25	; 0x0c
    2198:	ad 87       	std	Y+13, r26	; 0x0d
    219a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	6b 85       	ldd	r22, Y+11	; 0x0b
    219e:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a e7       	ldi	r20, 0x7A	; 122
    21aa:	53 e4       	ldi	r21, 0x43	; 67
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8f 83       	std	Y+7, r24	; 0x07
    21b6:	98 87       	std	Y+8, r25	; 0x08
    21b8:	a9 87       	std	Y+9, r26	; 0x09
    21ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21bc:	6f 81       	ldd	r22, Y+7	; 0x07
    21be:	78 85       	ldd	r23, Y+8	; 0x08
    21c0:	89 85       	ldd	r24, Y+9	; 0x09
    21c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	2c f4       	brge	.+10     	; 0x21de <LCD_enum_Clear+0x6c>
		__ticks = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
    21dc:	3f c0       	rjmp	.+126    	; 0x225c <LCD_enum_Clear+0xea>
	else if (__tmp > 65535)
    21de:	6f 81       	ldd	r22, Y+7	; 0x07
    21e0:	78 85       	ldd	r23, Y+8	; 0x08
    21e2:	89 85       	ldd	r24, Y+9	; 0x09
    21e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	3f ef       	ldi	r19, 0xFF	; 255
    21ea:	4f e7       	ldi	r20, 0x7F	; 127
    21ec:	57 e4       	ldi	r21, 0x47	; 71
    21ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	4c f5       	brge	.+82     	; 0x2248 <LCD_enum_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
    221e:	0f c0       	rjmp	.+30     	; 0x223e <LCD_enum_Clear+0xcc>
    2220:	89 e1       	ldi	r24, 0x19	; 25
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9c 83       	std	Y+4, r25	; 0x04
    2226:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_enum_Clear+0xba>
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	69 f7       	brne	.-38     	; 0x2220 <LCD_enum_Clear+0xae>
    2246:	14 c0       	rjmp	.+40     	; 0x2270 <LCD_enum_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	8d 83       	std	Y+5, r24	; 0x05
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_enum_Clear+0xf6>
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	return ES_OK;
    2270:	80 e0       	ldi	r24, 0x00	; 0
}
    2272:	2e 96       	adiw	r28, 0x0e	; 14
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <LCD_enum_Send_Custom_char>:

//function to send custom char
ES_t LCD_enum_Send_Custom_char(u8 Copy_u8_Location , u8 * Copy_pu8_char_Array){
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <LCD_enum_Send_Custom_char+0x6>
    228a:	00 d0       	rcall	.+0      	; 0x228c <LCD_enum_Send_Custom_char+0x8>
    228c:	0f 92       	push	r0
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	8a 83       	std	Y+2, r24	; 0x02
    2294:	7c 83       	std	Y+4, r23	; 0x04
    2296:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_pu8_char_Array != NULL && Copy_u8_Location < MAX_CHARACTERS )
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	9c 81       	ldd	r25, Y+4	; 0x04
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	41 f1       	breq	.+80     	; 0x22f0 <LCD_enum_Send_Custom_char+0x6c>
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	88 30       	cpi	r24, 0x08	; 8
    22a4:	28 f5       	brcc	.+74     	; 0x22f0 <LCD_enum_Send_Custom_char+0x6c>
	    {
		LCD_enum_Send_Comnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS ));
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	88 2f       	mov	r24, r24
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	08 96       	adiw	r24, 0x08	; 8
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <LCD_enum_Send_Comnd>
	        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS ; Local_u8_Counter++)
    22be:	19 82       	std	Y+1, r1	; 0x01
    22c0:	0e c0       	rjmp	.+28     	; 0x22de <LCD_enum_Send_Custom_char+0x5a>
	        {
	        	LCD_enum_Send_char(Copy_pu8_char_Array[Local_u8_Counter]);
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	fc 01       	movw	r30, r24
    22ce:	e2 0f       	add	r30, r18
    22d0:	f3 1f       	adc	r31, r19
    22d2:	80 81       	ld	r24, Z
    22d4:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <LCD_enum_Send_char>
//function to send custom char
ES_t LCD_enum_Send_Custom_char(u8 Copy_u8_Location , u8 * Copy_pu8_char_Array){
	if(Copy_pu8_char_Array != NULL && Copy_u8_Location < MAX_CHARACTERS )
	    {
		LCD_enum_Send_Comnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS ));
	        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS ; Local_u8_Counter++)
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	8f 5f       	subi	r24, 0xFF	; 255
    22dc:	89 83       	std	Y+1, r24	; 0x01
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	88 30       	cpi	r24, 0x08	; 8
    22e2:	78 f3       	brcs	.-34     	; 0x22c2 <LCD_enum_Send_Custom_char+0x3e>
	        {
	        	LCD_enum_Send_char(Copy_pu8_char_Array[Local_u8_Counter]);
	        }
	        LCD_enum_GO_TO_XY(LCD_u8_LINE1,0);
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_enum_GO_TO_XY>
//	        LCD_enum_Send_char(Copy_u8_Location);
	        return ES_OK;
    22ec:	1d 82       	std	Y+5, r1	; 0x05
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <LCD_enum_Send_Custom_char+0x70>

	    }
	    else
	    {
	        return ES_NOK;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	8d 83       	std	Y+5, r24	; 0x05
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
	    }

}
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <LCD_enum_Send_Num>:

ES_t LCD_enum_Send_Num(u32 Copy_LCD_u32_Num)
{
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	60 97       	sbiw	r28, 0x10	; 16
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	6d 87       	std	Y+13, r22	; 0x0d
    2320:	7e 87       	std	Y+14, r23	; 0x0e
    2322:	8f 87       	std	Y+15, r24	; 0x0f
    2324:	98 8b       	std	Y+16, r25	; 0x10
	u8 arr[10], i = 0, j = 0;
    2326:	1a 82       	std	Y+2, r1	; 0x02
    2328:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_LCD_u32_Num == 0)
    232a:	8d 85       	ldd	r24, Y+13	; 0x0d
    232c:	9e 85       	ldd	r25, Y+14	; 0x0e
    232e:	af 85       	ldd	r26, Y+15	; 0x0f
    2330:	b8 89       	ldd	r27, Y+16	; 0x10
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	a1 05       	cpc	r26, r1
    2336:	b1 05       	cpc	r27, r1
    2338:	91 f5       	brne	.+100    	; 0x239e <LCD_enum_Send_Num+0x98>
	{
		LCD_enum_Send_char('0');
    233a:	80 e3       	ldi	r24, 0x30	; 48
    233c:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <LCD_enum_Send_char>
    2340:	4d c0       	rjmp	.+154    	; 0x23dc <LCD_enum_Send_Num+0xd6>
	}
	else
	{
		while (Copy_LCD_u32_Num)
		{
			arr[i] = Copy_LCD_u32_Num % 10 + '0';
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	08 2f       	mov	r16, r24
    2346:	10 e0       	ldi	r17, 0x00	; 0
    2348:	8d 85       	ldd	r24, Y+13	; 0x0d
    234a:	9e 85       	ldd	r25, Y+14	; 0x0e
    234c:	af 85       	ldd	r26, Y+15	; 0x0f
    234e:	b8 89       	ldd	r27, Y+16	; 0x10
    2350:	2a e0       	ldi	r18, 0x0A	; 10
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	50 e0       	ldi	r21, 0x00	; 0
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 93 13 	call	0x2726	; 0x2726 <__udivmodsi4>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	28 2f       	mov	r18, r24
    2366:	20 5d       	subi	r18, 0xD0	; 208
    2368:	ce 01       	movw	r24, r28
    236a:	03 96       	adiw	r24, 0x03	; 3
    236c:	fc 01       	movw	r30, r24
    236e:	e0 0f       	add	r30, r16
    2370:	f1 1f       	adc	r31, r17
    2372:	20 83       	st	Z, r18
			Copy_LCD_u32_Num /= 10;
    2374:	8d 85       	ldd	r24, Y+13	; 0x0d
    2376:	9e 85       	ldd	r25, Y+14	; 0x0e
    2378:	af 85       	ldd	r26, Y+15	; 0x0f
    237a:	b8 89       	ldd	r27, Y+16	; 0x10
    237c:	2a e0       	ldi	r18, 0x0A	; 10
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	0e 94 93 13 	call	0x2726	; 0x2726 <__udivmodsi4>
    238c:	da 01       	movw	r26, r20
    238e:	c9 01       	movw	r24, r18
    2390:	8d 87       	std	Y+13, r24	; 0x0d
    2392:	9e 87       	std	Y+14, r25	; 0x0e
    2394:	af 87       	std	Y+15, r26	; 0x0f
    2396:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	8f 5f       	subi	r24, 0xFF	; 255
    239c:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_enum_Send_char('0');
	}
	else
	{
		while (Copy_LCD_u32_Num)
    239e:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a2:	af 85       	ldd	r26, Y+15	; 0x0f
    23a4:	b8 89       	ldd	r27, Y+16	; 0x10
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	a1 05       	cpc	r26, r1
    23aa:	b1 05       	cpc	r27, r1
    23ac:	51 f6       	brne	.-108    	; 0x2342 <LCD_enum_Send_Num+0x3c>
			arr[i] = Copy_LCD_u32_Num % 10 + '0';
			Copy_LCD_u32_Num /= 10;
			i++;
		}

		for (j = i; j > 0; j--)
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	11 c0       	rjmp	.+34     	; 0x23d6 <LCD_enum_Send_Num+0xd0>
		{
			LCD_enum_Send_char(arr[j - 1]);
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	88 2f       	mov	r24, r24
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9c 01       	movw	r18, r24
    23bc:	21 50       	subi	r18, 0x01	; 1
    23be:	30 40       	sbci	r19, 0x00	; 0
    23c0:	ce 01       	movw	r24, r28
    23c2:	03 96       	adiw	r24, 0x03	; 3
    23c4:	fc 01       	movw	r30, r24
    23c6:	e2 0f       	add	r30, r18
    23c8:	f3 1f       	adc	r31, r19
    23ca:	80 81       	ld	r24, Z
    23cc:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <LCD_enum_Send_char>
			arr[i] = Copy_LCD_u32_Num % 10 + '0';
			Copy_LCD_u32_Num /= 10;
			i++;
		}

		for (j = i; j > 0; j--)
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	81 50       	subi	r24, 0x01	; 1
    23d4:	89 83       	std	Y+1, r24	; 0x01
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	88 23       	and	r24, r24
    23da:	61 f7       	brne	.-40     	; 0x23b4 <LCD_enum_Send_Num+0xae>
		{
			LCD_enum_Send_char(arr[j - 1]);
		}
	}
    return ES_NOK;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
}
    23de:	60 96       	adiw	r28, 0x10	; 16
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	1f 91       	pop	r17
    23f0:	0f 91       	pop	r16
    23f2:	08 95       	ret

000023f4 <main>:
#include <util/delay.h>

//void ADC_void_ADC_Call_Back(u16 Copy_u16_ADC_VALUE );
static u16 APP_ADC_u16_DIGITAL_VALUE=0;

int main(){
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	a2 97       	sbiw	r28, 0x22	; 34
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
	u16 LOCAL_ADC_u16_ANALOG_VALUE=0;
    2408:	1a a2       	std	Y+34, r1	; 0x22
    240a:	19 a2       	std	Y+33, r1	; 0x21
	u32 LOCAL_ADC_u16_RES_VALUE=0;
    240c:	1d 8e       	std	Y+29, r1	; 0x1d
    240e:	1e 8e       	std	Y+30, r1	; 0x1e
    2410:	1f 8e       	std	Y+31, r1	; 0x1f
    2412:	18 a2       	std	Y+32, r1	; 0x20

	DIO_voidInit();
    2414:	0e 94 be 07 	call	0xf7c	; 0xf7c <DIO_voidInit>
    ADC_enum_ADC_INIT();
    2418:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_enum_ADC_INIT>
    LCD_enum_INIT();
    241c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_enum_INIT>

    while(1){
//    	ADC_enum_GET_DIGITAL_VALUE_ASynch(ADC_u8_CHANNEL_0,&ADC_void_ADC_Call_Back);
    	ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking(ADC_u8_CHANNEL_0,&APP_ADC_u16_DIGITAL_VALUE);
    2420:	21 e7       	ldi	r18, 0x71	; 113
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	b9 01       	movw	r22, r18
    2428:	0e 94 92 06 	call	0xd24	; 0xd24 <ADC_enum_GET_DIGITAL_VALUE_Synch_Non_Blocking>
    LOCAL_ADC_u16_ANALOG_VALUE=(u16)(APP_ADC_u16_DIGITAL_VALUE * 5000UL)/1024 ; /*range of mv to avoid floating numbers */
    242c:	80 91 71 00 	lds	r24, 0x0071
    2430:	90 91 72 00 	lds	r25, 0x0072
    2434:	cc 01       	movw	r24, r24
    2436:	a0 e0       	ldi	r26, 0x00	; 0
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	28 e8       	ldi	r18, 0x88	; 136
    243c:	33 e1       	ldi	r19, 0x13	; 19
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	bc 01       	movw	r22, r24
    2444:	cd 01       	movw	r24, r26
    2446:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__mulsi3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	89 2f       	mov	r24, r25
    2450:	99 27       	eor	r25, r25
    2452:	86 95       	lsr	r24
    2454:	86 95       	lsr	r24
    2456:	9a a3       	std	Y+34, r25	; 0x22
    2458:	89 a3       	std	Y+33, r24	; 0x21
    LOCAL_ADC_u16_RES_VALUE = ((10000*1024UL)/LOCAL_ADC_u16_ANALOG_VALUE) - 10000;
    245a:	89 a1       	ldd	r24, Y+33	; 0x21
    245c:	9a a1       	ldd	r25, Y+34	; 0x22
    245e:	9c 01       	movw	r18, r24
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e4       	ldi	r25, 0x40	; 64
    2468:	ac e9       	ldi	r26, 0x9C	; 156
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0e 94 93 13 	call	0x2726	; 0x2726 <__udivmodsi4>
    2474:	da 01       	movw	r26, r20
    2476:	c9 01       	movw	r24, r18
    2478:	80 51       	subi	r24, 0x10	; 16
    247a:	97 42       	sbci	r25, 0x27	; 39
    247c:	a0 40       	sbci	r26, 0x00	; 0
    247e:	b0 40       	sbci	r27, 0x00	; 0
    2480:	8d 8f       	std	Y+29, r24	; 0x1d
    2482:	9e 8f       	std	Y+30, r25	; 0x1e
    2484:	af 8f       	std	Y+31, r26	; 0x1f
    2486:	b8 a3       	std	Y+32, r27	; 0x20
	LCD_enum_GO_TO_XY(1,1);
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	61 e0       	ldi	r22, 0x01	; 1
    248c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_enum_GO_TO_XY>
	LCD_enum_Send_String("hello");
    2490:	80 e6       	ldi	r24, 0x60	; 96
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	0e 94 90 10 	call	0x2120	; 0x2120 <LCD_enum_Send_String>
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	aa e7       	ldi	r26, 0x7A	; 122
    249e:	b4 e4       	ldi	r27, 0x44	; 68
    24a0:	89 8f       	std	Y+25, r24	; 0x19
    24a2:	9a 8f       	std	Y+26, r25	; 0x1a
    24a4:	ab 8f       	std	Y+27, r26	; 0x1b
    24a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a8:	69 8d       	ldd	r22, Y+25	; 0x19
    24aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	4a e7       	ldi	r20, 0x7A	; 122
    24b6:	53 e4       	ldi	r21, 0x43	; 67
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	8d 8b       	std	Y+21, r24	; 0x15
    24c2:	9e 8b       	std	Y+22, r25	; 0x16
    24c4:	af 8b       	std	Y+23, r26	; 0x17
    24c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24c8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ca:	7e 89       	ldd	r23, Y+22	; 0x16
    24cc:	8f 89       	ldd	r24, Y+23	; 0x17
    24ce:	98 8d       	ldd	r25, Y+24	; 0x18
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e8       	ldi	r20, 0x80	; 128
    24d6:	5f e3       	ldi	r21, 0x3F	; 63
    24d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24dc:	88 23       	and	r24, r24
    24de:	2c f4       	brge	.+10     	; 0x24ea <main+0xf6>
		__ticks = 1;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9c 8b       	std	Y+20, r25	; 0x14
    24e6:	8b 8b       	std	Y+19, r24	; 0x13
    24e8:	3f c0       	rjmp	.+126    	; 0x2568 <main+0x174>
	else if (__tmp > 65535)
    24ea:	6d 89       	ldd	r22, Y+21	; 0x15
    24ec:	7e 89       	ldd	r23, Y+22	; 0x16
    24ee:	8f 89       	ldd	r24, Y+23	; 0x17
    24f0:	98 8d       	ldd	r25, Y+24	; 0x18
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	3f ef       	ldi	r19, 0xFF	; 255
    24f6:	4f e7       	ldi	r20, 0x7F	; 127
    24f8:	57 e4       	ldi	r21, 0x47	; 71
    24fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24fe:	18 16       	cp	r1, r24
    2500:	4c f5       	brge	.+82     	; 0x2554 <main+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2502:	69 8d       	ldd	r22, Y+25	; 0x19
    2504:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2506:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2508:	9c 8d       	ldd	r25, Y+28	; 0x1c
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	bc 01       	movw	r22, r24
    251c:	cd 01       	movw	r24, r26
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9c 8b       	std	Y+20, r25	; 0x14
    2528:	8b 8b       	std	Y+19, r24	; 0x13
    252a:	0f c0       	rjmp	.+30     	; 0x254a <main+0x156>
    252c:	89 e1       	ldi	r24, 0x19	; 25
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9a 8b       	std	Y+18, r25	; 0x12
    2532:	89 8b       	std	Y+17, r24	; 0x11
    2534:	89 89       	ldd	r24, Y+17	; 0x11
    2536:	9a 89       	ldd	r25, Y+18	; 0x12
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <main+0x144>
    253c:	9a 8b       	std	Y+18, r25	; 0x12
    253e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2540:	8b 89       	ldd	r24, Y+19	; 0x13
    2542:	9c 89       	ldd	r25, Y+20	; 0x14
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	9c 8b       	std	Y+20, r25	; 0x14
    2548:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254a:	8b 89       	ldd	r24, Y+19	; 0x13
    254c:	9c 89       	ldd	r25, Y+20	; 0x14
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	69 f7       	brne	.-38     	; 0x252c <main+0x138>
    2552:	14 c0       	rjmp	.+40     	; 0x257c <main+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2554:	6d 89       	ldd	r22, Y+21	; 0x15
    2556:	7e 89       	ldd	r23, Y+22	; 0x16
    2558:	8f 89       	ldd	r24, Y+23	; 0x17
    255a:	98 8d       	ldd	r25, Y+24	; 0x18
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	9c 8b       	std	Y+20, r25	; 0x14
    2566:	8b 8b       	std	Y+19, r24	; 0x13
    2568:	8b 89       	ldd	r24, Y+19	; 0x13
    256a:	9c 89       	ldd	r25, Y+20	; 0x14
    256c:	98 8b       	std	Y+16, r25	; 0x10
    256e:	8f 87       	std	Y+15, r24	; 0x0f
    2570:	8f 85       	ldd	r24, Y+15	; 0x0f
    2572:	98 89       	ldd	r25, Y+16	; 0x10
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <main+0x180>
    2578:	98 8b       	std	Y+16, r25	; 0x10
    257a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	    	LCD_enum_Clear();
    257c:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_enum_Clear>

	LCD_enum_GO_TO_XY(1,1);
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	61 e0       	ldi	r22, 0x01	; 1
    2584:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_enum_GO_TO_XY>
	LCD_enum_Send_char('V');
    2588:	86 e5       	ldi	r24, 0x56	; 86
    258a:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <LCD_enum_Send_char>
	LCD_enum_Send_char(':');
    258e:	8a e3       	ldi	r24, 0x3A	; 58
    2590:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <LCD_enum_Send_char>
	LCD_enum_GO_TO_XY(1,6);
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	66 e0       	ldi	r22, 0x06	; 6
    2598:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_enum_GO_TO_XY>
	LCD_enum_Send_Num(LOCAL_ADC_u16_ANALOG_VALUE);
    259c:	89 a1       	ldd	r24, Y+33	; 0x21
    259e:	9a a1       	ldd	r25, Y+34	; 0x22
    25a0:	cc 01       	movw	r24, r24
    25a2:	a0 e0       	ldi	r26, 0x00	; 0
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 83 11 	call	0x2306	; 0x2306 <LCD_enum_Send_Num>

	LCD_enum_GO_TO_XY(2,1);
    25ae:	82 e0       	ldi	r24, 0x02	; 2
    25b0:	61 e0       	ldi	r22, 0x01	; 1
    25b2:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_enum_GO_TO_XY>
	LCD_enum_Send_char('r');
    25b6:	82 e7       	ldi	r24, 0x72	; 114
    25b8:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <LCD_enum_Send_char>
	LCD_enum_Send_char(':');
    25bc:	8a e3       	ldi	r24, 0x3A	; 58
    25be:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <LCD_enum_Send_char>
    LCD_enum_GO_TO_XY(2,6);
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	66 e0       	ldi	r22, 0x06	; 6
    25c6:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_enum_GO_TO_XY>
    LCD_enum_Send_Num(LOCAL_ADC_u16_RES_VALUE);
    25ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ce:	af 8d       	ldd	r26, Y+31	; 0x1f
    25d0:	b8 a1       	ldd	r27, Y+32	; 0x20
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	0e 94 83 11 	call	0x2306	; 0x2306 <LCD_enum_Send_Num>
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	aa e7       	ldi	r26, 0x7A	; 122
    25e0:	b4 e4       	ldi	r27, 0x44	; 68
    25e2:	8b 87       	std	Y+11, r24	; 0x0b
    25e4:	9c 87       	std	Y+12, r25	; 0x0c
    25e6:	ad 87       	std	Y+13, r26	; 0x0d
    25e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	4a e7       	ldi	r20, 0x7A	; 122
    25f8:	53 e4       	ldi	r21, 0x43	; 67
    25fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	8f 83       	std	Y+7, r24	; 0x07
    2604:	98 87       	std	Y+8, r25	; 0x08
    2606:	a9 87       	std	Y+9, r26	; 0x09
    2608:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    260a:	6f 81       	ldd	r22, Y+7	; 0x07
    260c:	78 85       	ldd	r23, Y+8	; 0x08
    260e:	89 85       	ldd	r24, Y+9	; 0x09
    2610:	9a 85       	ldd	r25, Y+10	; 0x0a
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e8       	ldi	r20, 0x80	; 128
    2618:	5f e3       	ldi	r21, 0x3F	; 63
    261a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    261e:	88 23       	and	r24, r24
    2620:	2c f4       	brge	.+10     	; 0x262c <main+0x238>
		__ticks = 1;
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
    262a:	3f c0       	rjmp	.+126    	; 0x26aa <main+0x2b6>
	else if (__tmp > 65535)
    262c:	6f 81       	ldd	r22, Y+7	; 0x07
    262e:	78 85       	ldd	r23, Y+8	; 0x08
    2630:	89 85       	ldd	r24, Y+9	; 0x09
    2632:	9a 85       	ldd	r25, Y+10	; 0x0a
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	3f ef       	ldi	r19, 0xFF	; 255
    2638:	4f e7       	ldi	r20, 0x7F	; 127
    263a:	57 e4       	ldi	r21, 0x47	; 71
    263c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2640:	18 16       	cp	r1, r24
    2642:	4c f5       	brge	.+82     	; 0x2696 <main+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2644:	6b 85       	ldd	r22, Y+11	; 0x0b
    2646:	7c 85       	ldd	r23, Y+12	; 0x0c
    2648:	8d 85       	ldd	r24, Y+13	; 0x0d
    264a:	9e 85       	ldd	r25, Y+14	; 0x0e
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e2       	ldi	r20, 0x20	; 32
    2652:	51 e4       	ldi	r21, 0x41	; 65
    2654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	bc 01       	movw	r22, r24
    265e:	cd 01       	movw	r24, r26
    2660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	9e 83       	std	Y+6, r25	; 0x06
    266a:	8d 83       	std	Y+5, r24	; 0x05
    266c:	0f c0       	rjmp	.+30     	; 0x268c <main+0x298>
    266e:	89 e1       	ldi	r24, 0x19	; 25
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	9c 83       	std	Y+4, r25	; 0x04
    2674:	8b 83       	std	Y+3, r24	; 0x03
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	9c 81       	ldd	r25, Y+4	; 0x04
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <main+0x286>
    267e:	9c 83       	std	Y+4, r25	; 0x04
    2680:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	9e 83       	std	Y+6, r25	; 0x06
    268a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268c:	8d 81       	ldd	r24, Y+5	; 0x05
    268e:	9e 81       	ldd	r25, Y+6	; 0x06
    2690:	00 97       	sbiw	r24, 0x00	; 0
    2692:	69 f7       	brne	.-38     	; 0x266e <main+0x27a>
    2694:	14 c0       	rjmp	.+40     	; 0x26be <main+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2696:	6f 81       	ldd	r22, Y+7	; 0x07
    2698:	78 85       	ldd	r23, Y+8	; 0x08
    269a:	89 85       	ldd	r24, Y+9	; 0x09
    269c:	9a 85       	ldd	r25, Y+10	; 0x0a
    269e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	9e 83       	std	Y+6, r25	; 0x06
    26a8:	8d 83       	std	Y+5, r24	; 0x05
    26aa:	8d 81       	ldd	r24, Y+5	; 0x05
    26ac:	9e 81       	ldd	r25, Y+6	; 0x06
    26ae:	9a 83       	std	Y+2, r25	; 0x02
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	9a 81       	ldd	r25, Y+2	; 0x02
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <main+0x2c2>
    26ba:	9a 83       	std	Y+2, r25	; 0x02
    26bc:	89 83       	std	Y+1, r24	; 0x01
    	_delay_ms(1000);
    	LCD_enum_Clear();
    26be:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_enum_Clear>
    26c2:	ae ce       	rjmp	.-676    	; 0x2420 <main+0x2c>

000026c4 <ADC_void_ADC_Call_Back>:
//        }

    }
	return 0;
}
void ADC_void_ADC_Call_Back(u16 Copy_u16_ADC_VALUE ){
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <ADC_void_ADC_Call_Back+0x6>
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	9a 83       	std	Y+2, r25	; 0x02
    26d0:	89 83       	std	Y+1, r24	; 0x01
//	ADC_enum_GET_ADC_REG_VALUE(&APP_ADC_u16_DIGITAL_VALUE);
	APP_ADC_u16_DIGITAL_VALUE=Copy_u16_ADC_VALUE;
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	9a 81       	ldd	r25, Y+2	; 0x02
    26d6:	90 93 72 00 	sts	0x0072, r25
    26da:	80 93 71 00 	sts	0x0071, r24
}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <__mulsi3>:
    26e8:	62 9f       	mul	r22, r18
    26ea:	d0 01       	movw	r26, r0
    26ec:	73 9f       	mul	r23, r19
    26ee:	f0 01       	movw	r30, r0
    26f0:	82 9f       	mul	r24, r18
    26f2:	e0 0d       	add	r30, r0
    26f4:	f1 1d       	adc	r31, r1
    26f6:	64 9f       	mul	r22, r20
    26f8:	e0 0d       	add	r30, r0
    26fa:	f1 1d       	adc	r31, r1
    26fc:	92 9f       	mul	r25, r18
    26fe:	f0 0d       	add	r31, r0
    2700:	83 9f       	mul	r24, r19
    2702:	f0 0d       	add	r31, r0
    2704:	74 9f       	mul	r23, r20
    2706:	f0 0d       	add	r31, r0
    2708:	65 9f       	mul	r22, r21
    270a:	f0 0d       	add	r31, r0
    270c:	99 27       	eor	r25, r25
    270e:	72 9f       	mul	r23, r18
    2710:	b0 0d       	add	r27, r0
    2712:	e1 1d       	adc	r30, r1
    2714:	f9 1f       	adc	r31, r25
    2716:	63 9f       	mul	r22, r19
    2718:	b0 0d       	add	r27, r0
    271a:	e1 1d       	adc	r30, r1
    271c:	f9 1f       	adc	r31, r25
    271e:	bd 01       	movw	r22, r26
    2720:	cf 01       	movw	r24, r30
    2722:	11 24       	eor	r1, r1
    2724:	08 95       	ret

00002726 <__udivmodsi4>:
    2726:	a1 e2       	ldi	r26, 0x21	; 33
    2728:	1a 2e       	mov	r1, r26
    272a:	aa 1b       	sub	r26, r26
    272c:	bb 1b       	sub	r27, r27
    272e:	fd 01       	movw	r30, r26
    2730:	0d c0       	rjmp	.+26     	; 0x274c <__udivmodsi4_ep>

00002732 <__udivmodsi4_loop>:
    2732:	aa 1f       	adc	r26, r26
    2734:	bb 1f       	adc	r27, r27
    2736:	ee 1f       	adc	r30, r30
    2738:	ff 1f       	adc	r31, r31
    273a:	a2 17       	cp	r26, r18
    273c:	b3 07       	cpc	r27, r19
    273e:	e4 07       	cpc	r30, r20
    2740:	f5 07       	cpc	r31, r21
    2742:	20 f0       	brcs	.+8      	; 0x274c <__udivmodsi4_ep>
    2744:	a2 1b       	sub	r26, r18
    2746:	b3 0b       	sbc	r27, r19
    2748:	e4 0b       	sbc	r30, r20
    274a:	f5 0b       	sbc	r31, r21

0000274c <__udivmodsi4_ep>:
    274c:	66 1f       	adc	r22, r22
    274e:	77 1f       	adc	r23, r23
    2750:	88 1f       	adc	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	1a 94       	dec	r1
    2756:	69 f7       	brne	.-38     	; 0x2732 <__udivmodsi4_loop>
    2758:	60 95       	com	r22
    275a:	70 95       	com	r23
    275c:	80 95       	com	r24
    275e:	90 95       	com	r25
    2760:	9b 01       	movw	r18, r22
    2762:	ac 01       	movw	r20, r24
    2764:	bd 01       	movw	r22, r26
    2766:	cf 01       	movw	r24, r30
    2768:	08 95       	ret

0000276a <__prologue_saves__>:
    276a:	2f 92       	push	r2
    276c:	3f 92       	push	r3
    276e:	4f 92       	push	r4
    2770:	5f 92       	push	r5
    2772:	6f 92       	push	r6
    2774:	7f 92       	push	r7
    2776:	8f 92       	push	r8
    2778:	9f 92       	push	r9
    277a:	af 92       	push	r10
    277c:	bf 92       	push	r11
    277e:	cf 92       	push	r12
    2780:	df 92       	push	r13
    2782:	ef 92       	push	r14
    2784:	ff 92       	push	r15
    2786:	0f 93       	push	r16
    2788:	1f 93       	push	r17
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	ca 1b       	sub	r28, r26
    2794:	db 0b       	sbc	r29, r27
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	09 94       	ijmp

000027a2 <__epilogue_restores__>:
    27a2:	2a 88       	ldd	r2, Y+18	; 0x12
    27a4:	39 88       	ldd	r3, Y+17	; 0x11
    27a6:	48 88       	ldd	r4, Y+16	; 0x10
    27a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    27aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    27ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    27ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    27b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    27b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    27b4:	b9 84       	ldd	r11, Y+9	; 0x09
    27b6:	c8 84       	ldd	r12, Y+8	; 0x08
    27b8:	df 80       	ldd	r13, Y+7	; 0x07
    27ba:	ee 80       	ldd	r14, Y+6	; 0x06
    27bc:	fd 80       	ldd	r15, Y+5	; 0x05
    27be:	0c 81       	ldd	r16, Y+4	; 0x04
    27c0:	1b 81       	ldd	r17, Y+3	; 0x03
    27c2:	aa 81       	ldd	r26, Y+2	; 0x02
    27c4:	b9 81       	ldd	r27, Y+1	; 0x01
    27c6:	ce 0f       	add	r28, r30
    27c8:	d1 1d       	adc	r29, r1
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	ed 01       	movw	r28, r26
    27d6:	08 95       	ret

000027d8 <_exit>:
    27d8:	f8 94       	cli

000027da <__stop_program>:
    27da:	ff cf       	rjmp	.-2      	; 0x27da <__stop_program>

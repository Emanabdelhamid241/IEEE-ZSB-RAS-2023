
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  00003b9c  00003c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800110  00800110  00003ce0  2**0
                  ALLOC
  3 .stab         00003a74  00000000  00000000  00003ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000142a  00000000  00000000  00007754  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000aeb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bfb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cf38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d37a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dc08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__vector_1>
       8:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__vector_2>
       c:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 31       	cpi	r26, 0x1A	; 26
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 30 1a 	call	0x3460	; 0x3460 <main>
      8a:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ef       	ldi	r26, 0xF0	; 240
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a1 1d 	jmp	0x3b42	; 0x3b42 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a1 1d 	jmp	0x3b42	; 0x3b42 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 ef       	ldi	r24, 0xF0	; 240
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9d 1d 	jmp	0x3b3a	; 0x3b3a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ef       	ldi	r22, 0xF0	; 240
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b9 1d 	jmp	0x3b72	; 0x3b72 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a1 1d 	jmp	0x3b42	; 0x3b42 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a1 1d 	jmp	0x3b42	; 0x3b42 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a1 1d 	jmp	0x3b42	; 0x3b42 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a5 1d 	jmp	0x3b4a	; 0x3b4a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GI_enum_GI_Enable>:

//MCAL
#include "GI_config.h"
#include "GI_private.h"

ES_t  GI_enum_GI_Enable(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG_REG,GI_u8_PIN7);
     ca6:	af e5       	ldi	r26, 0x5F	; 95
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e5       	ldi	r30, 0x5F	; 95
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
return ES_OK;
     cb4:	80 e0       	ldi	r24, 0x00	; 0
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <GI_enum_GI_Disable>:
ES_t  GI_enum_GI_Disable(void){
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG_REG,GI_u8_PIN7);
     cc4:	af e5       	ldi	r26, 0x5F	; 95
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	ef e5       	ldi	r30, 0x5F	; 95
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8f 77       	andi	r24, 0x7F	; 127
     cd0:	8c 93       	st	X, r24
	return ES_OK;
     cd2:	80 e0       	ldi	r24, 0x00	; 0

}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <EXTI_enum_EXTI_Enable>:
static void (*EXTI_Apf_EXTI[3])(void)={NULL,NULL,NULL};



/*function to enable */
ES_t  EXTI_enum_EXTI_Enable(u8 Copy_u8_EXTI_Index,u8 Copy_u8_Edge_Index){
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	2b 97       	sbiw	r28, 0x0b	; 11
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	8a 83       	std	Y+2, r24	; 0x02
     cf0:	6b 83       	std	Y+3, r22	; 0x03
		 ES_t Local_enu_Erorr_State = ES_OK ;
     cf2:	19 82       	std	Y+1, r1	; 0x01
         switch(Copy_u8_EXTI_Index)
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	3b 87       	std	Y+11, r19	; 0x0b
     cfc:	2a 87       	std	Y+10, r18	; 0x0a
     cfe:	8a 85       	ldd	r24, Y+10	; 0x0a
     d00:	9b 85       	ldd	r25, Y+11	; 0x0b
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	91 05       	cpc	r25, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <EXTI_enum_EXTI_Enable+0x30>
     d08:	86 c0       	rjmp	.+268    	; 0xe16 <EXTI_enum_EXTI_Enable+0x13c>
     d0a:	2a 85       	ldd	r18, Y+10	; 0x0a
     d0c:	3b 85       	ldd	r19, Y+11	; 0x0b
     d0e:	22 30       	cpi	r18, 0x02	; 2
     d10:	31 05       	cpc	r19, r1
     d12:	09 f4       	brne	.+2      	; 0xd16 <EXTI_enum_EXTI_Enable+0x3c>
     d14:	fb c0       	rjmp	.+502    	; 0xf0c <EXTI_enum_EXTI_Enable+0x232>
     d16:	8a 85       	ldd	r24, Y+10	; 0x0a
     d18:	9b 85       	ldd	r25, Y+11	; 0x0b
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	09 f0       	breq	.+2      	; 0xd20 <EXTI_enum_EXTI_Enable+0x46>
     d1e:	25 c1       	rjmp	.+586    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
         {
         case EXTI_u8_INT0:
        	 switch(Copy_u8_Edge_Index)
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	39 87       	std	Y+9, r19	; 0x09
     d28:	28 87       	std	Y+8, r18	; 0x08
     d2a:	88 85       	ldd	r24, Y+8	; 0x08
     d2c:	99 85       	ldd	r25, Y+9	; 0x09
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	91 05       	cpc	r25, r1
     d32:	61 f1       	breq	.+88     	; 0xd8c <EXTI_enum_EXTI_Enable+0xb2>
     d34:	28 85       	ldd	r18, Y+8	; 0x08
     d36:	39 85       	ldd	r19, Y+9	; 0x09
     d38:	22 30       	cpi	r18, 0x02	; 2
     d3a:	31 05       	cpc	r19, r1
     d3c:	2c f4       	brge	.+10     	; 0xd48 <EXTI_enum_EXTI_Enable+0x6e>
     d3e:	88 85       	ldd	r24, Y+8	; 0x08
     d40:	99 85       	ldd	r25, Y+9	; 0x09
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	69 f0       	breq	.+26     	; 0xd60 <EXTI_enum_EXTI_Enable+0x86>
     d46:	64 c0       	rjmp	.+200    	; 0xe10 <EXTI_enum_EXTI_Enable+0x136>
     d48:	28 85       	ldd	r18, Y+8	; 0x08
     d4a:	39 85       	ldd	r19, Y+9	; 0x09
     d4c:	22 30       	cpi	r18, 0x02	; 2
     d4e:	31 05       	cpc	r19, r1
     d50:	99 f1       	breq	.+102    	; 0xdb8 <EXTI_enum_EXTI_Enable+0xde>
     d52:	88 85       	ldd	r24, Y+8	; 0x08
     d54:	99 85       	ldd	r25, Y+9	; 0x09
     d56:	83 30       	cpi	r24, 0x03	; 3
     d58:	91 05       	cpc	r25, r1
     d5a:	09 f4       	brne	.+2      	; 0xd5e <EXTI_enum_EXTI_Enable+0x84>
     d5c:	43 c0       	rjmp	.+134    	; 0xde4 <EXTI_enum_EXTI_Enable+0x10a>
     d5e:	58 c0       	rjmp	.+176    	; 0xe10 <EXTI_enum_EXTI_Enable+0x136>
			 {
        	 case EXTI_u8_RAISING_EDGE:
        		 SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC01);
     d60:	a5 e5       	ldi	r26, 0x55	; 85
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e5 e5       	ldi	r30, 0x55	; 85
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	82 60       	ori	r24, 0x02	; 2
     d6c:	8c 93       	st	X, r24
        		 SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC00);
     d6e:	a5 e5       	ldi	r26, 0x55	; 85
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e5 e5       	ldi	r30, 0x55	; 85
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	81 60       	ori	r24, 0x01	; 1
     d7a:	8c 93       	st	X, r24
        		 /* Enable EXTI0 >>> PIC */
        		 	 SET_BIT(EXTI_u8_GICR_REG  ,EXTI0_u8_PIN6  );
     d7c:	ab e5       	ldi	r26, 0x5B	; 91
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	eb e5       	ldi	r30, 0x5B	; 91
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	80 64       	ori	r24, 0x40	; 64
     d88:	8c 93       	st	X, r24
     d8a:	ef c0       	rjmp	.+478    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        		 break;
        	 case EXTI_u8_FALLING_EDGE:
        	       SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC01);
     d8c:	a5 e5       	ldi	r26, 0x55	; 85
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e5 e5       	ldi	r30, 0x55	; 85
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	82 60       	ori	r24, 0x02	; 2
     d98:	8c 93       	st	X, r24
        	       CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC00);
     d9a:	a5 e5       	ldi	r26, 0x55	; 85
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e5 e5       	ldi	r30, 0x55	; 85
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8e 7f       	andi	r24, 0xFE	; 254
     da6:	8c 93       	st	X, r24
        	       /* Enable EXTI0 >>> PIC */
        	         SET_BIT(EXTI_u8_GICR_REG  ,EXTI0_u8_PIN6  );
     da8:	ab e5       	ldi	r26, 0x5B	; 91
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	eb e5       	ldi	r30, 0x5B	; 91
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	80 64       	ori	r24, 0x40	; 64
     db4:	8c 93       	st	X, r24
     db6:	d9 c0       	rjmp	.+434    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         		 break;
        	 case EXTI_u8_ANY_LOGICAL_CHANGE:
        	    	 CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC01);
     db8:	a5 e5       	ldi	r26, 0x55	; 85
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e5 e5       	ldi	r30, 0x55	; 85
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8d 7f       	andi	r24, 0xFD	; 253
     dc4:	8c 93       	st	X, r24
            		 SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC00);
     dc6:	a5 e5       	ldi	r26, 0x55	; 85
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e5 e5       	ldi	r30, 0x55	; 85
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	81 60       	ori	r24, 0x01	; 1
     dd2:	8c 93       	st	X, r24
            		 /* Enable EXTI0 >>> PIC */
            		 SET_BIT(EXTI_u8_GICR_REG  ,EXTI0_u8_PIN6  );
     dd4:	ab e5       	ldi	r26, 0x5B	; 91
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	eb e5       	ldi	r30, 0x5B	; 91
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	80 64       	ori	r24, 0x40	; 64
     de0:	8c 93       	st	X, r24
     de2:	c3 c0       	rjmp	.+390    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         		 break;
        	 case EXTI_u8_LOW_LEVEL:
       	        CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC01);
     de4:	a5 e5       	ldi	r26, 0x55	; 85
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e5 e5       	ldi	r30, 0x55	; 85
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
        		 CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC00);
     df2:	a5 e5       	ldi	r26, 0x55	; 85
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e5 e5       	ldi	r30, 0x55	; 85
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	8e 7f       	andi	r24, 0xFE	; 254
     dfe:	8c 93       	st	X, r24
        		 /* Enable EXTI0 >>> PIC */
        		    SET_BIT(EXTI_u8_GICR_REG  ,EXTI0_u8_PIN6  );
     e00:	ab e5       	ldi	r26, 0x5B	; 91
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	eb e5       	ldi	r30, 0x5B	; 91
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 64       	ori	r24, 0x40	; 64
     e0c:	8c 93       	st	X, r24
     e0e:	ad c0       	rjmp	.+346    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         		 break;
        	 default :Local_enu_Erorr_State = ES_NOK ;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	aa c0       	rjmp	.+340    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
			 }
        	 break;
        	 case EXTI_u8_INT1:
        	         	 switch(Copy_u8_Edge_Index)
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	3f 83       	std	Y+7, r19	; 0x07
     e1e:	2e 83       	std	Y+6, r18	; 0x06
     e20:	8e 81       	ldd	r24, Y+6	; 0x06
     e22:	9f 81       	ldd	r25, Y+7	; 0x07
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	91 05       	cpc	r25, r1
     e28:	61 f1       	breq	.+88     	; 0xe82 <EXTI_enum_EXTI_Enable+0x1a8>
     e2a:	2e 81       	ldd	r18, Y+6	; 0x06
     e2c:	3f 81       	ldd	r19, Y+7	; 0x07
     e2e:	22 30       	cpi	r18, 0x02	; 2
     e30:	31 05       	cpc	r19, r1
     e32:	2c f4       	brge	.+10     	; 0xe3e <EXTI_enum_EXTI_Enable+0x164>
     e34:	8e 81       	ldd	r24, Y+6	; 0x06
     e36:	9f 81       	ldd	r25, Y+7	; 0x07
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	69 f0       	breq	.+26     	; 0xe56 <EXTI_enum_EXTI_Enable+0x17c>
     e3c:	64 c0       	rjmp	.+200    	; 0xf06 <EXTI_enum_EXTI_Enable+0x22c>
     e3e:	2e 81       	ldd	r18, Y+6	; 0x06
     e40:	3f 81       	ldd	r19, Y+7	; 0x07
     e42:	22 30       	cpi	r18, 0x02	; 2
     e44:	31 05       	cpc	r19, r1
     e46:	99 f1       	breq	.+102    	; 0xeae <EXTI_enum_EXTI_Enable+0x1d4>
     e48:	8e 81       	ldd	r24, Y+6	; 0x06
     e4a:	9f 81       	ldd	r25, Y+7	; 0x07
     e4c:	83 30       	cpi	r24, 0x03	; 3
     e4e:	91 05       	cpc	r25, r1
     e50:	09 f4       	brne	.+2      	; 0xe54 <EXTI_enum_EXTI_Enable+0x17a>
     e52:	43 c0       	rjmp	.+134    	; 0xeda <EXTI_enum_EXTI_Enable+0x200>
     e54:	58 c0       	rjmp	.+176    	; 0xf06 <EXTI_enum_EXTI_Enable+0x22c>
        	 			 {
        	         	 case EXTI_u8_RAISING_EDGE:
        	         		 SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC11);
     e56:	a5 e5       	ldi	r26, 0x55	; 85
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e5 e5       	ldi	r30, 0x55	; 85
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	8c 93       	st	X, r24
        	         		 SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC10);
     e64:	a5 e5       	ldi	r26, 0x55	; 85
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e5 e5       	ldi	r30, 0x55	; 85
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	84 60       	ori	r24, 0x04	; 4
     e70:	8c 93       	st	X, r24
        	         		 /* Enable EXTI1 >>> PIC */
        	         		 	 SET_BIT(EXTI_u8_GICR_REG  ,EXTI1_u8_PIN7  );
     e72:	ab e5       	ldi	r26, 0x5B	; 91
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	eb e5       	ldi	r30, 0x5B	; 91
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	8c 93       	st	X, r24
     e80:	74 c0       	rjmp	.+232    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         		 break;
        	         	 case EXTI_u8_FALLING_EDGE:
        	         	       SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC11);
     e82:	a5 e5       	ldi	r26, 0x55	; 85
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e5 e5       	ldi	r30, 0x55	; 85
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	88 60       	ori	r24, 0x08	; 8
     e8e:	8c 93       	st	X, r24
        	         	       CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC10);
     e90:	a5 e5       	ldi	r26, 0x55	; 85
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e5       	ldi	r30, 0x55	; 85
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8b 7f       	andi	r24, 0xFB	; 251
     e9c:	8c 93       	st	X, r24
        	         	       /* Enable EXTI1 >>> PIC */
        	         	         SET_BIT(EXTI_u8_GICR_REG  ,EXTI1_u8_PIN7  );
     e9e:	ab e5       	ldi	r26, 0x5B	; 91
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	eb e5       	ldi	r30, 0x5B	; 91
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 68       	ori	r24, 0x80	; 128
     eaa:	8c 93       	st	X, r24
     eac:	5e c0       	rjmp	.+188    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         	         		 break;
        	         	 case EXTI_u8_ANY_LOGICAL_CHANGE:
        	         	    	 CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC11);
     eae:	a5 e5       	ldi	r26, 0x55	; 85
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e5 e5       	ldi	r30, 0x55	; 85
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	87 7f       	andi	r24, 0xF7	; 247
     eba:	8c 93       	st	X, r24
        	             		 SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC10);
     ebc:	a5 e5       	ldi	r26, 0x55	; 85
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e5 e5       	ldi	r30, 0x55	; 85
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	84 60       	ori	r24, 0x04	; 4
     ec8:	8c 93       	st	X, r24
        	             		 /* Enable EXTI1 >>> PIC */
        	             		 SET_BIT(EXTI_u8_GICR_REG  ,EXTI1_u8_PIN7  );
     eca:	ab e5       	ldi	r26, 0x5B	; 91
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e5       	ldi	r30, 0x5B	; 91
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	80 68       	ori	r24, 0x80	; 128
     ed6:	8c 93       	st	X, r24
     ed8:	48 c0       	rjmp	.+144    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         	         		 break;
        	         	 case EXTI_u8_LOW_LEVEL:
        	        	        CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC11);
     eda:	a5 e5       	ldi	r26, 0x55	; 85
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e5 e5       	ldi	r30, 0x55	; 85
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	87 7f       	andi	r24, 0xF7	; 247
     ee6:	8c 93       	st	X, r24
        	         		 CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC10);
     ee8:	a5 e5       	ldi	r26, 0x55	; 85
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e5 e5       	ldi	r30, 0x55	; 85
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8b 7f       	andi	r24, 0xFB	; 251
     ef4:	8c 93       	st	X, r24
        	         		 /* Enable EXTI1 >>> PIC */
        	         		    SET_BIT(EXTI_u8_GICR_REG  ,EXTI1_u8_PIN7  );
     ef6:	ab e5       	ldi	r26, 0x5B	; 91
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	eb e5       	ldi	r30, 0x5B	; 91
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 68       	ori	r24, 0x80	; 128
     f02:	8c 93       	st	X, r24
     f04:	32 c0       	rjmp	.+100    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         	         		 break;
        	         	 default :Local_enu_Erorr_State = ES_NOK ;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	2f c0       	rjmp	.+94     	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	 			 }
        	         	 break;
        	         	case EXTI_u8_INT2:
        	         	     switch(Copy_u8_Edge_Index)
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3d 83       	std	Y+5, r19	; 0x05
     f14:	2c 83       	std	Y+4, r18	; 0x04
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	9d 81       	ldd	r25, Y+5	; 0x05
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	31 f0       	breq	.+12     	; 0xf2a <EXTI_enum_EXTI_Enable+0x250>
     f1e:	2c 81       	ldd	r18, Y+4	; 0x04
     f20:	3d 81       	ldd	r19, Y+5	; 0x05
     f22:	21 30       	cpi	r18, 0x01	; 1
     f24:	31 05       	cpc	r19, r1
     f26:	81 f0       	breq	.+32     	; 0xf48 <EXTI_enum_EXTI_Enable+0x26e>
     f28:	1e c0       	rjmp	.+60     	; 0xf66 <EXTI_enum_EXTI_Enable+0x28c>
           	 			 {
        	            	 case EXTI_u8_RAISING_EDGE:
        	         	        		 SET_BIT(EXTI_u8_MCUCSR_REG  ,EXTI_u8_INT2_ISC2);
     f2a:	a4 e5       	ldi	r26, 0x54	; 84
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e4 e5       	ldi	r30, 0x54	; 84
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 64       	ori	r24, 0x40	; 64
     f36:	8c 93       	st	X, r24
        	         	         /* Enable EXTI2 >>> PIC */
        	         	     	 	 SET_BIT(EXTI_u8_GICR_REG  ,EXTI2_u8_PIN5  );
     f38:	ab e5       	ldi	r26, 0x5B	; 91
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	eb e5       	ldi	r30, 0x5B	; 91
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 62       	ori	r24, 0x20	; 32
     f44:	8c 93       	st	X, r24
     f46:	11 c0       	rjmp	.+34     	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         	        	  break;
        	         	       case EXTI_u8_FALLING_EDGE:
        	   	         	       CLR_BIT(EXTI_u8_MCUCSR_REG  ,EXTI_u8_INT2_ISC2);
     f48:	a4 e5       	ldi	r26, 0x54	; 84
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e4 e5       	ldi	r30, 0x54	; 84
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8f 7b       	andi	r24, 0xBF	; 191
     f54:	8c 93       	st	X, r24
   	        	         	       /* Enable EXTI1 >>> PIC */
           	         	         SET_BIT(EXTI_u8_GICR_REG  ,EXTI2_u8_PIN5  );
     f56:	ab e5       	ldi	r26, 0x5B	; 91
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	eb e5       	ldi	r30, 0x5B	; 91
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	80 62       	ori	r24, 0x20	; 32
     f62:	8c 93       	st	X, r24
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
               	         		 break;

        	         	   	   default :Local_enu_Erorr_State = ES_NOK ;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	89 83       	std	Y+1, r24	; 0x01
           	 			 }
                	         	 break;
         }
		 return Local_enu_Erorr_State;
     f6a:	89 81       	ldd	r24, Y+1	; 0x01

}
     f6c:	2b 96       	adiw	r28, 0x0b	; 11
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <EXTI_enum_EXTI_Disable>:
ES_t  EXTI_enum_EXTI_Disable(u8 Copy_u8_EXTI_Index){
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	00 d0       	rcall	.+0      	; 0xf84 <EXTI_enum_EXTI_Disable+0x6>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <EXTI_enum_EXTI_Disable+0x8>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enu_Erorr_State = ES_OK ;
     f8c:	19 82       	std	Y+1, r1	; 0x01
	 if(Copy_u8_EXTI_Index<=EXTI_u8_INT2){
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	50 f5       	brcc	.+84     	; 0xfe8 <EXTI_enum_EXTI_Disable+0x6a>
     switch(Copy_u8_EXTI_Index){
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3c 83       	std	Y+4, r19	; 0x04
     f9c:	2b 83       	std	Y+3, r18	; 0x03
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	91 05       	cpc	r25, r1
     fa6:	89 f0       	breq	.+34     	; 0xfca <EXTI_enum_EXTI_Disable+0x4c>
     fa8:	2b 81       	ldd	r18, Y+3	; 0x03
     faa:	3c 81       	ldd	r19, Y+4	; 0x04
     fac:	22 30       	cpi	r18, 0x02	; 2
     fae:	31 05       	cpc	r19, r1
     fb0:	a1 f0       	breq	.+40     	; 0xfda <EXTI_enum_EXTI_Disable+0x5c>
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	b9 f4       	brne	.+46     	; 0xfe8 <EXTI_enum_EXTI_Disable+0x6a>
     case EXTI_u8_INT0 :
    	 /* Disable EXTI0 >>> PIC */
    	   CLR_BIT(EXTI_u8_GICR_REG  ,EXTI0_u8_PIN6  );
     fba:	ab e5       	ldi	r26, 0x5B	; 91
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	eb e5       	ldi	r30, 0x5B	; 91
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 7b       	andi	r24, 0xBF	; 191
     fc6:	8c 93       	st	X, r24
     fc8:	0f c0       	rjmp	.+30     	; 0xfe8 <EXTI_enum_EXTI_Disable+0x6a>
    	 break;
     case EXTI_u8_INT1 :
       	 /* Disable EXTI1 >>> PIC */
          CLR_BIT(EXTI_u8_GICR_REG  ,EXTI1_u8_PIN7  );
     fca:	ab e5       	ldi	r26, 0x5B	; 91
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	eb e5       	ldi	r30, 0x5B	; 91
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8f 77       	andi	r24, 0x7F	; 127
     fd6:	8c 93       	st	X, r24
     fd8:	07 c0       	rjmp	.+14     	; 0xfe8 <EXTI_enum_EXTI_Disable+0x6a>
       	 break;
     case EXTI_u8_INT2 :
         /* Disable EXTI2 >>> PIC */
         CLR_BIT(EXTI_u8_GICR_REG  ,EXTI2_u8_PIN5  );
     fda:	ab e5       	ldi	r26, 0x5B	; 91
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	eb e5       	ldi	r30, 0x5B	; 91
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8f 7d       	andi	r24, 0xDF	; 223
     fe6:	8c 93       	st	X, r24
      	 break;
     }
     }
	 return Local_enu_Erorr_State;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <EXTI_enum_Set_Call_Back>:


ES_t EXTI_enum_Set_Call_Back( u8 Copy_u8_EXTI_Index,void(*Copy_u8_EXTI_pf)(void)){
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	00 d0       	rcall	.+0      	; 0xffe <EXTI_enum_Set_Call_Back+0x6>
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <EXTI_enum_Set_Call_Back+0x8>
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	8a 83       	std	Y+2, r24	; 0x02
    1006:	7c 83       	std	Y+4, r23	; 0x04
    1008:	6b 83       	std	Y+3, r22	; 0x03
	 ES_t Local_enu_Erorr_State = ES_OK ;
    100a:	19 82       	std	Y+1, r1	; 0x01
if((Copy_u8_EXTI_Index<=EXTI_u8_INT2)&& Copy_u8_EXTI_pf!=NULL){
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	88 f4       	brcc	.+34     	; 0x1034 <EXTI_enum_Set_Call_Back+0x3c>
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	69 f0       	breq	.+26     	; 0x1034 <EXTI_enum_Set_Call_Back+0x3c>
	EXTI_Apf_EXTI [Copy_u8_EXTI_Index]  =  Copy_u8_EXTI_pf;
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	fc 01       	movw	r30, r24
    1026:	e0 5f       	subi	r30, 0xF0	; 240
    1028:	fe 4f       	sbci	r31, 0xFE	; 254
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	80 83       	st	Z, r24
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <EXTI_enum_Set_Call_Back+0x40>
}
else{
	Local_enu_Erorr_State = ES_NOK ;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	89 83       	std	Y+1, r24	; 0x01
}
return Local_enu_Erorr_State;
    1038:	89 81       	ldd	r24, Y+1	; 0x01
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <__vector_1>:

//prototype FOR ISR EXTI0
void __vector_1(void)        __attribute__((signal));
void __vector_1(void) {
    1048:	1f 92       	push	r1
    104a:	0f 92       	push	r0
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	0f 92       	push	r0
    1050:	11 24       	eor	r1, r1
    1052:	2f 93       	push	r18
    1054:	3f 93       	push	r19
    1056:	4f 93       	push	r20
    1058:	5f 93       	push	r21
    105a:	6f 93       	push	r22
    105c:	7f 93       	push	r23
    105e:	8f 93       	push	r24
    1060:	9f 93       	push	r25
    1062:	af 93       	push	r26
    1064:	bf 93       	push	r27
    1066:	ef 93       	push	r30
    1068:	ff 93       	push	r31
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_Apf_EXTI[EXTI_u8_INT0]!= NULL){
    1072:	80 91 10 01 	lds	r24, 0x0110
    1076:	90 91 11 01 	lds	r25, 0x0111
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	29 f0       	breq	.+10     	; 0x1088 <__vector_1+0x40>
	EXTI_Apf_EXTI[EXTI_u8_INT0]();
    107e:	e0 91 10 01 	lds	r30, 0x0110
    1082:	f0 91 11 01 	lds	r31, 0x0111
    1086:	09 95       	icall
	}
}
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <__vector_2>:
//prototype FOR ISR EXTI1
void __vector_2(void)        __attribute__((signal));
void __vector_2(void) {
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	7f 93       	push	r23
    10c4:	8f 93       	push	r24
    10c6:	9f 93       	push	r25
    10c8:	af 93       	push	r26
    10ca:	bf 93       	push	r27
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_Apf_EXTI[EXTI_u8_INT1]!= NULL){
    10d8:	80 91 12 01 	lds	r24, 0x0112
    10dc:	90 91 13 01 	lds	r25, 0x0113
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	29 f0       	breq	.+10     	; 0x10ee <__vector_2+0x40>
		EXTI_Apf_EXTI[EXTI_u8_INT1]();
    10e4:	e0 91 12 01 	lds	r30, 0x0112
    10e8:	f0 91 13 01 	lds	r31, 0x0113
    10ec:	09 95       	icall
		}

}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	ff 91       	pop	r31
    10f4:	ef 91       	pop	r30
    10f6:	bf 91       	pop	r27
    10f8:	af 91       	pop	r26
    10fa:	9f 91       	pop	r25
    10fc:	8f 91       	pop	r24
    10fe:	7f 91       	pop	r23
    1100:	6f 91       	pop	r22
    1102:	5f 91       	pop	r21
    1104:	4f 91       	pop	r20
    1106:	3f 91       	pop	r19
    1108:	2f 91       	pop	r18
    110a:	0f 90       	pop	r0
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	0f 90       	pop	r0
    1110:	1f 90       	pop	r1
    1112:	18 95       	reti

00001114 <__vector_3>:
//prototype FOR ISR EXTI2
void __vector_3(void)        __attribute__((signal));
void __vector_3(void) {
    1114:	1f 92       	push	r1
    1116:	0f 92       	push	r0
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	0f 92       	push	r0
    111c:	11 24       	eor	r1, r1
    111e:	2f 93       	push	r18
    1120:	3f 93       	push	r19
    1122:	4f 93       	push	r20
    1124:	5f 93       	push	r21
    1126:	6f 93       	push	r22
    1128:	7f 93       	push	r23
    112a:	8f 93       	push	r24
    112c:	9f 93       	push	r25
    112e:	af 93       	push	r26
    1130:	bf 93       	push	r27
    1132:	ef 93       	push	r30
    1134:	ff 93       	push	r31
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_Apf_EXTI[EXTI_u8_INT2]!= NULL){
    113e:	80 91 14 01 	lds	r24, 0x0114
    1142:	90 91 15 01 	lds	r25, 0x0115
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	29 f0       	breq	.+10     	; 0x1154 <__vector_3+0x40>
		EXTI_Apf_EXTI[EXTI_u8_INT2]();
    114a:	e0 91 14 01 	lds	r30, 0x0114
    114e:	f0 91 15 01 	lds	r31, 0x0115
    1152:	09 95       	icall
		}

}
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	ff 91       	pop	r31
    115a:	ef 91       	pop	r30
    115c:	bf 91       	pop	r27
    115e:	af 91       	pop	r26
    1160:	9f 91       	pop	r25
    1162:	8f 91       	pop	r24
    1164:	7f 91       	pop	r23
    1166:	6f 91       	pop	r22
    1168:	5f 91       	pop	r21
    116a:	4f 91       	pop	r20
    116c:	3f 91       	pop	r19
    116e:	2f 91       	pop	r18
    1170:	0f 90       	pop	r0
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	0f 90       	pop	r0
    1176:	1f 90       	pop	r1
    1178:	18 95       	reti

0000117a <DIO_voidInit>:
//MCAL Layer
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidInit(void){
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = CONC(DIO_U8_PA7_INTIAL_DIRECTION, DIO_U8_PA6_INTIAL_DIRECTION, DIO_U8_PA5_INTIAL_DIRECTION, DIO_U8_PA4_INTIAL_DIRECTION,
    1182:	ea e3       	ldi	r30, 0x3A	; 58
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8f e0       	ldi	r24, 0x0F	; 15
    1188:	80 83       	st	Z, r24
		                   DIO_U8_PA3_INTIAL_DIRECTION, DIO_U8_PA2_INTIAL_DIRECTION, DIO_U8_PA1_INTIAL_DIRECTION, DIO_U8_PA0_INTIAL_DIRECTION);
		                 			
	DIO_u8_DDRB_REG = CONC(DIO_U8_PB7_INTIAL_DIRECTION, DIO_U8_PB6_INTIAL_DIRECTION, DIO_U8_PB5_INTIAL_DIRECTION, DIO_U8_PB4_INTIAL_DIRECTION,
    118a:	e7 e3       	ldi	r30, 0x37	; 55
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	87 e0       	ldi	r24, 0x07	; 7
    1190:	80 83       	st	Z, r24
				           DIO_U8_PB3_INTIAL_DIRECTION, DIO_U8_PB2_INTIAL_DIRECTION, DIO_U8_PB1_INTIAL_DIRECTION, DIO_U8_PB0_INTIAL_DIRECTION);
					                                                                                                                      
	DIO_u8_DDRC_REG = CONC(DIO_U8_PC7_INTIAL_DIRECTION, DIO_U8_PC6_INTIAL_DIRECTION, DIO_U8_PC5_INTIAL_DIRECTION, DIO_U8_PC4_INTIAL_DIRECTION,
    1192:	e4 e3       	ldi	r30, 0x34	; 52
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	80 83       	st	Z, r24
		                   DIO_U8_PC3_INTIAL_DIRECTION, DIO_U8_PC2_INTIAL_DIRECTION, DIO_U8_PC1_INTIAL_DIRECTION, DIO_U8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = CONC(DIO_U8_PD7_INTIAL_DIRECTION, DIO_U8_PD6_INTIAL_DIRECTION, DIO_U8_PD5_INTIAL_DIRECTION, DIO_U8_PD4_INTIAL_DIRECTION,
    119a:	e1 e3       	ldi	r30, 0x31	; 49
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	10 82       	st	Z, r1
				           DIO_U8_PD3_INTIAL_DIRECTION, DIO_U8_PD2_INTIAL_DIRECTION, DIO_U8_PD1_INTIAL_DIRECTION, DIO_U8_PD0_INTIAL_DIRECTION);

	DIO_u8_PORTA_REG = CONC(DIO_U8_PA7_INTIAL_VALUE, DIO_U8_PA6_INTIAL_VALUE, DIO_U8_PA5_INTIAL_VALUE, DIO_U8_PA4_INTIAL_VALUE,
    11a0:	eb e3       	ldi	r30, 0x3B	; 59
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	80 83       	st	Z, r24
						    DIO_U8_PA3_INTIAL_VALUE, DIO_U8_PA2_INTIAL_VALUE, DIO_U8_PA1_INTIAL_VALUE, DIO_U8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = CONC(DIO_U8_PB7_INTIAL_VALUE, DIO_U8_PB6_INTIAL_VALUE, DIO_U8_PB5_INTIAL_VALUE, DIO_U8_PB4_INTIAL_VALUE,
    11a8:	e8 e3       	ldi	r30, 0x38	; 56
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	10 82       	st	Z, r1
						   	DIO_U8_PB3_INTIAL_VALUE, DIO_U8_PB2_INTIAL_VALUE, DIO_U8_PB1_INTIAL_VALUE, DIO_U8_PB0_INTIAL_VALUE);
												 
    DIO_u8_PORTC_REG = CONC(DIO_U8_PC7_INTIAL_VALUE, DIO_U8_PC6_INTIAL_VALUE, DIO_U8_PC5_INTIAL_VALUE, DIO_U8_PC4_INTIAL_VALUE,
    11ae:	e5 e3       	ldi	r30, 0x35	; 53
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	10 82       	st	Z, r1
					        DIO_U8_PC3_INTIAL_VALUE, DIO_U8_PC2_INTIAL_VALUE, DIO_U8_PC1_INTIAL_VALUE, DIO_U8_PC0_INTIAL_VALUE);
																		   
    DIO_u8_PORTD_REG = CONC(DIO_U8_PD7_INTIAL_VALUE, DIO_U8_PD6_INTIAL_VALUE, DIO_U8_PD5_INTIAL_VALUE, DIO_U8_PD4_INTIAL_VALUE,
    11b4:	e2 e3       	ldi	r30, 0x32	; 50
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	10 82       	st	Z, r1
						    DIO_U8_PD3_INTIAL_VALUE, DIO_U8_PD2_INTIAL_VALUE, DIO_U8_PD1_INTIAL_VALUE, DIO_U8_PD0_INTIAL_VALUE);
    }
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <DIO_u8_Set_Pin_Direction>:

u8 DIO_u8_Set_Pin_Direction  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Direction ){
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	2e 97       	sbiw	r28, 0x0e	; 14
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	8a 83       	std	Y+2, r24	; 0x02
    11d6:	6b 83       	std	Y+3, r22	; 0x03
    11d8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
    11da:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Direction == DIO_u8_INTIAL_INPUT)||(Copy_u8_Pin_Direction == DIO_u8_INTIAL_OUTPUT)))
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <DIO_u8_Set_Pin_Direction+0x24>
    11e2:	15 c1       	rjmp	.+554    	; 0x140e <DIO_u8_Set_Pin_Direction+0x24e>
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	88 30       	cpi	r24, 0x08	; 8
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <DIO_u8_Set_Pin_Direction+0x2c>
    11ea:	11 c1       	rjmp	.+546    	; 0x140e <DIO_u8_Set_Pin_Direction+0x24e>
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	88 23       	and	r24, r24
    11f0:	21 f0       	breq	.+8      	; 0x11fa <DIO_u8_Set_Pin_Direction+0x3a>
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	09 f0       	breq	.+2      	; 0x11fa <DIO_u8_Set_Pin_Direction+0x3a>
    11f8:	0a c1       	rjmp	.+532    	; 0x140e <DIO_u8_Set_Pin_Direction+0x24e>
	{
        switch (Copy_u8_Port_ID)
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3e 87       	std	Y+14, r19	; 0x0e
    1202:	2d 87       	std	Y+13, r18	; 0x0d
    1204:	8d 85       	ldd	r24, Y+13	; 0x0d
    1206:	9e 85       	ldd	r25, Y+14	; 0x0e
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <DIO_u8_Set_Pin_Direction+0x50>
    120e:	51 c0       	rjmp	.+162    	; 0x12b2 <DIO_u8_Set_Pin_Direction+0xf2>
    1210:	2d 85       	ldd	r18, Y+13	; 0x0d
    1212:	3e 85       	ldd	r19, Y+14	; 0x0e
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	2c f4       	brge	.+10     	; 0x1224 <DIO_u8_Set_Pin_Direction+0x64>
    121a:	8d 85       	ldd	r24, Y+13	; 0x0d
    121c:	9e 85       	ldd	r25, Y+14	; 0x0e
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	71 f0       	breq	.+28     	; 0x123e <DIO_u8_Set_Pin_Direction+0x7e>
    1222:	f7 c0       	rjmp	.+494    	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>
    1224:	2d 85       	ldd	r18, Y+13	; 0x0d
    1226:	3e 85       	ldd	r19, Y+14	; 0x0e
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <DIO_u8_Set_Pin_Direction+0x70>
    122e:	7b c0       	rjmp	.+246    	; 0x1326 <DIO_u8_Set_Pin_Direction+0x166>
    1230:	8d 85       	ldd	r24, Y+13	; 0x0d
    1232:	9e 85       	ldd	r25, Y+14	; 0x0e
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <DIO_u8_Set_Pin_Direction+0x7c>
    123a:	af c0       	rjmp	.+350    	; 0x139a <DIO_u8_Set_Pin_Direction+0x1da>
    123c:	ea c0       	rjmp	.+468    	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>
        {
               case DIO_u8_PORTA:
            	   switch (Copy_u8_Pin_Direction)
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3c 87       	std	Y+12, r19	; 0x0c
    1246:	2b 87       	std	Y+11, r18	; 0x0b
    1248:	8b 85       	ldd	r24, Y+11	; 0x0b
    124a:	9c 85       	ldd	r25, Y+12	; 0x0c
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	c9 f0       	breq	.+50     	; 0x1282 <DIO_u8_Set_Pin_Direction+0xc2>
    1250:	2b 85       	ldd	r18, Y+11	; 0x0b
    1252:	3c 85       	ldd	r19, Y+12	; 0x0c
    1254:	21 30       	cpi	r18, 0x01	; 1
    1256:	31 05       	cpc	r19, r1
    1258:	49 f5       	brne	.+82     	; 0x12ac <DIO_u8_Set_Pin_Direction+0xec>
            	   {
                    	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
    125a:	aa e3       	ldi	r26, 0x3A	; 58
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	ea e3       	ldi	r30, 0x3A	; 58
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_u8_Set_Pin_Direction+0xb8>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_u8_Set_Pin_Direction+0xb4>
    127c:	84 2b       	or	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	c8 c0       	rjmp	.+400    	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>
                    	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
    1282:	aa e3       	ldi	r26, 0x3A	; 58
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	ea e3       	ldi	r30, 0x3A	; 58
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_u8_Set_Pin_Direction+0xe0>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_u8_Set_Pin_Direction+0xdc>
    12a4:	80 95       	com	r24
    12a6:	84 23       	and	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	b3 c0       	rjmp	.+358    	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	b0 c0       	rjmp	.+352    	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>

            	   }
                  break;
               case DIO_u8_PORTB:
             	   switch (Copy_u8_Pin_Direction)
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3a 87       	std	Y+10, r19	; 0x0a
    12ba:	29 87       	std	Y+9, r18	; 0x09
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	c9 f0       	breq	.+50     	; 0x12f6 <DIO_u8_Set_Pin_Direction+0x136>
    12c4:	29 85       	ldd	r18, Y+9	; 0x09
    12c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    12c8:	21 30       	cpi	r18, 0x01	; 1
    12ca:	31 05       	cpc	r19, r1
    12cc:	49 f5       	brne	.+82     	; 0x1320 <DIO_u8_Set_Pin_Direction+0x160>
             	   {
                     	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    12ce:	a7 e3       	ldi	r26, 0x37	; 55
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e7 e3       	ldi	r30, 0x37	; 55
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_u8_Set_Pin_Direction+0x12c>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_u8_Set_Pin_Direction+0x128>
    12f0:	84 2b       	or	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	8e c0       	rjmp	.+284    	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>
                     	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    12f6:	a7 e3       	ldi	r26, 0x37	; 55
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e7 e3       	ldi	r30, 0x37	; 55
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_u8_Set_Pin_Direction+0x154>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <DIO_u8_Set_Pin_Direction+0x150>
    1318:	80 95       	com	r24
    131a:	84 23       	and	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	79 c0       	rjmp	.+242    	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	76 c0       	rjmp	.+236    	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>

             	   }
                   break;
               case DIO_u8_PORTC:
                   switch (Copy_u8_Pin_Direction)
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	38 87       	std	Y+8, r19	; 0x08
    132e:	2f 83       	std	Y+7, r18	; 0x07
    1330:	8f 81       	ldd	r24, Y+7	; 0x07
    1332:	98 85       	ldd	r25, Y+8	; 0x08
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	c9 f0       	breq	.+50     	; 0x136a <DIO_u8_Set_Pin_Direction+0x1aa>
    1338:	2f 81       	ldd	r18, Y+7	; 0x07
    133a:	38 85       	ldd	r19, Y+8	; 0x08
    133c:	21 30       	cpi	r18, 0x01	; 1
    133e:	31 05       	cpc	r19, r1
    1340:	49 f5       	brne	.+82     	; 0x1394 <DIO_u8_Set_Pin_Direction+0x1d4>
                 	   {
                         	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    1342:	a4 e3       	ldi	r26, 0x34	; 52
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e4 e3       	ldi	r30, 0x34	; 52
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_u8_Set_Pin_Direction+0x1a0>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_u8_Set_Pin_Direction+0x19c>
    1364:	84 2b       	or	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	54 c0       	rjmp	.+168    	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>
                         	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    136a:	a4 e3       	ldi	r26, 0x34	; 52
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e4 e3       	ldi	r30, 0x34	; 52
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_u8_Set_Pin_Direction+0x1c8>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_u8_Set_Pin_Direction+0x1c4>
    138c:	80 95       	com	r24
    138e:	84 23       	and	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	3f c0       	rjmp	.+126    	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>
  			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	3c c0       	rjmp	.+120    	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>

                 	   }
                       break;

               case DIO_u8_PORTD:
                    switch (Copy_u8_Pin_Direction)
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3e 83       	std	Y+6, r19	; 0x06
    13a2:	2d 83       	std	Y+5, r18	; 0x05
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	c9 f0       	breq	.+50     	; 0x13de <DIO_u8_Set_Pin_Direction+0x21e>
    13ac:	2d 81       	ldd	r18, Y+5	; 0x05
    13ae:	3e 81       	ldd	r19, Y+6	; 0x06
    13b0:	21 30       	cpi	r18, 0x01	; 1
    13b2:	31 05       	cpc	r19, r1
    13b4:	49 f5       	brne	.+82     	; 0x1408 <DIO_u8_Set_Pin_Direction+0x248>
                     	   {
                             	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    13b6:	a1 e3       	ldi	r26, 0x31	; 49
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e1 e3       	ldi	r30, 0x31	; 49
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <DIO_u8_Set_Pin_Direction+0x214>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <DIO_u8_Set_Pin_Direction+0x210>
    13d8:	84 2b       	or	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	1a c0       	rjmp	.+52     	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>
                             	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    13de:	a1 e3       	ldi	r26, 0x31	; 49
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e1 e3       	ldi	r30, 0x31	; 49
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 2e       	mov	r0, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <DIO_u8_Set_Pin_Direction+0x23c>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <DIO_u8_Set_Pin_Direction+0x238>
    1400:	80 95       	com	r24
    1402:	84 23       	and	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	05 c0       	rjmp	.+10     	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>
      			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_u8_Set_Pin_Direction+0x252>
                     	   }
                           break;
        }
	}
	else {
		Local_u8_Erorr_State = ES_NOK ;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_Erorr_State ;
    1412:	89 81       	ldd	r24, Y+1	; 0x01
}
    1414:	2e 96       	adiw	r28, 0x0e	; 14
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <DIO_u8_Set_Pin_Value>:

u8 DIO_u8_Set_Pin_Value  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Value ){
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	2e 97       	sbiw	r28, 0x0e	; 14
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	8a 83       	std	Y+2, r24	; 0x02
    143c:	6b 83       	std	Y+3, r22	; 0x03
    143e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
    1440:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Value == DIO_u8_INPUT)||(Copy_u8_Pin_Value == DIO_u8_OUTPUT)))
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	84 30       	cpi	r24, 0x04	; 4
    1446:	08 f0       	brcs	.+2      	; 0x144a <DIO_u8_Set_Pin_Value+0x24>
    1448:	15 c1       	rjmp	.+554    	; 0x1674 <DIO_u8_Set_Pin_Value+0x24e>
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	88 30       	cpi	r24, 0x08	; 8
    144e:	08 f0       	brcs	.+2      	; 0x1452 <DIO_u8_Set_Pin_Value+0x2c>
    1450:	11 c1       	rjmp	.+546    	; 0x1674 <DIO_u8_Set_Pin_Value+0x24e>
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	88 23       	and	r24, r24
    1456:	21 f0       	breq	.+8      	; 0x1460 <DIO_u8_Set_Pin_Value+0x3a>
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	09 f0       	breq	.+2      	; 0x1460 <DIO_u8_Set_Pin_Value+0x3a>
    145e:	0a c1       	rjmp	.+532    	; 0x1674 <DIO_u8_Set_Pin_Value+0x24e>
	{
		switch (Copy_u8_Port_ID)
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3e 87       	std	Y+14, r19	; 0x0e
    1468:	2d 87       	std	Y+13, r18	; 0x0d
    146a:	8d 85       	ldd	r24, Y+13	; 0x0d
    146c:	9e 85       	ldd	r25, Y+14	; 0x0e
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	91 05       	cpc	r25, r1
    1472:	09 f4       	brne	.+2      	; 0x1476 <DIO_u8_Set_Pin_Value+0x50>
    1474:	51 c0       	rjmp	.+162    	; 0x1518 <DIO_u8_Set_Pin_Value+0xf2>
    1476:	2d 85       	ldd	r18, Y+13	; 0x0d
    1478:	3e 85       	ldd	r19, Y+14	; 0x0e
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	2c f4       	brge	.+10     	; 0x148a <DIO_u8_Set_Pin_Value+0x64>
    1480:	8d 85       	ldd	r24, Y+13	; 0x0d
    1482:	9e 85       	ldd	r25, Y+14	; 0x0e
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	71 f0       	breq	.+28     	; 0x14a4 <DIO_u8_Set_Pin_Value+0x7e>
    1488:	f7 c0       	rjmp	.+494    	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>
    148a:	2d 85       	ldd	r18, Y+13	; 0x0d
    148c:	3e 85       	ldd	r19, Y+14	; 0x0e
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	09 f4       	brne	.+2      	; 0x1496 <DIO_u8_Set_Pin_Value+0x70>
    1494:	7b c0       	rjmp	.+246    	; 0x158c <DIO_u8_Set_Pin_Value+0x166>
    1496:	8d 85       	ldd	r24, Y+13	; 0x0d
    1498:	9e 85       	ldd	r25, Y+14	; 0x0e
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	91 05       	cpc	r25, r1
    149e:	09 f4       	brne	.+2      	; 0x14a2 <DIO_u8_Set_Pin_Value+0x7c>
    14a0:	af c0       	rjmp	.+350    	; 0x1600 <DIO_u8_Set_Pin_Value+0x1da>
    14a2:	ea c0       	rjmp	.+468    	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Pin_Value)
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	3c 87       	std	Y+12, r19	; 0x0c
    14ac:	2b 87       	std	Y+11, r18	; 0x0b
    14ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	c9 f0       	breq	.+50     	; 0x14e8 <DIO_u8_Set_Pin_Value+0xc2>
    14b6:	2b 85       	ldd	r18, Y+11	; 0x0b
    14b8:	3c 85       	ldd	r19, Y+12	; 0x0c
    14ba:	21 30       	cpi	r18, 0x01	; 1
    14bc:	31 05       	cpc	r19, r1
    14be:	49 f5       	brne	.+82     	; 0x1512 <DIO_u8_Set_Pin_Value+0xec>
			{
			     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    14c0:	ab e3       	ldi	r26, 0x3B	; 59
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	eb e3       	ldi	r30, 0x3B	; 59
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <DIO_u8_Set_Pin_Value+0xb8>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <DIO_u8_Set_Pin_Value+0xb4>
    14e2:	84 2b       	or	r24, r20
    14e4:	8c 93       	st	X, r24
    14e6:	c8 c0       	rjmp	.+400    	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>
           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    14e8:	ab e3       	ldi	r26, 0x3B	; 59
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	eb e3       	ldi	r30, 0x3B	; 59
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <DIO_u8_Set_Pin_Value+0xe0>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <DIO_u8_Set_Pin_Value+0xdc>
    150a:	80 95       	com	r24
    150c:	84 23       	and	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	b3 c0       	rjmp	.+358    	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>
           	     default :Local_u8_Erorr_State = ES_NOK ;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	b0 c0       	rjmp	.+352    	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>

			}
			break;
		case DIO_u8_PORTB :
			switch (Copy_u8_Pin_Value)
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	3a 87       	std	Y+10, r19	; 0x0a
    1520:	29 87       	std	Y+9, r18	; 0x09
    1522:	89 85       	ldd	r24, Y+9	; 0x09
    1524:	9a 85       	ldd	r25, Y+10	; 0x0a
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	c9 f0       	breq	.+50     	; 0x155c <DIO_u8_Set_Pin_Value+0x136>
    152a:	29 85       	ldd	r18, Y+9	; 0x09
    152c:	3a 85       	ldd	r19, Y+10	; 0x0a
    152e:	21 30       	cpi	r18, 0x01	; 1
    1530:	31 05       	cpc	r19, r1
    1532:	49 f5       	brne	.+82     	; 0x1586 <DIO_u8_Set_Pin_Value+0x160>
				{
				     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    1534:	a8 e3       	ldi	r26, 0x38	; 56
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e8 e3       	ldi	r30, 0x38	; 56
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_u8_Set_Pin_Value+0x12c>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <DIO_u8_Set_Pin_Value+0x128>
    1556:	84 2b       	or	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	8e c0       	rjmp	.+284    	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>
	           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    155c:	a8 e3       	ldi	r26, 0x38	; 56
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e8 e3       	ldi	r30, 0x38	; 56
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <DIO_u8_Set_Pin_Value+0x154>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <DIO_u8_Set_Pin_Value+0x150>
    157e:	80 95       	com	r24
    1580:	84 23       	and	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	79 c0       	rjmp	.+242    	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>
	           	     default :Local_u8_Erorr_State = ES_NOK ;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	76 c0       	rjmp	.+236    	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>

				}
	     	break;
		case DIO_u8_PORTC :
			switch (Copy_u8_Pin_Value)
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	38 87       	std	Y+8, r19	; 0x08
    1594:	2f 83       	std	Y+7, r18	; 0x07
    1596:	8f 81       	ldd	r24, Y+7	; 0x07
    1598:	98 85       	ldd	r25, Y+8	; 0x08
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	c9 f0       	breq	.+50     	; 0x15d0 <DIO_u8_Set_Pin_Value+0x1aa>
    159e:	2f 81       	ldd	r18, Y+7	; 0x07
    15a0:	38 85       	ldd	r19, Y+8	; 0x08
    15a2:	21 30       	cpi	r18, 0x01	; 1
    15a4:	31 05       	cpc	r19, r1
    15a6:	49 f5       	brne	.+82     	; 0x15fa <DIO_u8_Set_Pin_Value+0x1d4>
					{
					     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    15a8:	a5 e3       	ldi	r26, 0x35	; 53
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e5 e3       	ldi	r30, 0x35	; 53
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_u8_Set_Pin_Value+0x1a0>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_u8_Set_Pin_Value+0x19c>
    15ca:	84 2b       	or	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	54 c0       	rjmp	.+168    	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>
		           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    15d0:	a5 e3       	ldi	r26, 0x35	; 53
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e3       	ldi	r30, 0x35	; 53
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_u8_Set_Pin_Value+0x1c8>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_u8_Set_Pin_Value+0x1c4>
    15f2:	80 95       	com	r24
    15f4:	84 23       	and	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	3f c0       	rjmp	.+126    	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>
		           	     default :Local_u8_Erorr_State = ES_NOK ;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	3c c0       	rjmp	.+120    	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>

					}
		   break;
		case DIO_u8_PORTD :
			switch (Copy_u8_Pin_Value)
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	3e 83       	std	Y+6, r19	; 0x06
    1608:	2d 83       	std	Y+5, r18	; 0x05
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	c9 f0       	breq	.+50     	; 0x1644 <DIO_u8_Set_Pin_Value+0x21e>
    1612:	2d 81       	ldd	r18, Y+5	; 0x05
    1614:	3e 81       	ldd	r19, Y+6	; 0x06
    1616:	21 30       	cpi	r18, 0x01	; 1
    1618:	31 05       	cpc	r19, r1
    161a:	49 f5       	brne	.+82     	; 0x166e <DIO_u8_Set_Pin_Value+0x248>
						{
						     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    161c:	a2 e3       	ldi	r26, 0x32	; 50
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e2 e3       	ldi	r30, 0x32	; 50
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <DIO_u8_Set_Pin_Value+0x214>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <DIO_u8_Set_Pin_Value+0x210>
    163e:	84 2b       	or	r24, r20
    1640:	8c 93       	st	X, r24
    1642:	1a c0       	rjmp	.+52     	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>
			           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    1644:	a2 e3       	ldi	r26, 0x32	; 50
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e2 e3       	ldi	r30, 0x32	; 50
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_u8_Set_Pin_Value+0x23c>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_u8_Set_Pin_Value+0x238>
    1666:	80 95       	com	r24
    1668:	84 23       	and	r24, r20
    166a:	8c 93       	st	X, r24
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_u8_Set_Pin_Value+0x252>
						}
			break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8_Erorr_State ;
    1678:	89 81       	ldd	r24, Y+1	; 0x01
}
    167a:	2e 96       	adiw	r28, 0x0e	; 14
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <DIO_u8_Get_Pin_Value>:

u8 DIO_u8_Get_Pin_Value      (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 *Copy_u8_Returned_Pin_Value ){
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	28 97       	sbiw	r28, 0x08	; 8
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	8b 83       	std	Y+3, r24	; 0x03
    16a2:	6c 83       	std	Y+4, r22	; 0x04
    16a4:	5e 83       	std	Y+6, r21	; 0x06
    16a6:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8_Erorr_State = ES_OK ;
    16a8:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Pin_Value ;
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && (Copy_u8_Returned_Pin_Value != NULL)){
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	84 30       	cpi	r24, 0x04	; 4
    16ae:	08 f0       	brcs	.+2      	; 0x16b2 <DIO_u8_Get_Pin_Value+0x26>
    16b0:	9e c0       	rjmp	.+316    	; 0x17ee <DIO_u8_Get_Pin_Value+0x162>
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04
    16b4:	88 30       	cpi	r24, 0x08	; 8
    16b6:	08 f0       	brcs	.+2      	; 0x16ba <DIO_u8_Get_Pin_Value+0x2e>
    16b8:	9a c0       	rjmp	.+308    	; 0x17ee <DIO_u8_Get_Pin_Value+0x162>
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <DIO_u8_Get_Pin_Value+0x38>
    16c2:	95 c0       	rjmp	.+298    	; 0x17ee <DIO_u8_Get_Pin_Value+0x162>
		switch (Copy_u8_Port_ID)
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	38 87       	std	Y+8, r19	; 0x08
    16cc:	2f 83       	std	Y+7, r18	; 0x07
    16ce:	8f 81       	ldd	r24, Y+7	; 0x07
    16d0:	98 85       	ldd	r25, Y+8	; 0x08
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	91 05       	cpc	r25, r1
    16d6:	a1 f1       	breq	.+104    	; 0x1740 <DIO_u8_Get_Pin_Value+0xb4>
    16d8:	2f 81       	ldd	r18, Y+7	; 0x07
    16da:	38 85       	ldd	r19, Y+8	; 0x08
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	31 05       	cpc	r19, r1
    16e0:	2c f4       	brge	.+10     	; 0x16ec <DIO_u8_Get_Pin_Value+0x60>
    16e2:	8f 81       	ldd	r24, Y+7	; 0x07
    16e4:	98 85       	ldd	r25, Y+8	; 0x08
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	71 f0       	breq	.+28     	; 0x1706 <DIO_u8_Get_Pin_Value+0x7a>
    16ea:	83 c0       	rjmp	.+262    	; 0x17f2 <DIO_u8_Get_Pin_Value+0x166>
    16ec:	2f 81       	ldd	r18, Y+7	; 0x07
    16ee:	38 85       	ldd	r19, Y+8	; 0x08
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <DIO_u8_Get_Pin_Value+0x6c>
    16f6:	41 c0       	rjmp	.+130    	; 0x177a <DIO_u8_Get_Pin_Value+0xee>
    16f8:	8f 81       	ldd	r24, Y+7	; 0x07
    16fa:	98 85       	ldd	r25, Y+8	; 0x08
    16fc:	83 30       	cpi	r24, 0x03	; 3
    16fe:	91 05       	cpc	r25, r1
    1700:	09 f4       	brne	.+2      	; 0x1704 <DIO_u8_Get_Pin_Value+0x78>
    1702:	58 c0       	rjmp	.+176    	; 0x17b4 <DIO_u8_Get_Pin_Value+0x128>
    1704:	76 c0       	rjmp	.+236    	; 0x17f2 <DIO_u8_Get_Pin_Value+0x166>
		{
		     case DIO_u8_PORTA :
		      Local_u8_Pin_Value = GET_BIT (DIO_u8_PINA_REG, Copy_u8_Pin_ID) ;
    1706:	e9 e3       	ldi	r30, 0x39	; 57
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <DIO_u8_Get_Pin_Value+0x94>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <DIO_u8_Get_Pin_Value+0x90>
    1724:	84 23       	and	r24, r20
    1726:	89 83       	std	Y+1, r24	; 0x01

		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	88 23       	and	r24, r24
    172c:	21 f4       	brne	.+8      	; 0x1736 <DIO_u8_Get_Pin_Value+0xaa>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    172e:	ed 81       	ldd	r30, Y+5	; 0x05
    1730:	fe 81       	ldd	r31, Y+6	; 0x06
    1732:	10 82       	st	Z, r1
    1734:	5e c0       	rjmp	.+188    	; 0x17f2 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		    	 else
		    	 {
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1736:	ed 81       	ldd	r30, Y+5	; 0x05
    1738:	fe 81       	ldd	r31, Y+6	; 0x06
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	80 83       	st	Z, r24
    173e:	59 c0       	rjmp	.+178    	; 0x17f2 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		     break;
		     case DIO_u8_PORTB :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINB_REG,Copy_u8_Pin_ID ) ;
    1740:	e6 e3       	ldi	r30, 0x36	; 54
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_u8_Get_Pin_Value+0xce>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_u8_Get_Pin_Value+0xca>
    175e:	84 23       	and	r24, r20
    1760:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	88 23       	and	r24, r24
    1766:	21 f4       	brne	.+8      	; 0x1770 <DIO_u8_Get_Pin_Value+0xe4>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    1768:	ed 81       	ldd	r30, Y+5	; 0x05
    176a:	fe 81       	ldd	r31, Y+6	; 0x06
    176c:	10 82       	st	Z, r1
    176e:	41 c0       	rjmp	.+130    	; 0x17f2 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1770:	ed 81       	ldd	r30, Y+5	; 0x05
    1772:	fe 81       	ldd	r31, Y+6	; 0x06
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	80 83       	st	Z, r24
    1778:	3c c0       	rjmp	.+120    	; 0x17f2 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTC :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINC_REG,Copy_u8_Pin_ID ) ;
    177a:	e3 e3       	ldi	r30, 0x33	; 51
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <DIO_u8_Get_Pin_Value+0x108>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <DIO_u8_Get_Pin_Value+0x104>
    1798:	84 23       	and	r24, r20
    179a:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	88 23       	and	r24, r24
    17a0:	21 f4       	brne	.+8      	; 0x17aa <DIO_u8_Get_Pin_Value+0x11e>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    17a2:	ed 81       	ldd	r30, Y+5	; 0x05
    17a4:	fe 81       	ldd	r31, Y+6	; 0x06
    17a6:	10 82       	st	Z, r1
    17a8:	24 c0       	rjmp	.+72     	; 0x17f2 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    17aa:	ed 81       	ldd	r30, Y+5	; 0x05
    17ac:	fe 81       	ldd	r31, Y+6	; 0x06
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	80 83       	st	Z, r24
    17b2:	1f c0       	rjmp	.+62     	; 0x17f2 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTD :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PIND_REG,Copy_u8_Pin_ID ) ;
    17b4:	e0 e3       	ldi	r30, 0x30	; 48
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	48 2f       	mov	r20, r24
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 2e       	mov	r0, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <DIO_u8_Get_Pin_Value+0x142>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	0a 94       	dec	r0
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <DIO_u8_Get_Pin_Value+0x13e>
    17d2:	84 23       	and	r24, r20
    17d4:	89 83       	std	Y+1, r24	; 0x01
		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	88 23       	and	r24, r24
    17da:	21 f4       	brne	.+8      	; 0x17e4 <DIO_u8_Get_Pin_Value+0x158>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    17dc:	ed 81       	ldd	r30, Y+5	; 0x05
    17de:	fe 81       	ldd	r31, Y+6	; 0x06
    17e0:	10 82       	st	Z, r1
    17e2:	07 c0       	rjmp	.+14     	; 0x17f2 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    17e4:	ed 81       	ldd	r30, Y+5	; 0x05
    17e6:	fe 81       	ldd	r31, Y+6	; 0x06
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	80 83       	st	Z, r24
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	8a 83       	std	Y+2, r24	; 0x02
		}
		return Local_u8_Erorr_State ;
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17f4:	28 96       	adiw	r28, 0x08	; 8
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <DIO_u8_Set_Port_Direction>:

u8 DIO_u8_Set_Port_Direction (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Direction ){
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	2d 97       	sbiw	r28, 0x0d	; 13
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	8a 83       	std	Y+2, r24	; 0x02
    181c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    181e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && ((Copy_u8_Port_Direction == DIO_u8_INPUT)||(Copy_u8_Port_Direction == DIO_u8_OUTPUT)))
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	84 30       	cpi	r24, 0x04	; 4
    1824:	08 f0       	brcs	.+2      	; 0x1828 <DIO_u8_Set_Port_Direction+0x22>
    1826:	87 c0       	rjmp	.+270    	; 0x1936 <DIO_u8_Set_Port_Direction+0x130>
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	88 23       	and	r24, r24
    182c:	21 f0       	breq	.+8      	; 0x1836 <DIO_u8_Set_Port_Direction+0x30>
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	09 f0       	breq	.+2      	; 0x1836 <DIO_u8_Set_Port_Direction+0x30>
    1834:	80 c0       	rjmp	.+256    	; 0x1936 <DIO_u8_Set_Port_Direction+0x130>
	{
		switch (Copy_u8_Port_ID)
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3d 87       	std	Y+13, r19	; 0x0d
    183e:	2c 87       	std	Y+12, r18	; 0x0c
    1840:	8c 85       	ldd	r24, Y+12	; 0x0c
    1842:	9d 85       	ldd	r25, Y+13	; 0x0d
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	91 05       	cpc	r25, r1
    1848:	71 f1       	breq	.+92     	; 0x18a6 <DIO_u8_Set_Port_Direction+0xa0>
    184a:	2c 85       	ldd	r18, Y+12	; 0x0c
    184c:	3d 85       	ldd	r19, Y+13	; 0x0d
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	2c f4       	brge	.+10     	; 0x185e <DIO_u8_Set_Port_Direction+0x58>
    1854:	8c 85       	ldd	r24, Y+12	; 0x0c
    1856:	9d 85       	ldd	r25, Y+13	; 0x0d
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	69 f0       	breq	.+26     	; 0x1876 <DIO_u8_Set_Port_Direction+0x70>
    185c:	69 c0       	rjmp	.+210    	; 0x1930 <DIO_u8_Set_Port_Direction+0x12a>
    185e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1860:	3d 85       	ldd	r19, Y+13	; 0x0d
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	b1 f1       	breq	.+108    	; 0x18d4 <DIO_u8_Set_Port_Direction+0xce>
    1868:	8c 85       	ldd	r24, Y+12	; 0x0c
    186a:	9d 85       	ldd	r25, Y+13	; 0x0d
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	91 05       	cpc	r25, r1
    1870:	09 f4       	brne	.+2      	; 0x1874 <DIO_u8_Set_Port_Direction+0x6e>
    1872:	47 c0       	rjmp	.+142    	; 0x1902 <DIO_u8_Set_Port_Direction+0xfc>
    1874:	5d c0       	rjmp	.+186    	; 0x1930 <DIO_u8_Set_Port_Direction+0x12a>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Port_Direction)
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	3b 87       	std	Y+11, r19	; 0x0b
    187e:	2a 87       	std	Y+10, r18	; 0x0a
    1880:	8a 85       	ldd	r24, Y+10	; 0x0a
    1882:	9b 85       	ldd	r25, Y+11	; 0x0b
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	59 f0       	breq	.+22     	; 0x189e <DIO_u8_Set_Port_Direction+0x98>
    1888:	2a 85       	ldd	r18, Y+10	; 0x0a
    188a:	3b 85       	ldd	r19, Y+11	; 0x0b
    188c:	21 30       	cpi	r18, 0x01	; 1
    188e:	31 05       	cpc	r19, r1
    1890:	09 f0       	breq	.+2      	; 0x1894 <DIO_u8_Set_Port_Direction+0x8e>
    1892:	53 c0       	rjmp	.+166    	; 0x193a <DIO_u8_Set_Port_Direction+0x134>
			{
			    case DIO_u8_OUTPUT : DIO_u8_PORTA_REG = 0xff;break;
    1894:	eb e3       	ldi	r30, 0x3B	; 59
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	80 83       	st	Z, r24
    189c:	4e c0       	rjmp	.+156    	; 0x193a <DIO_u8_Set_Port_Direction+0x134>
			    case DIO_u8_INPUT : DIO_u8_PORTA_REG = 0x00;break;
    189e:	eb e3       	ldi	r30, 0x3B	; 59
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	10 82       	st	Z, r1
    18a4:	4a c0       	rjmp	.+148    	; 0x193a <DIO_u8_Set_Port_Direction+0x134>
			}
			break;
			case DIO_u8_PORTB :
				switch (Copy_u8_Port_Direction)
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	39 87       	std	Y+9, r19	; 0x09
    18ae:	28 87       	std	Y+8, r18	; 0x08
    18b0:	88 85       	ldd	r24, Y+8	; 0x08
    18b2:	99 85       	ldd	r25, Y+9	; 0x09
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	51 f0       	breq	.+20     	; 0x18cc <DIO_u8_Set_Port_Direction+0xc6>
    18b8:	28 85       	ldd	r18, Y+8	; 0x08
    18ba:	39 85       	ldd	r19, Y+9	; 0x09
    18bc:	21 30       	cpi	r18, 0x01	; 1
    18be:	31 05       	cpc	r19, r1
    18c0:	e1 f5       	brne	.+120    	; 0x193a <DIO_u8_Set_Port_Direction+0x134>
				{
				    case DIO_u8_OUTPUT : DIO_u8_PORTB_REG = 0xff;break;
    18c2:	e8 e3       	ldi	r30, 0x38	; 56
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	8f ef       	ldi	r24, 0xFF	; 255
    18c8:	80 83       	st	Z, r24
    18ca:	37 c0       	rjmp	.+110    	; 0x193a <DIO_u8_Set_Port_Direction+0x134>
				    case DIO_u8_INPUT : DIO_u8_PORTB_REG = 0x00;break;
    18cc:	e8 e3       	ldi	r30, 0x38	; 56
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	10 82       	st	Z, r1
    18d2:	33 c0       	rjmp	.+102    	; 0x193a <DIO_u8_Set_Port_Direction+0x134>
				}
				break;
				case DIO_u8_PORTC :
					switch (Copy_u8_Port_Direction)
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	3f 83       	std	Y+7, r19	; 0x07
    18dc:	2e 83       	std	Y+6, r18	; 0x06
    18de:	8e 81       	ldd	r24, Y+6	; 0x06
    18e0:	9f 81       	ldd	r25, Y+7	; 0x07
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	51 f0       	breq	.+20     	; 0x18fa <DIO_u8_Set_Port_Direction+0xf4>
    18e6:	2e 81       	ldd	r18, Y+6	; 0x06
    18e8:	3f 81       	ldd	r19, Y+7	; 0x07
    18ea:	21 30       	cpi	r18, 0x01	; 1
    18ec:	31 05       	cpc	r19, r1
    18ee:	29 f5       	brne	.+74     	; 0x193a <DIO_u8_Set_Port_Direction+0x134>
					{
					    case DIO_u8_OUTPUT : DIO_u8_PORTC_REG = 0xff;break;
    18f0:	e5 e3       	ldi	r30, 0x35	; 53
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	8f ef       	ldi	r24, 0xFF	; 255
    18f6:	80 83       	st	Z, r24
    18f8:	20 c0       	rjmp	.+64     	; 0x193a <DIO_u8_Set_Port_Direction+0x134>
					    case DIO_u8_INPUT : DIO_u8_PORTC_REG = 0x00;break;
    18fa:	e5 e3       	ldi	r30, 0x35	; 53
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	10 82       	st	Z, r1
    1900:	1c c0       	rjmp	.+56     	; 0x193a <DIO_u8_Set_Port_Direction+0x134>
					}
					break;
					case DIO_u8_PORTD :
						switch (Copy_u8_Port_Direction)
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	3d 83       	std	Y+5, r19	; 0x05
    190a:	2c 83       	std	Y+4, r18	; 0x04
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	9d 81       	ldd	r25, Y+5	; 0x05
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	51 f0       	breq	.+20     	; 0x1928 <DIO_u8_Set_Port_Direction+0x122>
    1914:	2c 81       	ldd	r18, Y+4	; 0x04
    1916:	3d 81       	ldd	r19, Y+5	; 0x05
    1918:	21 30       	cpi	r18, 0x01	; 1
    191a:	31 05       	cpc	r19, r1
    191c:	71 f4       	brne	.+28     	; 0x193a <DIO_u8_Set_Port_Direction+0x134>
						{
						    case DIO_u8_OUTPUT : DIO_u8_PORTD_REG = 0xff;break;
    191e:	e2 e3       	ldi	r30, 0x32	; 50
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	8f ef       	ldi	r24, 0xFF	; 255
    1924:	80 83       	st	Z, r24
    1926:	09 c0       	rjmp	.+18     	; 0x193a <DIO_u8_Set_Port_Direction+0x134>
						    case DIO_u8_INPUT : DIO_u8_PORTD_REG = 0x00;break;
    1928:	e2 e3       	ldi	r30, 0x32	; 50
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	10 82       	st	Z, r1
    192e:	05 c0       	rjmp	.+10     	; 0x193a <DIO_u8_Set_Port_Direction+0x134>
						}
						break;
						default:Local_u8_Erorr_State = ES_NOK ;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	02 c0       	rjmp	.+4      	; 0x193a <DIO_u8_Set_Port_Direction+0x134>

		}
	}
	else {
				Local_u8_Erorr_State = ES_NOK ;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    193a:	89 81       	ldd	r24, Y+1	; 0x01

}
    193c:	2d 96       	adiw	r28, 0x0d	; 13
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <DIO_u8_Set_Port_Value>:

u8 DIO_u8_Set_Port_Value     (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Value ){
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	00 d0       	rcall	.+0      	; 0x1954 <DIO_u8_Set_Port_Value+0x6>
    1954:	00 d0       	rcall	.+0      	; 0x1956 <DIO_u8_Set_Port_Value+0x8>
    1956:	0f 92       	push	r0
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	8a 83       	std	Y+2, r24	; 0x02
    195e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1960:	19 82       	std	Y+1, r1	; 0x01

			switch (Copy_u8_Port_ID)
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	3d 83       	std	Y+5, r19	; 0x05
    196a:	2c 83       	std	Y+4, r18	; 0x04
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	9d 81       	ldd	r25, Y+5	; 0x05
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	91 05       	cpc	r25, r1
    1974:	d1 f0       	breq	.+52     	; 0x19aa <DIO_u8_Set_Port_Value+0x5c>
    1976:	2c 81       	ldd	r18, Y+4	; 0x04
    1978:	3d 81       	ldd	r19, Y+5	; 0x05
    197a:	22 30       	cpi	r18, 0x02	; 2
    197c:	31 05       	cpc	r19, r1
    197e:	2c f4       	brge	.+10     	; 0x198a <DIO_u8_Set_Port_Value+0x3c>
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	9d 81       	ldd	r25, Y+5	; 0x05
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	61 f0       	breq	.+24     	; 0x19a0 <DIO_u8_Set_Port_Value+0x52>
    1988:	1f c0       	rjmp	.+62     	; 0x19c8 <DIO_u8_Set_Port_Value+0x7a>
    198a:	2c 81       	ldd	r18, Y+4	; 0x04
    198c:	3d 81       	ldd	r19, Y+5	; 0x05
    198e:	22 30       	cpi	r18, 0x02	; 2
    1990:	31 05       	cpc	r19, r1
    1992:	81 f0       	breq	.+32     	; 0x19b4 <DIO_u8_Set_Port_Value+0x66>
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	83 30       	cpi	r24, 0x03	; 3
    199a:	91 05       	cpc	r25, r1
    199c:	81 f0       	breq	.+32     	; 0x19be <DIO_u8_Set_Port_Value+0x70>
    199e:	14 c0       	rjmp	.+40     	; 0x19c8 <DIO_u8_Set_Port_Value+0x7a>
			{
			case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8_Port_Value; break;
    19a0:	eb e3       	ldi	r30, 0x3B	; 59
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	80 83       	st	Z, r24
    19a8:	11 c0       	rjmp	.+34     	; 0x19cc <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8_Port_Value; break;
    19aa:	e8 e3       	ldi	r30, 0x38	; 56
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	80 83       	st	Z, r24
    19b2:	0c c0       	rjmp	.+24     	; 0x19cc <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8_Port_Value; break;
    19b4:	e5 e3       	ldi	r30, 0x35	; 53
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	80 83       	st	Z, r24
    19bc:	07 c0       	rjmp	.+14     	; 0x19cc <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8_Port_Value; break;
    19be:	e2 e3       	ldi	r30, 0x32	; 50
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	80 83       	st	Z, r24
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <DIO_u8_Set_Port_Value+0x7e>
			default :Local_u8_Erorr_State = ES_NOK;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    19cc:	89 81       	ldd	r24, Y+1	; 0x01

}
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <DIO_u8_Get_Port_Value>:

u8 DIO_u8_Get_Port_Value     (u8 Copy_u8_Port_ID, u8 * Copy_u8_Returned_Port_Value ){
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <DIO_u8_Get_Port_Value+0x6>
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <DIO_u8_Get_Port_Value+0x8>
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <DIO_u8_Get_Port_Value+0xa>
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	8a 83       	std	Y+2, r24	; 0x02
    19ee:	7c 83       	std	Y+4, r23	; 0x04
    19f0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    19f2:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8_Returned_Port_Value != NULL){
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	09 f4       	brne	.+2      	; 0x19fe <DIO_u8_Get_Port_Value+0x20>
    19fc:	3e c0       	rjmp	.+124    	; 0x1a7a <DIO_u8_Get_Port_Value+0x9c>
		switch (Copy_u8_Port_ID)
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	3e 83       	std	Y+6, r19	; 0x06
    1a06:	2d 83       	std	Y+5, r18	; 0x05
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	e1 f0       	breq	.+56     	; 0x1a4a <DIO_u8_Get_Port_Value+0x6c>
    1a12:	2d 81       	ldd	r18, Y+5	; 0x05
    1a14:	3e 81       	ldd	r19, Y+6	; 0x06
    1a16:	22 30       	cpi	r18, 0x02	; 2
    1a18:	31 05       	cpc	r19, r1
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <DIO_u8_Get_Port_Value+0x48>
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	61 f0       	breq	.+24     	; 0x1a3c <DIO_u8_Get_Port_Value+0x5e>
    1a24:	27 c0       	rjmp	.+78     	; 0x1a74 <DIO_u8_Get_Port_Value+0x96>
    1a26:	2d 81       	ldd	r18, Y+5	; 0x05
    1a28:	3e 81       	ldd	r19, Y+6	; 0x06
    1a2a:	22 30       	cpi	r18, 0x02	; 2
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	a1 f0       	breq	.+40     	; 0x1a58 <DIO_u8_Get_Port_Value+0x7a>
    1a30:	8d 81       	ldd	r24, Y+5	; 0x05
    1a32:	9e 81       	ldd	r25, Y+6	; 0x06
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	91 05       	cpc	r25, r1
    1a38:	b1 f0       	breq	.+44     	; 0x1a66 <DIO_u8_Get_Port_Value+0x88>
    1a3a:	1c c0       	rjmp	.+56     	; 0x1a74 <DIO_u8_Get_Port_Value+0x96>
		{
		case DIO_u8_PORTA :* Copy_u8_Returned_Port_Value =DIO_u8_PORTA_REG; break;
    1a3c:	eb e3       	ldi	r30, 0x3B	; 59
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	eb 81       	ldd	r30, Y+3	; 0x03
    1a44:	fc 81       	ldd	r31, Y+4	; 0x04
    1a46:	80 83       	st	Z, r24
    1a48:	1a c0       	rjmp	.+52     	; 0x1a7e <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTB :* Copy_u8_Returned_Port_Value =DIO_u8_PORTB_REG; break;
    1a4a:	e8 e3       	ldi	r30, 0x38	; 56
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	eb 81       	ldd	r30, Y+3	; 0x03
    1a52:	fc 81       	ldd	r31, Y+4	; 0x04
    1a54:	80 83       	st	Z, r24
    1a56:	13 c0       	rjmp	.+38     	; 0x1a7e <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTC :* Copy_u8_Returned_Port_Value =DIO_u8_PORTC_REG; break;
    1a58:	e5 e3       	ldi	r30, 0x35	; 53
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a60:	fc 81       	ldd	r31, Y+4	; 0x04
    1a62:	80 83       	st	Z, r24
    1a64:	0c c0       	rjmp	.+24     	; 0x1a7e <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTD :* Copy_u8_Returned_Port_Value =DIO_u8_PORTD_REG; break;
    1a66:	e2 e3       	ldi	r30, 0x32	; 50
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a70:	80 83       	st	Z, r24
    1a72:	05 c0       	rjmp	.+10     	; 0x1a7e <DIO_u8_Get_Port_Value+0xa0>
		default :Local_u8_Erorr_State = ES_NOK;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	89 83       	std	Y+1, r24	; 0x01
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <DIO_u8_Get_Port_Value+0xa0>
		}}
		else {
			Local_u8_Erorr_State = ES_NOK ;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8_Erorr_State ;
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a80:	26 96       	adiw	r28, 0x06	; 6
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <Stepper_motor_enum_INIT>:
#include "STEPPER_MOTOR_interface.h"
#include "STEPPER_MOTOR_private.h"

#include<util/delay.h>

ES_t Stepper_motor_enum_INIT (){
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	0f 92       	push	r0
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State=ES_OK;
    1a9c:	19 82       	std	Y+1, r1	; 0x01

	 DIO_u8_Set_Pin_Direction  (STEPPER_MOTOR_BLUE_PORT, STEPPER_MOTOR_BLUE_PIN, DIO_u8_OUTPUT );
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	41 e0       	ldi	r20, 0x01	; 1
    1aa4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>
	 DIO_u8_Set_Pin_Direction  (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN, DIO_u8_OUTPUT );
    1aa8:	83 e0       	ldi	r24, 0x03	; 3
    1aaa:	61 e0       	ldi	r22, 0x01	; 1
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>
	 DIO_u8_Set_Pin_Direction  (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN , DIO_u8_OUTPUT );
    1ab2:	83 e0       	ldi	r24, 0x03	; 3
    1ab4:	64 e0       	ldi	r22, 0x04	; 4
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>
	 DIO_u8_Set_Pin_Direction  (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN, DIO_u8_OUTPUT );
    1abc:	83 e0       	ldi	r24, 0x03	; 3
    1abe:	63 e0       	ldi	r22, 0x03	; 3
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>


	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    1ac6:	83 e0       	ldi	r24, 0x03	; 3
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	41 e0       	ldi	r20, 0x01	; 1
    1acc:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    1ad0:	83 e0       	ldi	r24, 0x03	; 3
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	41 e0       	ldi	r20, 0x01	; 1
    1ad6:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
     DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    1ada:	83 e0       	ldi	r24, 0x03	; 3
    1adc:	64 e0       	ldi	r22, 0x04	; 4
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
     DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    1ae4:	83 e0       	ldi	r24, 0x03	; 3
    1ae6:	63 e0       	ldi	r22, 0x03	; 3
    1ae8:	41 e0       	ldi	r20, 0x01	; 1
    1aea:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
return Local_enu_Erorr_State;
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af0:	0f 90       	pop	r0
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <Stepper_moter_enum_Move>:


ES_t Stepper_moter_enum_Move(u8 copy_u8_direction,u8 copy_u8_Angle){
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	c6 57       	subi	r28, 0x76	; 118
    1b06:	d0 40       	sbci	r29, 0x00	; 0
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	fe 01       	movw	r30, r28
    1b14:	eb 58       	subi	r30, 0x8B	; 139
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	80 83       	st	Z, r24
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	ea 58       	subi	r30, 0x8A	; 138
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	60 83       	st	Z, r22
u8 Local_u8_step_Counter;
ES_t Local_enu_Erorr_State=ES_OK;
    1b22:	fe 01       	movw	r30, r28
    1b24:	ed 58       	subi	r30, 0x8D	; 141
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	10 82       	st	Z, r1

//to calculate number of steps for custom angle
u8 Number_Of_Steps = ((copy_u8_Angle*Namber_Of_Steps_for_360degree)/degree_360);
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ea 58       	subi	r30, 0x8A	; 138
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a0 e0       	ldi	r26, 0x00	; 0
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	07 2e       	mov	r0, r23
    1b3c:	7b e0       	ldi	r23, 0x0B	; 11
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	aa 1f       	adc	r26, r26
    1b44:	bb 1f       	adc	r27, r27
    1b46:	7a 95       	dec	r23
    1b48:	d1 f7       	brne	.-12     	; 0x1b3e <Stepper_moter_enum_Move+0x46>
    1b4a:	70 2d       	mov	r23, r0
    1b4c:	28 e6       	ldi	r18, 0x68	; 104
    1b4e:	31 e0       	ldi	r19, 0x01	; 1
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__udivmodsi4>
    1b5c:	da 01       	movw	r26, r20
    1b5e:	c9 01       	movw	r24, r18
    1b60:	fe 01       	movw	r30, r28
    1b62:	ee 58       	subi	r30, 0x8E	; 142
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	80 83       	st	Z, r24
u8 Number_Of_Forloop =Number_Of_Steps/number_of_steps_in_full_step;
    1b68:	de 01       	movw	r26, r28
    1b6a:	af 58       	subi	r26, 0x8F	; 143
    1b6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b6e:	fe 01       	movw	r30, r28
    1b70:	ee 58       	subi	r30, 0x8E	; 142
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	80 81       	ld	r24, Z
    1b76:	86 95       	lsr	r24
    1b78:	86 95       	lsr	r24
    1b7a:	8c 93       	st	X, r24
//FOR LOOP TO ROTATE AT CUSTOM ANGLE

if(copy_u8_direction==CW){
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	eb 58       	subi	r30, 0x8B	; 139
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	80 81       	ld	r24, Z
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <Stepper_moter_enum_Move+0x92>
    1b88:	08 c3       	rjmp	.+1552   	; 0x219a <Stepper_moter_enum_Move+0x6a2>
for (Local_u8_step_Counter=start;Local_u8_step_Counter>Number_Of_Forloop;Local_u8_step_Counter++){
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	ec 58       	subi	r30, 0x8C	; 140
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	10 82       	st	Z, r1
    1b92:	f7 c2       	rjmp	.+1518   	; 0x2182 <Stepper_moter_enum_Move+0x68a>

     //step1 -------->BLUE PIN IS LOW
 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_LOW );
    1b94:	83 e0       	ldi	r24, 0x03	; 3
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    1b9e:	83 e0       	ldi	r24, 0x03	; 3
    1ba0:	61 e0       	ldi	r22, 0x01	; 1
    1ba2:	41 e0       	ldi	r20, 0x01	; 1
    1ba4:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	64 e0       	ldi	r22, 0x04	; 4
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	63 e0       	ldi	r22, 0x03	; 3
    1bb6:	41 e0       	ldi	r20, 0x01	; 1
    1bb8:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e3 59       	subi	r30, 0x93	; 147
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	a0 e2       	ldi	r26, 0x20	; 32
    1bc8:	b1 e4       	ldi	r27, 0x41	; 65
    1bca:	80 83       	st	Z, r24
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	a2 83       	std	Z+2, r26	; 0x02
    1bd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	07 59       	subi	r16, 0x97	; 151
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e3 59       	subi	r30, 0x93	; 147
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4a e7       	ldi	r20, 0x7A	; 122
    1bec:	53 e4       	ldi	r21, 0x43	; 67
    1bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	80 83       	st	Z, r24
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	a2 83       	std	Z+2, r26	; 0x02
    1bfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c00:	fe 01       	movw	r30, r28
    1c02:	e7 59       	subi	r30, 0x97	; 151
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	60 81       	ld	r22, Z
    1c08:	71 81       	ldd	r23, Z+1	; 0x01
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	44 f4       	brge	.+16     	; 0x1c2e <Stepper_moter_enum_Move+0x136>
		__ticks = 1;
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e9 59       	subi	r30, 0x99	; 153
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	80 83       	st	Z, r24
    1c2c:	64 c0       	rjmp	.+200    	; 0x1cf6 <Stepper_moter_enum_Move+0x1fe>
	else if (__tmp > 65535)
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e7 59       	subi	r30, 0x97	; 151
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	0c f0       	brlt	.+2      	; 0x1c4e <Stepper_moter_enum_Move+0x156>
    1c4c:	43 c0       	rjmp	.+134    	; 0x1cd4 <Stepper_moter_enum_Move+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4e:	fe 01       	movw	r30, r28
    1c50:	e3 59       	subi	r30, 0x93	; 147
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	60 81       	ld	r22, Z
    1c56:	71 81       	ldd	r23, Z+1	; 0x01
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e2       	ldi	r20, 0x20	; 32
    1c62:	51 e4       	ldi	r21, 0x41	; 65
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	8e 01       	movw	r16, r28
    1c6e:	09 59       	subi	r16, 0x99	; 153
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	f8 01       	movw	r30, r16
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	80 83       	st	Z, r24
    1c84:	1f c0       	rjmp	.+62     	; 0x1cc4 <Stepper_moter_enum_Move+0x1cc>
    1c86:	fe 01       	movw	r30, r28
    1c88:	eb 59       	subi	r30, 0x9B	; 155
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	89 e1       	ldi	r24, 0x19	; 25
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c94:	fe 01       	movw	r30, r28
    1c96:	eb 59       	subi	r30, 0x9B	; 155
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <Stepper_moter_enum_Move+0x1a6>
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	eb 59       	subi	r30, 0x9B	; 155
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	91 83       	std	Z+1, r25	; 0x01
    1caa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cac:	de 01       	movw	r26, r28
    1cae:	a9 59       	subi	r26, 0x99	; 153
    1cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	e9 59       	subi	r30, 0x99	; 153
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	80 81       	ld	r24, Z
    1cba:	91 81       	ldd	r25, Z+1	; 0x01
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	11 96       	adiw	r26, 0x01	; 1
    1cc0:	9c 93       	st	X, r25
    1cc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e9 59       	subi	r30, 0x99	; 153
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	d1 f6       	brne	.-76     	; 0x1c86 <Stepper_moter_enum_Move+0x18e>
    1cd2:	27 c0       	rjmp	.+78     	; 0x1d22 <Stepper_moter_enum_Move+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd4:	8e 01       	movw	r16, r28
    1cd6:	09 59       	subi	r16, 0x99	; 153
    1cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cda:	fe 01       	movw	r30, r28
    1cdc:	e7 59       	subi	r30, 0x97	; 151
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	60 81       	ld	r22, Z
    1ce2:	71 81       	ldd	r23, Z+1	; 0x01
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	80 83       	st	Z, r24
    1cf6:	de 01       	movw	r26, r28
    1cf8:	ad 59       	subi	r26, 0x9D	; 157
    1cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e9 59       	subi	r30, 0x99	; 153
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	8d 93       	st	X+, r24
    1d08:	9c 93       	st	X, r25
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ed 59       	subi	r30, 0x9D	; 157
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	91 81       	ldd	r25, Z+1	; 0x01
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <Stepper_moter_enum_Move+0x21c>
    1d18:	fe 01       	movw	r30, r28
    1d1a:	ed 59       	subi	r30, 0x9D	; 157
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	80 83       	st	Z, r24
	_delay_ms(periodic_time_delay);
    //step1 -------->PINK PIN IS LOW
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    1d22:	83 e0       	ldi	r24, 0x03	; 3
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	41 e0       	ldi	r20, 0x01	; 1
    1d28:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_LOW );
    1d2c:	83 e0       	ldi	r24, 0x03	; 3
    1d2e:	61 e0       	ldi	r22, 0x01	; 1
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    1d36:	83 e0       	ldi	r24, 0x03	; 3
    1d38:	64 e0       	ldi	r22, 0x04	; 4
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    1d40:	83 e0       	ldi	r24, 0x03	; 3
    1d42:	63 e0       	ldi	r22, 0x03	; 3
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e1 5a       	subi	r30, 0xA1	; 161
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a0 e2       	ldi	r26, 0x20	; 32
    1d56:	b1 e4       	ldi	r27, 0x41	; 65
    1d58:	80 83       	st	Z, r24
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	a2 83       	std	Z+2, r26	; 0x02
    1d5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d60:	8e 01       	movw	r16, r28
    1d62:	05 5a       	subi	r16, 0xA5	; 165
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	fe 01       	movw	r30, r28
    1d68:	e1 5a       	subi	r30, 0xA1	; 161
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a e7       	ldi	r20, 0x7A	; 122
    1d7a:	53 e4       	ldi	r21, 0x43	; 67
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	f8 01       	movw	r30, r16
    1d86:	80 83       	st	Z, r24
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	a2 83       	std	Z+2, r26	; 0x02
    1d8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e5 5a       	subi	r30, 0xA5	; 165
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	60 81       	ld	r22, Z
    1d96:	71 81       	ldd	r23, Z+1	; 0x01
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	93 81       	ldd	r25, Z+3	; 0x03
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e8       	ldi	r20, 0x80	; 128
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	44 f4       	brge	.+16     	; 0x1dbc <Stepper_moter_enum_Move+0x2c4>
		__ticks = 1;
    1dac:	fe 01       	movw	r30, r28
    1dae:	e7 5a       	subi	r30, 0xA7	; 167
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	80 83       	st	Z, r24
    1dba:	64 c0       	rjmp	.+200    	; 0x1e84 <Stepper_moter_enum_Move+0x38c>
	else if (__tmp > 65535)
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e5 5a       	subi	r30, 0xA5	; 165
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	60 81       	ld	r22, Z
    1dc4:	71 81       	ldd	r23, Z+1	; 0x01
    1dc6:	82 81       	ldd	r24, Z+2	; 0x02
    1dc8:	93 81       	ldd	r25, Z+3	; 0x03
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	0c f0       	brlt	.+2      	; 0x1ddc <Stepper_moter_enum_Move+0x2e4>
    1dda:	43 c0       	rjmp	.+134    	; 0x1e62 <Stepper_moter_enum_Move+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e1 5a       	subi	r30, 0xA1	; 161
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	60 81       	ld	r22, Z
    1de4:	71 81       	ldd	r23, Z+1	; 0x01
    1de6:	82 81       	ldd	r24, Z+2	; 0x02
    1de8:	93 81       	ldd	r25, Z+3	; 0x03
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e2       	ldi	r20, 0x20	; 32
    1df0:	51 e4       	ldi	r21, 0x41	; 65
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8e 01       	movw	r16, r28
    1dfc:	07 5a       	subi	r16, 0xA7	; 167
    1dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
    1e12:	1f c0       	rjmp	.+62     	; 0x1e52 <Stepper_moter_enum_Move+0x35a>
    1e14:	fe 01       	movw	r30, r28
    1e16:	e9 5a       	subi	r30, 0xA9	; 169
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	89 e1       	ldi	r24, 0x19	; 25
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	91 83       	std	Z+1, r25	; 0x01
    1e20:	80 83       	st	Z, r24
    1e22:	fe 01       	movw	r30, r28
    1e24:	e9 5a       	subi	r30, 0xA9	; 169
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	80 81       	ld	r24, Z
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <Stepper_moter_enum_Move+0x334>
    1e30:	fe 01       	movw	r30, r28
    1e32:	e9 5a       	subi	r30, 0xA9	; 169
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3a:	de 01       	movw	r26, r28
    1e3c:	a7 5a       	subi	r26, 0xA7	; 167
    1e3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e40:	fe 01       	movw	r30, r28
    1e42:	e7 5a       	subi	r30, 0xA7	; 167
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	80 81       	ld	r24, Z
    1e48:	91 81       	ldd	r25, Z+1	; 0x01
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	11 96       	adiw	r26, 0x01	; 1
    1e4e:	9c 93       	st	X, r25
    1e50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	fe 01       	movw	r30, r28
    1e54:	e7 5a       	subi	r30, 0xA7	; 167
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	d1 f6       	brne	.-76     	; 0x1e14 <Stepper_moter_enum_Move+0x31c>
    1e60:	27 c0       	rjmp	.+78     	; 0x1eb0 <Stepper_moter_enum_Move+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e62:	8e 01       	movw	r16, r28
    1e64:	07 5a       	subi	r16, 0xA7	; 167
    1e66:	1f 4f       	sbci	r17, 0xFF	; 255
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e5 5a       	subi	r30, 0xA5	; 165
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	f8 01       	movw	r30, r16
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	80 83       	st	Z, r24
    1e84:	de 01       	movw	r26, r28
    1e86:	ab 5a       	subi	r26, 0xAB	; 171
    1e88:	bf 4f       	sbci	r27, 0xFF	; 255
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e7 5a       	subi	r30, 0xA7	; 167
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	80 81       	ld	r24, Z
    1e92:	91 81       	ldd	r25, Z+1	; 0x01
    1e94:	8d 93       	st	X+, r24
    1e96:	9c 93       	st	X, r25
    1e98:	fe 01       	movw	r30, r28
    1e9a:	eb 5a       	subi	r30, 0xAB	; 171
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	80 81       	ld	r24, Z
    1ea0:	91 81       	ldd	r25, Z+1	; 0x01
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <Stepper_moter_enum_Move+0x3aa>
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	eb 5a       	subi	r30, 0xAB	; 171
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
	_delay_ms(periodic_time_delay);
	//step1 -------->YELLOW PIN IS LOW
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    1eb0:	83 e0       	ldi	r24, 0x03	; 3
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	41 e0       	ldi	r20, 0x01	; 1
    1eb6:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    1eba:	83 e0       	ldi	r24, 0x03	; 3
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_LOW );
    1ec4:	83 e0       	ldi	r24, 0x03	; 3
    1ec6:	64 e0       	ldi	r22, 0x04	; 4
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    1ece:	83 e0       	ldi	r24, 0x03	; 3
    1ed0:	63 e0       	ldi	r22, 0x03	; 3
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
    1ed8:	fe 01       	movw	r30, r28
    1eda:	ef 5a       	subi	r30, 0xAF	; 175
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	a0 e2       	ldi	r26, 0x20	; 32
    1ee4:	b1 e4       	ldi	r27, 0x41	; 65
    1ee6:	80 83       	st	Z, r24
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	a2 83       	std	Z+2, r26	; 0x02
    1eec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eee:	8e 01       	movw	r16, r28
    1ef0:	03 5b       	subi	r16, 0xB3	; 179
    1ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	ef 5a       	subi	r30, 0xAF	; 175
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	60 81       	ld	r22, Z
    1efc:	71 81       	ldd	r23, Z+1	; 0x01
    1efe:	82 81       	ldd	r24, Z+2	; 0x02
    1f00:	93 81       	ldd	r25, Z+3	; 0x03
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a e7       	ldi	r20, 0x7A	; 122
    1f08:	53 e4       	ldi	r21, 0x43	; 67
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	f8 01       	movw	r30, r16
    1f14:	80 83       	st	Z, r24
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	a2 83       	std	Z+2, r26	; 0x02
    1f1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e3 5b       	subi	r30, 0xB3	; 179
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e8       	ldi	r20, 0x80	; 128
    1f30:	5f e3       	ldi	r21, 0x3F	; 63
    1f32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f36:	88 23       	and	r24, r24
    1f38:	44 f4       	brge	.+16     	; 0x1f4a <Stepper_moter_enum_Move+0x452>
		__ticks = 1;
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e5 5b       	subi	r30, 0xB5	; 181
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	91 83       	std	Z+1, r25	; 0x01
    1f46:	80 83       	st	Z, r24
    1f48:	64 c0       	rjmp	.+200    	; 0x2012 <Stepper_moter_enum_Move+0x51a>
	else if (__tmp > 65535)
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e3 5b       	subi	r30, 0xB3	; 179
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	3f ef       	ldi	r19, 0xFF	; 255
    1f5c:	4f e7       	ldi	r20, 0x7F	; 127
    1f5e:	57 e4       	ldi	r21, 0x47	; 71
    1f60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f64:	18 16       	cp	r1, r24
    1f66:	0c f0       	brlt	.+2      	; 0x1f6a <Stepper_moter_enum_Move+0x472>
    1f68:	43 c0       	rjmp	.+134    	; 0x1ff0 <Stepper_moter_enum_Move+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	ef 5a       	subi	r30, 0xAF	; 175
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	60 81       	ld	r22, Z
    1f72:	71 81       	ldd	r23, Z+1	; 0x01
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e2       	ldi	r20, 0x20	; 32
    1f7e:	51 e4       	ldi	r21, 0x41	; 65
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	8e 01       	movw	r16, r28
    1f8a:	05 5b       	subi	r16, 0xB5	; 181
    1f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8e:	bc 01       	movw	r22, r24
    1f90:	cd 01       	movw	r24, r26
    1f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	f8 01       	movw	r30, r16
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	80 83       	st	Z, r24
    1fa0:	1f c0       	rjmp	.+62     	; 0x1fe0 <Stepper_moter_enum_Move+0x4e8>
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e7 5b       	subi	r30, 0xB7	; 183
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	89 e1       	ldi	r24, 0x19	; 25
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	91 83       	std	Z+1, r25	; 0x01
    1fae:	80 83       	st	Z, r24
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e7 5b       	subi	r30, 0xB7	; 183
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 81       	ld	r24, Z
    1fb8:	91 81       	ldd	r25, Z+1	; 0x01
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <Stepper_moter_enum_Move+0x4c2>
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e7 5b       	subi	r30, 0xB7	; 183
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc8:	de 01       	movw	r26, r28
    1fca:	a5 5b       	subi	r26, 0xB5	; 181
    1fcc:	bf 4f       	sbci	r27, 0xFF	; 255
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e5 5b       	subi	r30, 0xB5	; 181
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 81       	ld	r24, Z
    1fd6:	91 81       	ldd	r25, Z+1	; 0x01
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	11 96       	adiw	r26, 0x01	; 1
    1fdc:	9c 93       	st	X, r25
    1fde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e5 5b       	subi	r30, 0xB5	; 181
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	80 81       	ld	r24, Z
    1fe8:	91 81       	ldd	r25, Z+1	; 0x01
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	d1 f6       	brne	.-76     	; 0x1fa2 <Stepper_moter_enum_Move+0x4aa>
    1fee:	27 c0       	rjmp	.+78     	; 0x203e <Stepper_moter_enum_Move+0x546>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff0:	8e 01       	movw	r16, r28
    1ff2:	05 5b       	subi	r16, 0xB5	; 181
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e3 5b       	subi	r30, 0xB3	; 179
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	60 81       	ld	r22, Z
    1ffe:	71 81       	ldd	r23, Z+1	; 0x01
    2000:	82 81       	ldd	r24, Z+2	; 0x02
    2002:	93 81       	ldd	r25, Z+3	; 0x03
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	f8 01       	movw	r30, r16
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	80 83       	st	Z, r24
    2012:	de 01       	movw	r26, r28
    2014:	a9 5b       	subi	r26, 0xB9	; 185
    2016:	bf 4f       	sbci	r27, 0xFF	; 255
    2018:	fe 01       	movw	r30, r28
    201a:	e5 5b       	subi	r30, 0xB5	; 181
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 81       	ld	r24, Z
    2020:	91 81       	ldd	r25, Z+1	; 0x01
    2022:	8d 93       	st	X+, r24
    2024:	9c 93       	st	X, r25
    2026:	fe 01       	movw	r30, r28
    2028:	e9 5b       	subi	r30, 0xB9	; 185
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <Stepper_moter_enum_Move+0x538>
    2034:	fe 01       	movw	r30, r28
    2036:	e9 5b       	subi	r30, 0xB9	; 185
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24
	_delay_ms(periodic_time_delay);
	//step1 -------->ORANGE PIN IS LOW
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    203e:	83 e0       	ldi	r24, 0x03	; 3
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	41 e0       	ldi	r20, 0x01	; 1
    2044:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	64 e0       	ldi	r22, 0x04	; 4
    2056:	41 e0       	ldi	r20, 0x01	; 1
    2058:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_LOW );
    205c:	83 e0       	ldi	r24, 0x03	; 3
    205e:	63 e0       	ldi	r22, 0x03	; 3
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
    2066:	fe 01       	movw	r30, r28
    2068:	ed 5b       	subi	r30, 0xBD	; 189
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e2       	ldi	r26, 0x20	; 32
    2072:	b1 e4       	ldi	r27, 0x41	; 65
    2074:	80 83       	st	Z, r24
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	a2 83       	std	Z+2, r26	; 0x02
    207a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	8e 01       	movw	r16, r28
    207e:	01 5c       	subi	r16, 0xC1	; 193
    2080:	1f 4f       	sbci	r17, 0xFF	; 255
    2082:	fe 01       	movw	r30, r28
    2084:	ed 5b       	subi	r30, 0xBD	; 189
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a e7       	ldi	r20, 0x7A	; 122
    2096:	53 e4       	ldi	r21, 0x43	; 67
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	f8 01       	movw	r30, r16
    20a2:	80 83       	st	Z, r24
    20a4:	91 83       	std	Z+1, r25	; 0x01
    20a6:	a2 83       	std	Z+2, r26	; 0x02
    20a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20aa:	fe 01       	movw	r30, r28
    20ac:	ff 96       	adiw	r30, 0x3f	; 63
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e8       	ldi	r20, 0x80	; 128
    20bc:	5f e3       	ldi	r21, 0x3F	; 63
    20be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	2c f4       	brge	.+10     	; 0x20d0 <Stepper_moter_enum_Move+0x5d8>
		__ticks = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9e af       	std	Y+62, r25	; 0x3e
    20cc:	8d af       	std	Y+61, r24	; 0x3d
    20ce:	46 c0       	rjmp	.+140    	; 0x215c <Stepper_moter_enum_Move+0x664>
	else if (__tmp > 65535)
    20d0:	fe 01       	movw	r30, r28
    20d2:	ff 96       	adiw	r30, 0x3f	; 63
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	64 f5       	brge	.+88     	; 0x2144 <Stepper_moter_enum_Move+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	fe 01       	movw	r30, r28
    20ee:	ed 5b       	subi	r30, 0xBD	; 189
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e2       	ldi	r20, 0x20	; 32
    2100:	51 e4       	ldi	r21, 0x41	; 65
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9e af       	std	Y+62, r25	; 0x3e
    2118:	8d af       	std	Y+61, r24	; 0x3d
    211a:	0f c0       	rjmp	.+30     	; 0x213a <Stepper_moter_enum_Move+0x642>
    211c:	89 e1       	ldi	r24, 0x19	; 25
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9c af       	std	Y+60, r25	; 0x3c
    2122:	8b af       	std	Y+59, r24	; 0x3b
    2124:	8b ad       	ldd	r24, Y+59	; 0x3b
    2126:	9c ad       	ldd	r25, Y+60	; 0x3c
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <Stepper_moter_enum_Move+0x630>
    212c:	9c af       	std	Y+60, r25	; 0x3c
    212e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2130:	8d ad       	ldd	r24, Y+61	; 0x3d
    2132:	9e ad       	ldd	r25, Y+62	; 0x3e
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	9e af       	std	Y+62, r25	; 0x3e
    2138:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213a:	8d ad       	ldd	r24, Y+61	; 0x3d
    213c:	9e ad       	ldd	r25, Y+62	; 0x3e
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	69 f7       	brne	.-38     	; 0x211c <Stepper_moter_enum_Move+0x624>
    2142:	16 c0       	rjmp	.+44     	; 0x2170 <Stepper_moter_enum_Move+0x678>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2144:	fe 01       	movw	r30, r28
    2146:	ff 96       	adiw	r30, 0x3f	; 63
    2148:	60 81       	ld	r22, Z
    214a:	71 81       	ldd	r23, Z+1	; 0x01
    214c:	82 81       	ldd	r24, Z+2	; 0x02
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9e af       	std	Y+62, r25	; 0x3e
    215a:	8d af       	std	Y+61, r24	; 0x3d
    215c:	8d ad       	ldd	r24, Y+61	; 0x3d
    215e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2160:	9a af       	std	Y+58, r25	; 0x3a
    2162:	89 af       	std	Y+57, r24	; 0x39
    2164:	89 ad       	ldd	r24, Y+57	; 0x39
    2166:	9a ad       	ldd	r25, Y+58	; 0x3a
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <Stepper_moter_enum_Move+0x670>
    216c:	9a af       	std	Y+58, r25	; 0x3a
    216e:	89 af       	std	Y+57, r24	; 0x39
u8 Number_Of_Steps = ((copy_u8_Angle*Namber_Of_Steps_for_360degree)/degree_360);
u8 Number_Of_Forloop =Number_Of_Steps/number_of_steps_in_full_step;
//FOR LOOP TO ROTATE AT CUSTOM ANGLE

if(copy_u8_direction==CW){
for (Local_u8_step_Counter=start;Local_u8_step_Counter>Number_Of_Forloop;Local_u8_step_Counter++){
    2170:	de 01       	movw	r26, r28
    2172:	ac 58       	subi	r26, 0x8C	; 140
    2174:	bf 4f       	sbci	r27, 0xFF	; 255
    2176:	fe 01       	movw	r30, r28
    2178:	ec 58       	subi	r30, 0x8C	; 140
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	80 81       	ld	r24, Z
    217e:	8f 5f       	subi	r24, 0xFF	; 255
    2180:	8c 93       	st	X, r24
    2182:	fe 01       	movw	r30, r28
    2184:	ec 58       	subi	r30, 0x8C	; 140
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	de 01       	movw	r26, r28
    218a:	af 58       	subi	r26, 0x8F	; 143
    218c:	bf 4f       	sbci	r27, 0xFF	; 255
    218e:	90 81       	ld	r25, Z
    2190:	8c 91       	ld	r24, X
    2192:	89 17       	cp	r24, r25
    2194:	08 f4       	brcc	.+2      	; 0x2198 <Stepper_moter_enum_Move+0x6a0>
    2196:	fe cc       	rjmp	.-1540   	; 0x1b94 <Stepper_moter_enum_Move+0x9c>
    2198:	38 c2       	rjmp	.+1136   	; 0x260a <Stepper_moter_enum_Move+0xb12>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_LOW );
	_delay_ms(periodic_time_delay);
}
}
else if (copy_u8_direction==CCW){
    219a:	fe 01       	movw	r30, r28
    219c:	eb 58       	subi	r30, 0x8B	; 139
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	82 30       	cpi	r24, 0x02	; 2
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <Stepper_moter_enum_Move+0x6b0>
    21a6:	31 c2       	rjmp	.+1122   	; 0x260a <Stepper_moter_enum_Move+0xb12>
	for (Local_u8_step_Counter=start;Local_u8_step_Counter>Number_Of_Forloop;Local_u8_step_Counter++){
    21a8:	fe 01       	movw	r30, r28
    21aa:	ec 58       	subi	r30, 0x8C	; 140
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	10 82       	st	Z, r1
    21b0:	21 c2       	rjmp	.+1090   	; 0x25f4 <Stepper_moter_enum_Move+0xafc>

	     //step1 -------->BLUE PIN IS LOW
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    21b2:	83 e0       	ldi	r24, 0x03	; 3
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	41 e0       	ldi	r20, 0x01	; 1
    21b8:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    21bc:	83 e0       	ldi	r24, 0x03	; 3
    21be:	61 e0       	ldi	r22, 0x01	; 1
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    21c6:	83 e0       	ldi	r24, 0x03	; 3
    21c8:	64 e0       	ldi	r22, 0x04	; 4
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_LOW );
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	63 e0       	ldi	r22, 0x03	; 3
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e2       	ldi	r26, 0x20	; 32
    21e0:	b1 e4       	ldi	r27, 0x41	; 65
    21e2:	8d ab       	std	Y+53, r24	; 0x35
    21e4:	9e ab       	std	Y+54, r25	; 0x36
    21e6:	af ab       	std	Y+55, r26	; 0x37
    21e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	6d a9       	ldd	r22, Y+53	; 0x35
    21ec:	7e a9       	ldd	r23, Y+54	; 0x36
    21ee:	8f a9       	ldd	r24, Y+55	; 0x37
    21f0:	98 ad       	ldd	r25, Y+56	; 0x38
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a e7       	ldi	r20, 0x7A	; 122
    21f8:	53 e4       	ldi	r21, 0x43	; 67
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	89 ab       	std	Y+49, r24	; 0x31
    2204:	9a ab       	std	Y+50, r25	; 0x32
    2206:	ab ab       	std	Y+51, r26	; 0x33
    2208:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    220a:	69 a9       	ldd	r22, Y+49	; 0x31
    220c:	7a a9       	ldd	r23, Y+50	; 0x32
    220e:	8b a9       	ldd	r24, Y+51	; 0x33
    2210:	9c a9       	ldd	r25, Y+52	; 0x34
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <Stepper_moter_enum_Move+0x734>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	98 ab       	std	Y+48, r25	; 0x30
    2228:	8f a7       	std	Y+47, r24	; 0x2f
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <Stepper_moter_enum_Move+0x7b2>
	else if (__tmp > 65535)
    222c:	69 a9       	ldd	r22, Y+49	; 0x31
    222e:	7a a9       	ldd	r23, Y+50	; 0x32
    2230:	8b a9       	ldd	r24, Y+51	; 0x33
    2232:	9c a9       	ldd	r25, Y+52	; 0x34
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <Stepper_moter_enum_Move+0x79e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	6d a9       	ldd	r22, Y+53	; 0x35
    2246:	7e a9       	ldd	r23, Y+54	; 0x36
    2248:	8f a9       	ldd	r24, Y+55	; 0x37
    224a:	98 ad       	ldd	r25, Y+56	; 0x38
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	98 ab       	std	Y+48, r25	; 0x30
    226a:	8f a7       	std	Y+47, r24	; 0x2f
    226c:	0f c0       	rjmp	.+30     	; 0x228c <Stepper_moter_enum_Move+0x794>
    226e:	89 e1       	ldi	r24, 0x19	; 25
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9e a7       	std	Y+46, r25	; 0x2e
    2274:	8d a7       	std	Y+45, r24	; 0x2d
    2276:	8d a5       	ldd	r24, Y+45	; 0x2d
    2278:	9e a5       	ldd	r25, Y+46	; 0x2e
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <Stepper_moter_enum_Move+0x782>
    227e:	9e a7       	std	Y+46, r25	; 0x2e
    2280:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	8f a5       	ldd	r24, Y+47	; 0x2f
    2284:	98 a9       	ldd	r25, Y+48	; 0x30
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	98 ab       	std	Y+48, r25	; 0x30
    228a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	8f a5       	ldd	r24, Y+47	; 0x2f
    228e:	98 a9       	ldd	r25, Y+48	; 0x30
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <Stepper_moter_enum_Move+0x776>
    2294:	14 c0       	rjmp	.+40     	; 0x22be <Stepper_moter_enum_Move+0x7c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	69 a9       	ldd	r22, Y+49	; 0x31
    2298:	7a a9       	ldd	r23, Y+50	; 0x32
    229a:	8b a9       	ldd	r24, Y+51	; 0x33
    229c:	9c a9       	ldd	r25, Y+52	; 0x34
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	98 ab       	std	Y+48, r25	; 0x30
    22a8:	8f a7       	std	Y+47, r24	; 0x2f
    22aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ac:	98 a9       	ldd	r25, Y+48	; 0x30
    22ae:	9c a7       	std	Y+44, r25	; 0x2c
    22b0:	8b a7       	std	Y+43, r24	; 0x2b
    22b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    22b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <Stepper_moter_enum_Move+0x7be>
    22ba:	9c a7       	std	Y+44, r25	; 0x2c
    22bc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(periodic_time_delay);
	    //step1 -------->PINK PIN IS LOW
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    22be:	83 e0       	ldi	r24, 0x03	; 3
    22c0:	60 e0       	ldi	r22, 0x00	; 0
    22c2:	41 e0       	ldi	r20, 0x01	; 1
    22c4:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    22c8:	83 e0       	ldi	r24, 0x03	; 3
    22ca:	61 e0       	ldi	r22, 0x01	; 1
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_LOW );
    22d2:	83 e0       	ldi	r24, 0x03	; 3
    22d4:	64 e0       	ldi	r22, 0x04	; 4
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    22dc:	83 e0       	ldi	r24, 0x03	; 3
    22de:	63 e0       	ldi	r22, 0x03	; 3
    22e0:	41 e0       	ldi	r20, 0x01	; 1
    22e2:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a0 e2       	ldi	r26, 0x20	; 32
    22ec:	b1 e4       	ldi	r27, 0x41	; 65
    22ee:	8f a3       	std	Y+39, r24	; 0x27
    22f0:	98 a7       	std	Y+40, r25	; 0x28
    22f2:	a9 a7       	std	Y+41, r26	; 0x29
    22f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f6:	6f a1       	ldd	r22, Y+39	; 0x27
    22f8:	78 a5       	ldd	r23, Y+40	; 0x28
    22fa:	89 a5       	ldd	r24, Y+41	; 0x29
    22fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	4a e7       	ldi	r20, 0x7A	; 122
    2304:	53 e4       	ldi	r21, 0x43	; 67
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	8b a3       	std	Y+35, r24	; 0x23
    2310:	9c a3       	std	Y+36, r25	; 0x24
    2312:	ad a3       	std	Y+37, r26	; 0x25
    2314:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2316:	6b a1       	ldd	r22, Y+35	; 0x23
    2318:	7c a1       	ldd	r23, Y+36	; 0x24
    231a:	8d a1       	ldd	r24, Y+37	; 0x25
    231c:	9e a1       	ldd	r25, Y+38	; 0x26
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e8       	ldi	r20, 0x80	; 128
    2324:	5f e3       	ldi	r21, 0x3F	; 63
    2326:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    232a:	88 23       	and	r24, r24
    232c:	2c f4       	brge	.+10     	; 0x2338 <Stepper_moter_enum_Move+0x840>
		__ticks = 1;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	9a a3       	std	Y+34, r25	; 0x22
    2334:	89 a3       	std	Y+33, r24	; 0x21
    2336:	3f c0       	rjmp	.+126    	; 0x23b6 <Stepper_moter_enum_Move+0x8be>
	else if (__tmp > 65535)
    2338:	6b a1       	ldd	r22, Y+35	; 0x23
    233a:	7c a1       	ldd	r23, Y+36	; 0x24
    233c:	8d a1       	ldd	r24, Y+37	; 0x25
    233e:	9e a1       	ldd	r25, Y+38	; 0x26
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	3f ef       	ldi	r19, 0xFF	; 255
    2344:	4f e7       	ldi	r20, 0x7F	; 127
    2346:	57 e4       	ldi	r21, 0x47	; 71
    2348:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    234c:	18 16       	cp	r1, r24
    234e:	4c f5       	brge	.+82     	; 0x23a2 <Stepper_moter_enum_Move+0x8aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2350:	6f a1       	ldd	r22, Y+39	; 0x27
    2352:	78 a5       	ldd	r23, Y+40	; 0x28
    2354:	89 a5       	ldd	r24, Y+41	; 0x29
    2356:	9a a5       	ldd	r25, Y+42	; 0x2a
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e2       	ldi	r20, 0x20	; 32
    235e:	51 e4       	ldi	r21, 0x41	; 65
    2360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	9a a3       	std	Y+34, r25	; 0x22
    2376:	89 a3       	std	Y+33, r24	; 0x21
    2378:	0f c0       	rjmp	.+30     	; 0x2398 <Stepper_moter_enum_Move+0x8a0>
    237a:	89 e1       	ldi	r24, 0x19	; 25
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	98 a3       	std	Y+32, r25	; 0x20
    2380:	8f 8f       	std	Y+31, r24	; 0x1f
    2382:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2384:	98 a1       	ldd	r25, Y+32	; 0x20
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <Stepper_moter_enum_Move+0x88e>
    238a:	98 a3       	std	Y+32, r25	; 0x20
    238c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238e:	89 a1       	ldd	r24, Y+33	; 0x21
    2390:	9a a1       	ldd	r25, Y+34	; 0x22
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	9a a3       	std	Y+34, r25	; 0x22
    2396:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2398:	89 a1       	ldd	r24, Y+33	; 0x21
    239a:	9a a1       	ldd	r25, Y+34	; 0x22
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	69 f7       	brne	.-38     	; 0x237a <Stepper_moter_enum_Move+0x882>
    23a0:	14 c0       	rjmp	.+40     	; 0x23ca <Stepper_moter_enum_Move+0x8d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a2:	6b a1       	ldd	r22, Y+35	; 0x23
    23a4:	7c a1       	ldd	r23, Y+36	; 0x24
    23a6:	8d a1       	ldd	r24, Y+37	; 0x25
    23a8:	9e a1       	ldd	r25, Y+38	; 0x26
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9a a3       	std	Y+34, r25	; 0x22
    23b4:	89 a3       	std	Y+33, r24	; 0x21
    23b6:	89 a1       	ldd	r24, Y+33	; 0x21
    23b8:	9a a1       	ldd	r25, Y+34	; 0x22
    23ba:	9e 8f       	std	Y+30, r25	; 0x1e
    23bc:	8d 8f       	std	Y+29, r24	; 0x1d
    23be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <Stepper_moter_enum_Move+0x8ca>
    23c6:	9e 8f       	std	Y+30, r25	; 0x1e
    23c8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(periodic_time_delay);
		//step1 -------->YELLOW PIN IS LOW
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    23ca:	83 e0       	ldi	r24, 0x03	; 3
    23cc:	60 e0       	ldi	r22, 0x00	; 0
    23ce:	41 e0       	ldi	r20, 0x01	; 1
    23d0:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_LOW );
    23d4:	83 e0       	ldi	r24, 0x03	; 3
    23d6:	61 e0       	ldi	r22, 0x01	; 1
    23d8:	40 e0       	ldi	r20, 0x00	; 0
    23da:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	64 e0       	ldi	r22, 0x04	; 4
    23e2:	41 e0       	ldi	r20, 0x01	; 1
    23e4:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    23e8:	83 e0       	ldi	r24, 0x03	; 3
    23ea:	63 e0       	ldi	r22, 0x03	; 3
    23ec:	41 e0       	ldi	r20, 0x01	; 1
    23ee:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	a0 e2       	ldi	r26, 0x20	; 32
    23f8:	b1 e4       	ldi	r27, 0x41	; 65
    23fa:	89 8f       	std	Y+25, r24	; 0x19
    23fc:	9a 8f       	std	Y+26, r25	; 0x1a
    23fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2400:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2402:	69 8d       	ldd	r22, Y+25	; 0x19
    2404:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2406:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2408:	9c 8d       	ldd	r25, Y+28	; 0x1c
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4a e7       	ldi	r20, 0x7A	; 122
    2410:	53 e4       	ldi	r21, 0x43	; 67
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8d 8b       	std	Y+21, r24	; 0x15
    241c:	9e 8b       	std	Y+22, r25	; 0x16
    241e:	af 8b       	std	Y+23, r26	; 0x17
    2420:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2422:	6d 89       	ldd	r22, Y+21	; 0x15
    2424:	7e 89       	ldd	r23, Y+22	; 0x16
    2426:	8f 89       	ldd	r24, Y+23	; 0x17
    2428:	98 8d       	ldd	r25, Y+24	; 0x18
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e8       	ldi	r20, 0x80	; 128
    2430:	5f e3       	ldi	r21, 0x3F	; 63
    2432:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2436:	88 23       	and	r24, r24
    2438:	2c f4       	brge	.+10     	; 0x2444 <Stepper_moter_enum_Move+0x94c>
		__ticks = 1;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9c 8b       	std	Y+20, r25	; 0x14
    2440:	8b 8b       	std	Y+19, r24	; 0x13
    2442:	3f c0       	rjmp	.+126    	; 0x24c2 <Stepper_moter_enum_Move+0x9ca>
	else if (__tmp > 65535)
    2444:	6d 89       	ldd	r22, Y+21	; 0x15
    2446:	7e 89       	ldd	r23, Y+22	; 0x16
    2448:	8f 89       	ldd	r24, Y+23	; 0x17
    244a:	98 8d       	ldd	r25, Y+24	; 0x18
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	4c f5       	brge	.+82     	; 0x24ae <Stepper_moter_enum_Move+0x9b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245c:	69 8d       	ldd	r22, Y+25	; 0x19
    245e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2460:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2462:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	51 e4       	ldi	r21, 0x41	; 65
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9c 8b       	std	Y+20, r25	; 0x14
    2482:	8b 8b       	std	Y+19, r24	; 0x13
    2484:	0f c0       	rjmp	.+30     	; 0x24a4 <Stepper_moter_enum_Move+0x9ac>
    2486:	89 e1       	ldi	r24, 0x19	; 25
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9a 8b       	std	Y+18, r25	; 0x12
    248c:	89 8b       	std	Y+17, r24	; 0x11
    248e:	89 89       	ldd	r24, Y+17	; 0x11
    2490:	9a 89       	ldd	r25, Y+18	; 0x12
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <Stepper_moter_enum_Move+0x99a>
    2496:	9a 8b       	std	Y+18, r25	; 0x12
    2498:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	8b 89       	ldd	r24, Y+19	; 0x13
    249c:	9c 89       	ldd	r25, Y+20	; 0x14
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	9c 8b       	std	Y+20, r25	; 0x14
    24a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a4:	8b 89       	ldd	r24, Y+19	; 0x13
    24a6:	9c 89       	ldd	r25, Y+20	; 0x14
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	69 f7       	brne	.-38     	; 0x2486 <Stepper_moter_enum_Move+0x98e>
    24ac:	14 c0       	rjmp	.+40     	; 0x24d6 <Stepper_moter_enum_Move+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ae:	6d 89       	ldd	r22, Y+21	; 0x15
    24b0:	7e 89       	ldd	r23, Y+22	; 0x16
    24b2:	8f 89       	ldd	r24, Y+23	; 0x17
    24b4:	98 8d       	ldd	r25, Y+24	; 0x18
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9c 8b       	std	Y+20, r25	; 0x14
    24c0:	8b 8b       	std	Y+19, r24	; 0x13
    24c2:	8b 89       	ldd	r24, Y+19	; 0x13
    24c4:	9c 89       	ldd	r25, Y+20	; 0x14
    24c6:	98 8b       	std	Y+16, r25	; 0x10
    24c8:	8f 87       	std	Y+15, r24	; 0x0f
    24ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    24cc:	98 89       	ldd	r25, Y+16	; 0x10
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <Stepper_moter_enum_Move+0x9d6>
    24d2:	98 8b       	std	Y+16, r25	; 0x10
    24d4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(periodic_time_delay);
		//step1 -------->ORANGE PIN IS LOW
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_LOW );
    24d6:	83 e0       	ldi	r24, 0x03	; 3
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    24e0:	83 e0       	ldi	r24, 0x03	; 3
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    24ea:	83 e0       	ldi	r24, 0x03	; 3
    24ec:	64 e0       	ldi	r22, 0x04	; 4
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    24f4:	83 e0       	ldi	r24, 0x03	; 3
    24f6:	63 e0       	ldi	r22, 0x03	; 3
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	a0 e2       	ldi	r26, 0x20	; 32
    2504:	b1 e4       	ldi	r27, 0x41	; 65
    2506:	8b 87       	std	Y+11, r24	; 0x0b
    2508:	9c 87       	std	Y+12, r25	; 0x0c
    250a:	ad 87       	std	Y+13, r26	; 0x0d
    250c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2510:	7c 85       	ldd	r23, Y+12	; 0x0c
    2512:	8d 85       	ldd	r24, Y+13	; 0x0d
    2514:	9e 85       	ldd	r25, Y+14	; 0x0e
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	4a e7       	ldi	r20, 0x7A	; 122
    251c:	53 e4       	ldi	r21, 0x43	; 67
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	8f 83       	std	Y+7, r24	; 0x07
    2528:	98 87       	std	Y+8, r25	; 0x08
    252a:	a9 87       	std	Y+9, r26	; 0x09
    252c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    252e:	6f 81       	ldd	r22, Y+7	; 0x07
    2530:	78 85       	ldd	r23, Y+8	; 0x08
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	9a 85       	ldd	r25, Y+10	; 0x0a
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e8       	ldi	r20, 0x80	; 128
    253c:	5f e3       	ldi	r21, 0x3F	; 63
    253e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2542:	88 23       	and	r24, r24
    2544:	2c f4       	brge	.+10     	; 0x2550 <Stepper_moter_enum_Move+0xa58>
		__ticks = 1;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
    254e:	3f c0       	rjmp	.+126    	; 0x25ce <Stepper_moter_enum_Move+0xad6>
	else if (__tmp > 65535)
    2550:	6f 81       	ldd	r22, Y+7	; 0x07
    2552:	78 85       	ldd	r23, Y+8	; 0x08
    2554:	89 85       	ldd	r24, Y+9	; 0x09
    2556:	9a 85       	ldd	r25, Y+10	; 0x0a
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	3f ef       	ldi	r19, 0xFF	; 255
    255c:	4f e7       	ldi	r20, 0x7F	; 127
    255e:	57 e4       	ldi	r21, 0x47	; 71
    2560:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2564:	18 16       	cp	r1, r24
    2566:	4c f5       	brge	.+82     	; 0x25ba <Stepper_moter_enum_Move+0xac2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2568:	6b 85       	ldd	r22, Y+11	; 0x0b
    256a:	7c 85       	ldd	r23, Y+12	; 0x0c
    256c:	8d 85       	ldd	r24, Y+13	; 0x0d
    256e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e2       	ldi	r20, 0x20	; 32
    2576:	51 e4       	ldi	r21, 0x41	; 65
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	bc 01       	movw	r22, r24
    2582:	cd 01       	movw	r24, r26
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	9e 83       	std	Y+6, r25	; 0x06
    258e:	8d 83       	std	Y+5, r24	; 0x05
    2590:	0f c0       	rjmp	.+30     	; 0x25b0 <Stepper_moter_enum_Move+0xab8>
    2592:	89 e1       	ldi	r24, 0x19	; 25
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9c 83       	std	Y+4, r25	; 0x04
    2598:	8b 83       	std	Y+3, r24	; 0x03
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	9c 81       	ldd	r25, Y+4	; 0x04
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <Stepper_moter_enum_Move+0xaa6>
    25a2:	9c 83       	std	Y+4, r25	; 0x04
    25a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	9e 81       	ldd	r25, Y+6	; 0x06
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	69 f7       	brne	.-38     	; 0x2592 <Stepper_moter_enum_Move+0xa9a>
    25b8:	14 c0       	rjmp	.+40     	; 0x25e2 <Stepper_moter_enum_Move+0xaea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ba:	6f 81       	ldd	r22, Y+7	; 0x07
    25bc:	78 85       	ldd	r23, Y+8	; 0x08
    25be:	89 85       	ldd	r24, Y+9	; 0x09
    25c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	9e 81       	ldd	r25, Y+6	; 0x06
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	9a 81       	ldd	r25, Y+2	; 0x02
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <Stepper_moter_enum_Move+0xae2>
    25de:	9a 83       	std	Y+2, r25	; 0x02
    25e0:	89 83       	std	Y+1, r24	; 0x01
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_LOW );
	_delay_ms(periodic_time_delay);
}
}
else if (copy_u8_direction==CCW){
	for (Local_u8_step_Counter=start;Local_u8_step_Counter>Number_Of_Forloop;Local_u8_step_Counter++){
    25e2:	de 01       	movw	r26, r28
    25e4:	ac 58       	subi	r26, 0x8C	; 140
    25e6:	bf 4f       	sbci	r27, 0xFF	; 255
    25e8:	fe 01       	movw	r30, r28
    25ea:	ec 58       	subi	r30, 0x8C	; 140
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	80 81       	ld	r24, Z
    25f0:	8f 5f       	subi	r24, 0xFF	; 255
    25f2:	8c 93       	st	X, r24
    25f4:	fe 01       	movw	r30, r28
    25f6:	ec 58       	subi	r30, 0x8C	; 140
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	de 01       	movw	r26, r28
    25fc:	af 58       	subi	r26, 0x8F	; 143
    25fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2600:	90 81       	ld	r25, Z
    2602:	8c 91       	ld	r24, X
    2604:	89 17       	cp	r24, r25
    2606:	08 f4       	brcc	.+2      	; 0x260a <Stepper_moter_enum_Move+0xb12>
    2608:	d4 cd       	rjmp	.-1112   	; 0x21b2 <Stepper_moter_enum_Move+0x6ba>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
		_delay_ms(periodic_time_delay);
	}
}
	return Local_enu_Erorr_State;
    260a:	fe 01       	movw	r30, r28
    260c:	ed 58       	subi	r30, 0x8D	; 141
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 81       	ld	r24, Z
}
    2612:	ca 58       	subi	r28, 0x8A	; 138
    2614:	df 4f       	sbci	r29, 0xFF	; 255
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	1f 91       	pop	r17
    2626:	0f 91       	pop	r16
    2628:	08 95       	ret

0000262a <DC_MOTOR_enum_INIT>:
#include "DC_MOTOR_private.h"

#include<util/delay.h>


ES_t DC_MOTOR_enum_INIT(){
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	0f 92       	push	r0
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State=ES_OK ;
    2634:	19 82       	std	Y+1, r1	; 0x01
	DIO_u8_Set_Pin_Direction(DC_MOTOR_EN1_PORT , DC_MOTOR_EN1_PIN , DIO_u8_INTIAL_OUTPUT);
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	64 e0       	ldi	r22, 0x04	; 4
    263a:	41 e0       	ldi	r20, 0x01	; 1
    263c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>
	DIO_u8_Set_Pin_Direction(DC_MOTOR_INPUT1_PORT , DC_MOTOR_INPUT1_PIN , DIO_u8_INTIAL_OUTPUT);
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	65 e0       	ldi	r22, 0x05	; 5
    2644:	41 e0       	ldi	r20, 0x01	; 1
    2646:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>
	DIO_u8_Set_Pin_Direction(DC_MOTOR_INPUT2_PORT , DC_MOTOR_INPUT2_PIN , DIO_u8_INTIAL_OUTPUT);
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	66 e0       	ldi	r22, 0x06	; 6
    264e:	41 e0       	ldi	r20, 0x01	; 1
    2650:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>


	DIO_u8_Set_Pin_Value  (DC_MOTOR_EN1_PORT, DC_MOTOR_EN1_PIN,DIO_u8_INTIAL_LOW );
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	64 e0       	ldi	r22, 0x04	; 4
    2658:	40 e0       	ldi	r20, 0x00	; 0
    265a:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT1_PORT, DC_MOTOR_INPUT1_PIN,DIO_u8_INTIAL_HIGH );
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	65 e0       	ldi	r22, 0x05	; 5
    2662:	41 e0       	ldi	r20, 0x01	; 1
    2664:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT2_PORT, DC_MOTOR_INPUT2_PIN,DIO_u8_INTIAL_HIGH );
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	66 e0       	ldi	r22, 0x06	; 6
    266c:	41 e0       	ldi	r20, 0x01	; 1
    266e:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>

	return Local_enu_Erorr_State;
    2672:	89 81       	ldd	r24, Y+1	; 0x01

}
    2674:	0f 90       	pop	r0
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <DC_MOTOR_enum_Start>:

ES_t DC_MOTOR_enum_Start(u8 copy_u8_DC_MOTOT_Direction){
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	00 d0       	rcall	.+0      	; 0x2682 <DC_MOTOR_enum_Start+0x6>
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State=ES_OK ;
    2688:	19 82       	std	Y+1, r1	; 0x01
	DIO_u8_Set_Pin_Value  (DC_MOTOR_EN1_PORT, DC_MOTOR_EN1_PIN,DIO_u8_HIGH );
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	64 e0       	ldi	r22, 0x04	; 4
    268e:	41 e0       	ldi	r20, 0x01	; 1
    2690:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>


if(copy_u8_DC_MOTOT_Direction == CW){
    2694:	8a 81       	ldd	r24, Y+2	; 0x02
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	59 f4       	brne	.+22     	; 0x26b0 <DC_MOTOR_enum_Start+0x34>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT1_PORT, DC_MOTOR_INPUT1_PIN,DIO_u8_HIGH );
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	65 e0       	ldi	r22, 0x05	; 5
    269e:	41 e0       	ldi	r20, 0x01	; 1
    26a0:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT2_PORT, DC_MOTOR_INPUT2_PIN,DIO_u8_LOW );
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	66 e0       	ldi	r22, 0x06	; 6
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
    26ae:	10 c0       	rjmp	.+32     	; 0x26d0 <DC_MOTOR_enum_Start+0x54>

}
else if(copy_u8_DC_MOTOT_Direction==CCW){
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	82 30       	cpi	r24, 0x02	; 2
    26b4:	59 f4       	brne	.+22     	; 0x26cc <DC_MOTOR_enum_Start+0x50>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT1_PORT, DC_MOTOR_INPUT1_PIN,DIO_u8_LOW );
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	65 e0       	ldi	r22, 0x05	; 5
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT2_PORT, DC_MOTOR_INPUT2_PIN,DIO_u8_HIGH );
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	66 e0       	ldi	r22, 0x06	; 6
    26c4:	41 e0       	ldi	r20, 0x01	; 1
    26c6:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <DC_MOTOR_enum_Start+0x54>
}
	else{
		Local_enu_Erorr_State= ES_NOK ;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	89 83       	std	Y+1, r24	; 0x01
}
return Local_enu_Erorr_State;
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <DC_MOTOR_enum_Stop>:
ES_t DC_MOTOR_enum_Stop(){
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	0f 92       	push	r0
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State=ES_OK;
    26e6:	19 82       	std	Y+1, r1	; 0x01
//STOP DC MOTOR
	DIO_u8_Set_Pin_Value  (DC_MOTOR_EN1_PORT, DC_MOTOR_EN1_PIN,DIO_u8_LOW );
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	64 e0       	ldi	r22, 0x04	; 4
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT1_PORT, DC_MOTOR_INPUT1_PIN,DIO_u8_LOW );
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	65 e0       	ldi	r22, 0x05	; 5
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT2_PORT, DC_MOTOR_INPUT2_PIN,DIO_u8_LOW );
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	66 e0       	ldi	r22, 0x06	; 6
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>

	Local_enu_Erorr_State=ES_NOK;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_Erorr_State;
    270a:	89 81       	ldd	r24, Y+1	; 0x01

}
    270c:	0f 90       	pop	r0
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <KPD_enum_Init>:
     const u8 KPD_Au8_Keys[4][4]   = KPD_Keys ;
	 const u8 KPD_Au8_Rows_Pins[4] ={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
	 const u8 KPD_Au8_Cols_Pins[4] ={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};

	ES_t KPD_enum_Init(void)
	{
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	0f 92       	push	r0
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
		ES_t Local_enu_Erorr_State = ES_OK;
    271e:	19 82       	std	Y+1, r1	; 0x01
//		DIO_u8_Set_Pin_Value(2 , 0 , 0);

		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R1_PIN , DIO_u8_INTIAL_OUTPUT);
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R2_PIN , DIO_u8_INTIAL_OUTPUT);
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	61 e0       	ldi	r22, 0x01	; 1
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R3_PIN , DIO_u8_INTIAL_OUTPUT);
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	62 e0       	ldi	r22, 0x02	; 2
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R4_PIN , DIO_u8_INTIAL_OUTPUT);
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	63 e0       	ldi	r22, 0x03	; 3
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>

		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C1_PIN , DIO_u8_INTIAL_INPUT);
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	64 e0       	ldi	r22, 0x04	; 4
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C2_PIN , DIO_u8_INTIAL_INPUT);
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	65 e0       	ldi	r22, 0x05	; 5
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C3_PIN , DIO_u8_INTIAL_INPUT);
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	66 e0       	ldi	r22, 0x06	; 6
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C4_PIN , DIO_u8_INTIAL_INPUT);
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	67 e0       	ldi	r22, 0x07	; 7
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>

		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R1_PIN , DIO_u8_INTIAL_HIGH);
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	41 e0       	ldi	r20, 0x01	; 1
    2776:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R2_PIN , DIO_u8_INTIAL_HIGH);
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	61 e0       	ldi	r22, 0x01	; 1
    277e:	41 e0       	ldi	r20, 0x01	; 1
    2780:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R3_PIN , DIO_u8_INTIAL_HIGH);
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	62 e0       	ldi	r22, 0x02	; 2
    2788:	41 e0       	ldi	r20, 0x01	; 1
    278a:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R4_PIN , DIO_u8_INTIAL_HIGH);
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	63 e0       	ldi	r22, 0x03	; 3
    2792:	41 e0       	ldi	r20, 0x01	; 1
    2794:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>

		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C1_PIN , DIO_u8_INTIAL_PULL_UP);
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	64 e0       	ldi	r22, 0x04	; 4
    279c:	41 e0       	ldi	r20, 0x01	; 1
    279e:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C2_PIN , DIO_u8_INTIAL_PULL_UP);
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	65 e0       	ldi	r22, 0x05	; 5
    27a6:	41 e0       	ldi	r20, 0x01	; 1
    27a8:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C3_PIN , DIO_u8_INTIAL_PULL_UP);
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	66 e0       	ldi	r22, 0x06	; 6
    27b0:	41 e0       	ldi	r20, 0x01	; 1
    27b2:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C4_PIN , DIO_u8_INTIAL_PULL_UP);
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	67 e0       	ldi	r22, 0x07	; 7
    27ba:	41 e0       	ldi	r20, 0x01	; 1
    27bc:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>

		return Local_enu_Erorr_State;
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
	}
    27c2:	0f 90       	pop	r0
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <KPD_enum_Get_Key_State>:
ES_t KPD_enum_Get_Key_State(u8 *Copy_pu8_Returned_Key){
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	65 97       	sbiw	r28, 0x15	; 21
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	9d 8b       	std	Y+21, r25	; 0x15
    27e0:	8c 8b       	std	Y+20, r24	; 0x14

 ES_t Local_enu_Erorr_State = ES_OK ;
    27e2:	1a 8a       	std	Y+18, r1	; 0x12
 u8 Local_u8_Rows_Counter, Local_u8_Cols_Counter, Local_u8_Key_Value=0, Local_u8_Flag =DIO_u8_LOW;
    27e4:	1b 8a       	std	Y+19, r1	; 0x13
    27e6:	1f 86       	std	Y+15, r1	; 0x0f
 if ( Copy_pu8_Returned_Key != NULL ){
    27e8:	8c 89       	ldd	r24, Y+20	; 0x14
    27ea:	9d 89       	ldd	r25, Y+21	; 0x15
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <KPD_enum_Get_Key_State+0x28>
    27f0:	f0 c0       	rjmp	.+480    	; 0x29d2 <KPD_enum_Get_Key_State+0x208>
		*Copy_pu8_Returned_Key = KPD_u8_Keys_NO_Pressed;
    27f2:	ec 89       	ldd	r30, Y+20	; 0x14
    27f4:	fd 89       	ldd	r31, Y+21	; 0x15
    27f6:	8f ef       	ldi	r24, 0xFF	; 255
    27f8:	80 83       	st	Z, r24



/* activate each row by for loop */
	 for (Local_u8_Rows_Counter=KPD_u8_R1; Local_u8_Rows_Counter<=KPD_u8_R4; Local_u8_Rows_Counter++){
    27fa:	19 8a       	std	Y+17, r1	; 0x11
    27fc:	e5 c0       	rjmp	.+458    	; 0x29c8 <KPD_enum_Get_Key_State+0x1fe>
		 DIO_u8_Set_Pin_Value (KPD_u8_PORT, KPD_Au8_Rows_Pins[Local_u8_Rows_Counter],  DIO_u8_LOW );
    27fe:	89 89       	ldd	r24, Y+17	; 0x11
    2800:	88 2f       	mov	r24, r24
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	fc 01       	movw	r30, r24
    2806:	e8 5f       	subi	r30, 0xF8	; 248
    2808:	fe 4f       	sbci	r31, 0xFE	; 254
    280a:	90 81       	ld	r25, Z
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	69 2f       	mov	r22, r25
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
//			DIO_u8_Set_Pin_Value(2 , 0 , 1);

		 /*check which input pin has zero		  */
		 for (Local_u8_Cols_Counter=KPD_u8_C1; Local_u8_Cols_Counter<=KPD_u8_C4; Local_u8_Cols_Counter++){
    2816:	18 8a       	std	Y+16, r1	; 0x10
    2818:	c1 c0       	rjmp	.+386    	; 0x299c <KPD_enum_Get_Key_State+0x1d2>
			 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT, KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
    281a:	88 89       	ldd	r24, Y+16	; 0x10
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	fc 01       	movw	r30, r24
    2822:	e4 5f       	subi	r30, 0xF4	; 244
    2824:	fe 4f       	sbci	r31, 0xFE	; 254
    2826:	90 81       	ld	r25, Z
    2828:	9e 01       	movw	r18, r28
    282a:	2d 5e       	subi	r18, 0xED	; 237
    282c:	3f 4f       	sbci	r19, 0xFF	; 255
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	69 2f       	mov	r22, r25
    2832:	a9 01       	movw	r20, r18
    2834:	0e 94 46 0b 	call	0x168c	; 0x168c <DIO_u8_Get_Pin_Value>
//	 			DIO_u8_Set_Pin_Value(2 , 0 , 1);

//           if switch is pressed
			 if (Local_u8_Key_Value == DIO_u8_LOW)
    2838:	8b 89       	ldd	r24, Y+19	; 0x13
    283a:	88 23       	and	r24, r24
    283c:	09 f0       	breq	.+2      	; 0x2840 <KPD_enum_Get_Key_State+0x76>
    283e:	ab c0       	rjmp	.+342    	; 0x2996 <KPD_enum_Get_Key_State+0x1cc>
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	a0 ea       	ldi	r26, 0xA0	; 160
    2846:	b1 e4       	ldi	r27, 0x41	; 65
    2848:	8b 87       	std	Y+11, r24	; 0x0b
    284a:	9c 87       	std	Y+12, r25	; 0x0c
    284c:	ad 87       	std	Y+13, r26	; 0x0d
    284e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2850:	6b 85       	ldd	r22, Y+11	; 0x0b
    2852:	7c 85       	ldd	r23, Y+12	; 0x0c
    2854:	8d 85       	ldd	r24, Y+13	; 0x0d
    2856:	9e 85       	ldd	r25, Y+14	; 0x0e
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	4a e7       	ldi	r20, 0x7A	; 122
    285e:	53 e4       	ldi	r21, 0x43	; 67
    2860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	8f 83       	std	Y+7, r24	; 0x07
    286a:	98 87       	std	Y+8, r25	; 0x08
    286c:	a9 87       	std	Y+9, r26	; 0x09
    286e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2870:	6f 81       	ldd	r22, Y+7	; 0x07
    2872:	78 85       	ldd	r23, Y+8	; 0x08
    2874:	89 85       	ldd	r24, Y+9	; 0x09
    2876:	9a 85       	ldd	r25, Y+10	; 0x0a
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e8       	ldi	r20, 0x80	; 128
    287e:	5f e3       	ldi	r21, 0x3F	; 63
    2880:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2884:	88 23       	and	r24, r24
    2886:	2c f4       	brge	.+10     	; 0x2892 <KPD_enum_Get_Key_State+0xc8>
		__ticks = 1;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	9e 83       	std	Y+6, r25	; 0x06
    288e:	8d 83       	std	Y+5, r24	; 0x05
    2890:	3f c0       	rjmp	.+126    	; 0x2910 <KPD_enum_Get_Key_State+0x146>
	else if (__tmp > 65535)
    2892:	6f 81       	ldd	r22, Y+7	; 0x07
    2894:	78 85       	ldd	r23, Y+8	; 0x08
    2896:	89 85       	ldd	r24, Y+9	; 0x09
    2898:	9a 85       	ldd	r25, Y+10	; 0x0a
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	3f ef       	ldi	r19, 0xFF	; 255
    289e:	4f e7       	ldi	r20, 0x7F	; 127
    28a0:	57 e4       	ldi	r21, 0x47	; 71
    28a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28a6:	18 16       	cp	r1, r24
    28a8:	4c f5       	brge	.+82     	; 0x28fc <KPD_enum_Get_Key_State+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e2       	ldi	r20, 0x20	; 32
    28b8:	51 e4       	ldi	r21, 0x41	; 65
    28ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	9e 83       	std	Y+6, r25	; 0x06
    28d0:	8d 83       	std	Y+5, r24	; 0x05
    28d2:	0f c0       	rjmp	.+30     	; 0x28f2 <KPD_enum_Get_Key_State+0x128>
    28d4:	89 e1       	ldi	r24, 0x19	; 25
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	9c 83       	std	Y+4, r25	; 0x04
    28da:	8b 83       	std	Y+3, r24	; 0x03
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	9c 81       	ldd	r25, Y+4	; 0x04
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <KPD_enum_Get_Key_State+0x116>
    28e4:	9c 83       	std	Y+4, r25	; 0x04
    28e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ea:	9e 81       	ldd	r25, Y+6	; 0x06
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	69 f7       	brne	.-38     	; 0x28d4 <KPD_enum_Get_Key_State+0x10a>
    28fa:	14 c0       	rjmp	.+40     	; 0x2924 <KPD_enum_Get_Key_State+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fc:	6f 81       	ldd	r22, Y+7	; 0x07
    28fe:	78 85       	ldd	r23, Y+8	; 0x08
    2900:	89 85       	ldd	r24, Y+9	; 0x09
    2902:	9a 85       	ldd	r25, Y+10	; 0x0a
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	9e 83       	std	Y+6, r25	; 0x06
    290e:	8d 83       	std	Y+5, r24	; 0x05
    2910:	8d 81       	ldd	r24, Y+5	; 0x05
    2912:	9e 81       	ldd	r25, Y+6	; 0x06
    2914:	9a 83       	std	Y+2, r25	; 0x02
    2916:	89 83       	std	Y+1, r24	; 0x01
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	9a 81       	ldd	r25, Y+2	; 0x02
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <KPD_enum_Get_Key_State+0x152>
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	89 83       	std	Y+1, r24	; 0x01
            {

          /*Debouncing */
         _delay_ms(20);
		 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT, KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
    2924:	88 89       	ldd	r24, Y+16	; 0x10
    2926:	88 2f       	mov	r24, r24
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	fc 01       	movw	r30, r24
    292c:	e4 5f       	subi	r30, 0xF4	; 244
    292e:	fe 4f       	sbci	r31, 0xFE	; 254
    2930:	90 81       	ld	r25, Z
    2932:	9e 01       	movw	r18, r28
    2934:	2d 5e       	subi	r18, 0xED	; 237
    2936:	3f 4f       	sbci	r19, 0xFF	; 255
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	69 2f       	mov	r22, r25
    293c:	a9 01       	movw	r20, r18
    293e:	0e 94 46 0b 	call	0x168c	; 0x168c <DIO_u8_Get_Pin_Value>
    2942:	0f c0       	rjmp	.+30     	; 0x2962 <KPD_enum_Get_Key_State+0x198>
//			DIO_u8_Set_Pin_Value(2 , 1 , 1);

         /*check if the pin is still pressed */
		 while (Local_u8_Key_Value == DIO_u8_LOW){
			 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT,  KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
    2944:	88 89       	ldd	r24, Y+16	; 0x10
    2946:	88 2f       	mov	r24, r24
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	fc 01       	movw	r30, r24
    294c:	e4 5f       	subi	r30, 0xF4	; 244
    294e:	fe 4f       	sbci	r31, 0xFE	; 254
    2950:	90 81       	ld	r25, Z
    2952:	9e 01       	movw	r18, r28
    2954:	2d 5e       	subi	r18, 0xED	; 237
    2956:	3f 4f       	sbci	r19, 0xFF	; 255
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	69 2f       	mov	r22, r25
    295c:	a9 01       	movw	r20, r18
    295e:	0e 94 46 0b 	call	0x168c	; 0x168c <DIO_u8_Get_Pin_Value>
         _delay_ms(20);
		 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT, KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
//			DIO_u8_Set_Pin_Value(2 , 1 , 1);

         /*check if the pin is still pressed */
		 while (Local_u8_Key_Value == DIO_u8_LOW){
    2962:	8b 89       	ldd	r24, Y+19	; 0x13
    2964:	88 23       	and	r24, r24
    2966:	71 f3       	breq	.-36     	; 0x2944 <KPD_enum_Get_Key_State+0x17a>
			 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT,  KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
//			 Local_enu_Erorr_State= ES_OK;
		 }
      *Copy_pu8_Returned_Key = KPD_Au8_Keys[Local_u8_Rows_Counter][Local_u8_Cols_Counter];
    2968:	89 89       	ldd	r24, Y+17	; 0x11
    296a:	48 2f       	mov	r20, r24
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	88 89       	ldd	r24, Y+16	; 0x10
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	ca 01       	movw	r24, r20
    2976:	88 0f       	add	r24, r24
    2978:	99 1f       	adc	r25, r25
    297a:	88 0f       	add	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	82 0f       	add	r24, r18
    2980:	93 1f       	adc	r25, r19
    2982:	fc 01       	movw	r30, r24
    2984:	e8 50       	subi	r30, 0x08	; 8
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 81       	ld	r24, Z
    298a:	ec 89       	ldd	r30, Y+20	; 0x14
    298c:	fd 89       	ldd	r31, Y+21	; 0x15
    298e:	80 83       	st	Z, r24
       Local_u8_Flag =DIO_u8_HIGH;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	8f 87       	std	Y+15, r24	; 0x0f
    2994:	07 c0       	rjmp	.+14     	; 0x29a4 <KPD_enum_Get_Key_State+0x1da>
	 for (Local_u8_Rows_Counter=KPD_u8_R1; Local_u8_Rows_Counter<=KPD_u8_R4; Local_u8_Rows_Counter++){
		 DIO_u8_Set_Pin_Value (KPD_u8_PORT, KPD_Au8_Rows_Pins[Local_u8_Rows_Counter],  DIO_u8_LOW );
//			DIO_u8_Set_Pin_Value(2 , 0 , 1);

		 /*check which input pin has zero		  */
		 for (Local_u8_Cols_Counter=KPD_u8_C1; Local_u8_Cols_Counter<=KPD_u8_C4; Local_u8_Cols_Counter++){
    2996:	88 89       	ldd	r24, Y+16	; 0x10
    2998:	8f 5f       	subi	r24, 0xFF	; 255
    299a:	88 8b       	std	Y+16, r24	; 0x10
    299c:	88 89       	ldd	r24, Y+16	; 0x10
    299e:	84 30       	cpi	r24, 0x04	; 4
    29a0:	08 f4       	brcc	.+2      	; 0x29a4 <KPD_enum_Get_Key_State+0x1da>
    29a2:	3b cf       	rjmp	.-394    	; 0x281a <KPD_enum_Get_Key_State+0x50>
       Local_u8_Flag =DIO_u8_HIGH;
        break;
            }
		 }
/*deactivate rows */
		 DIO_u8_Set_Pin_Value(KPD_u8_PORT,KPD_Au8_Rows_Pins[Local_u8_Rows_Counter],DIO_u8_HIGH);
    29a4:	89 89       	ldd	r24, Y+17	; 0x11
    29a6:	88 2f       	mov	r24, r24
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	fc 01       	movw	r30, r24
    29ac:	e8 5f       	subi	r30, 0xF8	; 248
    29ae:	fe 4f       	sbci	r31, 0xFE	; 254
    29b0:	90 81       	ld	r25, Z
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	69 2f       	mov	r22, r25
    29b6:	41 e0       	ldi	r20, 0x01	; 1
    29b8:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
		 			if(Local_u8_Flag == DIO_u8_HIGH)
    29bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	51 f0       	breq	.+20     	; 0x29d6 <KPD_enum_Get_Key_State+0x20c>
		*Copy_pu8_Returned_Key = KPD_u8_Keys_NO_Pressed;



/* activate each row by for loop */
	 for (Local_u8_Rows_Counter=KPD_u8_R1; Local_u8_Rows_Counter<=KPD_u8_R4; Local_u8_Rows_Counter++){
    29c2:	89 89       	ldd	r24, Y+17	; 0x11
    29c4:	8f 5f       	subi	r24, 0xFF	; 255
    29c6:	89 8b       	std	Y+17, r24	; 0x11
    29c8:	89 89       	ldd	r24, Y+17	; 0x11
    29ca:	84 30       	cpi	r24, 0x04	; 4
    29cc:	08 f4       	brcc	.+2      	; 0x29d0 <KPD_enum_Get_Key_State+0x206>
    29ce:	17 cf       	rjmp	.-466    	; 0x27fe <KPD_enum_Get_Key_State+0x34>
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <KPD_enum_Get_Key_State+0x20c>
		 				break;
	 }
 }
 else
     {
	 Local_enu_Erorr_State = ES_NOK;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	8a 8b       	std	Y+18, r24	; 0x12
     }
 return Local_enu_Erorr_State;
    29d6:	8a 89       	ldd	r24, Y+18	; 0x12
}
    29d8:	65 96       	adiw	r28, 0x15	; 21
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <LCD_enum_INIT>:
#include"LCD_private.h"

//#define F_CPU 8000000UL
#include<util/delay.h>

ES_t LCD_enum_INIT (void){
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	c2 54       	subi	r28, 0x42	; 66
    29f4:	d0 40       	sbci	r29, 0x00	; 0
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	fe 01       	movw	r30, r28
    2a02:	ff 96       	adiw	r30, 0x3f	; 63
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	ac e0       	ldi	r26, 0x0C	; 12
    2a0a:	b2 e4       	ldi	r27, 0x42	; 66
    2a0c:	80 83       	st	Z, r24
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	a2 83       	std	Z+2, r26	; 0x02
    2a12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a14:	fe 01       	movw	r30, r28
    2a16:	ff 96       	adiw	r30, 0x3f	; 63
    2a18:	60 81       	ld	r22, Z
    2a1a:	71 81       	ldd	r23, Z+1	; 0x01
    2a1c:	82 81       	ldd	r24, Z+2	; 0x02
    2a1e:	93 81       	ldd	r25, Z+3	; 0x03
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	4a e7       	ldi	r20, 0x7A	; 122
    2a26:	53 e4       	ldi	r21, 0x43	; 67
    2a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	8b af       	std	Y+59, r24	; 0x3b
    2a32:	9c af       	std	Y+60, r25	; 0x3c
    2a34:	ad af       	std	Y+61, r26	; 0x3d
    2a36:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    2a38:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a3a:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e8       	ldi	r20, 0x80	; 128
    2a46:	5f e3       	ldi	r21, 0x3F	; 63
    2a48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a4c:	88 23       	and	r24, r24
    2a4e:	2c f4       	brge	.+10     	; 0x2a5a <LCD_enum_INIT+0x70>
		__ticks = 1;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	9a af       	std	Y+58, r25	; 0x3a
    2a56:	89 af       	std	Y+57, r24	; 0x39
    2a58:	41 c0       	rjmp	.+130    	; 0x2adc <LCD_enum_INIT+0xf2>
	else if (__tmp > 65535)
    2a5a:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a5c:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a60:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	3f ef       	ldi	r19, 0xFF	; 255
    2a66:	4f e7       	ldi	r20, 0x7F	; 127
    2a68:	57 e4       	ldi	r21, 0x47	; 71
    2a6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a6e:	18 16       	cp	r1, r24
    2a70:	5c f5       	brge	.+86     	; 0x2ac8 <LCD_enum_INIT+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a72:	fe 01       	movw	r30, r28
    2a74:	ff 96       	adiw	r30, 0x3f	; 63
    2a76:	60 81       	ld	r22, Z
    2a78:	71 81       	ldd	r23, Z+1	; 0x01
    2a7a:	82 81       	ldd	r24, Z+2	; 0x02
    2a7c:	93 81       	ldd	r25, Z+3	; 0x03
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e2       	ldi	r20, 0x20	; 32
    2a84:	51 e4       	ldi	r21, 0x41	; 65
    2a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	bc 01       	movw	r22, r24
    2a90:	cd 01       	movw	r24, r26
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	9a af       	std	Y+58, r25	; 0x3a
    2a9c:	89 af       	std	Y+57, r24	; 0x39
    2a9e:	0f c0       	rjmp	.+30     	; 0x2abe <LCD_enum_INIT+0xd4>
    2aa0:	89 e1       	ldi	r24, 0x19	; 25
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	98 af       	std	Y+56, r25	; 0x38
    2aa6:	8f ab       	std	Y+55, r24	; 0x37
    2aa8:	8f a9       	ldd	r24, Y+55	; 0x37
    2aaa:	98 ad       	ldd	r25, Y+56	; 0x38
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <LCD_enum_INIT+0xc2>
    2ab0:	98 af       	std	Y+56, r25	; 0x38
    2ab2:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab4:	89 ad       	ldd	r24, Y+57	; 0x39
    2ab6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	9a af       	std	Y+58, r25	; 0x3a
    2abc:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abe:	89 ad       	ldd	r24, Y+57	; 0x39
    2ac0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	69 f7       	brne	.-38     	; 0x2aa0 <LCD_enum_INIT+0xb6>
    2ac6:	14 c0       	rjmp	.+40     	; 0x2af0 <LCD_enum_INIT+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac8:	6b ad       	ldd	r22, Y+59	; 0x3b
    2aca:	7c ad       	ldd	r23, Y+60	; 0x3c
    2acc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ace:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9a af       	std	Y+58, r25	; 0x3a
    2ada:	89 af       	std	Y+57, r24	; 0x39
    2adc:	89 ad       	ldd	r24, Y+57	; 0x39
    2ade:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ae0:	9e ab       	std	Y+54, r25	; 0x36
    2ae2:	8d ab       	std	Y+53, r24	; 0x35
    2ae4:	8d a9       	ldd	r24, Y+53	; 0x35
    2ae6:	9e a9       	ldd	r25, Y+54	; 0x36
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <LCD_enum_INIT+0xfe>
    2aec:	9e ab       	std	Y+54, r25	; 0x36
    2aee:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(35);
//to set CMND
	LCD_enum_Send_Comnd(FUN_SET_8BIT_2LINES_5X7);
    2af0:	88 e3       	ldi	r24, 0x38	; 56
    2af2:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_enum_Send_Comnd>
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a0 e2       	ldi	r26, 0x20	; 32
    2afc:	b2 e4       	ldi	r27, 0x42	; 66
    2afe:	89 ab       	std	Y+49, r24	; 0x31
    2b00:	9a ab       	std	Y+50, r25	; 0x32
    2b02:	ab ab       	std	Y+51, r26	; 0x33
    2b04:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b06:	69 a9       	ldd	r22, Y+49	; 0x31
    2b08:	7a a9       	ldd	r23, Y+50	; 0x32
    2b0a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b0c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b0e:	2b ea       	ldi	r18, 0xAB	; 171
    2b10:	3a ea       	ldi	r19, 0xAA	; 170
    2b12:	4a ea       	ldi	r20, 0xAA	; 170
    2b14:	5e e3       	ldi	r21, 0x3E	; 62
    2b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	8d a7       	std	Y+45, r24	; 0x2d
    2b20:	9e a7       	std	Y+46, r25	; 0x2e
    2b22:	af a7       	std	Y+47, r26	; 0x2f
    2b24:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2b26:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b28:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e8       	ldi	r20, 0x80	; 128
    2b34:	5f e3       	ldi	r21, 0x3F	; 63
    2b36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b3a:	88 23       	and	r24, r24
    2b3c:	1c f4       	brge	.+6      	; 0x2b44 <LCD_enum_INIT+0x15a>
		__ticks = 1;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	8c a7       	std	Y+44, r24	; 0x2c
    2b42:	91 c0       	rjmp	.+290    	; 0x2c66 <LCD_enum_INIT+0x27c>
	else if (__tmp > 255)
    2b44:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b46:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	4f e7       	ldi	r20, 0x7F	; 127
    2b52:	53 e4       	ldi	r21, 0x43	; 67
    2b54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b58:	18 16       	cp	r1, r24
    2b5a:	0c f0       	brlt	.+2      	; 0x2b5e <LCD_enum_INIT+0x174>
    2b5c:	7b c0       	rjmp	.+246    	; 0x2c54 <LCD_enum_INIT+0x26a>
	{
		_delay_ms(__us / 1000.0);
    2b5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b60:	7a a9       	ldd	r23, Y+50	; 0x32
    2b62:	8b a9       	ldd	r24, Y+51	; 0x33
    2b64:	9c a9       	ldd	r25, Y+52	; 0x34
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	4a e7       	ldi	r20, 0x7A	; 122
    2b6c:	54 e4       	ldi	r21, 0x44	; 68
    2b6e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	88 a7       	std	Y+40, r24	; 0x28
    2b78:	99 a7       	std	Y+41, r25	; 0x29
    2b7a:	aa a7       	std	Y+42, r26	; 0x2a
    2b7c:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7e:	68 a5       	ldd	r22, Y+40	; 0x28
    2b80:	79 a5       	ldd	r23, Y+41	; 0x29
    2b82:	8a a5       	ldd	r24, Y+42	; 0x2a
    2b84:	9b a5       	ldd	r25, Y+43	; 0x2b
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	4a e7       	ldi	r20, 0x7A	; 122
    2b8c:	53 e4       	ldi	r21, 0x43	; 67
    2b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	8c a3       	std	Y+36, r24	; 0x24
    2b98:	9d a3       	std	Y+37, r25	; 0x25
    2b9a:	ae a3       	std	Y+38, r26	; 0x26
    2b9c:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    2b9e:	6c a1       	ldd	r22, Y+36	; 0x24
    2ba0:	7d a1       	ldd	r23, Y+37	; 0x25
    2ba2:	8e a1       	ldd	r24, Y+38	; 0x26
    2ba4:	9f a1       	ldd	r25, Y+39	; 0x27
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	40 e8       	ldi	r20, 0x80	; 128
    2bac:	5f e3       	ldi	r21, 0x3F	; 63
    2bae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bb2:	88 23       	and	r24, r24
    2bb4:	2c f4       	brge	.+10     	; 0x2bc0 <LCD_enum_INIT+0x1d6>
		__ticks = 1;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	9b a3       	std	Y+35, r25	; 0x23
    2bbc:	8a a3       	std	Y+34, r24	; 0x22
    2bbe:	3f c0       	rjmp	.+126    	; 0x2c3e <LCD_enum_INIT+0x254>
	else if (__tmp > 65535)
    2bc0:	6c a1       	ldd	r22, Y+36	; 0x24
    2bc2:	7d a1       	ldd	r23, Y+37	; 0x25
    2bc4:	8e a1       	ldd	r24, Y+38	; 0x26
    2bc6:	9f a1       	ldd	r25, Y+39	; 0x27
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	3f ef       	ldi	r19, 0xFF	; 255
    2bcc:	4f e7       	ldi	r20, 0x7F	; 127
    2bce:	57 e4       	ldi	r21, 0x47	; 71
    2bd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bd4:	18 16       	cp	r1, r24
    2bd6:	4c f5       	brge	.+82     	; 0x2c2a <LCD_enum_INIT+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd8:	68 a5       	ldd	r22, Y+40	; 0x28
    2bda:	79 a5       	ldd	r23, Y+41	; 0x29
    2bdc:	8a a5       	ldd	r24, Y+42	; 0x2a
    2bde:	9b a5       	ldd	r25, Y+43	; 0x2b
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e2       	ldi	r20, 0x20	; 32
    2be6:	51 e4       	ldi	r21, 0x41	; 65
    2be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	bc 01       	movw	r22, r24
    2bf2:	cd 01       	movw	r24, r26
    2bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	9b a3       	std	Y+35, r25	; 0x23
    2bfe:	8a a3       	std	Y+34, r24	; 0x22
    2c00:	0f c0       	rjmp	.+30     	; 0x2c20 <LCD_enum_INIT+0x236>
    2c02:	89 e1       	ldi	r24, 0x19	; 25
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	99 a3       	std	Y+33, r25	; 0x21
    2c08:	88 a3       	std	Y+32, r24	; 0x20
    2c0a:	88 a1       	ldd	r24, Y+32	; 0x20
    2c0c:	99 a1       	ldd	r25, Y+33	; 0x21
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <LCD_enum_INIT+0x224>
    2c12:	99 a3       	std	Y+33, r25	; 0x21
    2c14:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c16:	8a a1       	ldd	r24, Y+34	; 0x22
    2c18:	9b a1       	ldd	r25, Y+35	; 0x23
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	9b a3       	std	Y+35, r25	; 0x23
    2c1e:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c20:	8a a1       	ldd	r24, Y+34	; 0x22
    2c22:	9b a1       	ldd	r25, Y+35	; 0x23
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	69 f7       	brne	.-38     	; 0x2c02 <LCD_enum_INIT+0x218>
    2c28:	24 c0       	rjmp	.+72     	; 0x2c72 <LCD_enum_INIT+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2a:	6c a1       	ldd	r22, Y+36	; 0x24
    2c2c:	7d a1       	ldd	r23, Y+37	; 0x25
    2c2e:	8e a1       	ldd	r24, Y+38	; 0x26
    2c30:	9f a1       	ldd	r25, Y+39	; 0x27
    2c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	9b a3       	std	Y+35, r25	; 0x23
    2c3c:	8a a3       	std	Y+34, r24	; 0x22
    2c3e:	8a a1       	ldd	r24, Y+34	; 0x22
    2c40:	9b a1       	ldd	r25, Y+35	; 0x23
    2c42:	9f 8f       	std	Y+31, r25	; 0x1f
    2c44:	8e 8f       	std	Y+30, r24	; 0x1e
    2c46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c48:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <LCD_enum_INIT+0x260>
    2c4e:	9f 8f       	std	Y+31, r25	; 0x1f
    2c50:	8e 8f       	std	Y+30, r24	; 0x1e
    2c52:	0f c0       	rjmp	.+30     	; 0x2c72 <LCD_enum_INIT+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c54:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c56:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	8c a7       	std	Y+44, r24	; 0x2c
    2c66:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c68:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c6c:	8a 95       	dec	r24
    2c6e:	f1 f7       	brne	.-4      	; 0x2c6c <LCD_enum_INIT+0x282>
    2c70:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(40);
	LCD_enum_Send_Comnd(DIS_ON_CURSOR_ON_BLINKING);
    2c72:	8f e0       	ldi	r24, 0x0F	; 15
    2c74:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_enum_Send_Comnd>
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a0 e2       	ldi	r26, 0x20	; 32
    2c7e:	b2 e4       	ldi	r27, 0x42	; 66
    2c80:	89 8f       	std	Y+25, r24	; 0x19
    2c82:	9a 8f       	std	Y+26, r25	; 0x1a
    2c84:	ab 8f       	std	Y+27, r26	; 0x1b
    2c86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c88:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	4a e7       	ldi	r20, 0x7A	; 122
    2c96:	53 e4       	ldi	r21, 0x43	; 67
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	8d 8b       	std	Y+21, r24	; 0x15
    2ca2:	9e 8b       	std	Y+22, r25	; 0x16
    2ca4:	af 8b       	std	Y+23, r26	; 0x17
    2ca6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    2caa:	7e 89       	ldd	r23, Y+22	; 0x16
    2cac:	8f 89       	ldd	r24, Y+23	; 0x17
    2cae:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	2c f4       	brge	.+10     	; 0x2cca <LCD_enum_INIT+0x2e0>
		__ticks = 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9c 8b       	std	Y+20, r25	; 0x14
    2cc6:	8b 8b       	std	Y+19, r24	; 0x13
    2cc8:	3f c0       	rjmp	.+126    	; 0x2d48 <LCD_enum_INIT+0x35e>
	else if (__tmp > 65535)
    2cca:	6d 89       	ldd	r22, Y+21	; 0x15
    2ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cce:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	3f ef       	ldi	r19, 0xFF	; 255
    2cd6:	4f e7       	ldi	r20, 0x7F	; 127
    2cd8:	57 e4       	ldi	r21, 0x47	; 71
    2cda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cde:	18 16       	cp	r1, r24
    2ce0:	4c f5       	brge	.+82     	; 0x2d34 <LCD_enum_INIT+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e2       	ldi	r20, 0x20	; 32
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9c 8b       	std	Y+20, r25	; 0x14
    2d08:	8b 8b       	std	Y+19, r24	; 0x13
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <LCD_enum_INIT+0x340>
    2d0c:	89 e1       	ldi	r24, 0x19	; 25
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	9a 8b       	std	Y+18, r25	; 0x12
    2d12:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d14:	89 89       	ldd	r24, Y+17	; 0x11
    2d16:	9a 89       	ldd	r25, Y+18	; 0x12
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_enum_INIT+0x32e>
    2d1c:	9a 8b       	std	Y+18, r25	; 0x12
    2d1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	8b 89       	ldd	r24, Y+19	; 0x13
    2d22:	9c 89       	ldd	r25, Y+20	; 0x14
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	9c 8b       	std	Y+20, r25	; 0x14
    2d28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <LCD_enum_INIT+0x322>
    2d32:	14 c0       	rjmp	.+40     	; 0x2d5c <LCD_enum_INIT+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d34:	6d 89       	ldd	r22, Y+21	; 0x15
    2d36:	7e 89       	ldd	r23, Y+22	; 0x16
    2d38:	8f 89       	ldd	r24, Y+23	; 0x17
    2d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9c 8b       	std	Y+20, r25	; 0x14
    2d46:	8b 8b       	std	Y+19, r24	; 0x13
    2d48:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4c:	98 8b       	std	Y+16, r25	; 0x10
    2d4e:	8f 87       	std	Y+15, r24	; 0x0f
    2d50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d52:	98 89       	ldd	r25, Y+16	; 0x10
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <LCD_enum_INIT+0x36a>
    2d58:	98 8b       	std	Y+16, r25	; 0x10
    2d5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	LCD_enum_Send_Comnd(DISPLAY_CLEAR);
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_enum_Send_Comnd>
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	a0 e8       	ldi	r26, 0x80	; 128
    2d68:	bf e3       	ldi	r27, 0x3F	; 63
    2d6a:	8b 87       	std	Y+11, r24	; 0x0b
    2d6c:	9c 87       	std	Y+12, r25	; 0x0c
    2d6e:	ad 87       	std	Y+13, r26	; 0x0d
    2d70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	4a e7       	ldi	r20, 0x7A	; 122
    2d80:	53 e4       	ldi	r21, 0x43	; 67
    2d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	8f 83       	std	Y+7, r24	; 0x07
    2d8c:	98 87       	std	Y+8, r25	; 0x08
    2d8e:	a9 87       	std	Y+9, r26	; 0x09
    2d90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d92:	6f 81       	ldd	r22, Y+7	; 0x07
    2d94:	78 85       	ldd	r23, Y+8	; 0x08
    2d96:	89 85       	ldd	r24, Y+9	; 0x09
    2d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e8       	ldi	r20, 0x80	; 128
    2da0:	5f e3       	ldi	r21, 0x3F	; 63
    2da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2da6:	88 23       	and	r24, r24
    2da8:	2c f4       	brge	.+10     	; 0x2db4 <LCD_enum_INIT+0x3ca>
		__ticks = 1;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	9e 83       	std	Y+6, r25	; 0x06
    2db0:	8d 83       	std	Y+5, r24	; 0x05
    2db2:	3f c0       	rjmp	.+126    	; 0x2e32 <LCD_enum_INIT+0x448>
	else if (__tmp > 65535)
    2db4:	6f 81       	ldd	r22, Y+7	; 0x07
    2db6:	78 85       	ldd	r23, Y+8	; 0x08
    2db8:	89 85       	ldd	r24, Y+9	; 0x09
    2dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	3f ef       	ldi	r19, 0xFF	; 255
    2dc0:	4f e7       	ldi	r20, 0x7F	; 127
    2dc2:	57 e4       	ldi	r21, 0x47	; 71
    2dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc8:	18 16       	cp	r1, r24
    2dca:	4c f5       	brge	.+82     	; 0x2e1e <LCD_enum_INIT+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e2       	ldi	r20, 0x20	; 32
    2dda:	51 e4       	ldi	r21, 0x41	; 65
    2ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	bc 01       	movw	r22, r24
    2de6:	cd 01       	movw	r24, r26
    2de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	9e 83       	std	Y+6, r25	; 0x06
    2df2:	8d 83       	std	Y+5, r24	; 0x05
    2df4:	0f c0       	rjmp	.+30     	; 0x2e14 <LCD_enum_INIT+0x42a>
    2df6:	89 e1       	ldi	r24, 0x19	; 25
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	9c 83       	std	Y+4, r25	; 0x04
    2dfc:	8b 83       	std	Y+3, r24	; 0x03
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	9c 81       	ldd	r25, Y+4	; 0x04
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	f1 f7       	brne	.-4      	; 0x2e02 <LCD_enum_INIT+0x418>
    2e06:	9c 83       	std	Y+4, r25	; 0x04
    2e08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	9e 83       	std	Y+6, r25	; 0x06
    2e12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e14:	8d 81       	ldd	r24, Y+5	; 0x05
    2e16:	9e 81       	ldd	r25, Y+6	; 0x06
    2e18:	00 97       	sbiw	r24, 0x00	; 0
    2e1a:	69 f7       	brne	.-38     	; 0x2df6 <LCD_enum_INIT+0x40c>
    2e1c:	14 c0       	rjmp	.+40     	; 0x2e46 <LCD_enum_INIT+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e20:	78 85       	ldd	r23, Y+8	; 0x08
    2e22:	89 85       	ldd	r24, Y+9	; 0x09
    2e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	9e 83       	std	Y+6, r25	; 0x06
    2e30:	8d 83       	std	Y+5, r24	; 0x05
    2e32:	8d 81       	ldd	r24, Y+5	; 0x05
    2e34:	9e 81       	ldd	r25, Y+6	; 0x06
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	89 83       	std	Y+1, r24	; 0x01
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <LCD_enum_INIT+0x454>
    2e42:	9a 83       	std	Y+2, r25	; 0x02
    2e44:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_enum_Send_Comnd(ENTRY_MOOD);
    2e46:	86 e0       	ldi	r24, 0x06	; 6
    2e48:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_enum_Send_Comnd>
    return ES_OK;
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
}
    2e4e:	ce 5b       	subi	r28, 0xBE	; 190
    2e50:	df 4f       	sbci	r29, 0xFF	; 255
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	f8 94       	cli
    2e56:	de bf       	out	0x3e, r29	; 62
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	cd bf       	out	0x3d, r28	; 61
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <LCD_enum_Send_Comnd>:
//to send a command
ES_t LCD_enum_Send_Comnd(u8 Copy_u8_Comnd){
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
    2e6a:	69 97       	sbiw	r28, 0x19	; 25
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
    2e76:	89 8f       	std	Y+25, r24	; 0x19
#if  LCD_u8_MODE == LCD_u8_MODE_8_bit
//RS =0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_LOW );
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	60 e0       	ldi	r22, 0x00	; 0
    2e7c:	40 e0       	ldi	r20, 0x00	; 0
    2e7e:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
//RW = 0

 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	61 e0       	ldi	r22, 0x01	; 1
    2e86:	40 e0       	ldi	r20, 0x00	; 0
    2e88:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>

//Write Command
 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_Comnd);
    2e8c:	82 e0       	ldi	r24, 0x02	; 2
    2e8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e90:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_u8_Set_Port_Value>

//E = 1
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	62 e0       	ldi	r22, 0x02	; 2
    2e98:	41 e0       	ldi	r20, 0x01	; 1
    2e9a:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	a0 e8       	ldi	r26, 0x80	; 128
    2ea4:	bf e3       	ldi	r27, 0x3F	; 63
    2ea6:	8d 8b       	std	Y+21, r24	; 0x15
    2ea8:	9e 8b       	std	Y+22, r25	; 0x16
    2eaa:	af 8b       	std	Y+23, r26	; 0x17
    2eac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2eae:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb6:	2b ea       	ldi	r18, 0xAB	; 171
    2eb8:	3a ea       	ldi	r19, 0xAA	; 170
    2eba:	4a ea       	ldi	r20, 0xAA	; 170
    2ebc:	5e e3       	ldi	r21, 0x3E	; 62
    2ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	89 8b       	std	Y+17, r24	; 0x11
    2ec8:	9a 8b       	std	Y+18, r25	; 0x12
    2eca:	ab 8b       	std	Y+19, r26	; 0x13
    2ecc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ece:	69 89       	ldd	r22, Y+17	; 0x11
    2ed0:	7a 89       	ldd	r23, Y+18	; 0x12
    2ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	40 e8       	ldi	r20, 0x80	; 128
    2edc:	5f e3       	ldi	r21, 0x3F	; 63
    2ede:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ee2:	88 23       	and	r24, r24
    2ee4:	1c f4       	brge	.+6      	; 0x2eec <LCD_enum_Send_Comnd+0x8a>
		__ticks = 1;
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	88 8b       	std	Y+16, r24	; 0x10
    2eea:	91 c0       	rjmp	.+290    	; 0x300e <LCD_enum_Send_Comnd+0x1ac>
	else if (__tmp > 255)
    2eec:	69 89       	ldd	r22, Y+17	; 0x11
    2eee:	7a 89       	ldd	r23, Y+18	; 0x12
    2ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	4f e7       	ldi	r20, 0x7F	; 127
    2efa:	53 e4       	ldi	r21, 0x43	; 67
    2efc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f00:	18 16       	cp	r1, r24
    2f02:	0c f0       	brlt	.+2      	; 0x2f06 <LCD_enum_Send_Comnd+0xa4>
    2f04:	7b c0       	rjmp	.+246    	; 0x2ffc <LCD_enum_Send_Comnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2f06:	6d 89       	ldd	r22, Y+21	; 0x15
    2f08:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	4a e7       	ldi	r20, 0x7A	; 122
    2f14:	54 e4       	ldi	r21, 0x44	; 68
    2f16:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	8c 87       	std	Y+12, r24	; 0x0c
    2f20:	9d 87       	std	Y+13, r25	; 0x0d
    2f22:	ae 87       	std	Y+14, r26	; 0x0e
    2f24:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f26:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f28:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	4a e7       	ldi	r20, 0x7A	; 122
    2f34:	53 e4       	ldi	r21, 0x43	; 67
    2f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	88 87       	std	Y+8, r24	; 0x08
    2f40:	99 87       	std	Y+9, r25	; 0x09
    2f42:	aa 87       	std	Y+10, r26	; 0x0a
    2f44:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f46:	68 85       	ldd	r22, Y+8	; 0x08
    2f48:	79 85       	ldd	r23, Y+9	; 0x09
    2f4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e8       	ldi	r20, 0x80	; 128
    2f54:	5f e3       	ldi	r21, 0x3F	; 63
    2f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f5a:	88 23       	and	r24, r24
    2f5c:	2c f4       	brge	.+10     	; 0x2f68 <LCD_enum_Send_Comnd+0x106>
		__ticks = 1;
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	9f 83       	std	Y+7, r25	; 0x07
    2f64:	8e 83       	std	Y+6, r24	; 0x06
    2f66:	3f c0       	rjmp	.+126    	; 0x2fe6 <LCD_enum_Send_Comnd+0x184>
	else if (__tmp > 65535)
    2f68:	68 85       	ldd	r22, Y+8	; 0x08
    2f6a:	79 85       	ldd	r23, Y+9	; 0x09
    2f6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	3f ef       	ldi	r19, 0xFF	; 255
    2f74:	4f e7       	ldi	r20, 0x7F	; 127
    2f76:	57 e4       	ldi	r21, 0x47	; 71
    2f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f7c:	18 16       	cp	r1, r24
    2f7e:	4c f5       	brge	.+82     	; 0x2fd2 <LCD_enum_Send_Comnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f80:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f82:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f84:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f86:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	40 e2       	ldi	r20, 0x20	; 32
    2f8e:	51 e4       	ldi	r21, 0x41	; 65
    2f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	bc 01       	movw	r22, r24
    2f9a:	cd 01       	movw	r24, r26
    2f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	9f 83       	std	Y+7, r25	; 0x07
    2fa6:	8e 83       	std	Y+6, r24	; 0x06
    2fa8:	0f c0       	rjmp	.+30     	; 0x2fc8 <LCD_enum_Send_Comnd+0x166>
    2faa:	89 e1       	ldi	r24, 0x19	; 25
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	9d 83       	std	Y+5, r25	; 0x05
    2fb0:	8c 83       	std	Y+4, r24	; 0x04
    2fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	f1 f7       	brne	.-4      	; 0x2fb6 <LCD_enum_Send_Comnd+0x154>
    2fba:	9d 83       	std	Y+5, r25	; 0x05
    2fbc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fbe:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	9f 83       	std	Y+7, r25	; 0x07
    2fc6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2fca:	9f 81       	ldd	r25, Y+7	; 0x07
    2fcc:	00 97       	sbiw	r24, 0x00	; 0
    2fce:	69 f7       	brne	.-38     	; 0x2faa <LCD_enum_Send_Comnd+0x148>
    2fd0:	24 c0       	rjmp	.+72     	; 0x301a <LCD_enum_Send_Comnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd2:	68 85       	ldd	r22, Y+8	; 0x08
    2fd4:	79 85       	ldd	r23, Y+9	; 0x09
    2fd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9f 83       	std	Y+7, r25	; 0x07
    2fe4:	8e 83       	std	Y+6, r24	; 0x06
    2fe6:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe8:	9f 81       	ldd	r25, Y+7	; 0x07
    2fea:	9b 83       	std	Y+3, r25	; 0x03
    2fec:	8a 83       	std	Y+2, r24	; 0x02
    2fee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <LCD_enum_Send_Comnd+0x190>
    2ff6:	9b 83       	std	Y+3, r25	; 0x03
    2ff8:	8a 83       	std	Y+2, r24	; 0x02
    2ffa:	0f c0       	rjmp	.+30     	; 0x301a <LCD_enum_Send_Comnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ffc:	69 89       	ldd	r22, Y+17	; 0x11
    2ffe:	7a 89       	ldd	r23, Y+18	; 0x12
    3000:	8b 89       	ldd	r24, Y+19	; 0x13
    3002:	9c 89       	ldd	r25, Y+20	; 0x14
    3004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	88 8b       	std	Y+16, r24	; 0x10
    300e:	88 89       	ldd	r24, Y+16	; 0x10
    3010:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	8a 95       	dec	r24
    3016:	f1 f7       	brne	.-4      	; 0x3014 <LCD_enum_Send_Comnd+0x1b2>
    3018:	89 83       	std	Y+1, r24	; 0x01
_delay_us(1);

//E = 0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	62 e0       	ldi	r22, 0x02	; 2
    301e:	40 e0       	ldi	r20, 0x00	; 0
    3020:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
 return ES_OK;
    3024:	80 e0       	ldi	r24, 0x00	; 0
    DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
return ES_OK;

#endif

}
    3026:	69 96       	adiw	r28, 0x19	; 25
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	08 95       	ret

00003038 <LCD_enum_Send_char>:
//function to send a character
ES_t LCD_enum_Send_char(u8 Copy_u8_char){
    3038:	df 93       	push	r29
    303a:	cf 93       	push	r28
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	69 97       	sbiw	r28, 0x19	; 25
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	de bf       	out	0x3e, r29	; 62
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	cd bf       	out	0x3d, r28	; 61
    304c:	89 8f       	std	Y+25, r24	; 0x19
	//RS =0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_HIGH );
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	60 e0       	ldi	r22, 0x00	; 0
    3052:	41 e0       	ldi	r20, 0x01	; 1
    3054:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	//RW = 0

	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	61 e0       	ldi	r22, 0x01	; 1
    305c:	40 e0       	ldi	r20, 0x00	; 0
    305e:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>

	//Write char
	 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_char);
    3062:	82 e0       	ldi	r24, 0x02	; 2
    3064:	69 8d       	ldd	r22, Y+25	; 0x19
    3066:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_u8_Set_Port_Value>

	//E = 1
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	62 e0       	ldi	r22, 0x02	; 2
    306e:	41 e0       	ldi	r20, 0x01	; 1
    3070:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	a0 e8       	ldi	r26, 0x80	; 128
    307a:	bf e3       	ldi	r27, 0x3F	; 63
    307c:	8d 8b       	std	Y+21, r24	; 0x15
    307e:	9e 8b       	std	Y+22, r25	; 0x16
    3080:	af 8b       	std	Y+23, r26	; 0x17
    3082:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3084:	6d 89       	ldd	r22, Y+21	; 0x15
    3086:	7e 89       	ldd	r23, Y+22	; 0x16
    3088:	8f 89       	ldd	r24, Y+23	; 0x17
    308a:	98 8d       	ldd	r25, Y+24	; 0x18
    308c:	2b ea       	ldi	r18, 0xAB	; 171
    308e:	3a ea       	ldi	r19, 0xAA	; 170
    3090:	4a ea       	ldi	r20, 0xAA	; 170
    3092:	5e e3       	ldi	r21, 0x3E	; 62
    3094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	89 8b       	std	Y+17, r24	; 0x11
    309e:	9a 8b       	std	Y+18, r25	; 0x12
    30a0:	ab 8b       	std	Y+19, r26	; 0x13
    30a2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    30a4:	69 89       	ldd	r22, Y+17	; 0x11
    30a6:	7a 89       	ldd	r23, Y+18	; 0x12
    30a8:	8b 89       	ldd	r24, Y+19	; 0x13
    30aa:	9c 89       	ldd	r25, Y+20	; 0x14
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	40 e8       	ldi	r20, 0x80	; 128
    30b2:	5f e3       	ldi	r21, 0x3F	; 63
    30b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30b8:	88 23       	and	r24, r24
    30ba:	1c f4       	brge	.+6      	; 0x30c2 <LCD_enum_Send_char+0x8a>
		__ticks = 1;
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	88 8b       	std	Y+16, r24	; 0x10
    30c0:	91 c0       	rjmp	.+290    	; 0x31e4 <LCD_enum_Send_char+0x1ac>
	else if (__tmp > 255)
    30c2:	69 89       	ldd	r22, Y+17	; 0x11
    30c4:	7a 89       	ldd	r23, Y+18	; 0x12
    30c6:	8b 89       	ldd	r24, Y+19	; 0x13
    30c8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	4f e7       	ldi	r20, 0x7F	; 127
    30d0:	53 e4       	ldi	r21, 0x43	; 67
    30d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d6:	18 16       	cp	r1, r24
    30d8:	0c f0       	brlt	.+2      	; 0x30dc <LCD_enum_Send_char+0xa4>
    30da:	7b c0       	rjmp	.+246    	; 0x31d2 <LCD_enum_Send_char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    30dc:	6d 89       	ldd	r22, Y+21	; 0x15
    30de:	7e 89       	ldd	r23, Y+22	; 0x16
    30e0:	8f 89       	ldd	r24, Y+23	; 0x17
    30e2:	98 8d       	ldd	r25, Y+24	; 0x18
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	4a e7       	ldi	r20, 0x7A	; 122
    30ea:	54 e4       	ldi	r21, 0x44	; 68
    30ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	8c 87       	std	Y+12, r24	; 0x0c
    30f6:	9d 87       	std	Y+13, r25	; 0x0d
    30f8:	ae 87       	std	Y+14, r26	; 0x0e
    30fa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    30fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    3100:	8e 85       	ldd	r24, Y+14	; 0x0e
    3102:	9f 85       	ldd	r25, Y+15	; 0x0f
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	4a e7       	ldi	r20, 0x7A	; 122
    310a:	53 e4       	ldi	r21, 0x43	; 67
    310c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	88 87       	std	Y+8, r24	; 0x08
    3116:	99 87       	std	Y+9, r25	; 0x09
    3118:	aa 87       	std	Y+10, r26	; 0x0a
    311a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    311c:	68 85       	ldd	r22, Y+8	; 0x08
    311e:	79 85       	ldd	r23, Y+9	; 0x09
    3120:	8a 85       	ldd	r24, Y+10	; 0x0a
    3122:	9b 85       	ldd	r25, Y+11	; 0x0b
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	40 e8       	ldi	r20, 0x80	; 128
    312a:	5f e3       	ldi	r21, 0x3F	; 63
    312c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3130:	88 23       	and	r24, r24
    3132:	2c f4       	brge	.+10     	; 0x313e <LCD_enum_Send_char+0x106>
		__ticks = 1;
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	9f 83       	std	Y+7, r25	; 0x07
    313a:	8e 83       	std	Y+6, r24	; 0x06
    313c:	3f c0       	rjmp	.+126    	; 0x31bc <LCD_enum_Send_char+0x184>
	else if (__tmp > 65535)
    313e:	68 85       	ldd	r22, Y+8	; 0x08
    3140:	79 85       	ldd	r23, Y+9	; 0x09
    3142:	8a 85       	ldd	r24, Y+10	; 0x0a
    3144:	9b 85       	ldd	r25, Y+11	; 0x0b
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	3f ef       	ldi	r19, 0xFF	; 255
    314a:	4f e7       	ldi	r20, 0x7F	; 127
    314c:	57 e4       	ldi	r21, 0x47	; 71
    314e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3152:	18 16       	cp	r1, r24
    3154:	4c f5       	brge	.+82     	; 0x31a8 <LCD_enum_Send_char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3156:	6c 85       	ldd	r22, Y+12	; 0x0c
    3158:	7d 85       	ldd	r23, Y+13	; 0x0d
    315a:	8e 85       	ldd	r24, Y+14	; 0x0e
    315c:	9f 85       	ldd	r25, Y+15	; 0x0f
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e2       	ldi	r20, 0x20	; 32
    3164:	51 e4       	ldi	r21, 0x41	; 65
    3166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	bc 01       	movw	r22, r24
    3170:	cd 01       	movw	r24, r26
    3172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	9f 83       	std	Y+7, r25	; 0x07
    317c:	8e 83       	std	Y+6, r24	; 0x06
    317e:	0f c0       	rjmp	.+30     	; 0x319e <LCD_enum_Send_char+0x166>
    3180:	89 e1       	ldi	r24, 0x19	; 25
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	9d 83       	std	Y+5, r25	; 0x05
    3186:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3188:	8c 81       	ldd	r24, Y+4	; 0x04
    318a:	9d 81       	ldd	r25, Y+5	; 0x05
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <LCD_enum_Send_char+0x154>
    3190:	9d 83       	std	Y+5, r25	; 0x05
    3192:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3194:	8e 81       	ldd	r24, Y+6	; 0x06
    3196:	9f 81       	ldd	r25, Y+7	; 0x07
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	9f 83       	std	Y+7, r25	; 0x07
    319c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319e:	8e 81       	ldd	r24, Y+6	; 0x06
    31a0:	9f 81       	ldd	r25, Y+7	; 0x07
    31a2:	00 97       	sbiw	r24, 0x00	; 0
    31a4:	69 f7       	brne	.-38     	; 0x3180 <LCD_enum_Send_char+0x148>
    31a6:	24 c0       	rjmp	.+72     	; 0x31f0 <LCD_enum_Send_char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a8:	68 85       	ldd	r22, Y+8	; 0x08
    31aa:	79 85       	ldd	r23, Y+9	; 0x09
    31ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    31ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    31b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	9f 83       	std	Y+7, r25	; 0x07
    31ba:	8e 83       	std	Y+6, r24	; 0x06
    31bc:	8e 81       	ldd	r24, Y+6	; 0x06
    31be:	9f 81       	ldd	r25, Y+7	; 0x07
    31c0:	9b 83       	std	Y+3, r25	; 0x03
    31c2:	8a 83       	std	Y+2, r24	; 0x02
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	9b 81       	ldd	r25, Y+3	; 0x03
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <LCD_enum_Send_char+0x190>
    31cc:	9b 83       	std	Y+3, r25	; 0x03
    31ce:	8a 83       	std	Y+2, r24	; 0x02
    31d0:	0f c0       	rjmp	.+30     	; 0x31f0 <LCD_enum_Send_char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31d2:	69 89       	ldd	r22, Y+17	; 0x11
    31d4:	7a 89       	ldd	r23, Y+18	; 0x12
    31d6:	8b 89       	ldd	r24, Y+19	; 0x13
    31d8:	9c 89       	ldd	r25, Y+20	; 0x14
    31da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	88 8b       	std	Y+16, r24	; 0x10
    31e4:	88 89       	ldd	r24, Y+16	; 0x10
    31e6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	8a 95       	dec	r24
    31ec:	f1 f7       	brne	.-4      	; 0x31ea <LCD_enum_Send_char+0x1b2>
    31ee:	89 83       	std	Y+1, r24	; 0x01
	 _delay_us(1);

	//E = 0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	62 e0       	ldi	r22, 0x02	; 2
    31f4:	40 e0       	ldi	r20, 0x00	; 0
    31f6:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8_Set_Pin_Value>
	    return ES_OK;
    31fa:	80 e0       	ldi	r24, 0x00	; 0

}
    31fc:	69 96       	adiw	r28, 0x19	; 25
    31fe:	0f b6       	in	r0, 0x3f	; 63
    3200:	f8 94       	cli
    3202:	de bf       	out	0x3e, r29	; 62
    3204:	0f be       	out	0x3f, r0	; 63
    3206:	cd bf       	out	0x3d, r28	; 61
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <LCD_enum_GO_TO_XY>:
//function to set a location
ES_t LCD_enum_GO_TO_XY (u8 Copy_u8_line_Num , u8 Copy_u8_Location ){
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	00 d0       	rcall	.+0      	; 0x3214 <LCD_enum_GO_TO_XY+0x6>
    3214:	00 d0       	rcall	.+0      	; 0x3216 <LCD_enum_GO_TO_XY+0x8>
    3216:	0f 92       	push	r0
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	89 83       	std	Y+1, r24	; 0x01
    321e:	6a 83       	std	Y+2, r22	; 0x02
//	u8 Local_u8_Erorr_State = ES_OK;
	if(Copy_u8_Location <= 39 ){
    3220:	8a 81       	ldd	r24, Y+2	; 0x02
    3222:	88 32       	cpi	r24, 0x28	; 40
    3224:	f8 f4       	brcc	.+62     	; 0x3264 <LCD_enum_GO_TO_XY+0x56>
		switch (Copy_u8_line_Num)
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	3d 83       	std	Y+5, r19	; 0x05
    322e:	2c 83       	std	Y+4, r18	; 0x04
    3230:	8c 81       	ldd	r24, Y+4	; 0x04
    3232:	9d 81       	ldd	r25, Y+5	; 0x05
    3234:	81 30       	cpi	r24, 0x01	; 1
    3236:	91 05       	cpc	r25, r1
    3238:	31 f0       	breq	.+12     	; 0x3246 <LCD_enum_GO_TO_XY+0x38>
    323a:	2c 81       	ldd	r18, Y+4	; 0x04
    323c:	3d 81       	ldd	r19, Y+5	; 0x05
    323e:	22 30       	cpi	r18, 0x02	; 2
    3240:	31 05       	cpc	r19, r1
    3242:	31 f0       	breq	.+12     	; 0x3250 <LCD_enum_GO_TO_XY+0x42>
    3244:	0a c0       	rjmp	.+20     	; 0x325a <LCD_enum_GO_TO_XY+0x4c>
		{
		case LCD_u8_LINE1 : LCD_enum_Send_Comnd(ADDRESS_OF_LINE1+Copy_u8_Location);break;
    3246:	8a 81       	ldd	r24, Y+2	; 0x02
    3248:	80 58       	subi	r24, 0x80	; 128
    324a:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_enum_Send_Comnd>
    324e:	08 c0       	rjmp	.+16     	; 0x3260 <LCD_enum_GO_TO_XY+0x52>
		case LCD_u8_LINE2 : LCD_enum_Send_Comnd(ADDRESS_OF_LINE2+Copy_u8_Location);break;
    3250:	8a 81       	ldd	r24, Y+2	; 0x02
    3252:	80 54       	subi	r24, 0x40	; 64
    3254:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_enum_Send_Comnd>
    3258:	03 c0       	rjmp	.+6      	; 0x3260 <LCD_enum_GO_TO_XY+0x52>
        default   :  return ES_NOK;
    325a:	31 e0       	ldi	r19, 0x01	; 1
    325c:	3b 83       	std	Y+3, r19	; 0x03
    325e:	04 c0       	rjmp	.+8      	; 0x3268 <LCD_enum_GO_TO_XY+0x5a>
		else {
			return ES_NOK;


	}
    return ES_OK;
    3260:	1b 82       	std	Y+3, r1	; 0x03
    3262:	02 c0       	rjmp	.+4      	; 0x3268 <LCD_enum_GO_TO_XY+0x5a>

		}

	}
		else {
			return ES_NOK;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	8b 83       	std	Y+3, r24	; 0x03
    3268:	8b 81       	ldd	r24, Y+3	; 0x03


	}
    return ES_OK;
}
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	08 95       	ret

0000327a <LCD_enum_Send_String>:
//function to send string
ES_t LCD_enum_Send_String(u8 *copy_pu8_string){
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	00 d0       	rcall	.+0      	; 0x3280 <LCD_enum_Send_String+0x6>
    3280:	0f 92       	push	r0
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	9b 83       	std	Y+3, r25	; 0x03
    3288:	8a 83       	std	Y+2, r24	; 0x02
    328a:	0e c0       	rjmp	.+28     	; 0x32a8 <LCD_enum_Send_String+0x2e>
	for (u8 i ; copy_pu8_string[i] != '\0'; i++){
		LCD_enum_Send_char(copy_pu8_string[i]);
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	28 2f       	mov	r18, r24
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	8a 81       	ldd	r24, Y+2	; 0x02
    3294:	9b 81       	ldd	r25, Y+3	; 0x03
    3296:	fc 01       	movw	r30, r24
    3298:	e2 0f       	add	r30, r18
    329a:	f3 1f       	adc	r31, r19
    329c:	80 81       	ld	r24, Z
    329e:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_enum_Send_char>
	}
    return ES_OK;
}
//function to send string
ES_t LCD_enum_Send_String(u8 *copy_pu8_string){
	for (u8 i ; copy_pu8_string[i] != '\0'; i++){
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	8f 5f       	subi	r24, 0xFF	; 255
    32a6:	89 83       	std	Y+1, r24	; 0x01
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	28 2f       	mov	r18, r24
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	8a 81       	ldd	r24, Y+2	; 0x02
    32b0:	9b 81       	ldd	r25, Y+3	; 0x03
    32b2:	fc 01       	movw	r30, r24
    32b4:	e2 0f       	add	r30, r18
    32b6:	f3 1f       	adc	r31, r19
    32b8:	80 81       	ld	r24, Z
    32ba:	88 23       	and	r24, r24
    32bc:	39 f7       	brne	.-50     	; 0x328c <LCD_enum_Send_String+0x12>
		LCD_enum_Send_char(copy_pu8_string[i]);
	}
	return ES_OK;
    32be:	80 e0       	ldi	r24, 0x00	; 0
}
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <LCD_enum_Clear>:

//function to clear
ES_t LCD_enum_Clear (void){
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
    32d4:	2e 97       	sbiw	r28, 0x0e	; 14
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	f8 94       	cli
    32da:	de bf       	out	0x3e, r29	; 62
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	cd bf       	out	0x3d, r28	; 61
	LCD_enum_Send_Comnd(DISPLAY_CLEAR);
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_enum_Send_Comnd>
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	a0 e8       	ldi	r26, 0x80	; 128
    32ec:	bf e3       	ldi	r27, 0x3F	; 63
    32ee:	8b 87       	std	Y+11, r24	; 0x0b
    32f0:	9c 87       	std	Y+12, r25	; 0x0c
    32f2:	ad 87       	std	Y+13, r26	; 0x0d
    32f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	4a e7       	ldi	r20, 0x7A	; 122
    3304:	53 e4       	ldi	r21, 0x43	; 67
    3306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	8f 83       	std	Y+7, r24	; 0x07
    3310:	98 87       	std	Y+8, r25	; 0x08
    3312:	a9 87       	std	Y+9, r26	; 0x09
    3314:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3316:	6f 81       	ldd	r22, Y+7	; 0x07
    3318:	78 85       	ldd	r23, Y+8	; 0x08
    331a:	89 85       	ldd	r24, Y+9	; 0x09
    331c:	9a 85       	ldd	r25, Y+10	; 0x0a
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	40 e8       	ldi	r20, 0x80	; 128
    3324:	5f e3       	ldi	r21, 0x3F	; 63
    3326:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    332a:	88 23       	and	r24, r24
    332c:	2c f4       	brge	.+10     	; 0x3338 <LCD_enum_Clear+0x6c>
		__ticks = 1;
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	9e 83       	std	Y+6, r25	; 0x06
    3334:	8d 83       	std	Y+5, r24	; 0x05
    3336:	3f c0       	rjmp	.+126    	; 0x33b6 <LCD_enum_Clear+0xea>
	else if (__tmp > 65535)
    3338:	6f 81       	ldd	r22, Y+7	; 0x07
    333a:	78 85       	ldd	r23, Y+8	; 0x08
    333c:	89 85       	ldd	r24, Y+9	; 0x09
    333e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	3f ef       	ldi	r19, 0xFF	; 255
    3344:	4f e7       	ldi	r20, 0x7F	; 127
    3346:	57 e4       	ldi	r21, 0x47	; 71
    3348:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334c:	18 16       	cp	r1, r24
    334e:	4c f5       	brge	.+82     	; 0x33a2 <LCD_enum_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3350:	6b 85       	ldd	r22, Y+11	; 0x0b
    3352:	7c 85       	ldd	r23, Y+12	; 0x0c
    3354:	8d 85       	ldd	r24, Y+13	; 0x0d
    3356:	9e 85       	ldd	r25, Y+14	; 0x0e
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e2       	ldi	r20, 0x20	; 32
    335e:	51 e4       	ldi	r21, 0x41	; 65
    3360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	bc 01       	movw	r22, r24
    336a:	cd 01       	movw	r24, r26
    336c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	8d 83       	std	Y+5, r24	; 0x05
    3378:	0f c0       	rjmp	.+30     	; 0x3398 <LCD_enum_Clear+0xcc>
    337a:	89 e1       	ldi	r24, 0x19	; 25
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	9c 83       	std	Y+4, r25	; 0x04
    3380:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3382:	8b 81       	ldd	r24, Y+3	; 0x03
    3384:	9c 81       	ldd	r25, Y+4	; 0x04
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	f1 f7       	brne	.-4      	; 0x3386 <LCD_enum_Clear+0xba>
    338a:	9c 83       	std	Y+4, r25	; 0x04
    338c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338e:	8d 81       	ldd	r24, Y+5	; 0x05
    3390:	9e 81       	ldd	r25, Y+6	; 0x06
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	9e 83       	std	Y+6, r25	; 0x06
    3396:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3398:	8d 81       	ldd	r24, Y+5	; 0x05
    339a:	9e 81       	ldd	r25, Y+6	; 0x06
    339c:	00 97       	sbiw	r24, 0x00	; 0
    339e:	69 f7       	brne	.-38     	; 0x337a <LCD_enum_Clear+0xae>
    33a0:	14 c0       	rjmp	.+40     	; 0x33ca <LCD_enum_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a2:	6f 81       	ldd	r22, Y+7	; 0x07
    33a4:	78 85       	ldd	r23, Y+8	; 0x08
    33a6:	89 85       	ldd	r24, Y+9	; 0x09
    33a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	9e 83       	std	Y+6, r25	; 0x06
    33b4:	8d 83       	std	Y+5, r24	; 0x05
    33b6:	8d 81       	ldd	r24, Y+5	; 0x05
    33b8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ba:	9a 83       	std	Y+2, r25	; 0x02
    33bc:	89 83       	std	Y+1, r24	; 0x01
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	9a 81       	ldd	r25, Y+2	; 0x02
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <LCD_enum_Clear+0xf6>
    33c6:	9a 83       	std	Y+2, r25	; 0x02
    33c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	return ES_OK;
    33ca:	80 e0       	ldi	r24, 0x00	; 0
}
    33cc:	2e 96       	adiw	r28, 0x0e	; 14
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	de bf       	out	0x3e, r29	; 62
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	cd bf       	out	0x3d, r28	; 61
    33d8:	cf 91       	pop	r28
    33da:	df 91       	pop	r29
    33dc:	08 95       	ret

000033de <LCD_enum_Send_Custom_char>:

//function to send custom char
ES_t LCD_enum_Send_Custom_char(u8 Copy_u8_Location , u8 * Copy_pu8_char_Array){
    33de:	df 93       	push	r29
    33e0:	cf 93       	push	r28
    33e2:	00 d0       	rcall	.+0      	; 0x33e4 <LCD_enum_Send_Custom_char+0x6>
    33e4:	00 d0       	rcall	.+0      	; 0x33e6 <LCD_enum_Send_Custom_char+0x8>
    33e6:	0f 92       	push	r0
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	8a 83       	std	Y+2, r24	; 0x02
    33ee:	7c 83       	std	Y+4, r23	; 0x04
    33f0:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_pu8_char_Array != NULL && Copy_u8_Location < MAX_CHARACTERS )
    33f2:	8b 81       	ldd	r24, Y+3	; 0x03
    33f4:	9c 81       	ldd	r25, Y+4	; 0x04
    33f6:	00 97       	sbiw	r24, 0x00	; 0
    33f8:	41 f1       	breq	.+80     	; 0x344a <LCD_enum_Send_Custom_char+0x6c>
    33fa:	8a 81       	ldd	r24, Y+2	; 0x02
    33fc:	88 30       	cpi	r24, 0x08	; 8
    33fe:	28 f5       	brcc	.+74     	; 0x344a <LCD_enum_Send_Custom_char+0x6c>
	    {
		LCD_enum_Send_Comnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS ));
    3400:	8a 81       	ldd	r24, Y+2	; 0x02
    3402:	88 2f       	mov	r24, r24
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	08 96       	adiw	r24, 0x08	; 8
    3408:	88 0f       	add	r24, r24
    340a:	99 1f       	adc	r25, r25
    340c:	88 0f       	add	r24, r24
    340e:	99 1f       	adc	r25, r25
    3410:	88 0f       	add	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_enum_Send_Comnd>
	        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS ; Local_u8_Counter++)
    3418:	19 82       	std	Y+1, r1	; 0x01
    341a:	0e c0       	rjmp	.+28     	; 0x3438 <LCD_enum_Send_Custom_char+0x5a>
	        {
	        	LCD_enum_Send_char(Copy_pu8_char_Array[Local_u8_Counter]);
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	28 2f       	mov	r18, r24
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	9c 81       	ldd	r25, Y+4	; 0x04
    3426:	fc 01       	movw	r30, r24
    3428:	e2 0f       	add	r30, r18
    342a:	f3 1f       	adc	r31, r19
    342c:	80 81       	ld	r24, Z
    342e:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_enum_Send_char>
//function to send custom char
ES_t LCD_enum_Send_Custom_char(u8 Copy_u8_Location , u8 * Copy_pu8_char_Array){
	if(Copy_pu8_char_Array != NULL && Copy_u8_Location < MAX_CHARACTERS )
	    {
		LCD_enum_Send_Comnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS ));
	        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS ; Local_u8_Counter++)
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	8f 5f       	subi	r24, 0xFF	; 255
    3436:	89 83       	std	Y+1, r24	; 0x01
    3438:	89 81       	ldd	r24, Y+1	; 0x01
    343a:	88 30       	cpi	r24, 0x08	; 8
    343c:	78 f3       	brcs	.-34     	; 0x341c <LCD_enum_Send_Custom_char+0x3e>
	        {
	        	LCD_enum_Send_char(Copy_pu8_char_Array[Local_u8_Counter]);
	        }
	        LCD_enum_GO_TO_XY(LCD_u8_LINE1,0);
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	60 e0       	ldi	r22, 0x00	; 0
    3442:	0e 94 07 19 	call	0x320e	; 0x320e <LCD_enum_GO_TO_XY>
//	        LCD_enum_Send_char(Copy_u8_Location);
	        return ES_OK;
    3446:	1d 82       	std	Y+5, r1	; 0x05
    3448:	02 c0       	rjmp	.+4      	; 0x344e <LCD_enum_Send_Custom_char+0x70>

	    }
	    else
	    {
	        return ES_NOK;
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	8d 83       	std	Y+5, r24	; 0x05
    344e:	8d 81       	ldd	r24, Y+5	; 0x05
	    }

}
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	0f 90       	pop	r0
    3458:	0f 90       	pop	r0
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	08 95       	ret

00003460 <main>:
u8 Local_u8_input[len] ;




int main(){
    3460:	df 93       	push	r29
    3462:	cf 93       	push	r28
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    3468:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_voidInit>
//	LCD_enum_INIT();
//	KPD_enum_Init();

    DIO_u8_Set_Pin_Direction(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_INPUT);
    346c:	82 e0       	ldi	r24, 0x02	; 2
    346e:	62 e0       	ldi	r22, 0x02	; 2
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_u8_Set_Pin_Direction>

GI_enum_GI_Enable();
    3476:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GI_enum_GI_Enable>
EXTI_enum_EXTI_Enable(EXTI_u8_INT0,EXTI_u8_RAISING_EDGE);
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	60 e0       	ldi	r22, 0x00	; 0
    347e:	0e 94 6d 06 	call	0xcda	; 0xcda <EXTI_enum_EXTI_Enable>
EXTI_enum_Set_Call_Back(EXTI_u8_INT0,&login);
    3482:	28 e4       	ldi	r18, 0x48	; 72
    3484:	3a e1       	ldi	r19, 0x1A	; 26
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	b9 01       	movw	r22, r18
    348a:	0e 94 fc 07 	call	0xff8	; 0xff8 <EXTI_enum_Set_Call_Back>
    348e:	ff cf       	rjmp	.-2      	; 0x348e <main+0x2e>

00003490 <login>:
while(1);


	return 0;
}
void login(){
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	c7 54       	subi	r28, 0x47	; 71
    349a:	d0 40       	sbci	r29, 0x00	; 0
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	f8 94       	cli
    34a0:	de bf       	out	0x3e, r29	; 62
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8_Key,Local_u8_Counter=0,flag=0;
    34a6:	1c ae       	std	Y+60, r1	; 0x3c
    34a8:	1b ae       	std	Y+59, r1	; 0x3b
		u8 spass[]=pass;
    34aa:	ce 01       	movw	r24, r28
    34ac:	ce 96       	adiw	r24, 0x3e	; 62
    34ae:	25 96       	adiw	r28, 0x05	; 5
    34b0:	9f af       	std	Y+63, r25	; 0x3f
    34b2:	8e af       	std	Y+62, r24	; 0x3e
    34b4:	25 97       	sbiw	r28, 0x05	; 5
    34b6:	ee eb       	ldi	r30, 0xBE	; 190
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	27 96       	adiw	r28, 0x07	; 7
    34bc:	ff af       	std	Y+63, r31	; 0x3f
    34be:	ee af       	std	Y+62, r30	; 0x3e
    34c0:	27 97       	sbiw	r28, 0x07	; 7
    34c2:	f5 e0       	ldi	r31, 0x05	; 5
    34c4:	28 96       	adiw	r28, 0x08	; 8
    34c6:	ff af       	std	Y+63, r31	; 0x3f
    34c8:	28 97       	sbiw	r28, 0x08	; 8
    34ca:	27 96       	adiw	r28, 0x07	; 7
    34cc:	ee ad       	ldd	r30, Y+62	; 0x3e
    34ce:	ff ad       	ldd	r31, Y+63	; 0x3f
    34d0:	27 97       	sbiw	r28, 0x07	; 7
    34d2:	00 80       	ld	r0, Z
    34d4:	27 96       	adiw	r28, 0x07	; 7
    34d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    34d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    34da:	27 97       	sbiw	r28, 0x07	; 7
    34dc:	01 96       	adiw	r24, 0x01	; 1
    34de:	27 96       	adiw	r28, 0x07	; 7
    34e0:	9f af       	std	Y+63, r25	; 0x3f
    34e2:	8e af       	std	Y+62, r24	; 0x3e
    34e4:	27 97       	sbiw	r28, 0x07	; 7
    34e6:	25 96       	adiw	r28, 0x05	; 5
    34e8:	ee ad       	ldd	r30, Y+62	; 0x3e
    34ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    34ec:	25 97       	sbiw	r28, 0x05	; 5
    34ee:	00 82       	st	Z, r0
    34f0:	25 96       	adiw	r28, 0x05	; 5
    34f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    34f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    34f6:	25 97       	sbiw	r28, 0x05	; 5
    34f8:	01 96       	adiw	r24, 0x01	; 1
    34fa:	25 96       	adiw	r28, 0x05	; 5
    34fc:	9f af       	std	Y+63, r25	; 0x3f
    34fe:	8e af       	std	Y+62, r24	; 0x3e
    3500:	25 97       	sbiw	r28, 0x05	; 5
    3502:	28 96       	adiw	r28, 0x08	; 8
    3504:	9f ad       	ldd	r25, Y+63	; 0x3f
    3506:	28 97       	sbiw	r28, 0x08	; 8
    3508:	91 50       	subi	r25, 0x01	; 1
    350a:	28 96       	adiw	r28, 0x08	; 8
    350c:	9f af       	std	Y+63, r25	; 0x3f
    350e:	28 97       	sbiw	r28, 0x08	; 8
    3510:	28 96       	adiw	r28, 0x08	; 8
    3512:	ef ad       	ldd	r30, Y+63	; 0x3f
    3514:	28 97       	sbiw	r28, 0x08	; 8
    3516:	ee 23       	and	r30, r30
    3518:	c1 f6       	brne	.-80     	; 0x34ca <login+0x3a>
		u8 Local_u8_index_input ;
	u8 try_check=0;
    351a:	19 ae       	std	Y+57, r1	; 0x39

		            DIO_voidInit();
    351c:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_voidInit>
					LCD_enum_INIT();
    3520:	0e 94 f5 14 	call	0x29ea	; 0x29ea <LCD_enum_INIT>
					KPD_enum_Init();
    3524:	0e 94 8a 13 	call	0x2714	; 0x2714 <KPD_enum_Init>
					LCD_enum_Send_String("enter password");
    3528:	80 e6       	ldi	r24, 0x60	; 96
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_enum_Send_String>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	aa e7       	ldi	r26, 0x7A	; 122
    3536:	b4 e4       	ldi	r27, 0x44	; 68
    3538:	8d ab       	std	Y+53, r24	; 0x35
    353a:	9e ab       	std	Y+54, r25	; 0x36
    353c:	af ab       	std	Y+55, r26	; 0x37
    353e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3540:	6d a9       	ldd	r22, Y+53	; 0x35
    3542:	7e a9       	ldd	r23, Y+54	; 0x36
    3544:	8f a9       	ldd	r24, Y+55	; 0x37
    3546:	98 ad       	ldd	r25, Y+56	; 0x38
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	4a e7       	ldi	r20, 0x7A	; 122
    354e:	53 e4       	ldi	r21, 0x43	; 67
    3550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	89 ab       	std	Y+49, r24	; 0x31
    355a:	9a ab       	std	Y+50, r25	; 0x32
    355c:	ab ab       	std	Y+51, r26	; 0x33
    355e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3560:	69 a9       	ldd	r22, Y+49	; 0x31
    3562:	7a a9       	ldd	r23, Y+50	; 0x32
    3564:	8b a9       	ldd	r24, Y+51	; 0x33
    3566:	9c a9       	ldd	r25, Y+52	; 0x34
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	40 e8       	ldi	r20, 0x80	; 128
    356e:	5f e3       	ldi	r21, 0x3F	; 63
    3570:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3574:	88 23       	and	r24, r24
    3576:	2c f4       	brge	.+10     	; 0x3582 <login+0xf2>
		__ticks = 1;
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	98 ab       	std	Y+48, r25	; 0x30
    357e:	8f a7       	std	Y+47, r24	; 0x2f
    3580:	3f c0       	rjmp	.+126    	; 0x3600 <login+0x170>
	else if (__tmp > 65535)
    3582:	69 a9       	ldd	r22, Y+49	; 0x31
    3584:	7a a9       	ldd	r23, Y+50	; 0x32
    3586:	8b a9       	ldd	r24, Y+51	; 0x33
    3588:	9c a9       	ldd	r25, Y+52	; 0x34
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	3f ef       	ldi	r19, 0xFF	; 255
    358e:	4f e7       	ldi	r20, 0x7F	; 127
    3590:	57 e4       	ldi	r21, 0x47	; 71
    3592:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3596:	18 16       	cp	r1, r24
    3598:	4c f5       	brge	.+82     	; 0x35ec <login+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    359a:	6d a9       	ldd	r22, Y+53	; 0x35
    359c:	7e a9       	ldd	r23, Y+54	; 0x36
    359e:	8f a9       	ldd	r24, Y+55	; 0x37
    35a0:	98 ad       	ldd	r25, Y+56	; 0x38
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e2       	ldi	r20, 0x20	; 32
    35a8:	51 e4       	ldi	r21, 0x41	; 65
    35aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ae:	dc 01       	movw	r26, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	bc 01       	movw	r22, r24
    35b4:	cd 01       	movw	r24, r26
    35b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ba:	dc 01       	movw	r26, r24
    35bc:	cb 01       	movw	r24, r22
    35be:	98 ab       	std	Y+48, r25	; 0x30
    35c0:	8f a7       	std	Y+47, r24	; 0x2f
    35c2:	0f c0       	rjmp	.+30     	; 0x35e2 <login+0x152>
    35c4:	89 e1       	ldi	r24, 0x19	; 25
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	9e a7       	std	Y+46, r25	; 0x2e
    35ca:	8d a7       	std	Y+45, r24	; 0x2d
    35cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    35ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <login+0x140>
    35d4:	9e a7       	std	Y+46, r25	; 0x2e
    35d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    35da:	98 a9       	ldd	r25, Y+48	; 0x30
    35dc:	01 97       	sbiw	r24, 0x01	; 1
    35de:	98 ab       	std	Y+48, r25	; 0x30
    35e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    35e4:	98 a9       	ldd	r25, Y+48	; 0x30
    35e6:	00 97       	sbiw	r24, 0x00	; 0
    35e8:	69 f7       	brne	.-38     	; 0x35c4 <login+0x134>
    35ea:	14 c0       	rjmp	.+40     	; 0x3614 <login+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ec:	69 a9       	ldd	r22, Y+49	; 0x31
    35ee:	7a a9       	ldd	r23, Y+50	; 0x32
    35f0:	8b a9       	ldd	r24, Y+51	; 0x33
    35f2:	9c a9       	ldd	r25, Y+52	; 0x34
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	98 ab       	std	Y+48, r25	; 0x30
    35fe:	8f a7       	std	Y+47, r24	; 0x2f
    3600:	8f a5       	ldd	r24, Y+47	; 0x2f
    3602:	98 a9       	ldd	r25, Y+48	; 0x30
    3604:	9c a7       	std	Y+44, r25	; 0x2c
    3606:	8b a7       	std	Y+43, r24	; 0x2b
    3608:	8b a5       	ldd	r24, Y+43	; 0x2b
    360a:	9c a5       	ldd	r25, Y+44	; 0x2c
    360c:	01 97       	sbiw	r24, 0x01	; 1
    360e:	f1 f7       	brne	.-4      	; 0x360c <login+0x17c>
    3610:	9c a7       	std	Y+44, r25	; 0x2c
    3612:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1000);
						LCD_enum_Clear ();
    3614:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_enum_Clear>


		while(1){
	       	KPD_enum_Get_Key_State(&Local_u8_Key);
    3618:	ce 01       	movw	r24, r28
    361a:	cd 96       	adiw	r24, 0x3d	; 61
    361c:	0e 94 e5 13 	call	0x27ca	; 0x27ca <KPD_enum_Get_Key_State>
	/*is there is no keys pressed*/
		/*no displaying on LCD*/
		if(Local_u8_Key != KPD_u8_Keys_NO_Pressed  ){
    3620:	8d ad       	ldd	r24, Y+61	; 0x3d
    3622:	8f 3f       	cpi	r24, 0xFF	; 255
    3624:	89 f0       	breq	.+34     	; 0x3648 <login+0x1b8>
	         LCD_enum_Send_char('*');
    3626:	8a e2       	ldi	r24, 0x2A	; 42
    3628:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_enum_Send_char>

	         Local_u8_input[Local_u8_index_input] = Local_u8_Key;
    362c:	8a ad       	ldd	r24, Y+58	; 0x3a
    362e:	88 2f       	mov	r24, r24
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	2d ad       	ldd	r18, Y+61	; 0x3d
    3634:	fc 01       	movw	r30, r24
    3636:	ea 5e       	subi	r30, 0xEA	; 234
    3638:	fe 4f       	sbci	r31, 0xFE	; 254
    363a:	20 83       	st	Z, r18
	         Local_u8_index_input++;
    363c:	8a ad       	ldd	r24, Y+58	; 0x3a
    363e:	8f 5f       	subi	r24, 0xFF	; 255
    3640:	8a af       	std	Y+58, r24	; 0x3a
	         Local_u8_Counter++;
    3642:	8c ad       	ldd	r24, Y+60	; 0x3c
    3644:	8f 5f       	subi	r24, 0xFF	; 255
    3646:	8c af       	std	Y+60, r24	; 0x3c
		}
	    	 if (Local_u8_Counter == len) {
    3648:	8c ad       	ldd	r24, Y+60	; 0x3c
    364a:	84 30       	cpi	r24, 0x04	; 4
    364c:	29 f7       	brne	.-54     	; 0x3618 <login+0x188>
	    		 for(Local_u8_index_input =0 ;Local_u8_index_input<len ; Local_u8_index_input++){
    364e:	1a ae       	std	Y+58, r1	; 0x3a
    3650:	94 c1       	rjmp	.+808    	; 0x397a <login+0x4ea>
	    		 				if(Local_u8_input[Local_u8_index_input] == spass[Local_u8_index_input]){
    3652:	8a ad       	ldd	r24, Y+58	; 0x3a
    3654:	88 2f       	mov	r24, r24
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	fc 01       	movw	r30, r24
    365a:	ea 5e       	subi	r30, 0xEA	; 234
    365c:	fe 4f       	sbci	r31, 0xFE	; 254
    365e:	40 81       	ld	r20, Z
    3660:	8a ad       	ldd	r24, Y+58	; 0x3a
    3662:	28 2f       	mov	r18, r24
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	ce 01       	movw	r24, r28
    3668:	ce 96       	adiw	r24, 0x3e	; 62
    366a:	fc 01       	movw	r30, r24
    366c:	e2 0f       	add	r30, r18
    366e:	f3 1f       	adc	r31, r19
    3670:	80 81       	ld	r24, Z
    3672:	48 17       	cp	r20, r24
    3674:	09 f0       	breq	.+2      	; 0x3678 <login+0x1e8>
    3676:	7d c0       	rjmp	.+250    	; 0x3772 <login+0x2e2>
	    		 					LCD_enum_Clear ();
    3678:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_enum_Clear>
	    		 					 LCD_enum_Send_String ("Correct Password");
    367c:	8f e6       	ldi	r24, 0x6F	; 111
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_enum_Send_String>
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	aa e7       	ldi	r26, 0x7A	; 122
    368a:	b4 e4       	ldi	r27, 0x44	; 68
    368c:	8f a3       	std	Y+39, r24	; 0x27
    368e:	98 a7       	std	Y+40, r25	; 0x28
    3690:	a9 a7       	std	Y+41, r26	; 0x29
    3692:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3694:	6f a1       	ldd	r22, Y+39	; 0x27
    3696:	78 a5       	ldd	r23, Y+40	; 0x28
    3698:	89 a5       	ldd	r24, Y+41	; 0x29
    369a:	9a a5       	ldd	r25, Y+42	; 0x2a
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	4a e7       	ldi	r20, 0x7A	; 122
    36a2:	53 e4       	ldi	r21, 0x43	; 67
    36a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	8b a3       	std	Y+35, r24	; 0x23
    36ae:	9c a3       	std	Y+36, r25	; 0x24
    36b0:	ad a3       	std	Y+37, r26	; 0x25
    36b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36b4:	6b a1       	ldd	r22, Y+35	; 0x23
    36b6:	7c a1       	ldd	r23, Y+36	; 0x24
    36b8:	8d a1       	ldd	r24, Y+37	; 0x25
    36ba:	9e a1       	ldd	r25, Y+38	; 0x26
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	40 e8       	ldi	r20, 0x80	; 128
    36c2:	5f e3       	ldi	r21, 0x3F	; 63
    36c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36c8:	88 23       	and	r24, r24
    36ca:	2c f4       	brge	.+10     	; 0x36d6 <login+0x246>
		__ticks = 1;
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	9a a3       	std	Y+34, r25	; 0x22
    36d2:	89 a3       	std	Y+33, r24	; 0x21
    36d4:	3f c0       	rjmp	.+126    	; 0x3754 <login+0x2c4>
	else if (__tmp > 65535)
    36d6:	6b a1       	ldd	r22, Y+35	; 0x23
    36d8:	7c a1       	ldd	r23, Y+36	; 0x24
    36da:	8d a1       	ldd	r24, Y+37	; 0x25
    36dc:	9e a1       	ldd	r25, Y+38	; 0x26
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	3f ef       	ldi	r19, 0xFF	; 255
    36e2:	4f e7       	ldi	r20, 0x7F	; 127
    36e4:	57 e4       	ldi	r21, 0x47	; 71
    36e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ea:	18 16       	cp	r1, r24
    36ec:	4c f5       	brge	.+82     	; 0x3740 <login+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ee:	6f a1       	ldd	r22, Y+39	; 0x27
    36f0:	78 a5       	ldd	r23, Y+40	; 0x28
    36f2:	89 a5       	ldd	r24, Y+41	; 0x29
    36f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	40 e2       	ldi	r20, 0x20	; 32
    36fc:	51 e4       	ldi	r21, 0x41	; 65
    36fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	bc 01       	movw	r22, r24
    3708:	cd 01       	movw	r24, r26
    370a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	9a a3       	std	Y+34, r25	; 0x22
    3714:	89 a3       	std	Y+33, r24	; 0x21
    3716:	0f c0       	rjmp	.+30     	; 0x3736 <login+0x2a6>
    3718:	89 e1       	ldi	r24, 0x19	; 25
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	98 a3       	std	Y+32, r25	; 0x20
    371e:	8f 8f       	std	Y+31, r24	; 0x1f
    3720:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3722:	98 a1       	ldd	r25, Y+32	; 0x20
    3724:	01 97       	sbiw	r24, 0x01	; 1
    3726:	f1 f7       	brne	.-4      	; 0x3724 <login+0x294>
    3728:	98 a3       	std	Y+32, r25	; 0x20
    372a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    372c:	89 a1       	ldd	r24, Y+33	; 0x21
    372e:	9a a1       	ldd	r25, Y+34	; 0x22
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	9a a3       	std	Y+34, r25	; 0x22
    3734:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3736:	89 a1       	ldd	r24, Y+33	; 0x21
    3738:	9a a1       	ldd	r25, Y+34	; 0x22
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	69 f7       	brne	.-38     	; 0x3718 <login+0x288>
    373e:	14 c0       	rjmp	.+40     	; 0x3768 <login+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3740:	6b a1       	ldd	r22, Y+35	; 0x23
    3742:	7c a1       	ldd	r23, Y+36	; 0x24
    3744:	8d a1       	ldd	r24, Y+37	; 0x25
    3746:	9e a1       	ldd	r25, Y+38	; 0x26
    3748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	9a a3       	std	Y+34, r25	; 0x22
    3752:	89 a3       	std	Y+33, r24	; 0x21
    3754:	89 a1       	ldd	r24, Y+33	; 0x21
    3756:	9a a1       	ldd	r25, Y+34	; 0x22
    3758:	9e 8f       	std	Y+30, r25	; 0x1e
    375a:	8d 8f       	std	Y+29, r24	; 0x1d
    375c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    375e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	f1 f7       	brne	.-4      	; 0x3760 <login+0x2d0>
    3764:	9e 8f       	std	Y+30, r25	; 0x1e
    3766:	8d 8f       	std	Y+29, r24	; 0x1d
	    		 					_delay_ms(1000);
	    		 				 LCD_enum_Clear ();
    3768:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_enum_Clear>
	    		 				motor_option();
    376c:	0e 94 c2 1c 	call	0x3984	; 0x3984 <motor_option>
    3770:	53 cf       	rjmp	.-346    	; 0x3618 <login+0x188>
	    		 				 break;
	    		 				}
	    		 				else{
	//    		 				    			LCD_enum_Clear ();
	    		 				    			 LCD_enum_Send_String ("wrong Password,");
    3772:	80 e8       	ldi	r24, 0x80	; 128
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_enum_Send_String>
	    		 				    			 LCD_enum_GO_TO_XY(2,0);
    377a:	82 e0       	ldi	r24, 0x02	; 2
    377c:	60 e0       	ldi	r22, 0x00	; 0
    377e:	0e 94 07 19 	call	0x320e	; 0x320e <LCD_enum_GO_TO_XY>
	    		 				    			LCD_enum_Send_String ("please try again");
    3782:	80 e9       	ldi	r24, 0x90	; 144
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_enum_Send_String>
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	aa e7       	ldi	r26, 0x7A	; 122
    3790:	b4 e4       	ldi	r27, 0x44	; 68
    3792:	89 8f       	std	Y+25, r24	; 0x19
    3794:	9a 8f       	std	Y+26, r25	; 0x1a
    3796:	ab 8f       	std	Y+27, r26	; 0x1b
    3798:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    379a:	69 8d       	ldd	r22, Y+25	; 0x19
    379c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    379e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	4a e7       	ldi	r20, 0x7A	; 122
    37a8:	53 e4       	ldi	r21, 0x43	; 67
    37aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	8d 8b       	std	Y+21, r24	; 0x15
    37b4:	9e 8b       	std	Y+22, r25	; 0x16
    37b6:	af 8b       	std	Y+23, r26	; 0x17
    37b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37ba:	6d 89       	ldd	r22, Y+21	; 0x15
    37bc:	7e 89       	ldd	r23, Y+22	; 0x16
    37be:	8f 89       	ldd	r24, Y+23	; 0x17
    37c0:	98 8d       	ldd	r25, Y+24	; 0x18
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	40 e8       	ldi	r20, 0x80	; 128
    37c8:	5f e3       	ldi	r21, 0x3F	; 63
    37ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ce:	88 23       	and	r24, r24
    37d0:	2c f4       	brge	.+10     	; 0x37dc <login+0x34c>
		__ticks = 1;
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	9c 8b       	std	Y+20, r25	; 0x14
    37d8:	8b 8b       	std	Y+19, r24	; 0x13
    37da:	3f c0       	rjmp	.+126    	; 0x385a <login+0x3ca>
	else if (__tmp > 65535)
    37dc:	6d 89       	ldd	r22, Y+21	; 0x15
    37de:	7e 89       	ldd	r23, Y+22	; 0x16
    37e0:	8f 89       	ldd	r24, Y+23	; 0x17
    37e2:	98 8d       	ldd	r25, Y+24	; 0x18
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	3f ef       	ldi	r19, 0xFF	; 255
    37e8:	4f e7       	ldi	r20, 0x7F	; 127
    37ea:	57 e4       	ldi	r21, 0x47	; 71
    37ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37f0:	18 16       	cp	r1, r24
    37f2:	4c f5       	brge	.+82     	; 0x3846 <login+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f4:	69 8d       	ldd	r22, Y+25	; 0x19
    37f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	40 e2       	ldi	r20, 0x20	; 32
    3802:	51 e4       	ldi	r21, 0x41	; 65
    3804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	bc 01       	movw	r22, r24
    380e:	cd 01       	movw	r24, r26
    3810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	9c 8b       	std	Y+20, r25	; 0x14
    381a:	8b 8b       	std	Y+19, r24	; 0x13
    381c:	0f c0       	rjmp	.+30     	; 0x383c <login+0x3ac>
    381e:	89 e1       	ldi	r24, 0x19	; 25
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	9a 8b       	std	Y+18, r25	; 0x12
    3824:	89 8b       	std	Y+17, r24	; 0x11
    3826:	89 89       	ldd	r24, Y+17	; 0x11
    3828:	9a 89       	ldd	r25, Y+18	; 0x12
    382a:	01 97       	sbiw	r24, 0x01	; 1
    382c:	f1 f7       	brne	.-4      	; 0x382a <login+0x39a>
    382e:	9a 8b       	std	Y+18, r25	; 0x12
    3830:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3832:	8b 89       	ldd	r24, Y+19	; 0x13
    3834:	9c 89       	ldd	r25, Y+20	; 0x14
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	9c 8b       	std	Y+20, r25	; 0x14
    383a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    383c:	8b 89       	ldd	r24, Y+19	; 0x13
    383e:	9c 89       	ldd	r25, Y+20	; 0x14
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	69 f7       	brne	.-38     	; 0x381e <login+0x38e>
    3844:	14 c0       	rjmp	.+40     	; 0x386e <login+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3846:	6d 89       	ldd	r22, Y+21	; 0x15
    3848:	7e 89       	ldd	r23, Y+22	; 0x16
    384a:	8f 89       	ldd	r24, Y+23	; 0x17
    384c:	98 8d       	ldd	r25, Y+24	; 0x18
    384e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	9c 8b       	std	Y+20, r25	; 0x14
    3858:	8b 8b       	std	Y+19, r24	; 0x13
    385a:	8b 89       	ldd	r24, Y+19	; 0x13
    385c:	9c 89       	ldd	r25, Y+20	; 0x14
    385e:	98 8b       	std	Y+16, r25	; 0x10
    3860:	8f 87       	std	Y+15, r24	; 0x0f
    3862:	8f 85       	ldd	r24, Y+15	; 0x0f
    3864:	98 89       	ldd	r25, Y+16	; 0x10
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <login+0x3d6>
    386a:	98 8b       	std	Y+16, r25	; 0x10
    386c:	8f 87       	std	Y+15, r24	; 0x0f
	    		 				    			_delay_ms(1000);
	    		 				    			LCD_enum_Clear ();
    386e:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_enum_Clear>
	    		 				    			try_check++;
    3872:	89 ad       	ldd	r24, Y+57	; 0x39
    3874:	8f 5f       	subi	r24, 0xFF	; 255
    3876:	89 af       	std	Y+57, r24	; 0x39
	    		 				    			if(try_check>=MAX_try_check){
    3878:	89 ad       	ldd	r24, Y+57	; 0x39
    387a:	83 30       	cpi	r24, 0x03	; 3
    387c:	08 f4       	brcc	.+2      	; 0x3880 <login+0x3f0>
    387e:	7a c0       	rjmp	.+244    	; 0x3974 <login+0x4e4>
	    		 				    				LCD_enum_Clear ();
    3880:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_enum_Clear>
	    		 				    				       			 LCD_enum_Send_String ("please try again after 1 min");
    3884:	81 ea       	ldi	r24, 0xA1	; 161
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_enum_Send_String>
    388c:	80 e0       	ldi	r24, 0x00	; 0
    388e:	90 e6       	ldi	r25, 0x60	; 96
    3890:	aa e6       	ldi	r26, 0x6A	; 106
    3892:	b7 e4       	ldi	r27, 0x47	; 71
    3894:	8b 87       	std	Y+11, r24	; 0x0b
    3896:	9c 87       	std	Y+12, r25	; 0x0c
    3898:	ad 87       	std	Y+13, r26	; 0x0d
    389a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    389c:	6b 85       	ldd	r22, Y+11	; 0x0b
    389e:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	4a e7       	ldi	r20, 0x7A	; 122
    38aa:	53 e4       	ldi	r21, 0x43	; 67
    38ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	8f 83       	std	Y+7, r24	; 0x07
    38b6:	98 87       	std	Y+8, r25	; 0x08
    38b8:	a9 87       	std	Y+9, r26	; 0x09
    38ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38bc:	6f 81       	ldd	r22, Y+7	; 0x07
    38be:	78 85       	ldd	r23, Y+8	; 0x08
    38c0:	89 85       	ldd	r24, Y+9	; 0x09
    38c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	40 e8       	ldi	r20, 0x80	; 128
    38ca:	5f e3       	ldi	r21, 0x3F	; 63
    38cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38d0:	88 23       	and	r24, r24
    38d2:	2c f4       	brge	.+10     	; 0x38de <login+0x44e>
		__ticks = 1;
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	9e 83       	std	Y+6, r25	; 0x06
    38da:	8d 83       	std	Y+5, r24	; 0x05
    38dc:	3f c0       	rjmp	.+126    	; 0x395c <login+0x4cc>
	else if (__tmp > 65535)
    38de:	6f 81       	ldd	r22, Y+7	; 0x07
    38e0:	78 85       	ldd	r23, Y+8	; 0x08
    38e2:	89 85       	ldd	r24, Y+9	; 0x09
    38e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	3f ef       	ldi	r19, 0xFF	; 255
    38ea:	4f e7       	ldi	r20, 0x7F	; 127
    38ec:	57 e4       	ldi	r21, 0x47	; 71
    38ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38f2:	18 16       	cp	r1, r24
    38f4:	4c f5       	brge	.+82     	; 0x3948 <login+0x4b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    38fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	40 e2       	ldi	r20, 0x20	; 32
    3904:	51 e4       	ldi	r21, 0x41	; 65
    3906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	bc 01       	movw	r22, r24
    3910:	cd 01       	movw	r24, r26
    3912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	9e 83       	std	Y+6, r25	; 0x06
    391c:	8d 83       	std	Y+5, r24	; 0x05
    391e:	0f c0       	rjmp	.+30     	; 0x393e <login+0x4ae>
    3920:	89 e1       	ldi	r24, 0x19	; 25
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	9c 83       	std	Y+4, r25	; 0x04
    3926:	8b 83       	std	Y+3, r24	; 0x03
    3928:	8b 81       	ldd	r24, Y+3	; 0x03
    392a:	9c 81       	ldd	r25, Y+4	; 0x04
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	f1 f7       	brne	.-4      	; 0x392c <login+0x49c>
    3930:	9c 83       	std	Y+4, r25	; 0x04
    3932:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3934:	8d 81       	ldd	r24, Y+5	; 0x05
    3936:	9e 81       	ldd	r25, Y+6	; 0x06
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	9e 83       	std	Y+6, r25	; 0x06
    393c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    393e:	8d 81       	ldd	r24, Y+5	; 0x05
    3940:	9e 81       	ldd	r25, Y+6	; 0x06
    3942:	00 97       	sbiw	r24, 0x00	; 0
    3944:	69 f7       	brne	.-38     	; 0x3920 <login+0x490>
    3946:	14 c0       	rjmp	.+40     	; 0x3970 <login+0x4e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3948:	6f 81       	ldd	r22, Y+7	; 0x07
    394a:	78 85       	ldd	r23, Y+8	; 0x08
    394c:	89 85       	ldd	r24, Y+9	; 0x09
    394e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	9e 83       	std	Y+6, r25	; 0x06
    395a:	8d 83       	std	Y+5, r24	; 0x05
    395c:	8d 81       	ldd	r24, Y+5	; 0x05
    395e:	9e 81       	ldd	r25, Y+6	; 0x06
    3960:	9a 83       	std	Y+2, r25	; 0x02
    3962:	89 83       	std	Y+1, r24	; 0x01
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	9a 81       	ldd	r25, Y+2	; 0x02
    3968:	01 97       	sbiw	r24, 0x01	; 1
    396a:	f1 f7       	brne	.-4      	; 0x3968 <login+0x4d8>
    396c:	9a 83       	std	Y+2, r25	; 0x02
    396e:	89 83       	std	Y+1, r24	; 0x01
	    		 				    				       			 _delay_ms(60000);
	    		 				    				      			LCD_enum_Clear ();
    3970:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_enum_Clear>
	         Local_u8_input[Local_u8_index_input] = Local_u8_Key;
	         Local_u8_index_input++;
	         Local_u8_Counter++;
		}
	    	 if (Local_u8_Counter == len) {
	    		 for(Local_u8_index_input =0 ;Local_u8_index_input<len ; Local_u8_index_input++){
    3974:	8a ad       	ldd	r24, Y+58	; 0x3a
    3976:	8f 5f       	subi	r24, 0xFF	; 255
    3978:	8a af       	std	Y+58, r24	; 0x3a
    397a:	8a ad       	ldd	r24, Y+58	; 0x3a
    397c:	84 30       	cpi	r24, 0x04	; 4
    397e:	08 f4       	brcc	.+2      	; 0x3982 <login+0x4f2>
    3980:	68 ce       	rjmp	.-816    	; 0x3652 <login+0x1c2>
    3982:	4a ce       	rjmp	.-876    	; 0x3618 <login+0x188>

00003984 <motor_option>:
	    	 }
		}
//	    	 return 0;
	    	 	}

int motor_option(){
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	00 d0       	rcall	.+0      	; 0x398a <motor_option+0x6>
    398a:	0f 92       	push	r0
    398c:	cd b7       	in	r28, 0x3d	; 61
    398e:	de b7       	in	r29, 0x3e	; 62

u8 option;
                                      LCD_enum_GO_TO_XY (1 , 0);
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	60 e0       	ldi	r22, 0x00	; 0
    3994:	0e 94 07 19 	call	0x320e	; 0x320e <LCD_enum_GO_TO_XY>
    		                		    LCD_enum_Send_String ("1-DC MOTOR");
    3998:	83 ec       	ldi	r24, 0xC3	; 195
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_enum_Send_String>
    		                		    LCD_enum_GO_TO_XY (2 , 0);
    39a0:	82 e0       	ldi	r24, 0x02	; 2
    39a2:	60 e0       	ldi	r22, 0x00	; 0
    39a4:	0e 94 07 19 	call	0x320e	; 0x320e <LCD_enum_GO_TO_XY>
    		                		    LCD_enum_Send_String ("2-STEPPER MOTOR");
    39a8:	8e ec       	ldi	r24, 0xCE	; 206
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_enum_Send_String>
    		                		    while(1){
    		                		    	KPD_enum_Get_Key_State(&option);
    39b0:	ce 01       	movw	r24, r28
    39b2:	01 96       	adiw	r24, 0x01	; 1
    39b4:	0e 94 e5 13 	call	0x27ca	; 0x27ca <KPD_enum_Get_Key_State>
    		                		    			if (option != KPD_u8_Keys_NO_Pressed) {
    39b8:	89 81       	ldd	r24, Y+1	; 0x01
    39ba:	8f 3f       	cpi	r24, 0xFF	; 255
    39bc:	c9 f3       	breq	.-14     	; 0x39b0 <motor_option+0x2c>
    		                		    				if (option == '1') {
    39be:	89 81       	ldd	r24, Y+1	; 0x01
    39c0:	81 33       	cpi	r24, 0x31	; 49
    39c2:	39 f4       	brne	.+14     	; 0x39d2 <motor_option+0x4e>
    		                		    					LCD_enum_Clear ();
    39c4:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_enum_Clear>
    		                		    					DC_MOTOR_enum_INIT();
    39c8:	0e 94 15 13 	call	0x262a	; 0x262a <DC_MOTOR_enum_INIT>
    		                		    					DC_MOTOR_void_direction() ;
    39cc:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <DC_MOTOR_void_direction>
    39d0:	09 c0       	rjmp	.+18     	; 0x39e4 <motor_option+0x60>
    		                		    					break;
    		                		    				} else if (option == '2') {
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	82 33       	cpi	r24, 0x32	; 50
    39d6:	61 f7       	brne	.-40     	; 0x39b0 <motor_option+0x2c>
    		                		    					LCD_enum_Clear ();
    39d8:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_enum_Clear>
    		                		    					Stepper_motor_enum_INIT ();
    39dc:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <Stepper_motor_enum_INIT>
    		                		    					stepper_MOTOR_void_direction();
    39e0:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <stepper_MOTOR_void_direction>
    		                		    					break;
    		                		    				}

    		                		    }
    		                		    }
}
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	0f 90       	pop	r0
    39ea:	cf 91       	pop	r28
    39ec:	df 91       	pop	r29
    39ee:	08 95       	ret

000039f0 <stepper_MOTOR_void_direction>:
//
void stepper_MOTOR_void_direction() {
    39f0:	df 93       	push	r29
    39f2:	cf 93       	push	r28
    39f4:	0f 92       	push	r0
    39f6:	cd b7       	in	r28, 0x3d	; 61
    39f8:	de b7       	in	r29, 0x3e	; 62
	u8 direction;

	LCD_enum_Clear ();
    39fa:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_enum_Clear>
	    		                		   	LCD_enum_GO_TO_XY (1 , 0);
    39fe:	81 e0       	ldi	r24, 0x01	; 1
    3a00:	60 e0       	ldi	r22, 0x00	; 0
    3a02:	0e 94 07 19 	call	0x320e	; 0x320e <LCD_enum_GO_TO_XY>
	    		                	    LCD_enum_Send_String ("1-CW");
    3a06:	8e ed       	ldi	r24, 0xDE	; 222
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_enum_Send_String>
	    		               	   		 LCD_enum_GO_TO_XY (2 , 0);
    3a0e:	82 e0       	ldi	r24, 0x02	; 2
    3a10:	60 e0       	ldi	r22, 0x00	; 0
    3a12:	0e 94 07 19 	call	0x320e	; 0x320e <LCD_enum_GO_TO_XY>
	    		                	   	    LCD_enum_Send_String ("2-CCW");
    3a16:	83 ee       	ldi	r24, 0xE3	; 227
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_enum_Send_String>

	while (1) {

		KPD_enum_Get_Key_State(&direction);
    3a1e:	ce 01       	movw	r24, r28
    3a20:	01 96       	adiw	r24, 0x01	; 1
    3a22:	0e 94 e5 13 	call	0x27ca	; 0x27ca <KPD_enum_Get_Key_State>
		if (direction != KPD_u8_Keys_NO_Pressed) {
    3a26:	89 81       	ldd	r24, Y+1	; 0x01
    3a28:	8f 3f       	cpi	r24, 0xFF	; 255
    3a2a:	c9 f3       	breq	.-14     	; 0x3a1e <stepper_MOTOR_void_direction+0x2e>
			if (direction == '1') {
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	81 33       	cpi	r24, 0x31	; 49
    3a30:	49 f4       	brne	.+18     	; 0x3a44 <stepper_MOTOR_void_direction+0x54>
				LCD_enum_Clear ();
    3a32:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_enum_Clear>
				Stepper_motor_enum_INIT ();
    3a36:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <Stepper_motor_enum_INIT>
				Stepper_moter_enum_Move(CW,270);
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	6e e0       	ldi	r22, 0x0E	; 14
    3a3e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <Stepper_moter_enum_Move>
    3a42:	0b c0       	rjmp	.+22     	; 0x3a5a <stepper_MOTOR_void_direction+0x6a>
				break;
			} else if (direction == '2') {
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	82 33       	cpi	r24, 0x32	; 50
    3a48:	51 f7       	brne	.-44     	; 0x3a1e <stepper_MOTOR_void_direction+0x2e>
				LCD_enum_Clear ();
    3a4a:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_enum_Clear>
				Stepper_motor_enum_INIT ();
    3a4e:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <Stepper_motor_enum_INIT>
				Stepper_moter_enum_Move(CCW,270);
    3a52:	82 e0       	ldi	r24, 0x02	; 2
    3a54:	6e e0       	ldi	r22, 0x0E	; 14
    3a56:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <Stepper_moter_enum_Move>
				break;
			}
		}
	}
}
    3a5a:	0f 90       	pop	r0
    3a5c:	cf 91       	pop	r28
    3a5e:	df 91       	pop	r29
    3a60:	08 95       	ret

00003a62 <DC_MOTOR_void_direction>:
void DC_MOTOR_void_direction(void) {
    3a62:	df 93       	push	r29
    3a64:	cf 93       	push	r28
    3a66:	0f 92       	push	r0
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
	u8 direction;
	LCD_enum_Clear();
    3a6c:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_enum_Clear>
	LCD_enum_GO_TO_XY(LCD_u8_LINE1, 0);
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	60 e0       	ldi	r22, 0x00	; 0
    3a74:	0e 94 07 19 	call	0x320e	; 0x320e <LCD_enum_GO_TO_XY>
	LCD_enum_Send_String("1-CW");
    3a78:	8e ed       	ldi	r24, 0xDE	; 222
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_enum_Send_String>

	LCD_enum_GO_TO_XY(LCD_u8_LINE1, 5);
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	65 e0       	ldi	r22, 0x05	; 5
    3a84:	0e 94 07 19 	call	0x320e	; 0x320e <LCD_enum_GO_TO_XY>
	LCD_enum_Send_String("2-CCW");
    3a88:	83 ee       	ldi	r24, 0xE3	; 227
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_enum_Send_String>

	LCD_enum_GO_TO_XY (2 , 0);
    3a90:	82 e0       	ldi	r24, 0x02	; 2
    3a92:	60 e0       	ldi	r22, 0x00	; 0
    3a94:	0e 94 07 19 	call	0x320e	; 0x320e <LCD_enum_GO_TO_XY>
	LCD_enum_Send_String ("3-STOP");
    3a98:	89 ee       	ldi	r24, 0xE9	; 233
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_enum_Send_String>

	while (1) {
		KPD_enum_Get_Key_State(&direction);
    3aa0:	ce 01       	movw	r24, r28
    3aa2:	01 96       	adiw	r24, 0x01	; 1
    3aa4:	0e 94 e5 13 	call	0x27ca	; 0x27ca <KPD_enum_Get_Key_State>
		if (direction != KPD_u8_Keys_NO_Pressed) {
    3aa8:	89 81       	ldd	r24, Y+1	; 0x01
    3aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    3aac:	c9 f3       	breq	.-14     	; 0x3aa0 <DC_MOTOR_void_direction+0x3e>
			if (direction == '1') {
    3aae:	89 81       	ldd	r24, Y+1	; 0x01
    3ab0:	81 33       	cpi	r24, 0x31	; 49
    3ab2:	31 f4       	brne	.+12     	; 0x3ac0 <DC_MOTOR_void_direction+0x5e>
				DC_MOTOR_enum_INIT();
    3ab4:	0e 94 15 13 	call	0x262a	; 0x262a <DC_MOTOR_enum_INIT>
				DC_MOTOR_enum_Start(CW);
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	0e 94 3e 13 	call	0x267c	; 0x267c <DC_MOTOR_enum_Start>
    3abe:	0f c0       	rjmp	.+30     	; 0x3ade <DC_MOTOR_void_direction+0x7c>
				break;
			} else if (direction == '2') {
    3ac0:	89 81       	ldd	r24, Y+1	; 0x01
    3ac2:	82 33       	cpi	r24, 0x32	; 50
    3ac4:	31 f4       	brne	.+12     	; 0x3ad2 <DC_MOTOR_void_direction+0x70>
				DC_MOTOR_enum_INIT();
    3ac6:	0e 94 15 13 	call	0x262a	; 0x262a <DC_MOTOR_enum_INIT>
				DC_MOTOR_enum_Start(CCW);
    3aca:	82 e0       	ldi	r24, 0x02	; 2
    3acc:	0e 94 3e 13 	call	0x267c	; 0x267c <DC_MOTOR_enum_Start>
    3ad0:	06 c0       	rjmp	.+12     	; 0x3ade <DC_MOTOR_void_direction+0x7c>
				break;
			}
			else if(direction=='3'){
    3ad2:	89 81       	ldd	r24, Y+1	; 0x01
    3ad4:	83 33       	cpi	r24, 0x33	; 51
    3ad6:	21 f7       	brne	.-56     	; 0x3aa0 <DC_MOTOR_void_direction+0x3e>
				DC_MOTOR_enum_Stop();
    3ad8:	0e 94 6e 13 	call	0x26dc	; 0x26dc <DC_MOTOR_enum_Stop>
    3adc:	e1 cf       	rjmp	.-62     	; 0x3aa0 <DC_MOTOR_void_direction+0x3e>
			}
		}
	}
}
    3ade:	0f 90       	pop	r0
    3ae0:	cf 91       	pop	r28
    3ae2:	df 91       	pop	r29
    3ae4:	08 95       	ret

00003ae6 <__udivmodsi4>:
    3ae6:	a1 e2       	ldi	r26, 0x21	; 33
    3ae8:	1a 2e       	mov	r1, r26
    3aea:	aa 1b       	sub	r26, r26
    3aec:	bb 1b       	sub	r27, r27
    3aee:	fd 01       	movw	r30, r26
    3af0:	0d c0       	rjmp	.+26     	; 0x3b0c <__udivmodsi4_ep>

00003af2 <__udivmodsi4_loop>:
    3af2:	aa 1f       	adc	r26, r26
    3af4:	bb 1f       	adc	r27, r27
    3af6:	ee 1f       	adc	r30, r30
    3af8:	ff 1f       	adc	r31, r31
    3afa:	a2 17       	cp	r26, r18
    3afc:	b3 07       	cpc	r27, r19
    3afe:	e4 07       	cpc	r30, r20
    3b00:	f5 07       	cpc	r31, r21
    3b02:	20 f0       	brcs	.+8      	; 0x3b0c <__udivmodsi4_ep>
    3b04:	a2 1b       	sub	r26, r18
    3b06:	b3 0b       	sbc	r27, r19
    3b08:	e4 0b       	sbc	r30, r20
    3b0a:	f5 0b       	sbc	r31, r21

00003b0c <__udivmodsi4_ep>:
    3b0c:	66 1f       	adc	r22, r22
    3b0e:	77 1f       	adc	r23, r23
    3b10:	88 1f       	adc	r24, r24
    3b12:	99 1f       	adc	r25, r25
    3b14:	1a 94       	dec	r1
    3b16:	69 f7       	brne	.-38     	; 0x3af2 <__udivmodsi4_loop>
    3b18:	60 95       	com	r22
    3b1a:	70 95       	com	r23
    3b1c:	80 95       	com	r24
    3b1e:	90 95       	com	r25
    3b20:	9b 01       	movw	r18, r22
    3b22:	ac 01       	movw	r20, r24
    3b24:	bd 01       	movw	r22, r26
    3b26:	cf 01       	movw	r24, r30
    3b28:	08 95       	ret

00003b2a <__prologue_saves__>:
    3b2a:	2f 92       	push	r2
    3b2c:	3f 92       	push	r3
    3b2e:	4f 92       	push	r4
    3b30:	5f 92       	push	r5
    3b32:	6f 92       	push	r6
    3b34:	7f 92       	push	r7
    3b36:	8f 92       	push	r8
    3b38:	9f 92       	push	r9
    3b3a:	af 92       	push	r10
    3b3c:	bf 92       	push	r11
    3b3e:	cf 92       	push	r12
    3b40:	df 92       	push	r13
    3b42:	ef 92       	push	r14
    3b44:	ff 92       	push	r15
    3b46:	0f 93       	push	r16
    3b48:	1f 93       	push	r17
    3b4a:	cf 93       	push	r28
    3b4c:	df 93       	push	r29
    3b4e:	cd b7       	in	r28, 0x3d	; 61
    3b50:	de b7       	in	r29, 0x3e	; 62
    3b52:	ca 1b       	sub	r28, r26
    3b54:	db 0b       	sbc	r29, r27
    3b56:	0f b6       	in	r0, 0x3f	; 63
    3b58:	f8 94       	cli
    3b5a:	de bf       	out	0x3e, r29	; 62
    3b5c:	0f be       	out	0x3f, r0	; 63
    3b5e:	cd bf       	out	0x3d, r28	; 61
    3b60:	09 94       	ijmp

00003b62 <__epilogue_restores__>:
    3b62:	2a 88       	ldd	r2, Y+18	; 0x12
    3b64:	39 88       	ldd	r3, Y+17	; 0x11
    3b66:	48 88       	ldd	r4, Y+16	; 0x10
    3b68:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b70:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b72:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b74:	b9 84       	ldd	r11, Y+9	; 0x09
    3b76:	c8 84       	ldd	r12, Y+8	; 0x08
    3b78:	df 80       	ldd	r13, Y+7	; 0x07
    3b7a:	ee 80       	ldd	r14, Y+6	; 0x06
    3b7c:	fd 80       	ldd	r15, Y+5	; 0x05
    3b7e:	0c 81       	ldd	r16, Y+4	; 0x04
    3b80:	1b 81       	ldd	r17, Y+3	; 0x03
    3b82:	aa 81       	ldd	r26, Y+2	; 0x02
    3b84:	b9 81       	ldd	r27, Y+1	; 0x01
    3b86:	ce 0f       	add	r28, r30
    3b88:	d1 1d       	adc	r29, r1
    3b8a:	0f b6       	in	r0, 0x3f	; 63
    3b8c:	f8 94       	cli
    3b8e:	de bf       	out	0x3e, r29	; 62
    3b90:	0f be       	out	0x3f, r0	; 63
    3b92:	cd bf       	out	0x3d, r28	; 61
    3b94:	ed 01       	movw	r28, r26
    3b96:	08 95       	ret

00003b98 <_exit>:
    3b98:	f8 94       	cli

00003b9a <__stop_program>:
    3b9a:	ff cf       	rjmp	.-2      	; 0x3b9a <__stop_program>

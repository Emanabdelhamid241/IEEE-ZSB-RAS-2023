
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000028a8  0000293c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800080  00800080  0000295c  2**0
                  ALLOC
  3 .stab         000024d8  00000000  00000000  0000295c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010d8  00000000  00000000  00004e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000061fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009341  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a2c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a706  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__vector_1>
       8:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__vector_2>
       c:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ed 13 	call	0x27da	; 0x27da <main>
      8a:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 47 14 	jmp	0x288e	; 0x288e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GI_enum_GI_Enable>:
//MCAL
//#include "GI_config.h"
//#include "GI_private.h"
#include "GI_interface.h"

ES_t  GI_enum_GI_Enable(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG_REG,GI_u8_PIN7);
     ca6:	af e5       	ldi	r26, 0x5F	; 95
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e5       	ldi	r30, 0x5F	; 95
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
return ES_OK;
     cb4:	80 e0       	ldi	r24, 0x00	; 0
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <GI_enum_GI_Disable>:
ES_t  GI_enum_GI_Disable(void){
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG_REG,GI_u8_PIN7);
     cc4:	af e5       	ldi	r26, 0x5F	; 95
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	ef e5       	ldi	r30, 0x5F	; 95
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8f 77       	andi	r24, 0x7F	; 127
     cd0:	8c 93       	st	X, r24
	return ES_OK;
     cd2:	80 e0       	ldi	r24, 0x00	; 0

}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <EXTI_enum_EXTI_Enable>:
static void (*EXTI_Apf_EXTI[3])(void)={NULL,NULL,NULL};



/*function to enable */
ES_t  EXTI_enum_EXTI_Enable(u8 Copy_u8_EXTI_Index,u8 Copy_u8_Edge_Index){
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	2b 97       	sbiw	r28, 0x0b	; 11
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	8a 83       	std	Y+2, r24	; 0x02
     cf0:	6b 83       	std	Y+3, r22	; 0x03
		 ES_t Local_enu_Erorr_State = ES_OK ;
     cf2:	19 82       	std	Y+1, r1	; 0x01
         switch(Copy_u8_EXTI_Index)
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	3b 87       	std	Y+11, r19	; 0x0b
     cfc:	2a 87       	std	Y+10, r18	; 0x0a
     cfe:	8a 85       	ldd	r24, Y+10	; 0x0a
     d00:	9b 85       	ldd	r25, Y+11	; 0x0b
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	91 05       	cpc	r25, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <EXTI_enum_EXTI_Enable+0x30>
     d08:	86 c0       	rjmp	.+268    	; 0xe16 <EXTI_enum_EXTI_Enable+0x13c>
     d0a:	2a 85       	ldd	r18, Y+10	; 0x0a
     d0c:	3b 85       	ldd	r19, Y+11	; 0x0b
     d0e:	22 30       	cpi	r18, 0x02	; 2
     d10:	31 05       	cpc	r19, r1
     d12:	09 f4       	brne	.+2      	; 0xd16 <EXTI_enum_EXTI_Enable+0x3c>
     d14:	fb c0       	rjmp	.+502    	; 0xf0c <EXTI_enum_EXTI_Enable+0x232>
     d16:	8a 85       	ldd	r24, Y+10	; 0x0a
     d18:	9b 85       	ldd	r25, Y+11	; 0x0b
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	09 f0       	breq	.+2      	; 0xd20 <EXTI_enum_EXTI_Enable+0x46>
     d1e:	25 c1       	rjmp	.+586    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
         {
         case EXTI_u8_INT0:
        	 switch(Copy_u8_Edge_Index)
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	39 87       	std	Y+9, r19	; 0x09
     d28:	28 87       	std	Y+8, r18	; 0x08
     d2a:	88 85       	ldd	r24, Y+8	; 0x08
     d2c:	99 85       	ldd	r25, Y+9	; 0x09
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	91 05       	cpc	r25, r1
     d32:	61 f1       	breq	.+88     	; 0xd8c <EXTI_enum_EXTI_Enable+0xb2>
     d34:	28 85       	ldd	r18, Y+8	; 0x08
     d36:	39 85       	ldd	r19, Y+9	; 0x09
     d38:	22 30       	cpi	r18, 0x02	; 2
     d3a:	31 05       	cpc	r19, r1
     d3c:	2c f4       	brge	.+10     	; 0xd48 <EXTI_enum_EXTI_Enable+0x6e>
     d3e:	88 85       	ldd	r24, Y+8	; 0x08
     d40:	99 85       	ldd	r25, Y+9	; 0x09
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	69 f0       	breq	.+26     	; 0xd60 <EXTI_enum_EXTI_Enable+0x86>
     d46:	64 c0       	rjmp	.+200    	; 0xe10 <EXTI_enum_EXTI_Enable+0x136>
     d48:	28 85       	ldd	r18, Y+8	; 0x08
     d4a:	39 85       	ldd	r19, Y+9	; 0x09
     d4c:	22 30       	cpi	r18, 0x02	; 2
     d4e:	31 05       	cpc	r19, r1
     d50:	99 f1       	breq	.+102    	; 0xdb8 <EXTI_enum_EXTI_Enable+0xde>
     d52:	88 85       	ldd	r24, Y+8	; 0x08
     d54:	99 85       	ldd	r25, Y+9	; 0x09
     d56:	83 30       	cpi	r24, 0x03	; 3
     d58:	91 05       	cpc	r25, r1
     d5a:	09 f4       	brne	.+2      	; 0xd5e <EXTI_enum_EXTI_Enable+0x84>
     d5c:	43 c0       	rjmp	.+134    	; 0xde4 <EXTI_enum_EXTI_Enable+0x10a>
     d5e:	58 c0       	rjmp	.+176    	; 0xe10 <EXTI_enum_EXTI_Enable+0x136>
			 {
        	 case EXTI_u8_RAISING_EDGE:
        		 SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC01);
     d60:	a5 e5       	ldi	r26, 0x55	; 85
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e5 e5       	ldi	r30, 0x55	; 85
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	82 60       	ori	r24, 0x02	; 2
     d6c:	8c 93       	st	X, r24
        		 SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC00);
     d6e:	a5 e5       	ldi	r26, 0x55	; 85
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e5 e5       	ldi	r30, 0x55	; 85
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	81 60       	ori	r24, 0x01	; 1
     d7a:	8c 93       	st	X, r24
        		 /* Enable EXTI0 >>> PIC */
        		 	 SET_BIT(EXTI_u8_GICR_REG  ,EXTI0_u8_PIN6  );
     d7c:	ab e5       	ldi	r26, 0x5B	; 91
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	eb e5       	ldi	r30, 0x5B	; 91
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	80 64       	ori	r24, 0x40	; 64
     d88:	8c 93       	st	X, r24
     d8a:	ef c0       	rjmp	.+478    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        		 break;
        	 case EXTI_u8_FALLING_EDGE:
        	       SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC01);
     d8c:	a5 e5       	ldi	r26, 0x55	; 85
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e5 e5       	ldi	r30, 0x55	; 85
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	82 60       	ori	r24, 0x02	; 2
     d98:	8c 93       	st	X, r24
        	       CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC00);
     d9a:	a5 e5       	ldi	r26, 0x55	; 85
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e5 e5       	ldi	r30, 0x55	; 85
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8e 7f       	andi	r24, 0xFE	; 254
     da6:	8c 93       	st	X, r24
        	       /* Enable EXTI0 >>> PIC */
        	         SET_BIT(EXTI_u8_GICR_REG  ,EXTI0_u8_PIN6  );
     da8:	ab e5       	ldi	r26, 0x5B	; 91
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	eb e5       	ldi	r30, 0x5B	; 91
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	80 64       	ori	r24, 0x40	; 64
     db4:	8c 93       	st	X, r24
     db6:	d9 c0       	rjmp	.+434    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         		 break;
        	 case EXTI_u8_ANY_LOGICAL_CHANGE:
        	    	 CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC01);
     db8:	a5 e5       	ldi	r26, 0x55	; 85
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e5 e5       	ldi	r30, 0x55	; 85
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8d 7f       	andi	r24, 0xFD	; 253
     dc4:	8c 93       	st	X, r24
            		 SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC00);
     dc6:	a5 e5       	ldi	r26, 0x55	; 85
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e5 e5       	ldi	r30, 0x55	; 85
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	81 60       	ori	r24, 0x01	; 1
     dd2:	8c 93       	st	X, r24
            		 /* Enable EXTI0 >>> PIC */
            		 SET_BIT(EXTI_u8_GICR_REG  ,EXTI0_u8_PIN6  );
     dd4:	ab e5       	ldi	r26, 0x5B	; 91
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	eb e5       	ldi	r30, 0x5B	; 91
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	80 64       	ori	r24, 0x40	; 64
     de0:	8c 93       	st	X, r24
     de2:	c3 c0       	rjmp	.+390    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         		 break;
        	 case EXTI_u8_LOW_LEVEL:
       	        CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC01);
     de4:	a5 e5       	ldi	r26, 0x55	; 85
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e5 e5       	ldi	r30, 0x55	; 85
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
        		 CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT0_ISC00);
     df2:	a5 e5       	ldi	r26, 0x55	; 85
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e5 e5       	ldi	r30, 0x55	; 85
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	8e 7f       	andi	r24, 0xFE	; 254
     dfe:	8c 93       	st	X, r24
        		 /* Enable EXTI0 >>> PIC */
        		    SET_BIT(EXTI_u8_GICR_REG  ,EXTI0_u8_PIN6  );
     e00:	ab e5       	ldi	r26, 0x5B	; 91
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	eb e5       	ldi	r30, 0x5B	; 91
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 64       	ori	r24, 0x40	; 64
     e0c:	8c 93       	st	X, r24
     e0e:	ad c0       	rjmp	.+346    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         		 break;
        	 default :Local_enu_Erorr_State = ES_NOK ;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	aa c0       	rjmp	.+340    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
			 }
        	 break;
        	 case EXTI_u8_INT1:
        	         	 switch(Copy_u8_Edge_Index)
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	3f 83       	std	Y+7, r19	; 0x07
     e1e:	2e 83       	std	Y+6, r18	; 0x06
     e20:	8e 81       	ldd	r24, Y+6	; 0x06
     e22:	9f 81       	ldd	r25, Y+7	; 0x07
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	91 05       	cpc	r25, r1
     e28:	61 f1       	breq	.+88     	; 0xe82 <EXTI_enum_EXTI_Enable+0x1a8>
     e2a:	2e 81       	ldd	r18, Y+6	; 0x06
     e2c:	3f 81       	ldd	r19, Y+7	; 0x07
     e2e:	22 30       	cpi	r18, 0x02	; 2
     e30:	31 05       	cpc	r19, r1
     e32:	2c f4       	brge	.+10     	; 0xe3e <EXTI_enum_EXTI_Enable+0x164>
     e34:	8e 81       	ldd	r24, Y+6	; 0x06
     e36:	9f 81       	ldd	r25, Y+7	; 0x07
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	69 f0       	breq	.+26     	; 0xe56 <EXTI_enum_EXTI_Enable+0x17c>
     e3c:	64 c0       	rjmp	.+200    	; 0xf06 <EXTI_enum_EXTI_Enable+0x22c>
     e3e:	2e 81       	ldd	r18, Y+6	; 0x06
     e40:	3f 81       	ldd	r19, Y+7	; 0x07
     e42:	22 30       	cpi	r18, 0x02	; 2
     e44:	31 05       	cpc	r19, r1
     e46:	99 f1       	breq	.+102    	; 0xeae <EXTI_enum_EXTI_Enable+0x1d4>
     e48:	8e 81       	ldd	r24, Y+6	; 0x06
     e4a:	9f 81       	ldd	r25, Y+7	; 0x07
     e4c:	83 30       	cpi	r24, 0x03	; 3
     e4e:	91 05       	cpc	r25, r1
     e50:	09 f4       	brne	.+2      	; 0xe54 <EXTI_enum_EXTI_Enable+0x17a>
     e52:	43 c0       	rjmp	.+134    	; 0xeda <EXTI_enum_EXTI_Enable+0x200>
     e54:	58 c0       	rjmp	.+176    	; 0xf06 <EXTI_enum_EXTI_Enable+0x22c>
        	 			 {
        	         	 case EXTI_u8_RAISING_EDGE:
        	         		 SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC11);
     e56:	a5 e5       	ldi	r26, 0x55	; 85
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e5 e5       	ldi	r30, 0x55	; 85
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	8c 93       	st	X, r24
        	         		 SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC10);
     e64:	a5 e5       	ldi	r26, 0x55	; 85
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e5 e5       	ldi	r30, 0x55	; 85
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	84 60       	ori	r24, 0x04	; 4
     e70:	8c 93       	st	X, r24
        	         		 /* Enable EXTI1 >>> PIC */
        	         		 	 SET_BIT(EXTI_u8_GICR_REG  ,EXTI1_u8_PIN7  );
     e72:	ab e5       	ldi	r26, 0x5B	; 91
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	eb e5       	ldi	r30, 0x5B	; 91
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	8c 93       	st	X, r24
     e80:	74 c0       	rjmp	.+232    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         		 break;
        	         	 case EXTI_u8_FALLING_EDGE:
        	         	       SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC11);
     e82:	a5 e5       	ldi	r26, 0x55	; 85
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e5 e5       	ldi	r30, 0x55	; 85
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	88 60       	ori	r24, 0x08	; 8
     e8e:	8c 93       	st	X, r24
        	         	       CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC10);
     e90:	a5 e5       	ldi	r26, 0x55	; 85
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e5       	ldi	r30, 0x55	; 85
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8b 7f       	andi	r24, 0xFB	; 251
     e9c:	8c 93       	st	X, r24
        	         	       /* Enable EXTI1 >>> PIC */
        	         	         SET_BIT(EXTI_u8_GICR_REG  ,EXTI1_u8_PIN7  );
     e9e:	ab e5       	ldi	r26, 0x5B	; 91
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	eb e5       	ldi	r30, 0x5B	; 91
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 68       	ori	r24, 0x80	; 128
     eaa:	8c 93       	st	X, r24
     eac:	5e c0       	rjmp	.+188    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         	         		 break;
        	         	 case EXTI_u8_ANY_LOGICAL_CHANGE:
        	         	    	 CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC11);
     eae:	a5 e5       	ldi	r26, 0x55	; 85
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e5 e5       	ldi	r30, 0x55	; 85
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	87 7f       	andi	r24, 0xF7	; 247
     eba:	8c 93       	st	X, r24
        	             		 SET_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC10);
     ebc:	a5 e5       	ldi	r26, 0x55	; 85
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e5 e5       	ldi	r30, 0x55	; 85
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	84 60       	ori	r24, 0x04	; 4
     ec8:	8c 93       	st	X, r24
        	             		 /* Enable EXTI1 >>> PIC */
        	             		 SET_BIT(EXTI_u8_GICR_REG  ,EXTI1_u8_PIN7  );
     eca:	ab e5       	ldi	r26, 0x5B	; 91
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e5       	ldi	r30, 0x5B	; 91
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	80 68       	ori	r24, 0x80	; 128
     ed6:	8c 93       	st	X, r24
     ed8:	48 c0       	rjmp	.+144    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         	         		 break;
        	         	 case EXTI_u8_LOW_LEVEL:
        	        	        CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC11);
     eda:	a5 e5       	ldi	r26, 0x55	; 85
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e5 e5       	ldi	r30, 0x55	; 85
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	87 7f       	andi	r24, 0xF7	; 247
     ee6:	8c 93       	st	X, r24
        	         		 CLR_BIT(EXTI_u8_MCUCR_REG  ,EXTI_u8_INT1_ISC10);
     ee8:	a5 e5       	ldi	r26, 0x55	; 85
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e5 e5       	ldi	r30, 0x55	; 85
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8b 7f       	andi	r24, 0xFB	; 251
     ef4:	8c 93       	st	X, r24
        	         		 /* Enable EXTI1 >>> PIC */
        	         		    SET_BIT(EXTI_u8_GICR_REG  ,EXTI1_u8_PIN7  );
     ef6:	ab e5       	ldi	r26, 0x5B	; 91
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	eb e5       	ldi	r30, 0x5B	; 91
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 68       	ori	r24, 0x80	; 128
     f02:	8c 93       	st	X, r24
     f04:	32 c0       	rjmp	.+100    	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         	         		 break;
        	         	 default :Local_enu_Erorr_State = ES_NOK ;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	2f c0       	rjmp	.+94     	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	 			 }
        	         	 break;
        	         	case EXTI_u8_INT2:
        	         	     switch(Copy_u8_Edge_Index)
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3d 83       	std	Y+5, r19	; 0x05
     f14:	2c 83       	std	Y+4, r18	; 0x04
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	9d 81       	ldd	r25, Y+5	; 0x05
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	31 f0       	breq	.+12     	; 0xf2a <EXTI_enum_EXTI_Enable+0x250>
     f1e:	2c 81       	ldd	r18, Y+4	; 0x04
     f20:	3d 81       	ldd	r19, Y+5	; 0x05
     f22:	21 30       	cpi	r18, 0x01	; 1
     f24:	31 05       	cpc	r19, r1
     f26:	81 f0       	breq	.+32     	; 0xf48 <EXTI_enum_EXTI_Enable+0x26e>
     f28:	1e c0       	rjmp	.+60     	; 0xf66 <EXTI_enum_EXTI_Enable+0x28c>
           	 			 {
        	            	 case EXTI_u8_RAISING_EDGE:
        	         	        		 SET_BIT(EXTI_u8_MCUCSR_REG  ,EXTI_u8_INT2_ISC2);
     f2a:	a4 e5       	ldi	r26, 0x54	; 84
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e4 e5       	ldi	r30, 0x54	; 84
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 64       	ori	r24, 0x40	; 64
     f36:	8c 93       	st	X, r24
        	         	         /* Enable EXTI2 >>> PIC */
        	         	     	 	 SET_BIT(EXTI_u8_GICR_REG  ,EXTI2_u8_PIN5  );
     f38:	ab e5       	ldi	r26, 0x5B	; 91
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	eb e5       	ldi	r30, 0x5B	; 91
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 62       	ori	r24, 0x20	; 32
     f44:	8c 93       	st	X, r24
     f46:	11 c0       	rjmp	.+34     	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
        	         	        	  break;
        	         	       case EXTI_u8_FALLING_EDGE:
        	   	         	       CLR_BIT(EXTI_u8_MCUCSR_REG  ,EXTI_u8_INT2_ISC2);
     f48:	a4 e5       	ldi	r26, 0x54	; 84
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e4 e5       	ldi	r30, 0x54	; 84
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8f 7b       	andi	r24, 0xBF	; 191
     f54:	8c 93       	st	X, r24
   	        	         	       /* Enable EXTI1 >>> PIC */
           	         	         SET_BIT(EXTI_u8_GICR_REG  ,EXTI2_u8_PIN5  );
     f56:	ab e5       	ldi	r26, 0x5B	; 91
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	eb e5       	ldi	r30, 0x5B	; 91
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	80 62       	ori	r24, 0x20	; 32
     f62:	8c 93       	st	X, r24
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <EXTI_enum_EXTI_Enable+0x290>
               	         		 break;

        	         	   	   default :Local_enu_Erorr_State = ES_NOK ;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	89 83       	std	Y+1, r24	; 0x01
           	 			 }
                	         	 break;
         }
		 return Local_enu_Erorr_State;
     f6a:	89 81       	ldd	r24, Y+1	; 0x01

}
     f6c:	2b 96       	adiw	r28, 0x0b	; 11
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <EXTI_enum_EXTI_Disable>:
ES_t  EXTI_enum_EXTI_Disable(u8 Copy_u8_EXTI_Index){
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	00 d0       	rcall	.+0      	; 0xf84 <EXTI_enum_EXTI_Disable+0x6>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <EXTI_enum_EXTI_Disable+0x8>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enu_Erorr_State = ES_OK ;
     f8c:	19 82       	std	Y+1, r1	; 0x01
     switch(Copy_u8_EXTI_Index){
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	3c 83       	std	Y+4, r19	; 0x04
     f96:	2b 83       	std	Y+3, r18	; 0x03
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	91 05       	cpc	r25, r1
     fa0:	89 f0       	breq	.+34     	; 0xfc4 <EXTI_enum_EXTI_Disable+0x46>
     fa2:	2b 81       	ldd	r18, Y+3	; 0x03
     fa4:	3c 81       	ldd	r19, Y+4	; 0x04
     fa6:	22 30       	cpi	r18, 0x02	; 2
     fa8:	31 05       	cpc	r19, r1
     faa:	a1 f0       	breq	.+40     	; 0xfd4 <EXTI_enum_EXTI_Disable+0x56>
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	9c 81       	ldd	r25, Y+4	; 0x04
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	b9 f4       	brne	.+46     	; 0xfe2 <EXTI_enum_EXTI_Disable+0x64>
     case EXTI_u8_INT0 :
    	 /* Disable EXTI0 >>> PIC */
    	   CLR_BIT(EXTI_u8_GICR_REG  ,EXTI0_u8_PIN6  );
     fb4:	ab e5       	ldi	r26, 0x5B	; 91
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	eb e5       	ldi	r30, 0x5B	; 91
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8f 7b       	andi	r24, 0xBF	; 191
     fc0:	8c 93       	st	X, r24
     fc2:	0f c0       	rjmp	.+30     	; 0xfe2 <EXTI_enum_EXTI_Disable+0x64>
    	 break;
     case EXTI_u8_INT1 :
       	 /* Disable EXTI1 >>> PIC */
          CLR_BIT(EXTI_u8_GICR_REG  ,EXTI1_u8_PIN7  );
     fc4:	ab e5       	ldi	r26, 0x5B	; 91
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	eb e5       	ldi	r30, 0x5B	; 91
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8f 77       	andi	r24, 0x7F	; 127
     fd0:	8c 93       	st	X, r24
     fd2:	07 c0       	rjmp	.+14     	; 0xfe2 <EXTI_enum_EXTI_Disable+0x64>
       	 break;
     case EXTI_u8_INT2 :
         /* Disable EXTI2 >>> PIC */
         CLR_BIT(EXTI_u8_GICR_REG  ,EXTI2_u8_PIN5  );
     fd4:	ab e5       	ldi	r26, 0x5B	; 91
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	eb e5       	ldi	r30, 0x5B	; 91
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8f 7d       	andi	r24, 0xDF	; 223
     fe0:	8c 93       	st	X, r24
      	 break;

     }
	 return Local_enu_Erorr_State;
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <EXTI_enum_Set_Call_Back>:


ES_t EXTI_enum_Set_Call_Back( u8 Copy_u8_EXTI_Index,void(*Copy_u8_EXTI_pf)(void)){
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <EXTI_enum_Set_Call_Back+0x6>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <EXTI_enum_Set_Call_Back+0x8>
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	8a 83       	std	Y+2, r24	; 0x02
    1000:	7c 83       	std	Y+4, r23	; 0x04
    1002:	6b 83       	std	Y+3, r22	; 0x03
	 ES_t Local_enu_Erorr_State = ES_OK ;
    1004:	19 82       	std	Y+1, r1	; 0x01
if((Copy_u8_EXTI_Index<=EXTI_u8_INT2)&& Copy_u8_EXTI_pf!=NULL){
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	83 30       	cpi	r24, 0x03	; 3
    100a:	88 f4       	brcc	.+34     	; 0x102e <EXTI_enum_Set_Call_Back+0x3c>
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	9c 81       	ldd	r25, Y+4	; 0x04
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	69 f0       	breq	.+26     	; 0x102e <EXTI_enum_Set_Call_Back+0x3c>
	EXTI_Apf_EXTI [Copy_u8_EXTI_Index]  =  Copy_u8_EXTI_pf;
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	fc 01       	movw	r30, r24
    1020:	e0 58       	subi	r30, 0x80	; 128
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	9c 81       	ldd	r25, Y+4	; 0x04
    1028:	91 83       	std	Z+1, r25	; 0x01
    102a:	80 83       	st	Z, r24
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <EXTI_enum_Set_Call_Back+0x40>
}
else{
	Local_enu_Erorr_State = ES_NOK ;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	89 83       	std	Y+1, r24	; 0x01
}
return Local_enu_Erorr_State;
    1032:	89 81       	ldd	r24, Y+1	; 0x01
}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <__vector_1>:

//prototype FOR ISR EXTI0
void __vector_1(void)        __attribute__((signal));
void __vector_1(void) {
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	2f 93       	push	r18
    104e:	3f 93       	push	r19
    1050:	4f 93       	push	r20
    1052:	5f 93       	push	r21
    1054:	6f 93       	push	r22
    1056:	7f 93       	push	r23
    1058:	8f 93       	push	r24
    105a:	9f 93       	push	r25
    105c:	af 93       	push	r26
    105e:	bf 93       	push	r27
    1060:	ef 93       	push	r30
    1062:	ff 93       	push	r31
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_Apf_EXTI[EXTI_u8_INT0]!= NULL){
    106c:	80 91 80 00 	lds	r24, 0x0080
    1070:	90 91 81 00 	lds	r25, 0x0081
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	29 f0       	breq	.+10     	; 0x1082 <__vector_1+0x40>
	EXTI_Apf_EXTI[EXTI_u8_INT0]();
    1078:	e0 91 80 00 	lds	r30, 0x0080
    107c:	f0 91 81 00 	lds	r31, 0x0081
    1080:	09 95       	icall
	}
}
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	ff 91       	pop	r31
    1088:	ef 91       	pop	r30
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	7f 91       	pop	r23
    1094:	6f 91       	pop	r22
    1096:	5f 91       	pop	r21
    1098:	4f 91       	pop	r20
    109a:	3f 91       	pop	r19
    109c:	2f 91       	pop	r18
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	0f 90       	pop	r0
    10a4:	1f 90       	pop	r1
    10a6:	18 95       	reti

000010a8 <__vector_2>:
//prototype FOR ISR EXTI1
void __vector_2(void)        __attribute__((signal));
void __vector_2(void) {
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	2f 93       	push	r18
    10b4:	3f 93       	push	r19
    10b6:	4f 93       	push	r20
    10b8:	5f 93       	push	r21
    10ba:	6f 93       	push	r22
    10bc:	7f 93       	push	r23
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	af 93       	push	r26
    10c4:	bf 93       	push	r27
    10c6:	ef 93       	push	r30
    10c8:	ff 93       	push	r31
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_Apf_EXTI[EXTI_u8_INT1]!= NULL){
    10d2:	80 91 82 00 	lds	r24, 0x0082
    10d6:	90 91 83 00 	lds	r25, 0x0083
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	29 f0       	breq	.+10     	; 0x10e8 <__vector_2+0x40>
		EXTI_Apf_EXTI[EXTI_u8_INT1]();
    10de:	e0 91 82 00 	lds	r30, 0x0082
    10e2:	f0 91 83 00 	lds	r31, 0x0083
    10e6:	09 95       	icall
		}

}
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	bf 91       	pop	r27
    10f2:	af 91       	pop	r26
    10f4:	9f 91       	pop	r25
    10f6:	8f 91       	pop	r24
    10f8:	7f 91       	pop	r23
    10fa:	6f 91       	pop	r22
    10fc:	5f 91       	pop	r21
    10fe:	4f 91       	pop	r20
    1100:	3f 91       	pop	r19
    1102:	2f 91       	pop	r18
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <__vector_3>:
//prototype FOR ISR EXTI2
void __vector_3(void)        __attribute__((signal));
void __vector_3(void) {
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	4f 93       	push	r20
    111e:	5f 93       	push	r21
    1120:	6f 93       	push	r22
    1122:	7f 93       	push	r23
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	af 93       	push	r26
    112a:	bf 93       	push	r27
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_Apf_EXTI[EXTI_u8_INT2]!= NULL){
    1138:	80 91 84 00 	lds	r24, 0x0084
    113c:	90 91 85 00 	lds	r25, 0x0085
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	29 f0       	breq	.+10     	; 0x114e <__vector_3+0x40>
		EXTI_Apf_EXTI[EXTI_u8_INT2]();
    1144:	e0 91 84 00 	lds	r30, 0x0084
    1148:	f0 91 85 00 	lds	r31, 0x0085
    114c:	09 95       	icall
		}

}
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <DIO_voidInit>:
//MCAL Layer
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidInit(void){
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = CONC(DIO_U8_PA7_INTIAL_DIRECTION, DIO_U8_PA6_INTIAL_DIRECTION, DIO_U8_PA5_INTIAL_DIRECTION, DIO_U8_PA4_INTIAL_DIRECTION,
    117c:	ea e3       	ldi	r30, 0x3A	; 58
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	87 e0       	ldi	r24, 0x07	; 7
    1182:	80 83       	st	Z, r24
		                   DIO_U8_PA3_INTIAL_DIRECTION, DIO_U8_PA2_INTIAL_DIRECTION, DIO_U8_PA1_INTIAL_DIRECTION, DIO_U8_PA0_INTIAL_DIRECTION);
		                 			
	DIO_u8_DDRB_REG = CONC(DIO_U8_PB7_INTIAL_DIRECTION, DIO_U8_PB6_INTIAL_DIRECTION, DIO_U8_PB5_INTIAL_DIRECTION, DIO_U8_PB4_INTIAL_DIRECTION,
    1184:	e7 e3       	ldi	r30, 0x37	; 55
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	10 82       	st	Z, r1
				           DIO_U8_PB3_INTIAL_DIRECTION, DIO_U8_PB2_INTIAL_DIRECTION, DIO_U8_PB1_INTIAL_DIRECTION, DIO_U8_PB0_INTIAL_DIRECTION);
					                                                                                                                      
	DIO_u8_DDRC_REG = CONC(DIO_U8_PC7_INTIAL_DIRECTION, DIO_U8_PC6_INTIAL_DIRECTION, DIO_U8_PC5_INTIAL_DIRECTION, DIO_U8_PC4_INTIAL_DIRECTION,
    118a:	e4 e3       	ldi	r30, 0x34	; 52
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	10 82       	st	Z, r1
		                   DIO_U8_PC3_INTIAL_DIRECTION, DIO_U8_PC2_INTIAL_DIRECTION, DIO_U8_PC1_INTIAL_DIRECTION, DIO_U8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = CONC(DIO_U8_PD7_INTIAL_DIRECTION, DIO_U8_PD6_INTIAL_DIRECTION, DIO_U8_PD5_INTIAL_DIRECTION, DIO_U8_PD4_INTIAL_DIRECTION,
    1190:	e1 e3       	ldi	r30, 0x31	; 49
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	80 83       	st	Z, r24
				           DIO_U8_PD3_INTIAL_DIRECTION, DIO_U8_PD2_INTIAL_DIRECTION, DIO_U8_PD1_INTIAL_DIRECTION, DIO_U8_PD0_INTIAL_DIRECTION);

	DIO_u8_PORTA_REG = CONC(DIO_U8_PA7_INTIAL_VALUE, DIO_U8_PA6_INTIAL_VALUE, DIO_U8_PA5_INTIAL_VALUE, DIO_U8_PA4_INTIAL_VALUE,
    1198:	eb e3       	ldi	r30, 0x3B	; 59
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	10 82       	st	Z, r1
						    DIO_U8_PA3_INTIAL_VALUE, DIO_U8_PA2_INTIAL_VALUE, DIO_U8_PA1_INTIAL_VALUE, DIO_U8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = CONC(DIO_U8_PB7_INTIAL_VALUE, DIO_U8_PB6_INTIAL_VALUE, DIO_U8_PB5_INTIAL_VALUE, DIO_U8_PB4_INTIAL_VALUE,
    119e:	e8 e3       	ldi	r30, 0x38	; 56
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	10 82       	st	Z, r1
						   	DIO_U8_PB3_INTIAL_VALUE, DIO_U8_PB2_INTIAL_VALUE, DIO_U8_PB1_INTIAL_VALUE, DIO_U8_PB0_INTIAL_VALUE);
												 
    DIO_u8_PORTC_REG = CONC(DIO_U8_PC7_INTIAL_VALUE, DIO_U8_PC6_INTIAL_VALUE, DIO_U8_PC5_INTIAL_VALUE, DIO_U8_PC4_INTIAL_VALUE,
    11a4:	e5 e3       	ldi	r30, 0x35	; 53
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	10 82       	st	Z, r1
					        DIO_U8_PC3_INTIAL_VALUE, DIO_U8_PC2_INTIAL_VALUE, DIO_U8_PC1_INTIAL_VALUE, DIO_U8_PC0_INTIAL_VALUE);
																		   
    DIO_u8_PORTD_REG = CONC(DIO_U8_PD7_INTIAL_VALUE, DIO_U8_PD6_INTIAL_VALUE, DIO_U8_PD5_INTIAL_VALUE, DIO_U8_PD4_INTIAL_VALUE,
    11aa:	e2 e3       	ldi	r30, 0x32	; 50
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	10 82       	st	Z, r1
						    DIO_U8_PD3_INTIAL_VALUE, DIO_U8_PD2_INTIAL_VALUE, DIO_U8_PD1_INTIAL_VALUE, DIO_U8_PD0_INTIAL_VALUE);
    }
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <DIO_u8_Set_Pin_Direction>:

u8 DIO_u8_Set_Pin_Direction  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Direction ){
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	2e 97       	sbiw	r28, 0x0e	; 14
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	8a 83       	std	Y+2, r24	; 0x02
    11cc:	6b 83       	std	Y+3, r22	; 0x03
    11ce:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
    11d0:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Direction == DIO_u8_INTIAL_INPUT)||(Copy_u8_Pin_Direction == DIO_u8_INTIAL_OUTPUT)))
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	84 30       	cpi	r24, 0x04	; 4
    11d6:	08 f0       	brcs	.+2      	; 0x11da <DIO_u8_Set_Pin_Direction+0x24>
    11d8:	15 c1       	rjmp	.+554    	; 0x1404 <DIO_u8_Set_Pin_Direction+0x24e>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	88 30       	cpi	r24, 0x08	; 8
    11de:	08 f0       	brcs	.+2      	; 0x11e2 <DIO_u8_Set_Pin_Direction+0x2c>
    11e0:	11 c1       	rjmp	.+546    	; 0x1404 <DIO_u8_Set_Pin_Direction+0x24e>
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04
    11e4:	88 23       	and	r24, r24
    11e6:	21 f0       	breq	.+8      	; 0x11f0 <DIO_u8_Set_Pin_Direction+0x3a>
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <DIO_u8_Set_Pin_Direction+0x3a>
    11ee:	0a c1       	rjmp	.+532    	; 0x1404 <DIO_u8_Set_Pin_Direction+0x24e>
	{
        switch (Copy_u8_Port_ID)
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	3e 87       	std	Y+14, r19	; 0x0e
    11f8:	2d 87       	std	Y+13, r18	; 0x0d
    11fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	91 05       	cpc	r25, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <DIO_u8_Set_Pin_Direction+0x50>
    1204:	51 c0       	rjmp	.+162    	; 0x12a8 <DIO_u8_Set_Pin_Direction+0xf2>
    1206:	2d 85       	ldd	r18, Y+13	; 0x0d
    1208:	3e 85       	ldd	r19, Y+14	; 0x0e
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	2c f4       	brge	.+10     	; 0x121a <DIO_u8_Set_Pin_Direction+0x64>
    1210:	8d 85       	ldd	r24, Y+13	; 0x0d
    1212:	9e 85       	ldd	r25, Y+14	; 0x0e
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	71 f0       	breq	.+28     	; 0x1234 <DIO_u8_Set_Pin_Direction+0x7e>
    1218:	f7 c0       	rjmp	.+494    	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>
    121a:	2d 85       	ldd	r18, Y+13	; 0x0d
    121c:	3e 85       	ldd	r19, Y+14	; 0x0e
    121e:	22 30       	cpi	r18, 0x02	; 2
    1220:	31 05       	cpc	r19, r1
    1222:	09 f4       	brne	.+2      	; 0x1226 <DIO_u8_Set_Pin_Direction+0x70>
    1224:	7b c0       	rjmp	.+246    	; 0x131c <DIO_u8_Set_Pin_Direction+0x166>
    1226:	8d 85       	ldd	r24, Y+13	; 0x0d
    1228:	9e 85       	ldd	r25, Y+14	; 0x0e
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	91 05       	cpc	r25, r1
    122e:	09 f4       	brne	.+2      	; 0x1232 <DIO_u8_Set_Pin_Direction+0x7c>
    1230:	af c0       	rjmp	.+350    	; 0x1390 <DIO_u8_Set_Pin_Direction+0x1da>
    1232:	ea c0       	rjmp	.+468    	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>
        {
               case DIO_u8_PORTA:
            	   switch (Copy_u8_Pin_Direction)
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3c 87       	std	Y+12, r19	; 0x0c
    123c:	2b 87       	std	Y+11, r18	; 0x0b
    123e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1240:	9c 85       	ldd	r25, Y+12	; 0x0c
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	c9 f0       	breq	.+50     	; 0x1278 <DIO_u8_Set_Pin_Direction+0xc2>
    1246:	2b 85       	ldd	r18, Y+11	; 0x0b
    1248:	3c 85       	ldd	r19, Y+12	; 0x0c
    124a:	21 30       	cpi	r18, 0x01	; 1
    124c:	31 05       	cpc	r19, r1
    124e:	49 f5       	brne	.+82     	; 0x12a2 <DIO_u8_Set_Pin_Direction+0xec>
            	   {
                    	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
    1250:	aa e3       	ldi	r26, 0x3A	; 58
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	ea e3       	ldi	r30, 0x3A	; 58
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_u8_Set_Pin_Direction+0xb8>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_u8_Set_Pin_Direction+0xb4>
    1272:	84 2b       	or	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	c8 c0       	rjmp	.+400    	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>
                    	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
    1278:	aa e3       	ldi	r26, 0x3A	; 58
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	ea e3       	ldi	r30, 0x3A	; 58
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_u8_Set_Pin_Direction+0xe0>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_u8_Set_Pin_Direction+0xdc>
    129a:	80 95       	com	r24
    129c:	84 23       	and	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	b3 c0       	rjmp	.+358    	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	b0 c0       	rjmp	.+352    	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>

            	   }
                  break;
               case DIO_u8_PORTB:
             	   switch (Copy_u8_Pin_Direction)
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	3a 87       	std	Y+10, r19	; 0x0a
    12b0:	29 87       	std	Y+9, r18	; 0x09
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	c9 f0       	breq	.+50     	; 0x12ec <DIO_u8_Set_Pin_Direction+0x136>
    12ba:	29 85       	ldd	r18, Y+9	; 0x09
    12bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    12be:	21 30       	cpi	r18, 0x01	; 1
    12c0:	31 05       	cpc	r19, r1
    12c2:	49 f5       	brne	.+82     	; 0x1316 <DIO_u8_Set_Pin_Direction+0x160>
             	   {
                     	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    12c4:	a7 e3       	ldi	r26, 0x37	; 55
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e7 e3       	ldi	r30, 0x37	; 55
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_u8_Set_Pin_Direction+0x12c>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_u8_Set_Pin_Direction+0x128>
    12e6:	84 2b       	or	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	8e c0       	rjmp	.+284    	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>
                     	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    12ec:	a7 e3       	ldi	r26, 0x37	; 55
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e7 e3       	ldi	r30, 0x37	; 55
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <DIO_u8_Set_Pin_Direction+0x154>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <DIO_u8_Set_Pin_Direction+0x150>
    130e:	80 95       	com	r24
    1310:	84 23       	and	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	79 c0       	rjmp	.+242    	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	76 c0       	rjmp	.+236    	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>

             	   }
                   break;
               case DIO_u8_PORTC:
                   switch (Copy_u8_Pin_Direction)
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	38 87       	std	Y+8, r19	; 0x08
    1324:	2f 83       	std	Y+7, r18	; 0x07
    1326:	8f 81       	ldd	r24, Y+7	; 0x07
    1328:	98 85       	ldd	r25, Y+8	; 0x08
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	c9 f0       	breq	.+50     	; 0x1360 <DIO_u8_Set_Pin_Direction+0x1aa>
    132e:	2f 81       	ldd	r18, Y+7	; 0x07
    1330:	38 85       	ldd	r19, Y+8	; 0x08
    1332:	21 30       	cpi	r18, 0x01	; 1
    1334:	31 05       	cpc	r19, r1
    1336:	49 f5       	brne	.+82     	; 0x138a <DIO_u8_Set_Pin_Direction+0x1d4>
                 	   {
                         	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    1338:	a4 e3       	ldi	r26, 0x34	; 52
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e4 e3       	ldi	r30, 0x34	; 52
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_u8_Set_Pin_Direction+0x1a0>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_u8_Set_Pin_Direction+0x19c>
    135a:	84 2b       	or	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	54 c0       	rjmp	.+168    	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>
                         	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    1360:	a4 e3       	ldi	r26, 0x34	; 52
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e4 e3       	ldi	r30, 0x34	; 52
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_u8_Set_Pin_Direction+0x1c8>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_u8_Set_Pin_Direction+0x1c4>
    1382:	80 95       	com	r24
    1384:	84 23       	and	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	3f c0       	rjmp	.+126    	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>
  			           	     default :Local_u8_Erorr_State = ES_NOK ;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	3c c0       	rjmp	.+120    	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>

                 	   }
                       break;

               case DIO_u8_PORTD:
                    switch (Copy_u8_Pin_Direction)
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	3e 83       	std	Y+6, r19	; 0x06
    1398:	2d 83       	std	Y+5, r18	; 0x05
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	c9 f0       	breq	.+50     	; 0x13d4 <DIO_u8_Set_Pin_Direction+0x21e>
    13a2:	2d 81       	ldd	r18, Y+5	; 0x05
    13a4:	3e 81       	ldd	r19, Y+6	; 0x06
    13a6:	21 30       	cpi	r18, 0x01	; 1
    13a8:	31 05       	cpc	r19, r1
    13aa:	49 f5       	brne	.+82     	; 0x13fe <DIO_u8_Set_Pin_Direction+0x248>
                     	   {
                             	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    13ac:	a1 e3       	ldi	r26, 0x31	; 49
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e1 e3       	ldi	r30, 0x31	; 49
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_u8_Set_Pin_Direction+0x214>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_u8_Set_Pin_Direction+0x210>
    13ce:	84 2b       	or	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	1a c0       	rjmp	.+52     	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>
                             	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    13d4:	a1 e3       	ldi	r26, 0x31	; 49
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e1 e3       	ldi	r30, 0x31	; 49
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <DIO_u8_Set_Pin_Direction+0x23c>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <DIO_u8_Set_Pin_Direction+0x238>
    13f6:	80 95       	com	r24
    13f8:	84 23       	and	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	05 c0       	rjmp	.+10     	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>
      			           	     default :Local_u8_Erorr_State = ES_NOK ;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_u8_Set_Pin_Direction+0x252>
                     	   }
                           break;
        }
	}
	else {
		Local_u8_Erorr_State = ES_NOK ;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_Erorr_State ;
    1408:	89 81       	ldd	r24, Y+1	; 0x01
}
    140a:	2e 96       	adiw	r28, 0x0e	; 14
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <DIO_u8_Set_Pin_Value>:

u8 DIO_u8_Set_Pin_Value  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Value ){
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	2e 97       	sbiw	r28, 0x0e	; 14
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	8a 83       	std	Y+2, r24	; 0x02
    1432:	6b 83       	std	Y+3, r22	; 0x03
    1434:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
    1436:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Value == DIO_u8_INPUT)||(Copy_u8_Pin_Value == DIO_u8_OUTPUT)))
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	08 f0       	brcs	.+2      	; 0x1440 <DIO_u8_Set_Pin_Value+0x24>
    143e:	15 c1       	rjmp	.+554    	; 0x166a <DIO_u8_Set_Pin_Value+0x24e>
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	88 30       	cpi	r24, 0x08	; 8
    1444:	08 f0       	brcs	.+2      	; 0x1448 <DIO_u8_Set_Pin_Value+0x2c>
    1446:	11 c1       	rjmp	.+546    	; 0x166a <DIO_u8_Set_Pin_Value+0x24e>
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	88 23       	and	r24, r24
    144c:	21 f0       	breq	.+8      	; 0x1456 <DIO_u8_Set_Pin_Value+0x3a>
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	09 f0       	breq	.+2      	; 0x1456 <DIO_u8_Set_Pin_Value+0x3a>
    1454:	0a c1       	rjmp	.+532    	; 0x166a <DIO_u8_Set_Pin_Value+0x24e>
	{
		switch (Copy_u8_Port_ID)
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3e 87       	std	Y+14, r19	; 0x0e
    145e:	2d 87       	std	Y+13, r18	; 0x0d
    1460:	8d 85       	ldd	r24, Y+13	; 0x0d
    1462:	9e 85       	ldd	r25, Y+14	; 0x0e
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	09 f4       	brne	.+2      	; 0x146c <DIO_u8_Set_Pin_Value+0x50>
    146a:	51 c0       	rjmp	.+162    	; 0x150e <DIO_u8_Set_Pin_Value+0xf2>
    146c:	2d 85       	ldd	r18, Y+13	; 0x0d
    146e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	2c f4       	brge	.+10     	; 0x1480 <DIO_u8_Set_Pin_Value+0x64>
    1476:	8d 85       	ldd	r24, Y+13	; 0x0d
    1478:	9e 85       	ldd	r25, Y+14	; 0x0e
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	71 f0       	breq	.+28     	; 0x149a <DIO_u8_Set_Pin_Value+0x7e>
    147e:	f7 c0       	rjmp	.+494    	; 0x166e <DIO_u8_Set_Pin_Value+0x252>
    1480:	2d 85       	ldd	r18, Y+13	; 0x0d
    1482:	3e 85       	ldd	r19, Y+14	; 0x0e
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	09 f4       	brne	.+2      	; 0x148c <DIO_u8_Set_Pin_Value+0x70>
    148a:	7b c0       	rjmp	.+246    	; 0x1582 <DIO_u8_Set_Pin_Value+0x166>
    148c:	8d 85       	ldd	r24, Y+13	; 0x0d
    148e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1490:	83 30       	cpi	r24, 0x03	; 3
    1492:	91 05       	cpc	r25, r1
    1494:	09 f4       	brne	.+2      	; 0x1498 <DIO_u8_Set_Pin_Value+0x7c>
    1496:	af c0       	rjmp	.+350    	; 0x15f6 <DIO_u8_Set_Pin_Value+0x1da>
    1498:	ea c0       	rjmp	.+468    	; 0x166e <DIO_u8_Set_Pin_Value+0x252>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Pin_Value)
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3c 87       	std	Y+12, r19	; 0x0c
    14a2:	2b 87       	std	Y+11, r18	; 0x0b
    14a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    14a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	c9 f0       	breq	.+50     	; 0x14de <DIO_u8_Set_Pin_Value+0xc2>
    14ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    14ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    14b0:	21 30       	cpi	r18, 0x01	; 1
    14b2:	31 05       	cpc	r19, r1
    14b4:	49 f5       	brne	.+82     	; 0x1508 <DIO_u8_Set_Pin_Value+0xec>
			{
			     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    14b6:	ab e3       	ldi	r26, 0x3B	; 59
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	eb e3       	ldi	r30, 0x3B	; 59
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_u8_Set_Pin_Value+0xb8>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_u8_Set_Pin_Value+0xb4>
    14d8:	84 2b       	or	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	c8 c0       	rjmp	.+400    	; 0x166e <DIO_u8_Set_Pin_Value+0x252>
           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    14de:	ab e3       	ldi	r26, 0x3B	; 59
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	eb e3       	ldi	r30, 0x3B	; 59
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_u8_Set_Pin_Value+0xe0>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_u8_Set_Pin_Value+0xdc>
    1500:	80 95       	com	r24
    1502:	84 23       	and	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	b3 c0       	rjmp	.+358    	; 0x166e <DIO_u8_Set_Pin_Value+0x252>
           	     default :Local_u8_Erorr_State = ES_NOK ;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	b0 c0       	rjmp	.+352    	; 0x166e <DIO_u8_Set_Pin_Value+0x252>

			}
			break;
		case DIO_u8_PORTB :
			switch (Copy_u8_Pin_Value)
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3a 87       	std	Y+10, r19	; 0x0a
    1516:	29 87       	std	Y+9, r18	; 0x09
    1518:	89 85       	ldd	r24, Y+9	; 0x09
    151a:	9a 85       	ldd	r25, Y+10	; 0x0a
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	c9 f0       	breq	.+50     	; 0x1552 <DIO_u8_Set_Pin_Value+0x136>
    1520:	29 85       	ldd	r18, Y+9	; 0x09
    1522:	3a 85       	ldd	r19, Y+10	; 0x0a
    1524:	21 30       	cpi	r18, 0x01	; 1
    1526:	31 05       	cpc	r19, r1
    1528:	49 f5       	brne	.+82     	; 0x157c <DIO_u8_Set_Pin_Value+0x160>
				{
				     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    152a:	a8 e3       	ldi	r26, 0x38	; 56
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e8 e3       	ldi	r30, 0x38	; 56
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_u8_Set_Pin_Value+0x12c>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_u8_Set_Pin_Value+0x128>
    154c:	84 2b       	or	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	8e c0       	rjmp	.+284    	; 0x166e <DIO_u8_Set_Pin_Value+0x252>
	           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    1552:	a8 e3       	ldi	r26, 0x38	; 56
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e8 e3       	ldi	r30, 0x38	; 56
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_u8_Set_Pin_Value+0x154>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_u8_Set_Pin_Value+0x150>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	79 c0       	rjmp	.+242    	; 0x166e <DIO_u8_Set_Pin_Value+0x252>
	           	     default :Local_u8_Erorr_State = ES_NOK ;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	76 c0       	rjmp	.+236    	; 0x166e <DIO_u8_Set_Pin_Value+0x252>

				}
	     	break;
		case DIO_u8_PORTC :
			switch (Copy_u8_Pin_Value)
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	38 87       	std	Y+8, r19	; 0x08
    158a:	2f 83       	std	Y+7, r18	; 0x07
    158c:	8f 81       	ldd	r24, Y+7	; 0x07
    158e:	98 85       	ldd	r25, Y+8	; 0x08
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	c9 f0       	breq	.+50     	; 0x15c6 <DIO_u8_Set_Pin_Value+0x1aa>
    1594:	2f 81       	ldd	r18, Y+7	; 0x07
    1596:	38 85       	ldd	r19, Y+8	; 0x08
    1598:	21 30       	cpi	r18, 0x01	; 1
    159a:	31 05       	cpc	r19, r1
    159c:	49 f5       	brne	.+82     	; 0x15f0 <DIO_u8_Set_Pin_Value+0x1d4>
					{
					     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    159e:	a5 e3       	ldi	r26, 0x35	; 53
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e3       	ldi	r30, 0x35	; 53
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <DIO_u8_Set_Pin_Value+0x1a0>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <DIO_u8_Set_Pin_Value+0x19c>
    15c0:	84 2b       	or	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	54 c0       	rjmp	.+168    	; 0x166e <DIO_u8_Set_Pin_Value+0x252>
		           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    15c6:	a5 e3       	ldi	r26, 0x35	; 53
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e5 e3       	ldi	r30, 0x35	; 53
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <DIO_u8_Set_Pin_Value+0x1c8>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <DIO_u8_Set_Pin_Value+0x1c4>
    15e8:	80 95       	com	r24
    15ea:	84 23       	and	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	3f c0       	rjmp	.+126    	; 0x166e <DIO_u8_Set_Pin_Value+0x252>
		           	     default :Local_u8_Erorr_State = ES_NOK ;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	3c c0       	rjmp	.+120    	; 0x166e <DIO_u8_Set_Pin_Value+0x252>

					}
		   break;
		case DIO_u8_PORTD :
			switch (Copy_u8_Pin_Value)
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3e 83       	std	Y+6, r19	; 0x06
    15fe:	2d 83       	std	Y+5, r18	; 0x05
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	c9 f0       	breq	.+50     	; 0x163a <DIO_u8_Set_Pin_Value+0x21e>
    1608:	2d 81       	ldd	r18, Y+5	; 0x05
    160a:	3e 81       	ldd	r19, Y+6	; 0x06
    160c:	21 30       	cpi	r18, 0x01	; 1
    160e:	31 05       	cpc	r19, r1
    1610:	49 f5       	brne	.+82     	; 0x1664 <DIO_u8_Set_Pin_Value+0x248>
						{
						     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    1612:	a2 e3       	ldi	r26, 0x32	; 50
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e2 e3       	ldi	r30, 0x32	; 50
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 2e       	mov	r0, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <DIO_u8_Set_Pin_Value+0x214>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	0a 94       	dec	r0
    1632:	e2 f7       	brpl	.-8      	; 0x162c <DIO_u8_Set_Pin_Value+0x210>
    1634:	84 2b       	or	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	1a c0       	rjmp	.+52     	; 0x166e <DIO_u8_Set_Pin_Value+0x252>
			           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    163a:	a2 e3       	ldi	r26, 0x32	; 50
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e2 e3       	ldi	r30, 0x32	; 50
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_u8_Set_Pin_Value+0x23c>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_u8_Set_Pin_Value+0x238>
    165c:	80 95       	com	r24
    165e:	84 23       	and	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	05 c0       	rjmp	.+10     	; 0x166e <DIO_u8_Set_Pin_Value+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	02 c0       	rjmp	.+4      	; 0x166e <DIO_u8_Set_Pin_Value+0x252>
						}
			break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8_Erorr_State ;
    166e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1670:	2e 96       	adiw	r28, 0x0e	; 14
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <DIO_u8_Get_Pin_Value>:

u8 DIO_u8_Get_Pin_Value      (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 *Copy_u8_Returned_Pin_Value ){
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	28 97       	sbiw	r28, 0x08	; 8
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	8b 83       	std	Y+3, r24	; 0x03
    1698:	6c 83       	std	Y+4, r22	; 0x04
    169a:	5e 83       	std	Y+6, r21	; 0x06
    169c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8_Erorr_State = ES_OK ;
    169e:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Pin_Value ;
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && (Copy_u8_Returned_Pin_Value != NULL)){
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	84 30       	cpi	r24, 0x04	; 4
    16a4:	08 f0       	brcs	.+2      	; 0x16a8 <DIO_u8_Get_Pin_Value+0x26>
    16a6:	9e c0       	rjmp	.+316    	; 0x17e4 <DIO_u8_Get_Pin_Value+0x162>
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	88 30       	cpi	r24, 0x08	; 8
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <DIO_u8_Get_Pin_Value+0x2e>
    16ae:	9a c0       	rjmp	.+308    	; 0x17e4 <DIO_u8_Get_Pin_Value+0x162>
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	09 f4       	brne	.+2      	; 0x16ba <DIO_u8_Get_Pin_Value+0x38>
    16b8:	95 c0       	rjmp	.+298    	; 0x17e4 <DIO_u8_Get_Pin_Value+0x162>
		switch (Copy_u8_Port_ID)
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	38 87       	std	Y+8, r19	; 0x08
    16c2:	2f 83       	std	Y+7, r18	; 0x07
    16c4:	8f 81       	ldd	r24, Y+7	; 0x07
    16c6:	98 85       	ldd	r25, Y+8	; 0x08
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	91 05       	cpc	r25, r1
    16cc:	a1 f1       	breq	.+104    	; 0x1736 <DIO_u8_Get_Pin_Value+0xb4>
    16ce:	2f 81       	ldd	r18, Y+7	; 0x07
    16d0:	38 85       	ldd	r19, Y+8	; 0x08
    16d2:	22 30       	cpi	r18, 0x02	; 2
    16d4:	31 05       	cpc	r19, r1
    16d6:	2c f4       	brge	.+10     	; 0x16e2 <DIO_u8_Get_Pin_Value+0x60>
    16d8:	8f 81       	ldd	r24, Y+7	; 0x07
    16da:	98 85       	ldd	r25, Y+8	; 0x08
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	71 f0       	breq	.+28     	; 0x16fc <DIO_u8_Get_Pin_Value+0x7a>
    16e0:	83 c0       	rjmp	.+262    	; 0x17e8 <DIO_u8_Get_Pin_Value+0x166>
    16e2:	2f 81       	ldd	r18, Y+7	; 0x07
    16e4:	38 85       	ldd	r19, Y+8	; 0x08
    16e6:	22 30       	cpi	r18, 0x02	; 2
    16e8:	31 05       	cpc	r19, r1
    16ea:	09 f4       	brne	.+2      	; 0x16ee <DIO_u8_Get_Pin_Value+0x6c>
    16ec:	41 c0       	rjmp	.+130    	; 0x1770 <DIO_u8_Get_Pin_Value+0xee>
    16ee:	8f 81       	ldd	r24, Y+7	; 0x07
    16f0:	98 85       	ldd	r25, Y+8	; 0x08
    16f2:	83 30       	cpi	r24, 0x03	; 3
    16f4:	91 05       	cpc	r25, r1
    16f6:	09 f4       	brne	.+2      	; 0x16fa <DIO_u8_Get_Pin_Value+0x78>
    16f8:	58 c0       	rjmp	.+176    	; 0x17aa <DIO_u8_Get_Pin_Value+0x128>
    16fa:	76 c0       	rjmp	.+236    	; 0x17e8 <DIO_u8_Get_Pin_Value+0x166>
		{
		     case DIO_u8_PORTA :
		      Local_u8_Pin_Value = GET_BIT (DIO_u8_PINA_REG, Copy_u8_Pin_ID) ;
    16fc:	e9 e3       	ldi	r30, 0x39	; 57
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <DIO_u8_Get_Pin_Value+0x94>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <DIO_u8_Get_Pin_Value+0x90>
    171a:	84 23       	and	r24, r20
    171c:	89 83       	std	Y+1, r24	; 0x01

		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	88 23       	and	r24, r24
    1722:	21 f4       	brne	.+8      	; 0x172c <DIO_u8_Get_Pin_Value+0xaa>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    1724:	ed 81       	ldd	r30, Y+5	; 0x05
    1726:	fe 81       	ldd	r31, Y+6	; 0x06
    1728:	10 82       	st	Z, r1
    172a:	5e c0       	rjmp	.+188    	; 0x17e8 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		    	 else
		    	 {
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    172c:	ed 81       	ldd	r30, Y+5	; 0x05
    172e:	fe 81       	ldd	r31, Y+6	; 0x06
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	80 83       	st	Z, r24
    1734:	59 c0       	rjmp	.+178    	; 0x17e8 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		     break;
		     case DIO_u8_PORTB :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINB_REG,Copy_u8_Pin_ID ) ;
    1736:	e6 e3       	ldi	r30, 0x36	; 54
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <DIO_u8_Get_Pin_Value+0xce>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <DIO_u8_Get_Pin_Value+0xca>
    1754:	84 23       	and	r24, r20
    1756:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	88 23       	and	r24, r24
    175c:	21 f4       	brne	.+8      	; 0x1766 <DIO_u8_Get_Pin_Value+0xe4>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    175e:	ed 81       	ldd	r30, Y+5	; 0x05
    1760:	fe 81       	ldd	r31, Y+6	; 0x06
    1762:	10 82       	st	Z, r1
    1764:	41 c0       	rjmp	.+130    	; 0x17e8 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1766:	ed 81       	ldd	r30, Y+5	; 0x05
    1768:	fe 81       	ldd	r31, Y+6	; 0x06
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	80 83       	st	Z, r24
    176e:	3c c0       	rjmp	.+120    	; 0x17e8 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTC :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINC_REG,Copy_u8_Pin_ID ) ;
    1770:	e3 e3       	ldi	r30, 0x33	; 51
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <DIO_u8_Get_Pin_Value+0x108>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <DIO_u8_Get_Pin_Value+0x104>
    178e:	84 23       	and	r24, r20
    1790:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	88 23       	and	r24, r24
    1796:	21 f4       	brne	.+8      	; 0x17a0 <DIO_u8_Get_Pin_Value+0x11e>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    1798:	ed 81       	ldd	r30, Y+5	; 0x05
    179a:	fe 81       	ldd	r31, Y+6	; 0x06
    179c:	10 82       	st	Z, r1
    179e:	24 c0       	rjmp	.+72     	; 0x17e8 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    17a0:	ed 81       	ldd	r30, Y+5	; 0x05
    17a2:	fe 81       	ldd	r31, Y+6	; 0x06
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	80 83       	st	Z, r24
    17a8:	1f c0       	rjmp	.+62     	; 0x17e8 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTD :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PIND_REG,Copy_u8_Pin_ID ) ;
    17aa:	e0 e3       	ldi	r30, 0x30	; 48
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <DIO_u8_Get_Pin_Value+0x142>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <DIO_u8_Get_Pin_Value+0x13e>
    17c8:	84 23       	and	r24, r20
    17ca:	89 83       	std	Y+1, r24	; 0x01
		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	88 23       	and	r24, r24
    17d0:	21 f4       	brne	.+8      	; 0x17da <DIO_u8_Get_Pin_Value+0x158>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    17d2:	ed 81       	ldd	r30, Y+5	; 0x05
    17d4:	fe 81       	ldd	r31, Y+6	; 0x06
    17d6:	10 82       	st	Z, r1
    17d8:	07 c0       	rjmp	.+14     	; 0x17e8 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    17da:	ed 81       	ldd	r30, Y+5	; 0x05
    17dc:	fe 81       	ldd	r31, Y+6	; 0x06
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	80 83       	st	Z, r24
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	8a 83       	std	Y+2, r24	; 0x02
		}
		return Local_u8_Erorr_State ;
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17ea:	28 96       	adiw	r28, 0x08	; 8
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <DIO_u8_Set_Port_Direction>:

u8 DIO_u8_Set_Port_Direction (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Direction ){
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	2d 97       	sbiw	r28, 0x0d	; 13
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	8a 83       	std	Y+2, r24	; 0x02
    1812:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1814:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && ((Copy_u8_Port_Direction == DIO_u8_INPUT)||(Copy_u8_Port_Direction == DIO_u8_OUTPUT)))
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	08 f0       	brcs	.+2      	; 0x181e <DIO_u8_Set_Port_Direction+0x22>
    181c:	87 c0       	rjmp	.+270    	; 0x192c <DIO_u8_Set_Port_Direction+0x130>
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	88 23       	and	r24, r24
    1822:	21 f0       	breq	.+8      	; 0x182c <DIO_u8_Set_Port_Direction+0x30>
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	09 f0       	breq	.+2      	; 0x182c <DIO_u8_Set_Port_Direction+0x30>
    182a:	80 c0       	rjmp	.+256    	; 0x192c <DIO_u8_Set_Port_Direction+0x130>
	{
		switch (Copy_u8_Port_ID)
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	3d 87       	std	Y+13, r19	; 0x0d
    1834:	2c 87       	std	Y+12, r18	; 0x0c
    1836:	8c 85       	ldd	r24, Y+12	; 0x0c
    1838:	9d 85       	ldd	r25, Y+13	; 0x0d
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	71 f1       	breq	.+92     	; 0x189c <DIO_u8_Set_Port_Direction+0xa0>
    1840:	2c 85       	ldd	r18, Y+12	; 0x0c
    1842:	3d 85       	ldd	r19, Y+13	; 0x0d
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	2c f4       	brge	.+10     	; 0x1854 <DIO_u8_Set_Port_Direction+0x58>
    184a:	8c 85       	ldd	r24, Y+12	; 0x0c
    184c:	9d 85       	ldd	r25, Y+13	; 0x0d
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	69 f0       	breq	.+26     	; 0x186c <DIO_u8_Set_Port_Direction+0x70>
    1852:	69 c0       	rjmp	.+210    	; 0x1926 <DIO_u8_Set_Port_Direction+0x12a>
    1854:	2c 85       	ldd	r18, Y+12	; 0x0c
    1856:	3d 85       	ldd	r19, Y+13	; 0x0d
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	b1 f1       	breq	.+108    	; 0x18ca <DIO_u8_Set_Port_Direction+0xce>
    185e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1860:	9d 85       	ldd	r25, Y+13	; 0x0d
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	91 05       	cpc	r25, r1
    1866:	09 f4       	brne	.+2      	; 0x186a <DIO_u8_Set_Port_Direction+0x6e>
    1868:	47 c0       	rjmp	.+142    	; 0x18f8 <DIO_u8_Set_Port_Direction+0xfc>
    186a:	5d c0       	rjmp	.+186    	; 0x1926 <DIO_u8_Set_Port_Direction+0x12a>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Port_Direction)
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	3b 87       	std	Y+11, r19	; 0x0b
    1874:	2a 87       	std	Y+10, r18	; 0x0a
    1876:	8a 85       	ldd	r24, Y+10	; 0x0a
    1878:	9b 85       	ldd	r25, Y+11	; 0x0b
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	59 f0       	breq	.+22     	; 0x1894 <DIO_u8_Set_Port_Direction+0x98>
    187e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1880:	3b 85       	ldd	r19, Y+11	; 0x0b
    1882:	21 30       	cpi	r18, 0x01	; 1
    1884:	31 05       	cpc	r19, r1
    1886:	09 f0       	breq	.+2      	; 0x188a <DIO_u8_Set_Port_Direction+0x8e>
    1888:	53 c0       	rjmp	.+166    	; 0x1930 <DIO_u8_Set_Port_Direction+0x134>
			{
			    case DIO_u8_OUTPUT : DIO_u8_PORTA_REG = 0xff;break;
    188a:	eb e3       	ldi	r30, 0x3B	; 59
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8f ef       	ldi	r24, 0xFF	; 255
    1890:	80 83       	st	Z, r24
    1892:	4e c0       	rjmp	.+156    	; 0x1930 <DIO_u8_Set_Port_Direction+0x134>
			    case DIO_u8_INPUT : DIO_u8_PORTA_REG = 0x00;break;
    1894:	eb e3       	ldi	r30, 0x3B	; 59
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	10 82       	st	Z, r1
    189a:	4a c0       	rjmp	.+148    	; 0x1930 <DIO_u8_Set_Port_Direction+0x134>
			}
			break;
			case DIO_u8_PORTB :
				switch (Copy_u8_Port_Direction)
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	39 87       	std	Y+9, r19	; 0x09
    18a4:	28 87       	std	Y+8, r18	; 0x08
    18a6:	88 85       	ldd	r24, Y+8	; 0x08
    18a8:	99 85       	ldd	r25, Y+9	; 0x09
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	51 f0       	breq	.+20     	; 0x18c2 <DIO_u8_Set_Port_Direction+0xc6>
    18ae:	28 85       	ldd	r18, Y+8	; 0x08
    18b0:	39 85       	ldd	r19, Y+9	; 0x09
    18b2:	21 30       	cpi	r18, 0x01	; 1
    18b4:	31 05       	cpc	r19, r1
    18b6:	e1 f5       	brne	.+120    	; 0x1930 <DIO_u8_Set_Port_Direction+0x134>
				{
				    case DIO_u8_OUTPUT : DIO_u8_PORTB_REG = 0xff;break;
    18b8:	e8 e3       	ldi	r30, 0x38	; 56
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	80 83       	st	Z, r24
    18c0:	37 c0       	rjmp	.+110    	; 0x1930 <DIO_u8_Set_Port_Direction+0x134>
				    case DIO_u8_INPUT : DIO_u8_PORTB_REG = 0x00;break;
    18c2:	e8 e3       	ldi	r30, 0x38	; 56
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	10 82       	st	Z, r1
    18c8:	33 c0       	rjmp	.+102    	; 0x1930 <DIO_u8_Set_Port_Direction+0x134>
				}
				break;
				case DIO_u8_PORTC :
					switch (Copy_u8_Port_Direction)
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	3f 83       	std	Y+7, r19	; 0x07
    18d2:	2e 83       	std	Y+6, r18	; 0x06
    18d4:	8e 81       	ldd	r24, Y+6	; 0x06
    18d6:	9f 81       	ldd	r25, Y+7	; 0x07
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	51 f0       	breq	.+20     	; 0x18f0 <DIO_u8_Set_Port_Direction+0xf4>
    18dc:	2e 81       	ldd	r18, Y+6	; 0x06
    18de:	3f 81       	ldd	r19, Y+7	; 0x07
    18e0:	21 30       	cpi	r18, 0x01	; 1
    18e2:	31 05       	cpc	r19, r1
    18e4:	29 f5       	brne	.+74     	; 0x1930 <DIO_u8_Set_Port_Direction+0x134>
					{
					    case DIO_u8_OUTPUT : DIO_u8_PORTC_REG = 0xff;break;
    18e6:	e5 e3       	ldi	r30, 0x35	; 53
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	80 83       	st	Z, r24
    18ee:	20 c0       	rjmp	.+64     	; 0x1930 <DIO_u8_Set_Port_Direction+0x134>
					    case DIO_u8_INPUT : DIO_u8_PORTC_REG = 0x00;break;
    18f0:	e5 e3       	ldi	r30, 0x35	; 53
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	10 82       	st	Z, r1
    18f6:	1c c0       	rjmp	.+56     	; 0x1930 <DIO_u8_Set_Port_Direction+0x134>
					}
					break;
					case DIO_u8_PORTD :
						switch (Copy_u8_Port_Direction)
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	3d 83       	std	Y+5, r19	; 0x05
    1900:	2c 83       	std	Y+4, r18	; 0x04
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	9d 81       	ldd	r25, Y+5	; 0x05
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	51 f0       	breq	.+20     	; 0x191e <DIO_u8_Set_Port_Direction+0x122>
    190a:	2c 81       	ldd	r18, Y+4	; 0x04
    190c:	3d 81       	ldd	r19, Y+5	; 0x05
    190e:	21 30       	cpi	r18, 0x01	; 1
    1910:	31 05       	cpc	r19, r1
    1912:	71 f4       	brne	.+28     	; 0x1930 <DIO_u8_Set_Port_Direction+0x134>
						{
						    case DIO_u8_OUTPUT : DIO_u8_PORTD_REG = 0xff;break;
    1914:	e2 e3       	ldi	r30, 0x32	; 50
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	80 83       	st	Z, r24
    191c:	09 c0       	rjmp	.+18     	; 0x1930 <DIO_u8_Set_Port_Direction+0x134>
						    case DIO_u8_INPUT : DIO_u8_PORTD_REG = 0x00;break;
    191e:	e2 e3       	ldi	r30, 0x32	; 50
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	10 82       	st	Z, r1
    1924:	05 c0       	rjmp	.+10     	; 0x1930 <DIO_u8_Set_Port_Direction+0x134>
						}
						break;
						default:Local_u8_Erorr_State = ES_NOK ;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_u8_Set_Port_Direction+0x134>

		}
	}
	else {
				Local_u8_Erorr_State = ES_NOK ;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    1930:	89 81       	ldd	r24, Y+1	; 0x01

}
    1932:	2d 96       	adiw	r28, 0x0d	; 13
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <DIO_u8_Set_Port_Value>:

u8 DIO_u8_Set_Port_Value     (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Value ){
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <DIO_u8_Set_Port_Value+0x6>
    194a:	00 d0       	rcall	.+0      	; 0x194c <DIO_u8_Set_Port_Value+0x8>
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	8a 83       	std	Y+2, r24	; 0x02
    1954:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1956:	19 82       	std	Y+1, r1	; 0x01

			switch (Copy_u8_Port_ID)
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	3d 83       	std	Y+5, r19	; 0x05
    1960:	2c 83       	std	Y+4, r18	; 0x04
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	91 05       	cpc	r25, r1
    196a:	d1 f0       	breq	.+52     	; 0x19a0 <DIO_u8_Set_Port_Value+0x5c>
    196c:	2c 81       	ldd	r18, Y+4	; 0x04
    196e:	3d 81       	ldd	r19, Y+5	; 0x05
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	2c f4       	brge	.+10     	; 0x1980 <DIO_u8_Set_Port_Value+0x3c>
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	9d 81       	ldd	r25, Y+5	; 0x05
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	61 f0       	breq	.+24     	; 0x1996 <DIO_u8_Set_Port_Value+0x52>
    197e:	1f c0       	rjmp	.+62     	; 0x19be <DIO_u8_Set_Port_Value+0x7a>
    1980:	2c 81       	ldd	r18, Y+4	; 0x04
    1982:	3d 81       	ldd	r19, Y+5	; 0x05
    1984:	22 30       	cpi	r18, 0x02	; 2
    1986:	31 05       	cpc	r19, r1
    1988:	81 f0       	breq	.+32     	; 0x19aa <DIO_u8_Set_Port_Value+0x66>
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	9d 81       	ldd	r25, Y+5	; 0x05
    198e:	83 30       	cpi	r24, 0x03	; 3
    1990:	91 05       	cpc	r25, r1
    1992:	81 f0       	breq	.+32     	; 0x19b4 <DIO_u8_Set_Port_Value+0x70>
    1994:	14 c0       	rjmp	.+40     	; 0x19be <DIO_u8_Set_Port_Value+0x7a>
			{
			case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8_Port_Value; break;
    1996:	eb e3       	ldi	r30, 0x3B	; 59
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	80 83       	st	Z, r24
    199e:	11 c0       	rjmp	.+34     	; 0x19c2 <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8_Port_Value; break;
    19a0:	e8 e3       	ldi	r30, 0x38	; 56
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	80 83       	st	Z, r24
    19a8:	0c c0       	rjmp	.+24     	; 0x19c2 <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8_Port_Value; break;
    19aa:	e5 e3       	ldi	r30, 0x35	; 53
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	80 83       	st	Z, r24
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8_Port_Value; break;
    19b4:	e2 e3       	ldi	r30, 0x32	; 50
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	80 83       	st	Z, r24
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <DIO_u8_Set_Port_Value+0x7e>
			default :Local_u8_Erorr_State = ES_NOK;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01

}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <DIO_u8_Get_Port_Value>:

u8 DIO_u8_Get_Port_Value     (u8 Copy_u8_Port_ID, u8 * Copy_u8_Returned_Port_Value ){
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <DIO_u8_Get_Port_Value+0x6>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <DIO_u8_Get_Port_Value+0x8>
    19dc:	00 d0       	rcall	.+0      	; 0x19de <DIO_u8_Get_Port_Value+0xa>
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	8a 83       	std	Y+2, r24	; 0x02
    19e4:	7c 83       	std	Y+4, r23	; 0x04
    19e6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    19e8:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8_Returned_Port_Value != NULL){
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	9c 81       	ldd	r25, Y+4	; 0x04
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <DIO_u8_Get_Port_Value+0x20>
    19f2:	3e c0       	rjmp	.+124    	; 0x1a70 <DIO_u8_Get_Port_Value+0x9c>
		switch (Copy_u8_Port_ID)
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	3e 83       	std	Y+6, r19	; 0x06
    19fc:	2d 83       	std	Y+5, r18	; 0x05
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	91 05       	cpc	r25, r1
    1a06:	e1 f0       	breq	.+56     	; 0x1a40 <DIO_u8_Get_Port_Value+0x6c>
    1a08:	2d 81       	ldd	r18, Y+5	; 0x05
    1a0a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a0c:	22 30       	cpi	r18, 0x02	; 2
    1a0e:	31 05       	cpc	r19, r1
    1a10:	2c f4       	brge	.+10     	; 0x1a1c <DIO_u8_Get_Port_Value+0x48>
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	61 f0       	breq	.+24     	; 0x1a32 <DIO_u8_Get_Port_Value+0x5e>
    1a1a:	27 c0       	rjmp	.+78     	; 0x1a6a <DIO_u8_Get_Port_Value+0x96>
    1a1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a20:	22 30       	cpi	r18, 0x02	; 2
    1a22:	31 05       	cpc	r19, r1
    1a24:	a1 f0       	breq	.+40     	; 0x1a4e <DIO_u8_Get_Port_Value+0x7a>
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	83 30       	cpi	r24, 0x03	; 3
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	b1 f0       	breq	.+44     	; 0x1a5c <DIO_u8_Get_Port_Value+0x88>
    1a30:	1c c0       	rjmp	.+56     	; 0x1a6a <DIO_u8_Get_Port_Value+0x96>
		{
		case DIO_u8_PORTA :* Copy_u8_Returned_Port_Value =DIO_u8_PORTA_REG; break;
    1a32:	eb e3       	ldi	r30, 0x3B	; 59
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	eb 81       	ldd	r30, Y+3	; 0x03
    1a3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a3c:	80 83       	st	Z, r24
    1a3e:	1a c0       	rjmp	.+52     	; 0x1a74 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTB :* Copy_u8_Returned_Port_Value =DIO_u8_PORTB_REG; break;
    1a40:	e8 e3       	ldi	r30, 0x38	; 56
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	eb 81       	ldd	r30, Y+3	; 0x03
    1a48:	fc 81       	ldd	r31, Y+4	; 0x04
    1a4a:	80 83       	st	Z, r24
    1a4c:	13 c0       	rjmp	.+38     	; 0x1a74 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTC :* Copy_u8_Returned_Port_Value =DIO_u8_PORTC_REG; break;
    1a4e:	e5 e3       	ldi	r30, 0x35	; 53
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	eb 81       	ldd	r30, Y+3	; 0x03
    1a56:	fc 81       	ldd	r31, Y+4	; 0x04
    1a58:	80 83       	st	Z, r24
    1a5a:	0c c0       	rjmp	.+24     	; 0x1a74 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTD :* Copy_u8_Returned_Port_Value =DIO_u8_PORTD_REG; break;
    1a5c:	e2 e3       	ldi	r30, 0x32	; 50
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	eb 81       	ldd	r30, Y+3	; 0x03
    1a64:	fc 81       	ldd	r31, Y+4	; 0x04
    1a66:	80 83       	st	Z, r24
    1a68:	05 c0       	rjmp	.+10     	; 0x1a74 <DIO_u8_Get_Port_Value+0xa0>
		default :Local_u8_Erorr_State = ES_NOK;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_u8_Get_Port_Value+0xa0>
		}}
		else {
			Local_u8_Erorr_State = ES_NOK ;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8_Erorr_State ;
    1a74:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a76:	26 96       	adiw	r28, 0x06	; 6
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <KPD_enum_Init>:
     u8 KPD_Au8_Keys[4][4]   = KPD_Keys ;
	 u8 KPD_Au8_Rows_Pins[4] ={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
	 u8 KPD_Au8_Cols_Pins[4] ={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};

	ES_t KPD_enum_Init(void)
	{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	0f 92       	push	r0
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
		ES_t Local_enu_Erorr_State = ES_OK;
    1a92:	19 82       	std	Y+1, r1	; 0x01
//		DIO_u8_Set_Pin_Value(2 , 0 , 0);

		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R1_PIN , DIO_u8_INTIAL_INPUT);
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R2_PIN , DIO_u8_INTIAL_INPUT);
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	61 e0       	ldi	r22, 0x01	; 1
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R3_PIN , DIO_u8_INTIAL_INPUT);
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	62 e0       	ldi	r22, 0x02	; 2
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R4_PIN , DIO_u8_INTIAL_INPUT);
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	63 e0       	ldi	r22, 0x03	; 3
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8_Set_Pin_Direction>

		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C1_PIN , DIO_u8_INTIAL_OUTPUT);
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C2_PIN , DIO_u8_INTIAL_OUTPUT);
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	65 e0       	ldi	r22, 0x05	; 5
    1aca:	41 e0       	ldi	r20, 0x01	; 1
    1acc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C3_PIN , DIO_u8_INTIAL_OUTPUT);
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	66 e0       	ldi	r22, 0x06	; 6
    1ad4:	41 e0       	ldi	r20, 0x01	; 1
    1ad6:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C4_PIN , DIO_u8_INTIAL_OUTPUT);
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	67 e0       	ldi	r22, 0x07	; 7
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8_Set_Pin_Direction>

		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R1_PIN , DIO_u8_INTIAL_PULL_UP);
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	41 e0       	ldi	r20, 0x01	; 1
    1aea:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R2_PIN , DIO_u8_INTIAL_PULL_UP);
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	61 e0       	ldi	r22, 0x01	; 1
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R3_PIN , DIO_u8_INTIAL_PULL_UP);
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	62 e0       	ldi	r22, 0x02	; 2
    1afc:	41 e0       	ldi	r20, 0x01	; 1
    1afe:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R4_PIN , DIO_u8_INTIAL_PULL_UP);
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	63 e0       	ldi	r22, 0x03	; 3
    1b06:	41 e0       	ldi	r20, 0x01	; 1
    1b08:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>

		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C1_PIN , DIO_u8_INTIAL_HIGH);
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	64 e0       	ldi	r22, 0x04	; 4
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C2_PIN , DIO_u8_INTIAL_HIGH);
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	65 e0       	ldi	r22, 0x05	; 5
    1b1a:	41 e0       	ldi	r20, 0x01	; 1
    1b1c:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C3_PIN , DIO_u8_INTIAL_HIGH);
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	66 e0       	ldi	r22, 0x06	; 6
    1b24:	41 e0       	ldi	r20, 0x01	; 1
    1b26:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C4_PIN , DIO_u8_INTIAL_HIGH);
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	67 e0       	ldi	r22, 0x07	; 7
    1b2e:	41 e0       	ldi	r20, 0x01	; 1
    1b30:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>

		return Local_enu_Erorr_State;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <KPD_enum_Get_Key_State>:
ES_t KPD_enum_Get_Key_State(u8 *Copy_pu8_Returned_Key){
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	65 97       	sbiw	r28, 0x15	; 21
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	9d 8b       	std	Y+21, r25	; 0x15
    1b54:	8c 8b       	std	Y+20, r24	; 0x14

//	*Copy_pu8_Returned_Key = KPD_u8_Keys_NO_Pressed;
 ES_t Local_enu_Erorr_State = ES_OK ;
    1b56:	1a 8a       	std	Y+18, r1	; 0x12
 u8 Local_u8_Rows_Counter, Local_u8_Cols_Counter, Local_u8_Pin_Value=0, Local_u8_Flag =DIO_u8_LOW;
    1b58:	1b 8a       	std	Y+19, r1	; 0x13
    1b5a:	1f 86       	std	Y+15, r1	; 0x0f
 if ( * Copy_pu8_Returned_Key != NULL ){
    1b5c:	ec 89       	ldd	r30, Y+20	; 0x14
    1b5e:	fd 89       	ldd	r31, Y+21	; 0x15
    1b60:	80 81       	ld	r24, Z
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <KPD_enum_Get_Key_State+0x2e>
    1b6a:	f0 c0       	rjmp	.+480    	; 0x1d4c <KPD_enum_Get_Key_State+0x20e>
		*Copy_pu8_Returned_Key = KPD_u8_Keys_NO_Pressed;
    1b6c:	ec 89       	ldd	r30, Y+20	; 0x14
    1b6e:	fd 89       	ldd	r31, Y+21	; 0x15
    1b70:	8f ef       	ldi	r24, 0xFF	; 255
    1b72:	80 83       	st	Z, r24



/* activate each row by for loop */
	 for (Local_u8_Rows_Counter=KPD_u8_R1; Local_u8_Rows_Counter<=KPD_u8_R4; Local_u8_Rows_Counter++){
    1b74:	19 8a       	std	Y+17, r1	; 0x11
    1b76:	e5 c0       	rjmp	.+458    	; 0x1d42 <KPD_enum_Get_Key_State+0x204>
		 DIO_u8_Set_Pin_Value (KPD_u8_PORT, KPD_Au8_Rows_Pins[Local_u8_Rows_Counter],  DIO_u8_LOW );
    1b78:	89 89       	ldd	r24, Y+17	; 0x11
    1b7a:	88 2f       	mov	r24, r24
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e8 58       	subi	r30, 0x88	; 136
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	90 81       	ld	r25, Z
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	69 2f       	mov	r22, r25
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
//			DIO_u8_Set_Pin_Value(2 , 0 , 1);

		 /*check which input pin has zero		  */
		 for (Local_u8_Cols_Counter=KPD_u8_C1; Local_u8_Cols_Counter<=KPD_u8_C4; Local_u8_Cols_Counter++){
    1b90:	18 8a       	std	Y+16, r1	; 0x10
    1b92:	c1 c0       	rjmp	.+386    	; 0x1d16 <KPD_enum_Get_Key_State+0x1d8>
			 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT, KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Pin_Value );
    1b94:	88 89       	ldd	r24, Y+16	; 0x10
    1b96:	88 2f       	mov	r24, r24
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	e4 58       	subi	r30, 0x84	; 132
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	90 81       	ld	r25, Z
    1ba2:	9e 01       	movw	r18, r28
    1ba4:	2d 5e       	subi	r18, 0xED	; 237
    1ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	69 2f       	mov	r22, r25
    1bac:	a9 01       	movw	r20, r18
    1bae:	0e 94 41 0b 	call	0x1682	; 0x1682 <DIO_u8_Get_Pin_Value>
//	 			DIO_u8_Set_Pin_Value(2 , 0 , 1);

//           if switch is pressed
			 if (Local_u8_Pin_Value == DIO_u8_LOW)
    1bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb4:	88 23       	and	r24, r24
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <KPD_enum_Get_Key_State+0x7c>
    1bb8:	ab c0       	rjmp	.+342    	; 0x1d10 <KPD_enum_Get_Key_State+0x1d2>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a0 ea       	ldi	r26, 0xA0	; 160
    1bc0:	b1 e4       	ldi	r27, 0x41	; 65
    1bc2:	8b 87       	std	Y+11, r24	; 0x0b
    1bc4:	9c 87       	std	Y+12, r25	; 0x0c
    1bc6:	ad 87       	std	Y+13, r26	; 0x0d
    1bc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a e7       	ldi	r20, 0x7A	; 122
    1bd8:	53 e4       	ldi	r21, 0x43	; 67
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8f 83       	std	Y+7, r24	; 0x07
    1be4:	98 87       	std	Y+8, r25	; 0x08
    1be6:	a9 87       	std	Y+9, r26	; 0x09
    1be8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bea:	6f 81       	ldd	r22, Y+7	; 0x07
    1bec:	78 85       	ldd	r23, Y+8	; 0x08
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <KPD_enum_Get_Key_State+0xce>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <KPD_enum_Get_Key_State+0x14c>
	else if (__tmp > 65535)
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <KPD_enum_Get_Key_State+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9e 83       	std	Y+6, r25	; 0x06
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <KPD_enum_Get_Key_State+0x12e>
    1c4e:	89 e1       	ldi	r24, 0x19	; 25
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <KPD_enum_Get_Key_State+0x11c>
    1c5e:	9c 83       	std	Y+4, r25	; 0x04
    1c60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <KPD_enum_Get_Key_State+0x110>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <KPD_enum_Get_Key_State+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	6f 81       	ldd	r22, Y+7	; 0x07
    1c78:	78 85       	ldd	r23, Y+8	; 0x08
    1c7a:	89 85       	ldd	r24, Y+9	; 0x09
    1c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <KPD_enum_Get_Key_State+0x158>
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	89 83       	std	Y+1, r24	; 0x01
            {

          /*Debouncing */
         _delay_ms(20);
		 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT, KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Pin_Value );
    1c9e:	88 89       	ldd	r24, Y+16	; 0x10
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	e4 58       	subi	r30, 0x84	; 132
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	90 81       	ld	r25, Z
    1cac:	9e 01       	movw	r18, r28
    1cae:	2d 5e       	subi	r18, 0xED	; 237
    1cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	69 2f       	mov	r22, r25
    1cb6:	a9 01       	movw	r20, r18
    1cb8:	0e 94 41 0b 	call	0x1682	; 0x1682 <DIO_u8_Get_Pin_Value>
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <KPD_enum_Get_Key_State+0x19e>
//			DIO_u8_Set_Pin_Value(2 , 1 , 1);

         /*check if the pin is still pressed */
		 while (Local_u8_Pin_Value == DIO_u8_LOW){
			 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT,  KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Pin_Value );
    1cbe:	88 89       	ldd	r24, Y+16	; 0x10
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	e4 58       	subi	r30, 0x84	; 132
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	90 81       	ld	r25, Z
    1ccc:	9e 01       	movw	r18, r28
    1cce:	2d 5e       	subi	r18, 0xED	; 237
    1cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	69 2f       	mov	r22, r25
    1cd6:	a9 01       	movw	r20, r18
    1cd8:	0e 94 41 0b 	call	0x1682	; 0x1682 <DIO_u8_Get_Pin_Value>
         _delay_ms(20);
		 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT, KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Pin_Value );
//			DIO_u8_Set_Pin_Value(2 , 1 , 1);

         /*check if the pin is still pressed */
		 while (Local_u8_Pin_Value == DIO_u8_LOW){
    1cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cde:	88 23       	and	r24, r24
    1ce0:	71 f3       	breq	.-36     	; 0x1cbe <KPD_enum_Get_Key_State+0x180>
			 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT,  KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Pin_Value );
//			 Local_enu_Erorr_State= ES_OK;
		 }
      *Copy_pu8_Returned_Key = KPD_Au8_Keys[Local_u8_Rows_Counter][Local_u8_Cols_Counter];
    1ce2:	89 89       	ldd	r24, Y+17	; 0x11
    1ce4:	48 2f       	mov	r20, r24
    1ce6:	50 e0       	ldi	r21, 0x00	; 0
    1ce8:	88 89       	ldd	r24, Y+16	; 0x10
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	ca 01       	movw	r24, r20
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	82 0f       	add	r24, r18
    1cfa:	93 1f       	adc	r25, r19
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	e8 59       	subi	r30, 0x98	; 152
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	ec 89       	ldd	r30, Y+20	; 0x14
    1d06:	fd 89       	ldd	r31, Y+21	; 0x15
    1d08:	80 83       	st	Z, r24
       Local_u8_Flag =DIO_u8_HIGH;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	8f 87       	std	Y+15, r24	; 0x0f
    1d0e:	07 c0       	rjmp	.+14     	; 0x1d1e <KPD_enum_Get_Key_State+0x1e0>
	 for (Local_u8_Rows_Counter=KPD_u8_R1; Local_u8_Rows_Counter<=KPD_u8_R4; Local_u8_Rows_Counter++){
		 DIO_u8_Set_Pin_Value (KPD_u8_PORT, KPD_Au8_Rows_Pins[Local_u8_Rows_Counter],  DIO_u8_LOW );
//			DIO_u8_Set_Pin_Value(2 , 0 , 1);

		 /*check which input pin has zero		  */
		 for (Local_u8_Cols_Counter=KPD_u8_C1; Local_u8_Cols_Counter<=KPD_u8_C4; Local_u8_Cols_Counter++){
    1d10:	88 89       	ldd	r24, Y+16	; 0x10
    1d12:	8f 5f       	subi	r24, 0xFF	; 255
    1d14:	88 8b       	std	Y+16, r24	; 0x10
    1d16:	88 89       	ldd	r24, Y+16	; 0x10
    1d18:	84 30       	cpi	r24, 0x04	; 4
    1d1a:	08 f4       	brcc	.+2      	; 0x1d1e <KPD_enum_Get_Key_State+0x1e0>
    1d1c:	3b cf       	rjmp	.-394    	; 0x1b94 <KPD_enum_Get_Key_State+0x56>
       Local_u8_Flag =DIO_u8_HIGH;
        break;
            }
		 }
/*deactivate rows */
		 DIO_u8_Set_Pin_Value(KPD_u8_PORT,KPD_Au8_Rows_Pins[Local_u8_Rows_Counter],DIO_u8_HIGH);
    1d1e:	89 89       	ldd	r24, Y+17	; 0x11
    1d20:	88 2f       	mov	r24, r24
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	fc 01       	movw	r30, r24
    1d26:	e8 58       	subi	r30, 0x88	; 136
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	90 81       	ld	r25, Z
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	69 2f       	mov	r22, r25
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
		 			if(Local_u8_Flag == DIO_u8_HIGH)
    1d36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	51 f0       	breq	.+20     	; 0x1d50 <KPD_enum_Get_Key_State+0x212>
		*Copy_pu8_Returned_Key = KPD_u8_Keys_NO_Pressed;



/* activate each row by for loop */
	 for (Local_u8_Rows_Counter=KPD_u8_R1; Local_u8_Rows_Counter<=KPD_u8_R4; Local_u8_Rows_Counter++){
    1d3c:	89 89       	ldd	r24, Y+17	; 0x11
    1d3e:	8f 5f       	subi	r24, 0xFF	; 255
    1d40:	89 8b       	std	Y+17, r24	; 0x11
    1d42:	89 89       	ldd	r24, Y+17	; 0x11
    1d44:	84 30       	cpi	r24, 0x04	; 4
    1d46:	08 f4       	brcc	.+2      	; 0x1d4a <KPD_enum_Get_Key_State+0x20c>
    1d48:	17 cf       	rjmp	.-466    	; 0x1b78 <KPD_enum_Get_Key_State+0x3a>
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <KPD_enum_Get_Key_State+0x212>
		 				break;
	 }
 }
 else
     {
	 Local_enu_Erorr_State = ES_NOK;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	8a 8b       	std	Y+18, r24	; 0x12
     }
 return Local_enu_Erorr_State;
    1d50:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1d52:	65 96       	adiw	r28, 0x15	; 21
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <LCD_enum_INIT>:
#include"LCD_private.h"

//#define F_CPU 8000000UL
#include<util/delay.h>

ES_t LCD_enum_INIT (void){
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	c2 54       	subi	r28, 0x42	; 66
    1d6e:	d0 40       	sbci	r29, 0x00	; 0
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	ff 96       	adiw	r30, 0x3f	; 63
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	ac e0       	ldi	r26, 0x0C	; 12
    1d84:	b2 e4       	ldi	r27, 0x42	; 66
    1d86:	80 83       	st	Z, r24
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	a2 83       	std	Z+2, r26	; 0x02
    1d8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ff 96       	adiw	r30, 0x3f	; 63
    1d92:	60 81       	ld	r22, Z
    1d94:	71 81       	ldd	r23, Z+1	; 0x01
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	93 81       	ldd	r25, Z+3	; 0x03
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a e7       	ldi	r20, 0x7A	; 122
    1da0:	53 e4       	ldi	r21, 0x43	; 67
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8b af       	std	Y+59, r24	; 0x3b
    1dac:	9c af       	std	Y+60, r25	; 0x3c
    1dae:	ad af       	std	Y+61, r26	; 0x3d
    1db0:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    1db2:	6b ad       	ldd	r22, Y+59	; 0x3b
    1db4:	7c ad       	ldd	r23, Y+60	; 0x3c
    1db6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1db8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dc6:	88 23       	and	r24, r24
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <LCD_enum_INIT+0x70>
		__ticks = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9a af       	std	Y+58, r25	; 0x3a
    1dd0:	89 af       	std	Y+57, r24	; 0x39
    1dd2:	41 c0       	rjmp	.+130    	; 0x1e56 <LCD_enum_INIT+0xf2>
	else if (__tmp > 65535)
    1dd4:	6b ad       	ldd	r22, Y+59	; 0x3b
    1dd6:	7c ad       	ldd	r23, Y+60	; 0x3c
    1dd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dda:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	5c f5       	brge	.+86     	; 0x1e42 <LCD_enum_INIT+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dec:	fe 01       	movw	r30, r28
    1dee:	ff 96       	adiw	r30, 0x3f	; 63
    1df0:	60 81       	ld	r22, Z
    1df2:	71 81       	ldd	r23, Z+1	; 0x01
    1df4:	82 81       	ldd	r24, Z+2	; 0x02
    1df6:	93 81       	ldd	r25, Z+3	; 0x03
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e2       	ldi	r20, 0x20	; 32
    1dfe:	51 e4       	ldi	r21, 0x41	; 65
    1e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9a af       	std	Y+58, r25	; 0x3a
    1e16:	89 af       	std	Y+57, r24	; 0x39
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <LCD_enum_INIT+0xd4>
    1e1a:	89 e1       	ldi	r24, 0x19	; 25
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	98 af       	std	Y+56, r25	; 0x38
    1e20:	8f ab       	std	Y+55, r24	; 0x37
    1e22:	8f a9       	ldd	r24, Y+55	; 0x37
    1e24:	98 ad       	ldd	r25, Y+56	; 0x38
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_enum_INIT+0xc2>
    1e2a:	98 af       	std	Y+56, r25	; 0x38
    1e2c:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e30:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	9a af       	std	Y+58, r25	; 0x3a
    1e36:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e38:	89 ad       	ldd	r24, Y+57	; 0x39
    1e3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	69 f7       	brne	.-38     	; 0x1e1a <LCD_enum_INIT+0xb6>
    1e40:	14 c0       	rjmp	.+40     	; 0x1e6a <LCD_enum_INIT+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e42:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e44:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e46:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e48:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9a af       	std	Y+58, r25	; 0x3a
    1e54:	89 af       	std	Y+57, r24	; 0x39
    1e56:	89 ad       	ldd	r24, Y+57	; 0x39
    1e58:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e5a:	9e ab       	std	Y+54, r25	; 0x36
    1e5c:	8d ab       	std	Y+53, r24	; 0x35
    1e5e:	8d a9       	ldd	r24, Y+53	; 0x35
    1e60:	9e a9       	ldd	r25, Y+54	; 0x36
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <LCD_enum_INIT+0xfe>
    1e66:	9e ab       	std	Y+54, r25	; 0x36
    1e68:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(35);
//to set CMND
	LCD_enum_Send_Comnd(FUN_SET_8BIT_2LINES_5X7);
    1e6a:	88 e3       	ldi	r24, 0x38	; 56
    1e6c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_enum_Send_Comnd>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a0 e2       	ldi	r26, 0x20	; 32
    1e76:	b2 e4       	ldi	r27, 0x42	; 66
    1e78:	89 ab       	std	Y+49, r24	; 0x31
    1e7a:	9a ab       	std	Y+50, r25	; 0x32
    1e7c:	ab ab       	std	Y+51, r26	; 0x33
    1e7e:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e80:	69 a9       	ldd	r22, Y+49	; 0x31
    1e82:	7a a9       	ldd	r23, Y+50	; 0x32
    1e84:	8b a9       	ldd	r24, Y+51	; 0x33
    1e86:	9c a9       	ldd	r25, Y+52	; 0x34
    1e88:	2b ea       	ldi	r18, 0xAB	; 171
    1e8a:	3a ea       	ldi	r19, 0xAA	; 170
    1e8c:	4a ea       	ldi	r20, 0xAA	; 170
    1e8e:	5e e3       	ldi	r21, 0x3E	; 62
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	8d a7       	std	Y+45, r24	; 0x2d
    1e9a:	9e a7       	std	Y+46, r25	; 0x2e
    1e9c:	af a7       	std	Y+47, r26	; 0x2f
    1e9e:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1ea0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ea2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f e3       	ldi	r21, 0x3F	; 63
    1eb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	1c f4       	brge	.+6      	; 0x1ebe <LCD_enum_INIT+0x15a>
		__ticks = 1;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	8c a7       	std	Y+44, r24	; 0x2c
    1ebc:	91 c0       	rjmp	.+290    	; 0x1fe0 <LCD_enum_INIT+0x27c>
	else if (__tmp > 255)
    1ebe:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ec0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ec2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	4f e7       	ldi	r20, 0x7F	; 127
    1ecc:	53 e4       	ldi	r21, 0x43	; 67
    1ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed2:	18 16       	cp	r1, r24
    1ed4:	0c f0       	brlt	.+2      	; 0x1ed8 <LCD_enum_INIT+0x174>
    1ed6:	7b c0       	rjmp	.+246    	; 0x1fce <LCD_enum_INIT+0x26a>
	{
		_delay_ms(__us / 1000.0);
    1ed8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eda:	7a a9       	ldd	r23, Y+50	; 0x32
    1edc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ede:	9c a9       	ldd	r25, Y+52	; 0x34
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	4a e7       	ldi	r20, 0x7A	; 122
    1ee6:	54 e4       	ldi	r21, 0x44	; 68
    1ee8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	88 a7       	std	Y+40, r24	; 0x28
    1ef2:	99 a7       	std	Y+41, r25	; 0x29
    1ef4:	aa a7       	std	Y+42, r26	; 0x2a
    1ef6:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef8:	68 a5       	ldd	r22, Y+40	; 0x28
    1efa:	79 a5       	ldd	r23, Y+41	; 0x29
    1efc:	8a a5       	ldd	r24, Y+42	; 0x2a
    1efe:	9b a5       	ldd	r25, Y+43	; 0x2b
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	4a e7       	ldi	r20, 0x7A	; 122
    1f06:	53 e4       	ldi	r21, 0x43	; 67
    1f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	8c a3       	std	Y+36, r24	; 0x24
    1f12:	9d a3       	std	Y+37, r25	; 0x25
    1f14:	ae a3       	std	Y+38, r26	; 0x26
    1f16:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1f18:	6c a1       	ldd	r22, Y+36	; 0x24
    1f1a:	7d a1       	ldd	r23, Y+37	; 0x25
    1f1c:	8e a1       	ldd	r24, Y+38	; 0x26
    1f1e:	9f a1       	ldd	r25, Y+39	; 0x27
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e8       	ldi	r20, 0x80	; 128
    1f26:	5f e3       	ldi	r21, 0x3F	; 63
    1f28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f2c:	88 23       	and	r24, r24
    1f2e:	2c f4       	brge	.+10     	; 0x1f3a <LCD_enum_INIT+0x1d6>
		__ticks = 1;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	9b a3       	std	Y+35, r25	; 0x23
    1f36:	8a a3       	std	Y+34, r24	; 0x22
    1f38:	3f c0       	rjmp	.+126    	; 0x1fb8 <LCD_enum_INIT+0x254>
	else if (__tmp > 65535)
    1f3a:	6c a1       	ldd	r22, Y+36	; 0x24
    1f3c:	7d a1       	ldd	r23, Y+37	; 0x25
    1f3e:	8e a1       	ldd	r24, Y+38	; 0x26
    1f40:	9f a1       	ldd	r25, Y+39	; 0x27
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	3f ef       	ldi	r19, 0xFF	; 255
    1f46:	4f e7       	ldi	r20, 0x7F	; 127
    1f48:	57 e4       	ldi	r21, 0x47	; 71
    1f4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f4e:	18 16       	cp	r1, r24
    1f50:	4c f5       	brge	.+82     	; 0x1fa4 <LCD_enum_INIT+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f52:	68 a5       	ldd	r22, Y+40	; 0x28
    1f54:	79 a5       	ldd	r23, Y+41	; 0x29
    1f56:	8a a5       	ldd	r24, Y+42	; 0x2a
    1f58:	9b a5       	ldd	r25, Y+43	; 0x2b
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e2       	ldi	r20, 0x20	; 32
    1f60:	51 e4       	ldi	r21, 0x41	; 65
    1f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	cd 01       	movw	r24, r26
    1f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	9b a3       	std	Y+35, r25	; 0x23
    1f78:	8a a3       	std	Y+34, r24	; 0x22
    1f7a:	0f c0       	rjmp	.+30     	; 0x1f9a <LCD_enum_INIT+0x236>
    1f7c:	89 e1       	ldi	r24, 0x19	; 25
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	99 a3       	std	Y+33, r25	; 0x21
    1f82:	88 a3       	std	Y+32, r24	; 0x20
    1f84:	88 a1       	ldd	r24, Y+32	; 0x20
    1f86:	99 a1       	ldd	r25, Y+33	; 0x21
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <LCD_enum_INIT+0x224>
    1f8c:	99 a3       	std	Y+33, r25	; 0x21
    1f8e:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f90:	8a a1       	ldd	r24, Y+34	; 0x22
    1f92:	9b a1       	ldd	r25, Y+35	; 0x23
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	9b a3       	std	Y+35, r25	; 0x23
    1f98:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9a:	8a a1       	ldd	r24, Y+34	; 0x22
    1f9c:	9b a1       	ldd	r25, Y+35	; 0x23
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	69 f7       	brne	.-38     	; 0x1f7c <LCD_enum_INIT+0x218>
    1fa2:	24 c0       	rjmp	.+72     	; 0x1fec <LCD_enum_INIT+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa4:	6c a1       	ldd	r22, Y+36	; 0x24
    1fa6:	7d a1       	ldd	r23, Y+37	; 0x25
    1fa8:	8e a1       	ldd	r24, Y+38	; 0x26
    1faa:	9f a1       	ldd	r25, Y+39	; 0x27
    1fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9b a3       	std	Y+35, r25	; 0x23
    1fb6:	8a a3       	std	Y+34, r24	; 0x22
    1fb8:	8a a1       	ldd	r24, Y+34	; 0x22
    1fba:	9b a1       	ldd	r25, Y+35	; 0x23
    1fbc:	9f 8f       	std	Y+31, r25	; 0x1f
    1fbe:	8e 8f       	std	Y+30, r24	; 0x1e
    1fc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fc2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <LCD_enum_INIT+0x260>
    1fc8:	9f 8f       	std	Y+31, r25	; 0x1f
    1fca:	8e 8f       	std	Y+30, r24	; 0x1e
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <LCD_enum_INIT+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fce:	6d a5       	ldd	r22, Y+45	; 0x2d
    1fd0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1fd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	8c a7       	std	Y+44, r24	; 0x2c
    1fe0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fe2:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fe4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fe6:	8a 95       	dec	r24
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <LCD_enum_INIT+0x282>
    1fea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(40);
	LCD_enum_Send_Comnd(DIS_ON_CURSOR_ON_BLINKING);
    1fec:	8f e0       	ldi	r24, 0x0F	; 15
    1fee:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_enum_Send_Comnd>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	a0 e2       	ldi	r26, 0x20	; 32
    1ff8:	b2 e4       	ldi	r27, 0x42	; 66
    1ffa:	89 8f       	std	Y+25, r24	; 0x19
    1ffc:	9a 8f       	std	Y+26, r25	; 0x1a
    1ffe:	ab 8f       	std	Y+27, r26	; 0x1b
    2000:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2002:	69 8d       	ldd	r22, Y+25	; 0x19
    2004:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	4a e7       	ldi	r20, 0x7A	; 122
    2010:	53 e4       	ldi	r21, 0x43	; 67
    2012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	8d 8b       	std	Y+21, r24	; 0x15
    201c:	9e 8b       	std	Y+22, r25	; 0x16
    201e:	af 8b       	std	Y+23, r26	; 0x17
    2020:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2022:	6d 89       	ldd	r22, Y+21	; 0x15
    2024:	7e 89       	ldd	r23, Y+22	; 0x16
    2026:	8f 89       	ldd	r24, Y+23	; 0x17
    2028:	98 8d       	ldd	r25, Y+24	; 0x18
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e8       	ldi	r20, 0x80	; 128
    2030:	5f e3       	ldi	r21, 0x3F	; 63
    2032:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2036:	88 23       	and	r24, r24
    2038:	2c f4       	brge	.+10     	; 0x2044 <LCD_enum_INIT+0x2e0>
		__ticks = 1;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	9c 8b       	std	Y+20, r25	; 0x14
    2040:	8b 8b       	std	Y+19, r24	; 0x13
    2042:	3f c0       	rjmp	.+126    	; 0x20c2 <LCD_enum_INIT+0x35e>
	else if (__tmp > 65535)
    2044:	6d 89       	ldd	r22, Y+21	; 0x15
    2046:	7e 89       	ldd	r23, Y+22	; 0x16
    2048:	8f 89       	ldd	r24, Y+23	; 0x17
    204a:	98 8d       	ldd	r25, Y+24	; 0x18
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	3f ef       	ldi	r19, 0xFF	; 255
    2050:	4f e7       	ldi	r20, 0x7F	; 127
    2052:	57 e4       	ldi	r21, 0x47	; 71
    2054:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2058:	18 16       	cp	r1, r24
    205a:	4c f5       	brge	.+82     	; 0x20ae <LCD_enum_INIT+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205c:	69 8d       	ldd	r22, Y+25	; 0x19
    205e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2060:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2062:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e2       	ldi	r20, 0x20	; 32
    206a:	51 e4       	ldi	r21, 0x41	; 65
    206c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	bc 01       	movw	r22, r24
    2076:	cd 01       	movw	r24, r26
    2078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	9c 8b       	std	Y+20, r25	; 0x14
    2082:	8b 8b       	std	Y+19, r24	; 0x13
    2084:	0f c0       	rjmp	.+30     	; 0x20a4 <LCD_enum_INIT+0x340>
    2086:	89 e1       	ldi	r24, 0x19	; 25
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	9a 8b       	std	Y+18, r25	; 0x12
    208c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    208e:	89 89       	ldd	r24, Y+17	; 0x11
    2090:	9a 89       	ldd	r25, Y+18	; 0x12
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <LCD_enum_INIT+0x32e>
    2096:	9a 8b       	std	Y+18, r25	; 0x12
    2098:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209a:	8b 89       	ldd	r24, Y+19	; 0x13
    209c:	9c 89       	ldd	r25, Y+20	; 0x14
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	9c 8b       	std	Y+20, r25	; 0x14
    20a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a4:	8b 89       	ldd	r24, Y+19	; 0x13
    20a6:	9c 89       	ldd	r25, Y+20	; 0x14
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	69 f7       	brne	.-38     	; 0x2086 <LCD_enum_INIT+0x322>
    20ac:	14 c0       	rjmp	.+40     	; 0x20d6 <LCD_enum_INIT+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ae:	6d 89       	ldd	r22, Y+21	; 0x15
    20b0:	7e 89       	ldd	r23, Y+22	; 0x16
    20b2:	8f 89       	ldd	r24, Y+23	; 0x17
    20b4:	98 8d       	ldd	r25, Y+24	; 0x18
    20b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	9c 8b       	std	Y+20, r25	; 0x14
    20c0:	8b 8b       	std	Y+19, r24	; 0x13
    20c2:	8b 89       	ldd	r24, Y+19	; 0x13
    20c4:	9c 89       	ldd	r25, Y+20	; 0x14
    20c6:	98 8b       	std	Y+16, r25	; 0x10
    20c8:	8f 87       	std	Y+15, r24	; 0x0f
    20ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    20cc:	98 89       	ldd	r25, Y+16	; 0x10
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_enum_INIT+0x36a>
    20d2:	98 8b       	std	Y+16, r25	; 0x10
    20d4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	LCD_enum_Send_Comnd(DISPLAY_CLEAR);
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_enum_Send_Comnd>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	a0 e8       	ldi	r26, 0x80	; 128
    20e2:	bf e3       	ldi	r27, 0x3F	; 63
    20e4:	8b 87       	std	Y+11, r24	; 0x0b
    20e6:	9c 87       	std	Y+12, r25	; 0x0c
    20e8:	ad 87       	std	Y+13, r26	; 0x0d
    20ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4a e7       	ldi	r20, 0x7A	; 122
    20fa:	53 e4       	ldi	r21, 0x43	; 67
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	8f 83       	std	Y+7, r24	; 0x07
    2106:	98 87       	std	Y+8, r25	; 0x08
    2108:	a9 87       	std	Y+9, r26	; 0x09
    210a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    210c:	6f 81       	ldd	r22, Y+7	; 0x07
    210e:	78 85       	ldd	r23, Y+8	; 0x08
    2110:	89 85       	ldd	r24, Y+9	; 0x09
    2112:	9a 85       	ldd	r25, Y+10	; 0x0a
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	2c f4       	brge	.+10     	; 0x212e <LCD_enum_INIT+0x3ca>
		__ticks = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	3f c0       	rjmp	.+126    	; 0x21ac <LCD_enum_INIT+0x448>
	else if (__tmp > 65535)
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	3f ef       	ldi	r19, 0xFF	; 255
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	57 e4       	ldi	r21, 0x47	; 71
    213e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	4c f5       	brge	.+82     	; 0x2198 <LCD_enum_INIT+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	6b 85       	ldd	r22, Y+11	; 0x0b
    2148:	7c 85       	ldd	r23, Y+12	; 0x0c
    214a:	8d 85       	ldd	r24, Y+13	; 0x0d
    214c:	9e 85       	ldd	r25, Y+14	; 0x0e
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e2       	ldi	r20, 0x20	; 32
    2154:	51 e4       	ldi	r21, 0x41	; 65
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	9e 83       	std	Y+6, r25	; 0x06
    216c:	8d 83       	std	Y+5, r24	; 0x05
    216e:	0f c0       	rjmp	.+30     	; 0x218e <LCD_enum_INIT+0x42a>
    2170:	89 e1       	ldi	r24, 0x19	; 25
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9c 83       	std	Y+4, r25	; 0x04
    2176:	8b 83       	std	Y+3, r24	; 0x03
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <LCD_enum_INIT+0x418>
    2180:	9c 83       	std	Y+4, r25	; 0x04
    2182:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	69 f7       	brne	.-38     	; 0x2170 <LCD_enum_INIT+0x40c>
    2196:	14 c0       	rjmp	.+40     	; 0x21c0 <LCD_enum_INIT+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2198:	6f 81       	ldd	r22, Y+7	; 0x07
    219a:	78 85       	ldd	r23, Y+8	; 0x08
    219c:	89 85       	ldd	r24, Y+9	; 0x09
    219e:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9e 83       	std	Y+6, r25	; 0x06
    21aa:	8d 83       	std	Y+5, r24	; 0x05
    21ac:	8d 81       	ldd	r24, Y+5	; 0x05
    21ae:	9e 81       	ldd	r25, Y+6	; 0x06
    21b0:	9a 83       	std	Y+2, r25	; 0x02
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	9a 81       	ldd	r25, Y+2	; 0x02
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <LCD_enum_INIT+0x454>
    21bc:	9a 83       	std	Y+2, r25	; 0x02
    21be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_enum_Send_Comnd(ENTRY_MOOD);
    21c0:	86 e0       	ldi	r24, 0x06	; 6
    21c2:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_enum_Send_Comnd>
    return ES_OK;
    21c6:	80 e0       	ldi	r24, 0x00	; 0
}
    21c8:	ce 5b       	subi	r28, 0xBE	; 190
    21ca:	df 4f       	sbci	r29, 0xFF	; 255
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <LCD_enum_Send_Comnd>:
//to send a command
ES_t LCD_enum_Send_Comnd(u8 Copy_u8_Comnd){
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	69 97       	sbiw	r28, 0x19	; 25
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	89 8f       	std	Y+25, r24	; 0x19
#if  LCD_u8_MODE == LCD_u8_MODE_8_bit
//RS =0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_LOW );
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
//RW = 0

 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	61 e0       	ldi	r22, 0x01	; 1
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>

//Write Command
 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_Comnd);
    2206:	83 e0       	ldi	r24, 0x03	; 3
    2208:	69 8d       	ldd	r22, Y+25	; 0x19
    220a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8_Set_Port_Value>

//E = 1
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	62 e0       	ldi	r22, 0x02	; 2
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a0 e8       	ldi	r26, 0x80	; 128
    221e:	bf e3       	ldi	r27, 0x3F	; 63
    2220:	8d 8b       	std	Y+21, r24	; 0x15
    2222:	9e 8b       	std	Y+22, r25	; 0x16
    2224:	af 8b       	std	Y+23, r26	; 0x17
    2226:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2228:	6d 89       	ldd	r22, Y+21	; 0x15
    222a:	7e 89       	ldd	r23, Y+22	; 0x16
    222c:	8f 89       	ldd	r24, Y+23	; 0x17
    222e:	98 8d       	ldd	r25, Y+24	; 0x18
    2230:	2b ea       	ldi	r18, 0xAB	; 171
    2232:	3a ea       	ldi	r19, 0xAA	; 170
    2234:	4a ea       	ldi	r20, 0xAA	; 170
    2236:	5e e3       	ldi	r21, 0x3E	; 62
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	89 8b       	std	Y+17, r24	; 0x11
    2242:	9a 8b       	std	Y+18, r25	; 0x12
    2244:	ab 8b       	std	Y+19, r26	; 0x13
    2246:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2248:	69 89       	ldd	r22, Y+17	; 0x11
    224a:	7a 89       	ldd	r23, Y+18	; 0x12
    224c:	8b 89       	ldd	r24, Y+19	; 0x13
    224e:	9c 89       	ldd	r25, Y+20	; 0x14
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e8       	ldi	r20, 0x80	; 128
    2256:	5f e3       	ldi	r21, 0x3F	; 63
    2258:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    225c:	88 23       	and	r24, r24
    225e:	1c f4       	brge	.+6      	; 0x2266 <LCD_enum_Send_Comnd+0x8a>
		__ticks = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	88 8b       	std	Y+16, r24	; 0x10
    2264:	91 c0       	rjmp	.+290    	; 0x2388 <LCD_enum_Send_Comnd+0x1ac>
	else if (__tmp > 255)
    2266:	69 89       	ldd	r22, Y+17	; 0x11
    2268:	7a 89       	ldd	r23, Y+18	; 0x12
    226a:	8b 89       	ldd	r24, Y+19	; 0x13
    226c:	9c 89       	ldd	r25, Y+20	; 0x14
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	53 e4       	ldi	r21, 0x43	; 67
    2276:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	0c f0       	brlt	.+2      	; 0x2280 <LCD_enum_Send_Comnd+0xa4>
    227e:	7b c0       	rjmp	.+246    	; 0x2376 <LCD_enum_Send_Comnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2280:	6d 89       	ldd	r22, Y+21	; 0x15
    2282:	7e 89       	ldd	r23, Y+22	; 0x16
    2284:	8f 89       	ldd	r24, Y+23	; 0x17
    2286:	98 8d       	ldd	r25, Y+24	; 0x18
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a e7       	ldi	r20, 0x7A	; 122
    228e:	54 e4       	ldi	r21, 0x44	; 68
    2290:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8c 87       	std	Y+12, r24	; 0x0c
    229a:	9d 87       	std	Y+13, r25	; 0x0d
    229c:	ae 87       	std	Y+14, r26	; 0x0e
    229e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    22a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    22a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    22a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	4a e7       	ldi	r20, 0x7A	; 122
    22ae:	53 e4       	ldi	r21, 0x43	; 67
    22b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	88 87       	std	Y+8, r24	; 0x08
    22ba:	99 87       	std	Y+9, r25	; 0x09
    22bc:	aa 87       	std	Y+10, r26	; 0x0a
    22be:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22c0:	68 85       	ldd	r22, Y+8	; 0x08
    22c2:	79 85       	ldd	r23, Y+9	; 0x09
    22c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e8       	ldi	r20, 0x80	; 128
    22ce:	5f e3       	ldi	r21, 0x3F	; 63
    22d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d4:	88 23       	and	r24, r24
    22d6:	2c f4       	brge	.+10     	; 0x22e2 <LCD_enum_Send_Comnd+0x106>
		__ticks = 1;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	9f 83       	std	Y+7, r25	; 0x07
    22de:	8e 83       	std	Y+6, r24	; 0x06
    22e0:	3f c0       	rjmp	.+126    	; 0x2360 <LCD_enum_Send_Comnd+0x184>
	else if (__tmp > 65535)
    22e2:	68 85       	ldd	r22, Y+8	; 0x08
    22e4:	79 85       	ldd	r23, Y+9	; 0x09
    22e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	3f ef       	ldi	r19, 0xFF	; 255
    22ee:	4f e7       	ldi	r20, 0x7F	; 127
    22f0:	57 e4       	ldi	r21, 0x47	; 71
    22f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f6:	18 16       	cp	r1, r24
    22f8:	4c f5       	brge	.+82     	; 0x234c <LCD_enum_Send_Comnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    22fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    22fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2300:	9f 85       	ldd	r25, Y+15	; 0x0f
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e2       	ldi	r20, 0x20	; 32
    2308:	51 e4       	ldi	r21, 0x41	; 65
    230a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	bc 01       	movw	r22, r24
    2314:	cd 01       	movw	r24, r26
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9f 83       	std	Y+7, r25	; 0x07
    2320:	8e 83       	std	Y+6, r24	; 0x06
    2322:	0f c0       	rjmp	.+30     	; 0x2342 <LCD_enum_Send_Comnd+0x166>
    2324:	89 e1       	ldi	r24, 0x19	; 25
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	9d 83       	std	Y+5, r25	; 0x05
    232a:	8c 83       	std	Y+4, r24	; 0x04
    232c:	8c 81       	ldd	r24, Y+4	; 0x04
    232e:	9d 81       	ldd	r25, Y+5	; 0x05
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <LCD_enum_Send_Comnd+0x154>
    2334:	9d 83       	std	Y+5, r25	; 0x05
    2336:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2338:	8e 81       	ldd	r24, Y+6	; 0x06
    233a:	9f 81       	ldd	r25, Y+7	; 0x07
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	9f 83       	std	Y+7, r25	; 0x07
    2340:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2342:	8e 81       	ldd	r24, Y+6	; 0x06
    2344:	9f 81       	ldd	r25, Y+7	; 0x07
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	69 f7       	brne	.-38     	; 0x2324 <LCD_enum_Send_Comnd+0x148>
    234a:	24 c0       	rjmp	.+72     	; 0x2394 <LCD_enum_Send_Comnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234c:	68 85       	ldd	r22, Y+8	; 0x08
    234e:	79 85       	ldd	r23, Y+9	; 0x09
    2350:	8a 85       	ldd	r24, Y+10	; 0x0a
    2352:	9b 85       	ldd	r25, Y+11	; 0x0b
    2354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	9f 83       	std	Y+7, r25	; 0x07
    235e:	8e 83       	std	Y+6, r24	; 0x06
    2360:	8e 81       	ldd	r24, Y+6	; 0x06
    2362:	9f 81       	ldd	r25, Y+7	; 0x07
    2364:	9b 83       	std	Y+3, r25	; 0x03
    2366:	8a 83       	std	Y+2, r24	; 0x02
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	9b 81       	ldd	r25, Y+3	; 0x03
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCD_enum_Send_Comnd+0x190>
    2370:	9b 83       	std	Y+3, r25	; 0x03
    2372:	8a 83       	std	Y+2, r24	; 0x02
    2374:	0f c0       	rjmp	.+30     	; 0x2394 <LCD_enum_Send_Comnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2376:	69 89       	ldd	r22, Y+17	; 0x11
    2378:	7a 89       	ldd	r23, Y+18	; 0x12
    237a:	8b 89       	ldd	r24, Y+19	; 0x13
    237c:	9c 89       	ldd	r25, Y+20	; 0x14
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	88 8b       	std	Y+16, r24	; 0x10
    2388:	88 89       	ldd	r24, Y+16	; 0x10
    238a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	8a 95       	dec	r24
    2390:	f1 f7       	brne	.-4      	; 0x238e <LCD_enum_Send_Comnd+0x1b2>
    2392:	89 83       	std	Y+1, r24	; 0x01
_delay_us(1);

//E = 0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	62 e0       	ldi	r22, 0x02	; 2
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
 return ES_OK;
    239e:	80 e0       	ldi	r24, 0x00	; 0
    DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
return ES_OK;

#endif

}
    23a0:	69 96       	adiw	r28, 0x19	; 25
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	cf 91       	pop	r28
    23ae:	df 91       	pop	r29
    23b0:	08 95       	ret

000023b2 <LCD_enum_Send_char>:
//function to send a character
ES_t LCD_enum_Send_char(u8 Copy_u8_char){
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	69 97       	sbiw	r28, 0x19	; 25
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	89 8f       	std	Y+25, r24	; 0x19
	//RS =0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_HIGH );
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
	//RW = 0

	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	61 e0       	ldi	r22, 0x01	; 1
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>

	//Write char
	 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_char);
    23dc:	83 e0       	ldi	r24, 0x03	; 3
    23de:	69 8d       	ldd	r22, Y+25	; 0x19
    23e0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8_Set_Port_Value>

	//E = 1
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	62 e0       	ldi	r22, 0x02	; 2
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	a0 e8       	ldi	r26, 0x80	; 128
    23f4:	bf e3       	ldi	r27, 0x3F	; 63
    23f6:	8d 8b       	std	Y+21, r24	; 0x15
    23f8:	9e 8b       	std	Y+22, r25	; 0x16
    23fa:	af 8b       	std	Y+23, r26	; 0x17
    23fc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2400:	7e 89       	ldd	r23, Y+22	; 0x16
    2402:	8f 89       	ldd	r24, Y+23	; 0x17
    2404:	98 8d       	ldd	r25, Y+24	; 0x18
    2406:	2b ea       	ldi	r18, 0xAB	; 171
    2408:	3a ea       	ldi	r19, 0xAA	; 170
    240a:	4a ea       	ldi	r20, 0xAA	; 170
    240c:	5e e3       	ldi	r21, 0x3E	; 62
    240e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	89 8b       	std	Y+17, r24	; 0x11
    2418:	9a 8b       	std	Y+18, r25	; 0x12
    241a:	ab 8b       	std	Y+19, r26	; 0x13
    241c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    241e:	69 89       	ldd	r22, Y+17	; 0x11
    2420:	7a 89       	ldd	r23, Y+18	; 0x12
    2422:	8b 89       	ldd	r24, Y+19	; 0x13
    2424:	9c 89       	ldd	r25, Y+20	; 0x14
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e8       	ldi	r20, 0x80	; 128
    242c:	5f e3       	ldi	r21, 0x3F	; 63
    242e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2432:	88 23       	and	r24, r24
    2434:	1c f4       	brge	.+6      	; 0x243c <LCD_enum_Send_char+0x8a>
		__ticks = 1;
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	88 8b       	std	Y+16, r24	; 0x10
    243a:	91 c0       	rjmp	.+290    	; 0x255e <LCD_enum_Send_char+0x1ac>
	else if (__tmp > 255)
    243c:	69 89       	ldd	r22, Y+17	; 0x11
    243e:	7a 89       	ldd	r23, Y+18	; 0x12
    2440:	8b 89       	ldd	r24, Y+19	; 0x13
    2442:	9c 89       	ldd	r25, Y+20	; 0x14
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	4f e7       	ldi	r20, 0x7F	; 127
    244a:	53 e4       	ldi	r21, 0x43	; 67
    244c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2450:	18 16       	cp	r1, r24
    2452:	0c f0       	brlt	.+2      	; 0x2456 <LCD_enum_Send_char+0xa4>
    2454:	7b c0       	rjmp	.+246    	; 0x254c <LCD_enum_Send_char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2456:	6d 89       	ldd	r22, Y+21	; 0x15
    2458:	7e 89       	ldd	r23, Y+22	; 0x16
    245a:	8f 89       	ldd	r24, Y+23	; 0x17
    245c:	98 8d       	ldd	r25, Y+24	; 0x18
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	4a e7       	ldi	r20, 0x7A	; 122
    2464:	54 e4       	ldi	r21, 0x44	; 68
    2466:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	8c 87       	std	Y+12, r24	; 0x0c
    2470:	9d 87       	std	Y+13, r25	; 0x0d
    2472:	ae 87       	std	Y+14, r26	; 0x0e
    2474:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2476:	6c 85       	ldd	r22, Y+12	; 0x0c
    2478:	7d 85       	ldd	r23, Y+13	; 0x0d
    247a:	8e 85       	ldd	r24, Y+14	; 0x0e
    247c:	9f 85       	ldd	r25, Y+15	; 0x0f
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	4a e7       	ldi	r20, 0x7A	; 122
    2484:	53 e4       	ldi	r21, 0x43	; 67
    2486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	88 87       	std	Y+8, r24	; 0x08
    2490:	99 87       	std	Y+9, r25	; 0x09
    2492:	aa 87       	std	Y+10, r26	; 0x0a
    2494:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2496:	68 85       	ldd	r22, Y+8	; 0x08
    2498:	79 85       	ldd	r23, Y+9	; 0x09
    249a:	8a 85       	ldd	r24, Y+10	; 0x0a
    249c:	9b 85       	ldd	r25, Y+11	; 0x0b
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e8       	ldi	r20, 0x80	; 128
    24a4:	5f e3       	ldi	r21, 0x3F	; 63
    24a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24aa:	88 23       	and	r24, r24
    24ac:	2c f4       	brge	.+10     	; 0x24b8 <LCD_enum_Send_char+0x106>
		__ticks = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9f 83       	std	Y+7, r25	; 0x07
    24b4:	8e 83       	std	Y+6, r24	; 0x06
    24b6:	3f c0       	rjmp	.+126    	; 0x2536 <LCD_enum_Send_char+0x184>
	else if (__tmp > 65535)
    24b8:	68 85       	ldd	r22, Y+8	; 0x08
    24ba:	79 85       	ldd	r23, Y+9	; 0x09
    24bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    24be:	9b 85       	ldd	r25, Y+11	; 0x0b
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	3f ef       	ldi	r19, 0xFF	; 255
    24c4:	4f e7       	ldi	r20, 0x7F	; 127
    24c6:	57 e4       	ldi	r21, 0x47	; 71
    24c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24cc:	18 16       	cp	r1, r24
    24ce:	4c f5       	brge	.+82     	; 0x2522 <LCD_enum_Send_char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    24d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    24d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    24d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e2       	ldi	r20, 0x20	; 32
    24de:	51 e4       	ldi	r21, 0x41	; 65
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9f 83       	std	Y+7, r25	; 0x07
    24f6:	8e 83       	std	Y+6, r24	; 0x06
    24f8:	0f c0       	rjmp	.+30     	; 0x2518 <LCD_enum_Send_char+0x166>
    24fa:	89 e1       	ldi	r24, 0x19	; 25
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	9d 83       	std	Y+5, r25	; 0x05
    2500:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2502:	8c 81       	ldd	r24, Y+4	; 0x04
    2504:	9d 81       	ldd	r25, Y+5	; 0x05
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	f1 f7       	brne	.-4      	; 0x2506 <LCD_enum_Send_char+0x154>
    250a:	9d 83       	std	Y+5, r25	; 0x05
    250c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250e:	8e 81       	ldd	r24, Y+6	; 0x06
    2510:	9f 81       	ldd	r25, Y+7	; 0x07
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	9f 83       	std	Y+7, r25	; 0x07
    2516:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2518:	8e 81       	ldd	r24, Y+6	; 0x06
    251a:	9f 81       	ldd	r25, Y+7	; 0x07
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	69 f7       	brne	.-38     	; 0x24fa <LCD_enum_Send_char+0x148>
    2520:	24 c0       	rjmp	.+72     	; 0x256a <LCD_enum_Send_char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2522:	68 85       	ldd	r22, Y+8	; 0x08
    2524:	79 85       	ldd	r23, Y+9	; 0x09
    2526:	8a 85       	ldd	r24, Y+10	; 0x0a
    2528:	9b 85       	ldd	r25, Y+11	; 0x0b
    252a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	9f 83       	std	Y+7, r25	; 0x07
    2534:	8e 83       	std	Y+6, r24	; 0x06
    2536:	8e 81       	ldd	r24, Y+6	; 0x06
    2538:	9f 81       	ldd	r25, Y+7	; 0x07
    253a:	9b 83       	std	Y+3, r25	; 0x03
    253c:	8a 83       	std	Y+2, r24	; 0x02
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	9b 81       	ldd	r25, Y+3	; 0x03
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <LCD_enum_Send_char+0x190>
    2546:	9b 83       	std	Y+3, r25	; 0x03
    2548:	8a 83       	std	Y+2, r24	; 0x02
    254a:	0f c0       	rjmp	.+30     	; 0x256a <LCD_enum_Send_char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    254c:	69 89       	ldd	r22, Y+17	; 0x11
    254e:	7a 89       	ldd	r23, Y+18	; 0x12
    2550:	8b 89       	ldd	r24, Y+19	; 0x13
    2552:	9c 89       	ldd	r25, Y+20	; 0x14
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	88 8b       	std	Y+16, r24	; 0x10
    255e:	88 89       	ldd	r24, Y+16	; 0x10
    2560:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	8a 95       	dec	r24
    2566:	f1 f7       	brne	.-4      	; 0x2564 <LCD_enum_Send_char+0x1b2>
    2568:	89 83       	std	Y+1, r24	; 0x01
	 _delay_us(1);

	//E = 0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	62 e0       	ldi	r22, 0x02	; 2
    256e:	40 e0       	ldi	r20, 0x00	; 0
    2570:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
	    return ES_OK;
    2574:	80 e0       	ldi	r24, 0x00	; 0

}
    2576:	69 96       	adiw	r28, 0x19	; 25
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <LCD_enum_GO_TO_XY>:
//function to set a location
ES_t LCD_enum_GO_TO_XY (u8 Copy_u8_line_Num , u8 Copy_u8_Location ){
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	00 d0       	rcall	.+0      	; 0x258e <LCD_enum_GO_TO_XY+0x6>
    258e:	00 d0       	rcall	.+0      	; 0x2590 <LCD_enum_GO_TO_XY+0x8>
    2590:	0f 92       	push	r0
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	6a 83       	std	Y+2, r22	; 0x02
//	u8 Local_u8_Erorr_State = ES_OK;
	if(Copy_u8_Location <= 39 ){
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	88 32       	cpi	r24, 0x28	; 40
    259e:	f8 f4       	brcc	.+62     	; 0x25de <LCD_enum_GO_TO_XY+0x56>
		switch (Copy_u8_line_Num)
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	3d 83       	std	Y+5, r19	; 0x05
    25a8:	2c 83       	std	Y+4, r18	; 0x04
    25aa:	8c 81       	ldd	r24, Y+4	; 0x04
    25ac:	9d 81       	ldd	r25, Y+5	; 0x05
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	91 05       	cpc	r25, r1
    25b2:	31 f0       	breq	.+12     	; 0x25c0 <LCD_enum_GO_TO_XY+0x38>
    25b4:	2c 81       	ldd	r18, Y+4	; 0x04
    25b6:	3d 81       	ldd	r19, Y+5	; 0x05
    25b8:	22 30       	cpi	r18, 0x02	; 2
    25ba:	31 05       	cpc	r19, r1
    25bc:	31 f0       	breq	.+12     	; 0x25ca <LCD_enum_GO_TO_XY+0x42>
    25be:	0a c0       	rjmp	.+20     	; 0x25d4 <LCD_enum_GO_TO_XY+0x4c>
		{
		case LCD_u8_LINE1 : LCD_enum_Send_Comnd(ADDRESS_OF_LINE1+Copy_u8_Location);break;
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	80 58       	subi	r24, 0x80	; 128
    25c4:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_enum_Send_Comnd>
    25c8:	08 c0       	rjmp	.+16     	; 0x25da <LCD_enum_GO_TO_XY+0x52>
		case LCD_u8_LINE2 : LCD_enum_Send_Comnd(ADDRESS_OF_LINE2+Copy_u8_Location);break;
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	80 54       	subi	r24, 0x40	; 64
    25ce:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_enum_Send_Comnd>
    25d2:	03 c0       	rjmp	.+6      	; 0x25da <LCD_enum_GO_TO_XY+0x52>
        default   :  return ES_NOK;
    25d4:	31 e0       	ldi	r19, 0x01	; 1
    25d6:	3b 83       	std	Y+3, r19	; 0x03
    25d8:	04 c0       	rjmp	.+8      	; 0x25e2 <LCD_enum_GO_TO_XY+0x5a>
		else {
			return ES_NOK;


	}
    return ES_OK;
    25da:	1b 82       	std	Y+3, r1	; 0x03
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <LCD_enum_GO_TO_XY+0x5a>

		}

	}
		else {
			return ES_NOK;
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	8b 83       	std	Y+3, r24	; 0x03
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03


	}
    return ES_OK;
}
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <LCD_enum_Send_String>:
//function to send string
ES_t LCD_enum_Send_String(u8 *copy_pu8_string){
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <LCD_enum_Send_String+0x6>
    25fa:	0f 92       	push	r0
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	9b 83       	std	Y+3, r25	; 0x03
    2602:	8a 83       	std	Y+2, r24	; 0x02
    2604:	0e c0       	rjmp	.+28     	; 0x2622 <LCD_enum_Send_String+0x2e>
	for (u8 i ; copy_pu8_string[i] != '\0'; i++){
		LCD_enum_Send_char(copy_pu8_string[i]);
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	8a 81       	ldd	r24, Y+2	; 0x02
    260e:	9b 81       	ldd	r25, Y+3	; 0x03
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	80 81       	ld	r24, Z
    2618:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_enum_Send_char>
	}
    return ES_OK;
}
//function to send string
ES_t LCD_enum_Send_String(u8 *copy_pu8_string){
	for (u8 i ; copy_pu8_string[i] != '\0'; i++){
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	8f 5f       	subi	r24, 0xFF	; 255
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	9b 81       	ldd	r25, Y+3	; 0x03
    262c:	fc 01       	movw	r30, r24
    262e:	e2 0f       	add	r30, r18
    2630:	f3 1f       	adc	r31, r19
    2632:	80 81       	ld	r24, Z
    2634:	88 23       	and	r24, r24
    2636:	39 f7       	brne	.-50     	; 0x2606 <LCD_enum_Send_String+0x12>
		LCD_enum_Send_char(copy_pu8_string[i]);
	}
	return ES_OK;
    2638:	80 e0       	ldi	r24, 0x00	; 0
}
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <LCD_enum_Clear>:

//function to clear
ES_t LCD_enum_Clear (void){
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	2e 97       	sbiw	r28, 0x0e	; 14
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
	LCD_enum_Send_Comnd(DISPLAY_CLEAR);
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_enum_Send_Comnd>
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	a0 e8       	ldi	r26, 0x80	; 128
    2666:	bf e3       	ldi	r27, 0x3F	; 63
    2668:	8b 87       	std	Y+11, r24	; 0x0b
    266a:	9c 87       	std	Y+12, r25	; 0x0c
    266c:	ad 87       	std	Y+13, r26	; 0x0d
    266e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2670:	6b 85       	ldd	r22, Y+11	; 0x0b
    2672:	7c 85       	ldd	r23, Y+12	; 0x0c
    2674:	8d 85       	ldd	r24, Y+13	; 0x0d
    2676:	9e 85       	ldd	r25, Y+14	; 0x0e
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	4a e7       	ldi	r20, 0x7A	; 122
    267e:	53 e4       	ldi	r21, 0x43	; 67
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	8f 83       	std	Y+7, r24	; 0x07
    268a:	98 87       	std	Y+8, r25	; 0x08
    268c:	a9 87       	std	Y+9, r26	; 0x09
    268e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2690:	6f 81       	ldd	r22, Y+7	; 0x07
    2692:	78 85       	ldd	r23, Y+8	; 0x08
    2694:	89 85       	ldd	r24, Y+9	; 0x09
    2696:	9a 85       	ldd	r25, Y+10	; 0x0a
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e8       	ldi	r20, 0x80	; 128
    269e:	5f e3       	ldi	r21, 0x3F	; 63
    26a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26a4:	88 23       	and	r24, r24
    26a6:	2c f4       	brge	.+10     	; 0x26b2 <LCD_enum_Clear+0x6c>
		__ticks = 1;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	9e 83       	std	Y+6, r25	; 0x06
    26ae:	8d 83       	std	Y+5, r24	; 0x05
    26b0:	3f c0       	rjmp	.+126    	; 0x2730 <LCD_enum_Clear+0xea>
	else if (__tmp > 65535)
    26b2:	6f 81       	ldd	r22, Y+7	; 0x07
    26b4:	78 85       	ldd	r23, Y+8	; 0x08
    26b6:	89 85       	ldd	r24, Y+9	; 0x09
    26b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	3f ef       	ldi	r19, 0xFF	; 255
    26be:	4f e7       	ldi	r20, 0x7F	; 127
    26c0:	57 e4       	ldi	r21, 0x47	; 71
    26c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c6:	18 16       	cp	r1, r24
    26c8:	4c f5       	brge	.+82     	; 0x271c <LCD_enum_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    26cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e2       	ldi	r20, 0x20	; 32
    26d8:	51 e4       	ldi	r21, 0x41	; 65
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	bc 01       	movw	r22, r24
    26e4:	cd 01       	movw	r24, r26
    26e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9e 83       	std	Y+6, r25	; 0x06
    26f0:	8d 83       	std	Y+5, r24	; 0x05
    26f2:	0f c0       	rjmp	.+30     	; 0x2712 <LCD_enum_Clear+0xcc>
    26f4:	89 e1       	ldi	r24, 0x19	; 25
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	9c 83       	std	Y+4, r25	; 0x04
    26fa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_enum_Clear+0xba>
    2704:	9c 83       	std	Y+4, r25	; 0x04
    2706:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2708:	8d 81       	ldd	r24, Y+5	; 0x05
    270a:	9e 81       	ldd	r25, Y+6	; 0x06
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	9e 83       	std	Y+6, r25	; 0x06
    2710:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	69 f7       	brne	.-38     	; 0x26f4 <LCD_enum_Clear+0xae>
    271a:	14 c0       	rjmp	.+40     	; 0x2744 <LCD_enum_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271c:	6f 81       	ldd	r22, Y+7	; 0x07
    271e:	78 85       	ldd	r23, Y+8	; 0x08
    2720:	89 85       	ldd	r24, Y+9	; 0x09
    2722:	9a 85       	ldd	r25, Y+10	; 0x0a
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	9e 83       	std	Y+6, r25	; 0x06
    272e:	8d 83       	std	Y+5, r24	; 0x05
    2730:	8d 81       	ldd	r24, Y+5	; 0x05
    2732:	9e 81       	ldd	r25, Y+6	; 0x06
    2734:	9a 83       	std	Y+2, r25	; 0x02
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	9a 81       	ldd	r25, Y+2	; 0x02
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <LCD_enum_Clear+0xf6>
    2740:	9a 83       	std	Y+2, r25	; 0x02
    2742:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	return ES_OK;
    2744:	80 e0       	ldi	r24, 0x00	; 0
}
    2746:	2e 96       	adiw	r28, 0x0e	; 14
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	08 95       	ret

00002758 <LCD_enum_Send_Custom_char>:

//function to send custom char
ES_t LCD_enum_Send_Custom_char(u8 Copy_u8_Location , u8 * Copy_pu8_char_Array){
    2758:	df 93       	push	r29
    275a:	cf 93       	push	r28
    275c:	00 d0       	rcall	.+0      	; 0x275e <LCD_enum_Send_Custom_char+0x6>
    275e:	00 d0       	rcall	.+0      	; 0x2760 <LCD_enum_Send_Custom_char+0x8>
    2760:	0f 92       	push	r0
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	8a 83       	std	Y+2, r24	; 0x02
    2768:	7c 83       	std	Y+4, r23	; 0x04
    276a:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_pu8_char_Array != NULL && Copy_u8_Location < MAX_CHARACTERS )
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	00 97       	sbiw	r24, 0x00	; 0
    2772:	41 f1       	breq	.+80     	; 0x27c4 <LCD_enum_Send_Custom_char+0x6c>
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	88 30       	cpi	r24, 0x08	; 8
    2778:	28 f5       	brcc	.+74     	; 0x27c4 <LCD_enum_Send_Custom_char+0x6c>
	    {
		LCD_enum_Send_Comnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS ));
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	88 2f       	mov	r24, r24
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	08 96       	adiw	r24, 0x08	; 8
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_enum_Send_Comnd>
	        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS ; Local_u8_Counter++)
    2792:	19 82       	std	Y+1, r1	; 0x01
    2794:	0e c0       	rjmp	.+28     	; 0x27b2 <LCD_enum_Send_Custom_char+0x5a>
	        {
	        	LCD_enum_Send_char(Copy_pu8_char_Array[Local_u8_Counter]);
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	28 2f       	mov	r18, r24
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	9c 81       	ldd	r25, Y+4	; 0x04
    27a0:	fc 01       	movw	r30, r24
    27a2:	e2 0f       	add	r30, r18
    27a4:	f3 1f       	adc	r31, r19
    27a6:	80 81       	ld	r24, Z
    27a8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_enum_Send_char>
//function to send custom char
ES_t LCD_enum_Send_Custom_char(u8 Copy_u8_Location , u8 * Copy_pu8_char_Array){
	if(Copy_pu8_char_Array != NULL && Copy_u8_Location < MAX_CHARACTERS )
	    {
		LCD_enum_Send_Comnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS ));
	        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS ; Local_u8_Counter++)
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	8f 5f       	subi	r24, 0xFF	; 255
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	88 30       	cpi	r24, 0x08	; 8
    27b6:	78 f3       	brcs	.-34     	; 0x2796 <LCD_enum_Send_Custom_char+0x3e>
	        {
	        	LCD_enum_Send_char(Copy_pu8_char_Array[Local_u8_Counter]);
	        }
	        LCD_enum_GO_TO_XY(LCD_u8_LINE1,0);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_enum_GO_TO_XY>
//	        LCD_enum_Send_char(Copy_u8_Location);
	        return ES_OK;
    27c0:	1d 82       	std	Y+5, r1	; 0x05
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <LCD_enum_Send_Custom_char+0x70>

	    }
	    else
	    {
	        return ES_NOK;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	8d 83       	std	Y+5, r24	; 0x05
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
	    }

}
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <main>:
#include "../MCAL/3-GI/GI_interface.h"


void TOG_LED(void);

int main(){
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
DIO_voidInit();
    27e2:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_voidInit>
GI_enum_GI_Enable();
    27e6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GI_enum_GI_Enable>
EXTI_enum_Set_Call_Back( EXTI_u8_INT0,&TOG_LED);
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	34 e1       	ldi	r19, 0x14	; 20
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	b9 01       	movw	r22, r18
    27f2:	0e 94 f9 07 	call	0xff2	; 0xff2 <EXTI_enum_Set_Call_Back>
EXTI_enum_EXTI_Enable(EXTI_u8_INT0,EXTI_u8_ANY_LOGICAL_CHANGE);
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	62 e0       	ldi	r22, 0x02	; 2
    27fa:	0e 94 6d 06 	call	0xcda	; 0xcda <EXTI_enum_EXTI_Enable>
    27fe:	ff cf       	rjmp	.-2      	; 0x27fe <main+0x24>

00002800 <TOG_LED>:

	return 0;
}

void TOG_LED(void)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
static u8 Local_u8_Flag =0;
	if(Local_u8_Flag == 0)
    2808:	80 91 86 00 	lds	r24, 0x0086
    280c:	88 23       	and	r24, r24
    280e:	49 f4       	brne	.+18     	; 0x2822 <TOG_LED+0x22>
	{
		DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	41 e0       	ldi	r20, 0x01	; 1
    2816:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
		Local_u8_Flag=1;
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	80 93 86 00 	sts	0x0086, r24
    2820:	07 c0       	rjmp	.+14     	; 0x2830 <TOG_LED+0x30>
	}
	else{
		DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	60 e0       	ldi	r22, 0x00	; 0
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_u8_Set_Pin_Value>
				Local_u8_Flag=0;
    282c:	10 92 86 00 	sts	0x0086, r1
	}
}
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <__prologue_saves__>:
    2836:	2f 92       	push	r2
    2838:	3f 92       	push	r3
    283a:	4f 92       	push	r4
    283c:	5f 92       	push	r5
    283e:	6f 92       	push	r6
    2840:	7f 92       	push	r7
    2842:	8f 92       	push	r8
    2844:	9f 92       	push	r9
    2846:	af 92       	push	r10
    2848:	bf 92       	push	r11
    284a:	cf 92       	push	r12
    284c:	df 92       	push	r13
    284e:	ef 92       	push	r14
    2850:	ff 92       	push	r15
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	ca 1b       	sub	r28, r26
    2860:	db 0b       	sbc	r29, r27
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	de bf       	out	0x3e, r29	; 62
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	cd bf       	out	0x3d, r28	; 61
    286c:	09 94       	ijmp

0000286e <__epilogue_restores__>:
    286e:	2a 88       	ldd	r2, Y+18	; 0x12
    2870:	39 88       	ldd	r3, Y+17	; 0x11
    2872:	48 88       	ldd	r4, Y+16	; 0x10
    2874:	5f 84       	ldd	r5, Y+15	; 0x0f
    2876:	6e 84       	ldd	r6, Y+14	; 0x0e
    2878:	7d 84       	ldd	r7, Y+13	; 0x0d
    287a:	8c 84       	ldd	r8, Y+12	; 0x0c
    287c:	9b 84       	ldd	r9, Y+11	; 0x0b
    287e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2880:	b9 84       	ldd	r11, Y+9	; 0x09
    2882:	c8 84       	ldd	r12, Y+8	; 0x08
    2884:	df 80       	ldd	r13, Y+7	; 0x07
    2886:	ee 80       	ldd	r14, Y+6	; 0x06
    2888:	fd 80       	ldd	r15, Y+5	; 0x05
    288a:	0c 81       	ldd	r16, Y+4	; 0x04
    288c:	1b 81       	ldd	r17, Y+3	; 0x03
    288e:	aa 81       	ldd	r26, Y+2	; 0x02
    2890:	b9 81       	ldd	r27, Y+1	; 0x01
    2892:	ce 0f       	add	r28, r30
    2894:	d1 1d       	adc	r29, r1
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	ed 01       	movw	r28, r26
    28a2:	08 95       	ret

000028a4 <_exit>:
    28a4:	f8 94       	cli

000028a6 <__stop_program>:
    28a6:	ff cf       	rjmp	.-2      	; 0x28a6 <__stop_program>

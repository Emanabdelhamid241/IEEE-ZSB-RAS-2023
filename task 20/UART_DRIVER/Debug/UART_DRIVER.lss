
UART_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c6a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000c6a  00000cde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000012f0  00000000  00000000  00000cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000be5  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <main>
  7a:	0c 94 33 06 	jmp	0xc66	; 0xc66 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_enum_INIT>:
#include "../../MCAL/1-DIO/DIO_interface.h"


#include<util/delay.h>
ES_t  UART_enum_INIT (void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <UART_enum_INIT+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <UART_enum_INIT+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State= ES_OK;
  8e:	1c 82       	std	Y+4, r1	; 0x04
	u16 local_u16_baud_rate_value = UART_u8_inital_baud_rate_9600;
  90:	87 e6       	ldi	r24, 0x67	; 103
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	9b 83       	std	Y+3, r25	; 0x03
  96:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8_UCSRC_value= UART_INTIAL_UCSRC_value;
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	89 83       	std	Y+1, r24	; 0x01


     /*Normal speed*/
	CLR_BIT(UART_u8_UCSRA_REG,UART_u8_U2X_BIT1);
  9c:	ab e2       	ldi	r26, 0x2B	; 43
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	eb e2       	ldi	r30, 0x2B	; 43
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	8c 93       	st	X, r24

	/*Disable MPCM */
	CLR_BIT (UART_u8_UCSRA_REG ,UART_u8_MPCM_BIT0);
  aa:	ab e2       	ldi	r26, 0x2B	; 43
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	eb e2       	ldi	r30, 0x2B	; 43
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	8c 93       	st	X, r24

	/*Enable Rx ,Tx*/
	SET_BIT(UART_u8_UCSRB_REG,UART_u8_TXEN_BIT3);
  b8:	aa e2       	ldi	r26, 0x2A	; 42
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	ea e2       	ldi	r30, 0x2A	; 42
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG,UART_u8_RXEN_BIT4);
  c6:	aa e2       	ldi	r26, 0x2A	; 42
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	ea e2       	ldi	r30, 0x2A	; 42
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	8c 93       	st	X, r24


	/*Select 8 bit */
	CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSZ2_BIT2);
  d4:	aa e2       	ldi	r26, 0x2A	; 42
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	ea e2       	ldi	r30, 0x2A	; 42
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8b 7f       	andi	r24, 0xFB	; 251
  e0:	8c 93       	st	X, r24
	SET_BIT(local_u8_UCSRC_value,UART_u8_UCSZ0_BIT1);
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_u8_UCSRC_value,UART_u8_UCSZ1_BIT2);
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	89 83       	std	Y+1, r24	; 0x01

     /*Select Asynch Mode */
	CLR_BIT(local_u8_UCSRC_value,UART_u8_UMSEL_BIT6);
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	8f 7b       	andi	r24, 0xBF	; 191
  f2:	89 83       	std	Y+1, r24	; 0x01

	/*NO Parity Bit*/
	CLR_BIT(local_u8_UCSRC_value,UART_u8_UPM0_BIT4);
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	8f 7e       	andi	r24, 0xEF	; 239
  f8:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(local_u8_UCSRC_value,UART_u8_UPM1_BIT5);
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	8f 7d       	andi	r24, 0xDF	; 223
  fe:	89 83       	std	Y+1, r24	; 0x01

	/*Enable 2 Stop Bits*/
	CLR_BIT(local_u8_UCSRC_value,UART_u8_USBS_BIT3);
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	87 7f       	andi	r24, 0xF7	; 247
 104:	89 83       	std	Y+1, r24	; 0x01

    /*Update UCSRC REG*/
	UART_u8_UCSRC_REG=local_u8_UCSRC_value;
 106:	e0 e4       	ldi	r30, 0x40	; 64
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	80 83       	st	Z, r24

	/*baud rate = 9600*/
	    UART_u8_UBRRL_REG= (u8)local_u16_baud_rate_value;
 10e:	e9 e2       	ldi	r30, 0x29	; 41
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	8a 81       	ldd	r24, Y+2	; 0x02
 114:	80 83       	st	Z, r24
	    UART_u8_UBRRH_REG= (u8)(local_u16_baud_rate_value >> no_of_bit_of_one_byte);
 116:	e0 e4       	ldi	r30, 0x40	; 64
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	8a 81       	ldd	r24, Y+2	; 0x02
 11c:	9b 81       	ldd	r25, Y+3	; 0x03
 11e:	89 2f       	mov	r24, r25
 120:	99 27       	eor	r25, r25
 122:	80 83       	st	Z, r24


	//test
	DIO_u8_Set_Pin_Value(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_u8_Set_Pin_Value>

	return Local_enu_Erorr_State;
 12e:	8c 81       	ldd	r24, Y+4	; 0x04
}
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	08 95       	ret

0000013e <UART_enum_SEND_Byte>:
ES_t  UART_enum_SEND_Byte (u8 copy_UART_u8_data_byte)
{
 13e:	df 93       	push	r29
 140:	cf 93       	push	r28
 142:	00 d0       	rcall	.+0      	; 0x144 <UART_enum_SEND_Byte+0x6>
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
 14a:	19 82       	std	Y+1, r1	; 0x01
     /* wait until the transmit reg is empty*/
	while (GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT5)==0);
 14c:	eb e2       	ldi	r30, 0x2B	; 43
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 2f       	mov	r24, r24
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	80 72       	andi	r24, 0x20	; 32
 158:	90 70       	andi	r25, 0x00	; 0
 15a:	00 97       	sbiw	r24, 0x00	; 0
 15c:	b9 f3       	breq	.-18     	; 0x14c <UART_enum_SEND_Byte+0xe>

	/* send data byte */
	UART_u8_UDR_REG=copy_UART_u8_data_byte;
 15e:	ec e2       	ldi	r30, 0x2C	; 44
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	80 83       	st	Z, r24
	return Local_enu_Erorr_State;
 166:	89 81       	ldd	r24, Y+1	; 0x01

}
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	08 95       	ret

00000172 <UART_enum_RECIEVE_Byte>:
ES_t  UART_enum_RECIEVE_Byte (u8 *copy_UART_pu8_recieve_byte)
{
 172:	df 93       	push	r29
 174:	cf 93       	push	r28
 176:	00 d0       	rcall	.+0      	; 0x178 <UART_enum_RECIEVE_Byte+0x6>
 178:	0f 92       	push	r0
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	9b 83       	std	Y+3, r25	; 0x03
 180:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
 182:	19 82       	std	Y+1, r1	; 0x01

	if(copy_UART_pu8_recieve_byte != NULL)
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	9b 81       	ldd	r25, Y+3	; 0x03
 188:	00 97       	sbiw	r24, 0x00	; 0
 18a:	61 f0       	breq	.+24     	; 0x1a4 <UART_enum_RECIEVE_Byte+0x32>
	{
//		DIO_u8_Set_Pin_Value(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);

	/* wait until the data is recieved */
	while (!GET_BIT(UART_u8_UCSRA_REG,UART_u8_RXC_BIT7));
 18c:	eb e2       	ldi	r30, 0x2B	; 43
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	88 23       	and	r24, r24
 194:	dc f7       	brge	.-10     	; 0x18c <UART_enum_RECIEVE_Byte+0x1a>
//while(((UART_u8_UCSRA_REG >>7)&1)==0);
	/* read data byte*/
	*copy_UART_pu8_recieve_byte=UART_u8_UDR_REG;
 196:	ec e2       	ldi	r30, 0x2C	; 44
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	ea 81       	ldd	r30, Y+2	; 0x02
 19e:	fb 81       	ldd	r31, Y+3	; 0x03
 1a0:	80 83       	st	Z, r24
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <UART_enum_RECIEVE_Byte+0x36>


	}
	else{

			Local_enu_Erorr_State = ES_NOK;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	89 83       	std	Y+1, r24	; 0x01
		    }
	return Local_enu_Erorr_State;
 1a8:	89 81       	ldd	r24, Y+1	; 0x01



}
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	08 95       	ret

000001b6 <UART_enum_Send_String>:

ES_t UART_enum_Send_String(u8 *copy_pu8_string)
{
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <UART_enum_Send_String+0x6>
 1bc:	00 d0       	rcall	.+0      	; 0x1be <UART_enum_Send_String+0x8>
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	9c 83       	std	Y+4, r25	; 0x04
 1c4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enu_Erorr_State= ES_OK;
 1c6:	1a 82       	std	Y+2, r1	; 0x02
	if(copy_pu8_string!= NULL){
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	9c 81       	ldd	r25, Y+4	; 0x04
 1cc:	00 97       	sbiw	r24, 0x00	; 0
 1ce:	29 f1       	breq	.+74     	; 0x21a <UART_enum_Send_String+0x64>
 1d0:	18 c0       	rjmp	.+48     	; 0x202 <UART_enum_Send_String+0x4c>
	for (u8 Local_u8_Iterator ; copy_pu8_string[Local_u8_Iterator] != '\0'; Local_u8_Iterator++){
		 /* wait until the transmit reg is empty*/
			while (GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT5)==0);
 1d2:	eb e2       	ldi	r30, 0x2B	; 43
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	88 2f       	mov	r24, r24
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	80 72       	andi	r24, 0x20	; 32
 1de:	90 70       	andi	r25, 0x00	; 0
 1e0:	00 97       	sbiw	r24, 0x00	; 0
 1e2:	b9 f3       	breq	.-18     	; 0x1d2 <UART_enum_Send_String+0x1c>

			/* send data byte */
			UART_u8_UDR_REG=copy_pu8_string[Local_u8_Iterator];
 1e4:	ac e2       	ldi	r26, 0x2C	; 44
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	9c 81       	ldd	r25, Y+4	; 0x04
 1f2:	fc 01       	movw	r30, r24
 1f4:	e2 0f       	add	r30, r18
 1f6:	f3 1f       	adc	r31, r19
 1f8:	80 81       	ld	r24, Z
 1fa:	8c 93       	st	X, r24

ES_t UART_enum_Send_String(u8 *copy_pu8_string)
{
	ES_t Local_enu_Erorr_State= ES_OK;
	if(copy_pu8_string!= NULL){
	for (u8 Local_u8_Iterator ; copy_pu8_string[Local_u8_Iterator] != '\0'; Local_u8_Iterator++){
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	89 83       	std	Y+1, r24	; 0x01
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	28 2f       	mov	r18, r24
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	9c 81       	ldd	r25, Y+4	; 0x04
 20c:	fc 01       	movw	r30, r24
 20e:	e2 0f       	add	r30, r18
 210:	f3 1f       	adc	r31, r19
 212:	80 81       	ld	r24, Z
 214:	88 23       	and	r24, r24
 216:	e9 f6       	brne	.-70     	; 0x1d2 <UART_enum_Send_String+0x1c>
 218:	02 c0       	rjmp	.+4      	; 0x21e <UART_enum_Send_String+0x68>
			/* send data byte */
			UART_u8_UDR_REG=copy_pu8_string[Local_u8_Iterator];
	}
	}
	else{
		Local_enu_Erorr_State = ES_NOK;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	8a 83       	std	Y+2, r24	; 0x02
	    }

	return Local_enu_Erorr_State;
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
}
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	cf 91       	pop	r28
 22a:	df 91       	pop	r29
 22c:	08 95       	ret

0000022e <UART_enum_RECIEVE_String>:
ES_t  UART_enum_RECIEVE_String (u8 * copy_UART_pu8_recieve_String)
{
 22e:	df 93       	push	r29
 230:	cf 93       	push	r28
 232:	00 d0       	rcall	.+0      	; 0x234 <UART_enum_RECIEVE_String+0x6>
 234:	00 d0       	rcall	.+0      	; 0x236 <UART_enum_RECIEVE_String+0x8>
 236:	0f 92       	push	r0
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	9d 83       	std	Y+5, r25	; 0x05
 23e:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enu_Erorr_State= ES_OK;
 240:	1b 82       	std	Y+3, r1	; 0x03
	u8 i=0;
 242:	1a 82       	std	Y+2, r1	; 0x02
	u8 local_u8_counter=0;
 244:	19 82       	std	Y+1, r1	; 0x01
		if(copy_UART_pu8_recieve_String != NULL)
 246:	8c 81       	ldd	r24, Y+4	; 0x04
 248:	9d 81       	ldd	r25, Y+5	; 0x05
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	19 f1       	breq	.+70     	; 0x294 <UART_enum_RECIEVE_String+0x66>
		{
if(copy_UART_pu8_recieve_String[i]==recieve_sring_mark)   local_u8_counter++;
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	8c 81       	ldd	r24, Y+4	; 0x04
 256:	9d 81       	ldd	r25, Y+5	; 0x05
 258:	fc 01       	movw	r30, r24
 25a:	e2 0f       	add	r30, r18
 25c:	f3 1f       	adc	r31, r19
 25e:	80 81       	ld	r24, Z
 260:	83 32       	cpi	r24, 0x23	; 35
 262:	19 f4       	brne	.+6      	; 0x26a <UART_enum_RECIEVE_String+0x3c>
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	8f 5f       	subi	r24, 0xFF	; 255
 268:	89 83       	std	Y+1, r24	; 0x01
if(local_u8_counter<=2){
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	a0 f4       	brcc	.+40     	; 0x298 <UART_enum_RECIEVE_String+0x6a>
	/* wait until the data is recieved */
		while (!GET_BIT(UART_u8_UCSRA_REG,UART_u8_RXC_BIT7));
 270:	eb e2       	ldi	r30, 0x2B	; 43
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	88 23       	and	r24, r24
 278:	dc f7       	brge	.-10     	; 0x270 <UART_enum_RECIEVE_String+0x42>
		/* read data byte*/
		copy_UART_pu8_recieve_String[i]=UART_u8_UDR_REG;
 27a:	8a 81       	ldd	r24, Y+2	; 0x02
 27c:	28 2f       	mov	r18, r24
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	8c 81       	ldd	r24, Y+4	; 0x04
 282:	9d 81       	ldd	r25, Y+5	; 0x05
 284:	dc 01       	movw	r26, r24
 286:	a2 0f       	add	r26, r18
 288:	b3 1f       	adc	r27, r19
 28a:	ec e2       	ldi	r30, 0x2C	; 44
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	8c 93       	st	X, r24
 292:	02 c0       	rjmp	.+4      	; 0x298 <UART_enum_RECIEVE_String+0x6a>

}
		}
		else{
				Local_enu_Erorr_State = ES_NOK;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	8b 83       	std	Y+3, r24	; 0x03
			    }
		return Local_enu_Erorr_State;
 298:	8b 81       	ldd	r24, Y+3	; 0x03

}
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	cf 91       	pop	r28
 2a6:	df 91       	pop	r29
 2a8:	08 95       	ret

000002aa <DIO_voidInit>:
//MCAL Layer
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidInit(void){
 2aa:	df 93       	push	r29
 2ac:	cf 93       	push	r28
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = CONC(DIO_U8_PA7_INTIAL_DIRECTION, DIO_U8_PA6_INTIAL_DIRECTION, DIO_U8_PA5_INTIAL_DIRECTION, DIO_U8_PA4_INTIAL_DIRECTION,
 2b2:	ea e3       	ldi	r30, 0x3A	; 58
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	8f e0       	ldi	r24, 0x0F	; 15
 2b8:	80 83       	st	Z, r24
		                   DIO_U8_PA3_INTIAL_DIRECTION, DIO_U8_PA2_INTIAL_DIRECTION, DIO_U8_PA1_INTIAL_DIRECTION, DIO_U8_PA0_INTIAL_DIRECTION);
		                 			
	DIO_u8_DDRB_REG = CONC(DIO_U8_PB7_INTIAL_DIRECTION, DIO_U8_PB6_INTIAL_DIRECTION, DIO_U8_PB5_INTIAL_DIRECTION, DIO_U8_PB4_INTIAL_DIRECTION,
 2ba:	e7 e3       	ldi	r30, 0x37	; 55
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	87 e2       	ldi	r24, 0x27	; 39
 2c0:	80 83       	st	Z, r24
				           DIO_U8_PB3_INTIAL_DIRECTION, DIO_U8_PB2_INTIAL_DIRECTION, DIO_U8_PB1_INTIAL_DIRECTION, DIO_U8_PB0_INTIAL_DIRECTION);
					                                                                                                                      
	DIO_u8_DDRC_REG = CONC(DIO_U8_PC7_INTIAL_DIRECTION, DIO_U8_PC6_INTIAL_DIRECTION, DIO_U8_PC5_INTIAL_DIRECTION, DIO_U8_PC4_INTIAL_DIRECTION,
 2c2:	e4 e3       	ldi	r30, 0x34	; 52
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	10 82       	st	Z, r1
		                   DIO_U8_PC3_INTIAL_DIRECTION, DIO_U8_PC2_INTIAL_DIRECTION, DIO_U8_PC1_INTIAL_DIRECTION, DIO_U8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = CONC(DIO_U8_PD7_INTIAL_DIRECTION, DIO_U8_PD6_INTIAL_DIRECTION, DIO_U8_PD5_INTIAL_DIRECTION, DIO_U8_PD4_INTIAL_DIRECTION,
 2c8:	e1 e3       	ldi	r30, 0x31	; 49
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	8e ef       	ldi	r24, 0xFE	; 254
 2ce:	80 83       	st	Z, r24
				           DIO_U8_PD3_INTIAL_DIRECTION, DIO_U8_PD2_INTIAL_DIRECTION, DIO_U8_PD1_INTIAL_DIRECTION, DIO_U8_PD0_INTIAL_DIRECTION);

	DIO_u8_PORTA_REG = CONC(DIO_U8_PA7_INTIAL_VALUE, DIO_U8_PA6_INTIAL_VALUE, DIO_U8_PA5_INTIAL_VALUE, DIO_U8_PA4_INTIAL_VALUE,
 2d0:	eb e3       	ldi	r30, 0x3B	; 59
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	10 82       	st	Z, r1
						    DIO_U8_PA3_INTIAL_VALUE, DIO_U8_PA2_INTIAL_VALUE, DIO_U8_PA1_INTIAL_VALUE, DIO_U8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = CONC(DIO_U8_PB7_INTIAL_VALUE, DIO_U8_PB6_INTIAL_VALUE, DIO_U8_PB5_INTIAL_VALUE, DIO_U8_PB4_INTIAL_VALUE,
 2d6:	e8 e3       	ldi	r30, 0x38	; 56
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	10 82       	st	Z, r1
						   	DIO_U8_PB3_INTIAL_VALUE, DIO_U8_PB2_INTIAL_VALUE, DIO_U8_PB1_INTIAL_VALUE, DIO_U8_PB0_INTIAL_VALUE);
												 
    DIO_u8_PORTC_REG = CONC(DIO_U8_PC7_INTIAL_VALUE, DIO_U8_PC6_INTIAL_VALUE, DIO_U8_PC5_INTIAL_VALUE, DIO_U8_PC4_INTIAL_VALUE,
 2dc:	e5 e3       	ldi	r30, 0x35	; 53
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	10 82       	st	Z, r1
					        DIO_U8_PC3_INTIAL_VALUE, DIO_U8_PC2_INTIAL_VALUE, DIO_U8_PC1_INTIAL_VALUE, DIO_U8_PC0_INTIAL_VALUE);
																		   
    DIO_u8_PORTD_REG = CONC(DIO_U8_PD7_INTIAL_VALUE, DIO_U8_PD6_INTIAL_VALUE, DIO_U8_PD5_INTIAL_VALUE, DIO_U8_PD4_INTIAL_VALUE,
 2e2:	e2 e3       	ldi	r30, 0x32	; 50
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	10 82       	st	Z, r1
						    DIO_U8_PD3_INTIAL_VALUE, DIO_U8_PD2_INTIAL_VALUE, DIO_U8_PD1_INTIAL_VALUE, DIO_U8_PD0_INTIAL_VALUE);
    }
 2e8:	cf 91       	pop	r28
 2ea:	df 91       	pop	r29
 2ec:	08 95       	ret

000002ee <DIO_u8_Set_Pin_Direction>:

u8 DIO_u8_Set_Pin_Direction  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Direction ){
 2ee:	df 93       	push	r29
 2f0:	cf 93       	push	r28
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	2e 97       	sbiw	r28, 0x0e	; 14
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	8a 83       	std	Y+2, r24	; 0x02
 304:	6b 83       	std	Y+3, r22	; 0x03
 306:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
 308:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Direction == DIO_u8_INTIAL_INPUT)||(Copy_u8_Pin_Direction == DIO_u8_INTIAL_OUTPUT)))
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	84 30       	cpi	r24, 0x04	; 4
 30e:	08 f0       	brcs	.+2      	; 0x312 <DIO_u8_Set_Pin_Direction+0x24>
 310:	15 c1       	rjmp	.+554    	; 0x53c <__stack+0xdd>
 312:	8b 81       	ldd	r24, Y+3	; 0x03
 314:	88 30       	cpi	r24, 0x08	; 8
 316:	08 f0       	brcs	.+2      	; 0x31a <DIO_u8_Set_Pin_Direction+0x2c>
 318:	11 c1       	rjmp	.+546    	; 0x53c <__stack+0xdd>
 31a:	8c 81       	ldd	r24, Y+4	; 0x04
 31c:	88 23       	and	r24, r24
 31e:	21 f0       	breq	.+8      	; 0x328 <DIO_u8_Set_Pin_Direction+0x3a>
 320:	8c 81       	ldd	r24, Y+4	; 0x04
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	09 f0       	breq	.+2      	; 0x328 <DIO_u8_Set_Pin_Direction+0x3a>
 326:	0a c1       	rjmp	.+532    	; 0x53c <__stack+0xdd>
	{
        switch (Copy_u8_Port_ID)
 328:	8a 81       	ldd	r24, Y+2	; 0x02
 32a:	28 2f       	mov	r18, r24
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	3e 87       	std	Y+14, r19	; 0x0e
 330:	2d 87       	std	Y+13, r18	; 0x0d
 332:	8d 85       	ldd	r24, Y+13	; 0x0d
 334:	9e 85       	ldd	r25, Y+14	; 0x0e
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	91 05       	cpc	r25, r1
 33a:	09 f4       	brne	.+2      	; 0x33e <DIO_u8_Set_Pin_Direction+0x50>
 33c:	51 c0       	rjmp	.+162    	; 0x3e0 <DIO_u8_Set_Pin_Direction+0xf2>
 33e:	2d 85       	ldd	r18, Y+13	; 0x0d
 340:	3e 85       	ldd	r19, Y+14	; 0x0e
 342:	22 30       	cpi	r18, 0x02	; 2
 344:	31 05       	cpc	r19, r1
 346:	2c f4       	brge	.+10     	; 0x352 <DIO_u8_Set_Pin_Direction+0x64>
 348:	8d 85       	ldd	r24, Y+13	; 0x0d
 34a:	9e 85       	ldd	r25, Y+14	; 0x0e
 34c:	00 97       	sbiw	r24, 0x00	; 0
 34e:	71 f0       	breq	.+28     	; 0x36c <DIO_u8_Set_Pin_Direction+0x7e>
 350:	f7 c0       	rjmp	.+494    	; 0x540 <__stack+0xe1>
 352:	2d 85       	ldd	r18, Y+13	; 0x0d
 354:	3e 85       	ldd	r19, Y+14	; 0x0e
 356:	22 30       	cpi	r18, 0x02	; 2
 358:	31 05       	cpc	r19, r1
 35a:	09 f4       	brne	.+2      	; 0x35e <DIO_u8_Set_Pin_Direction+0x70>
 35c:	7b c0       	rjmp	.+246    	; 0x454 <DIO_u8_Set_Pin_Direction+0x166>
 35e:	8d 85       	ldd	r24, Y+13	; 0x0d
 360:	9e 85       	ldd	r25, Y+14	; 0x0e
 362:	83 30       	cpi	r24, 0x03	; 3
 364:	91 05       	cpc	r25, r1
 366:	09 f4       	brne	.+2      	; 0x36a <DIO_u8_Set_Pin_Direction+0x7c>
 368:	af c0       	rjmp	.+350    	; 0x4c8 <__stack+0x69>
 36a:	ea c0       	rjmp	.+468    	; 0x540 <__stack+0xe1>
        {
               case DIO_u8_PORTA:
            	   switch (Copy_u8_Pin_Direction)
 36c:	8c 81       	ldd	r24, Y+4	; 0x04
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	3c 87       	std	Y+12, r19	; 0x0c
 374:	2b 87       	std	Y+11, r18	; 0x0b
 376:	8b 85       	ldd	r24, Y+11	; 0x0b
 378:	9c 85       	ldd	r25, Y+12	; 0x0c
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	c9 f0       	breq	.+50     	; 0x3b0 <DIO_u8_Set_Pin_Direction+0xc2>
 37e:	2b 85       	ldd	r18, Y+11	; 0x0b
 380:	3c 85       	ldd	r19, Y+12	; 0x0c
 382:	21 30       	cpi	r18, 0x01	; 1
 384:	31 05       	cpc	r19, r1
 386:	49 f5       	brne	.+82     	; 0x3da <DIO_u8_Set_Pin_Direction+0xec>
            	   {
                    	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
 388:	aa e3       	ldi	r26, 0x3A	; 58
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	ea e3       	ldi	r30, 0x3A	; 58
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	48 2f       	mov	r20, r24
 394:	8b 81       	ldd	r24, Y+3	; 0x03
 396:	28 2f       	mov	r18, r24
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 2e       	mov	r0, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_u8_Set_Pin_Direction+0xb8>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_u8_Set_Pin_Direction+0xb4>
 3aa:	84 2b       	or	r24, r20
 3ac:	8c 93       	st	X, r24
 3ae:	c8 c0       	rjmp	.+400    	; 0x540 <__stack+0xe1>
                    	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
 3b0:	aa e3       	ldi	r26, 0x3A	; 58
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	ea e3       	ldi	r30, 0x3A	; 58
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	48 2f       	mov	r20, r24
 3bc:	8b 81       	ldd	r24, Y+3	; 0x03
 3be:	28 2f       	mov	r18, r24
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 2e       	mov	r0, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_u8_Set_Pin_Direction+0xe0>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	0a 94       	dec	r0
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_u8_Set_Pin_Direction+0xdc>
 3d2:	80 95       	com	r24
 3d4:	84 23       	and	r24, r20
 3d6:	8c 93       	st	X, r24
 3d8:	b3 c0       	rjmp	.+358    	; 0x540 <__stack+0xe1>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	89 83       	std	Y+1, r24	; 0x01
 3de:	b0 c0       	rjmp	.+352    	; 0x540 <__stack+0xe1>

            	   }
                  break;
               case DIO_u8_PORTB:
             	   switch (Copy_u8_Pin_Direction)
 3e0:	8c 81       	ldd	r24, Y+4	; 0x04
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	3a 87       	std	Y+10, r19	; 0x0a
 3e8:	29 87       	std	Y+9, r18	; 0x09
 3ea:	89 85       	ldd	r24, Y+9	; 0x09
 3ec:	9a 85       	ldd	r25, Y+10	; 0x0a
 3ee:	00 97       	sbiw	r24, 0x00	; 0
 3f0:	c9 f0       	breq	.+50     	; 0x424 <DIO_u8_Set_Pin_Direction+0x136>
 3f2:	29 85       	ldd	r18, Y+9	; 0x09
 3f4:	3a 85       	ldd	r19, Y+10	; 0x0a
 3f6:	21 30       	cpi	r18, 0x01	; 1
 3f8:	31 05       	cpc	r19, r1
 3fa:	49 f5       	brne	.+82     	; 0x44e <DIO_u8_Set_Pin_Direction+0x160>
             	   {
                     	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
 3fc:	a7 e3       	ldi	r26, 0x37	; 55
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	e7 e3       	ldi	r30, 0x37	; 55
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	48 2f       	mov	r20, r24
 408:	8b 81       	ldd	r24, Y+3	; 0x03
 40a:	28 2f       	mov	r18, r24
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 2e       	mov	r0, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_u8_Set_Pin_Direction+0x12c>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	0a 94       	dec	r0
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_u8_Set_Pin_Direction+0x128>
 41e:	84 2b       	or	r24, r20
 420:	8c 93       	st	X, r24
 422:	8e c0       	rjmp	.+284    	; 0x540 <__stack+0xe1>
                     	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
 424:	a7 e3       	ldi	r26, 0x37	; 55
 426:	b0 e0       	ldi	r27, 0x00	; 0
 428:	e7 e3       	ldi	r30, 0x37	; 55
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	48 2f       	mov	r20, r24
 430:	8b 81       	ldd	r24, Y+3	; 0x03
 432:	28 2f       	mov	r18, r24
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 2e       	mov	r0, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_u8_Set_Pin_Direction+0x154>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	0a 94       	dec	r0
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_u8_Set_Pin_Direction+0x150>
 446:	80 95       	com	r24
 448:	84 23       	and	r24, r20
 44a:	8c 93       	st	X, r24
 44c:	79 c0       	rjmp	.+242    	; 0x540 <__stack+0xe1>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	89 83       	std	Y+1, r24	; 0x01
 452:	76 c0       	rjmp	.+236    	; 0x540 <__stack+0xe1>

             	   }
                   break;
               case DIO_u8_PORTC:
                   switch (Copy_u8_Pin_Direction)
 454:	8c 81       	ldd	r24, Y+4	; 0x04
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	38 87       	std	Y+8, r19	; 0x08
 45c:	2f 83       	std	Y+7, r18	; 0x07
 45e:	8f 81       	ldd	r24, Y+7	; 0x07
 460:	98 85       	ldd	r25, Y+8	; 0x08
 462:	00 97       	sbiw	r24, 0x00	; 0
 464:	c9 f0       	breq	.+50     	; 0x498 <__stack+0x39>
 466:	2f 81       	ldd	r18, Y+7	; 0x07
 468:	38 85       	ldd	r19, Y+8	; 0x08
 46a:	21 30       	cpi	r18, 0x01	; 1
 46c:	31 05       	cpc	r19, r1
 46e:	49 f5       	brne	.+82     	; 0x4c2 <__stack+0x63>
                 	   {
                         	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
 470:	a4 e3       	ldi	r26, 0x34	; 52
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	e4 e3       	ldi	r30, 0x34	; 52
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	48 2f       	mov	r20, r24
 47c:	8b 81       	ldd	r24, Y+3	; 0x03
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 2e       	mov	r0, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <__stack+0x2f>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	0a 94       	dec	r0
 490:	e2 f7       	brpl	.-8      	; 0x48a <__stack+0x2b>
 492:	84 2b       	or	r24, r20
 494:	8c 93       	st	X, r24
 496:	54 c0       	rjmp	.+168    	; 0x540 <__stack+0xe1>
                         	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
 498:	a4 e3       	ldi	r26, 0x34	; 52
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	e4 e3       	ldi	r30, 0x34	; 52
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	48 2f       	mov	r20, r24
 4a4:	8b 81       	ldd	r24, Y+3	; 0x03
 4a6:	28 2f       	mov	r18, r24
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 2e       	mov	r0, r18
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__stack+0x57>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	0a 94       	dec	r0
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__stack+0x53>
 4ba:	80 95       	com	r24
 4bc:	84 23       	and	r24, r20
 4be:	8c 93       	st	X, r24
 4c0:	3f c0       	rjmp	.+126    	; 0x540 <__stack+0xe1>
  			           	     default :Local_u8_Erorr_State = ES_NOK ;
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	89 83       	std	Y+1, r24	; 0x01
 4c6:	3c c0       	rjmp	.+120    	; 0x540 <__stack+0xe1>

                 	   }
                       break;

               case DIO_u8_PORTD:
                    switch (Copy_u8_Pin_Direction)
 4c8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	3e 83       	std	Y+6, r19	; 0x06
 4d0:	2d 83       	std	Y+5, r18	; 0x05
 4d2:	8d 81       	ldd	r24, Y+5	; 0x05
 4d4:	9e 81       	ldd	r25, Y+6	; 0x06
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	c9 f0       	breq	.+50     	; 0x50c <__stack+0xad>
 4da:	2d 81       	ldd	r18, Y+5	; 0x05
 4dc:	3e 81       	ldd	r19, Y+6	; 0x06
 4de:	21 30       	cpi	r18, 0x01	; 1
 4e0:	31 05       	cpc	r19, r1
 4e2:	49 f5       	brne	.+82     	; 0x536 <__stack+0xd7>
                     	   {
                             	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
 4e4:	a1 e3       	ldi	r26, 0x31	; 49
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	e1 e3       	ldi	r30, 0x31	; 49
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	48 2f       	mov	r20, r24
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	28 2f       	mov	r18, r24
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 2e       	mov	r0, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <__stack+0xa3>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	0a 94       	dec	r0
 504:	e2 f7       	brpl	.-8      	; 0x4fe <__stack+0x9f>
 506:	84 2b       	or	r24, r20
 508:	8c 93       	st	X, r24
 50a:	1a c0       	rjmp	.+52     	; 0x540 <__stack+0xe1>
                             	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
 50c:	a1 e3       	ldi	r26, 0x31	; 49
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	e1 e3       	ldi	r30, 0x31	; 49
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	48 2f       	mov	r20, r24
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	28 2f       	mov	r18, r24
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 2e       	mov	r0, r18
 524:	02 c0       	rjmp	.+4      	; 0x52a <__stack+0xcb>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	0a 94       	dec	r0
 52c:	e2 f7       	brpl	.-8      	; 0x526 <__stack+0xc7>
 52e:	80 95       	com	r24
 530:	84 23       	and	r24, r20
 532:	8c 93       	st	X, r24
 534:	05 c0       	rjmp	.+10     	; 0x540 <__stack+0xe1>
      			           	     default :Local_u8_Erorr_State = ES_NOK ;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	89 83       	std	Y+1, r24	; 0x01
 53a:	02 c0       	rjmp	.+4      	; 0x540 <__stack+0xe1>
                     	   }
                           break;
        }
	}
	else {
		Local_u8_Erorr_State = ES_NOK ;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_Erorr_State ;
 540:	89 81       	ldd	r24, Y+1	; 0x01
}
 542:	2e 96       	adiw	r28, 0x0e	; 14
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	f8 94       	cli
 548:	de bf       	out	0x3e, r29	; 62
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	cd bf       	out	0x3d, r28	; 61
 54e:	cf 91       	pop	r28
 550:	df 91       	pop	r29
 552:	08 95       	ret

00000554 <DIO_u8_Set_Pin_Value>:

u8 DIO_u8_Set_Pin_Value  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Value ){
 554:	df 93       	push	r29
 556:	cf 93       	push	r28
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
 55c:	2e 97       	sbiw	r28, 0x0e	; 14
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	f8 94       	cli
 562:	de bf       	out	0x3e, r29	; 62
 564:	0f be       	out	0x3f, r0	; 63
 566:	cd bf       	out	0x3d, r28	; 61
 568:	8a 83       	std	Y+2, r24	; 0x02
 56a:	6b 83       	std	Y+3, r22	; 0x03
 56c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
 56e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Value == DIO_u8_INPUT)||(Copy_u8_Pin_Value == DIO_u8_OUTPUT)))
 570:	8a 81       	ldd	r24, Y+2	; 0x02
 572:	84 30       	cpi	r24, 0x04	; 4
 574:	08 f0       	brcs	.+2      	; 0x578 <DIO_u8_Set_Pin_Value+0x24>
 576:	15 c1       	rjmp	.+554    	; 0x7a2 <DIO_u8_Set_Pin_Value+0x24e>
 578:	8b 81       	ldd	r24, Y+3	; 0x03
 57a:	88 30       	cpi	r24, 0x08	; 8
 57c:	08 f0       	brcs	.+2      	; 0x580 <DIO_u8_Set_Pin_Value+0x2c>
 57e:	11 c1       	rjmp	.+546    	; 0x7a2 <DIO_u8_Set_Pin_Value+0x24e>
 580:	8c 81       	ldd	r24, Y+4	; 0x04
 582:	88 23       	and	r24, r24
 584:	21 f0       	breq	.+8      	; 0x58e <DIO_u8_Set_Pin_Value+0x3a>
 586:	8c 81       	ldd	r24, Y+4	; 0x04
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	09 f0       	breq	.+2      	; 0x58e <DIO_u8_Set_Pin_Value+0x3a>
 58c:	0a c1       	rjmp	.+532    	; 0x7a2 <DIO_u8_Set_Pin_Value+0x24e>
	{
		switch (Copy_u8_Port_ID)
 58e:	8a 81       	ldd	r24, Y+2	; 0x02
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	3e 87       	std	Y+14, r19	; 0x0e
 596:	2d 87       	std	Y+13, r18	; 0x0d
 598:	8d 85       	ldd	r24, Y+13	; 0x0d
 59a:	9e 85       	ldd	r25, Y+14	; 0x0e
 59c:	81 30       	cpi	r24, 0x01	; 1
 59e:	91 05       	cpc	r25, r1
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <DIO_u8_Set_Pin_Value+0x50>
 5a2:	51 c0       	rjmp	.+162    	; 0x646 <DIO_u8_Set_Pin_Value+0xf2>
 5a4:	2d 85       	ldd	r18, Y+13	; 0x0d
 5a6:	3e 85       	ldd	r19, Y+14	; 0x0e
 5a8:	22 30       	cpi	r18, 0x02	; 2
 5aa:	31 05       	cpc	r19, r1
 5ac:	2c f4       	brge	.+10     	; 0x5b8 <DIO_u8_Set_Pin_Value+0x64>
 5ae:	8d 85       	ldd	r24, Y+13	; 0x0d
 5b0:	9e 85       	ldd	r25, Y+14	; 0x0e
 5b2:	00 97       	sbiw	r24, 0x00	; 0
 5b4:	71 f0       	breq	.+28     	; 0x5d2 <DIO_u8_Set_Pin_Value+0x7e>
 5b6:	f7 c0       	rjmp	.+494    	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>
 5b8:	2d 85       	ldd	r18, Y+13	; 0x0d
 5ba:	3e 85       	ldd	r19, Y+14	; 0x0e
 5bc:	22 30       	cpi	r18, 0x02	; 2
 5be:	31 05       	cpc	r19, r1
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <DIO_u8_Set_Pin_Value+0x70>
 5c2:	7b c0       	rjmp	.+246    	; 0x6ba <DIO_u8_Set_Pin_Value+0x166>
 5c4:	8d 85       	ldd	r24, Y+13	; 0x0d
 5c6:	9e 85       	ldd	r25, Y+14	; 0x0e
 5c8:	83 30       	cpi	r24, 0x03	; 3
 5ca:	91 05       	cpc	r25, r1
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <DIO_u8_Set_Pin_Value+0x7c>
 5ce:	af c0       	rjmp	.+350    	; 0x72e <DIO_u8_Set_Pin_Value+0x1da>
 5d0:	ea c0       	rjmp	.+468    	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Pin_Value)
 5d2:	8c 81       	ldd	r24, Y+4	; 0x04
 5d4:	28 2f       	mov	r18, r24
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	3c 87       	std	Y+12, r19	; 0x0c
 5da:	2b 87       	std	Y+11, r18	; 0x0b
 5dc:	8b 85       	ldd	r24, Y+11	; 0x0b
 5de:	9c 85       	ldd	r25, Y+12	; 0x0c
 5e0:	00 97       	sbiw	r24, 0x00	; 0
 5e2:	c9 f0       	breq	.+50     	; 0x616 <DIO_u8_Set_Pin_Value+0xc2>
 5e4:	2b 85       	ldd	r18, Y+11	; 0x0b
 5e6:	3c 85       	ldd	r19, Y+12	; 0x0c
 5e8:	21 30       	cpi	r18, 0x01	; 1
 5ea:	31 05       	cpc	r19, r1
 5ec:	49 f5       	brne	.+82     	; 0x640 <DIO_u8_Set_Pin_Value+0xec>
			{
			     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
 5ee:	ab e3       	ldi	r26, 0x3B	; 59
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	eb e3       	ldi	r30, 0x3B	; 59
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	48 2f       	mov	r20, r24
 5fa:	8b 81       	ldd	r24, Y+3	; 0x03
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 2e       	mov	r0, r18
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_u8_Set_Pin_Value+0xb8>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	0a 94       	dec	r0
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_u8_Set_Pin_Value+0xb4>
 610:	84 2b       	or	r24, r20
 612:	8c 93       	st	X, r24
 614:	c8 c0       	rjmp	.+400    	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>
           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
 616:	ab e3       	ldi	r26, 0x3B	; 59
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	eb e3       	ldi	r30, 0x3B	; 59
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	80 81       	ld	r24, Z
 620:	48 2f       	mov	r20, r24
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	28 2f       	mov	r18, r24
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 2e       	mov	r0, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_u8_Set_Pin_Value+0xe0>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	0a 94       	dec	r0
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_u8_Set_Pin_Value+0xdc>
 638:	80 95       	com	r24
 63a:	84 23       	and	r24, r20
 63c:	8c 93       	st	X, r24
 63e:	b3 c0       	rjmp	.+358    	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>
           	     default :Local_u8_Erorr_State = ES_NOK ;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	89 83       	std	Y+1, r24	; 0x01
 644:	b0 c0       	rjmp	.+352    	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>

			}
			break;
		case DIO_u8_PORTB :
			switch (Copy_u8_Pin_Value)
 646:	8c 81       	ldd	r24, Y+4	; 0x04
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	3a 87       	std	Y+10, r19	; 0x0a
 64e:	29 87       	std	Y+9, r18	; 0x09
 650:	89 85       	ldd	r24, Y+9	; 0x09
 652:	9a 85       	ldd	r25, Y+10	; 0x0a
 654:	00 97       	sbiw	r24, 0x00	; 0
 656:	c9 f0       	breq	.+50     	; 0x68a <DIO_u8_Set_Pin_Value+0x136>
 658:	29 85       	ldd	r18, Y+9	; 0x09
 65a:	3a 85       	ldd	r19, Y+10	; 0x0a
 65c:	21 30       	cpi	r18, 0x01	; 1
 65e:	31 05       	cpc	r19, r1
 660:	49 f5       	brne	.+82     	; 0x6b4 <DIO_u8_Set_Pin_Value+0x160>
				{
				     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
 662:	a8 e3       	ldi	r26, 0x38	; 56
 664:	b0 e0       	ldi	r27, 0x00	; 0
 666:	e8 e3       	ldi	r30, 0x38	; 56
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	80 81       	ld	r24, Z
 66c:	48 2f       	mov	r20, r24
 66e:	8b 81       	ldd	r24, Y+3	; 0x03
 670:	28 2f       	mov	r18, r24
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 2e       	mov	r0, r18
 67a:	02 c0       	rjmp	.+4      	; 0x680 <DIO_u8_Set_Pin_Value+0x12c>
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	0a 94       	dec	r0
 682:	e2 f7       	brpl	.-8      	; 0x67c <DIO_u8_Set_Pin_Value+0x128>
 684:	84 2b       	or	r24, r20
 686:	8c 93       	st	X, r24
 688:	8e c0       	rjmp	.+284    	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>
	           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
 68a:	a8 e3       	ldi	r26, 0x38	; 56
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	e8 e3       	ldi	r30, 0x38	; 56
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	80 81       	ld	r24, Z
 694:	48 2f       	mov	r20, r24
 696:	8b 81       	ldd	r24, Y+3	; 0x03
 698:	28 2f       	mov	r18, r24
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	02 2e       	mov	r0, r18
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <DIO_u8_Set_Pin_Value+0x154>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	0a 94       	dec	r0
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <DIO_u8_Set_Pin_Value+0x150>
 6ac:	80 95       	com	r24
 6ae:	84 23       	and	r24, r20
 6b0:	8c 93       	st	X, r24
 6b2:	79 c0       	rjmp	.+242    	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>
	           	     default :Local_u8_Erorr_State = ES_NOK ;
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	89 83       	std	Y+1, r24	; 0x01
 6b8:	76 c0       	rjmp	.+236    	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>

				}
	     	break;
		case DIO_u8_PORTC :
			switch (Copy_u8_Pin_Value)
 6ba:	8c 81       	ldd	r24, Y+4	; 0x04
 6bc:	28 2f       	mov	r18, r24
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	38 87       	std	Y+8, r19	; 0x08
 6c2:	2f 83       	std	Y+7, r18	; 0x07
 6c4:	8f 81       	ldd	r24, Y+7	; 0x07
 6c6:	98 85       	ldd	r25, Y+8	; 0x08
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	c9 f0       	breq	.+50     	; 0x6fe <DIO_u8_Set_Pin_Value+0x1aa>
 6cc:	2f 81       	ldd	r18, Y+7	; 0x07
 6ce:	38 85       	ldd	r19, Y+8	; 0x08
 6d0:	21 30       	cpi	r18, 0x01	; 1
 6d2:	31 05       	cpc	r19, r1
 6d4:	49 f5       	brne	.+82     	; 0x728 <DIO_u8_Set_Pin_Value+0x1d4>
					{
					     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
 6d6:	a5 e3       	ldi	r26, 0x35	; 53
 6d8:	b0 e0       	ldi	r27, 0x00	; 0
 6da:	e5 e3       	ldi	r30, 0x35	; 53
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	48 2f       	mov	r20, r24
 6e2:	8b 81       	ldd	r24, Y+3	; 0x03
 6e4:	28 2f       	mov	r18, r24
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 2e       	mov	r0, r18
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <DIO_u8_Set_Pin_Value+0x1a0>
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	0a 94       	dec	r0
 6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <DIO_u8_Set_Pin_Value+0x19c>
 6f8:	84 2b       	or	r24, r20
 6fa:	8c 93       	st	X, r24
 6fc:	54 c0       	rjmp	.+168    	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>
		           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
 6fe:	a5 e3       	ldi	r26, 0x35	; 53
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	e5 e3       	ldi	r30, 0x35	; 53
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	48 2f       	mov	r20, r24
 70a:	8b 81       	ldd	r24, Y+3	; 0x03
 70c:	28 2f       	mov	r18, r24
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 2e       	mov	r0, r18
 716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_u8_Set_Pin_Value+0x1c8>
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	0a 94       	dec	r0
 71e:	e2 f7       	brpl	.-8      	; 0x718 <DIO_u8_Set_Pin_Value+0x1c4>
 720:	80 95       	com	r24
 722:	84 23       	and	r24, r20
 724:	8c 93       	st	X, r24
 726:	3f c0       	rjmp	.+126    	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>
		           	     default :Local_u8_Erorr_State = ES_NOK ;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	89 83       	std	Y+1, r24	; 0x01
 72c:	3c c0       	rjmp	.+120    	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>

					}
		   break;
		case DIO_u8_PORTD :
			switch (Copy_u8_Pin_Value)
 72e:	8c 81       	ldd	r24, Y+4	; 0x04
 730:	28 2f       	mov	r18, r24
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	3e 83       	std	Y+6, r19	; 0x06
 736:	2d 83       	std	Y+5, r18	; 0x05
 738:	8d 81       	ldd	r24, Y+5	; 0x05
 73a:	9e 81       	ldd	r25, Y+6	; 0x06
 73c:	00 97       	sbiw	r24, 0x00	; 0
 73e:	c9 f0       	breq	.+50     	; 0x772 <DIO_u8_Set_Pin_Value+0x21e>
 740:	2d 81       	ldd	r18, Y+5	; 0x05
 742:	3e 81       	ldd	r19, Y+6	; 0x06
 744:	21 30       	cpi	r18, 0x01	; 1
 746:	31 05       	cpc	r19, r1
 748:	49 f5       	brne	.+82     	; 0x79c <DIO_u8_Set_Pin_Value+0x248>
						{
						     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
 74a:	a2 e3       	ldi	r26, 0x32	; 50
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	e2 e3       	ldi	r30, 0x32	; 50
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	48 2f       	mov	r20, r24
 756:	8b 81       	ldd	r24, Y+3	; 0x03
 758:	28 2f       	mov	r18, r24
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	02 2e       	mov	r0, r18
 762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_u8_Set_Pin_Value+0x214>
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	0a 94       	dec	r0
 76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_u8_Set_Pin_Value+0x210>
 76c:	84 2b       	or	r24, r20
 76e:	8c 93       	st	X, r24
 770:	1a c0       	rjmp	.+52     	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>
			           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
 772:	a2 e3       	ldi	r26, 0x32	; 50
 774:	b0 e0       	ldi	r27, 0x00	; 0
 776:	e2 e3       	ldi	r30, 0x32	; 50
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	80 81       	ld	r24, Z
 77c:	48 2f       	mov	r20, r24
 77e:	8b 81       	ldd	r24, Y+3	; 0x03
 780:	28 2f       	mov	r18, r24
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	02 2e       	mov	r0, r18
 78a:	02 c0       	rjmp	.+4      	; 0x790 <DIO_u8_Set_Pin_Value+0x23c>
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	0a 94       	dec	r0
 792:	e2 f7       	brpl	.-8      	; 0x78c <DIO_u8_Set_Pin_Value+0x238>
 794:	80 95       	com	r24
 796:	84 23       	and	r24, r20
 798:	8c 93       	st	X, r24
 79a:	05 c0       	rjmp	.+10     	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	89 83       	std	Y+1, r24	; 0x01
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <DIO_u8_Set_Pin_Value+0x252>
						}
			break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8_Erorr_State ;
 7a6:	89 81       	ldd	r24, Y+1	; 0x01
}
 7a8:	2e 96       	adiw	r28, 0x0e	; 14
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	f8 94       	cli
 7ae:	de bf       	out	0x3e, r29	; 62
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	cd bf       	out	0x3d, r28	; 61
 7b4:	cf 91       	pop	r28
 7b6:	df 91       	pop	r29
 7b8:	08 95       	ret

000007ba <DIO_u8_Get_Pin_Value>:

u8 DIO_u8_Get_Pin_Value      (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 *Copy_u8_Returned_Pin_Value ){
 7ba:	df 93       	push	r29
 7bc:	cf 93       	push	r28
 7be:	cd b7       	in	r28, 0x3d	; 61
 7c0:	de b7       	in	r29, 0x3e	; 62
 7c2:	28 97       	sbiw	r28, 0x08	; 8
 7c4:	0f b6       	in	r0, 0x3f	; 63
 7c6:	f8 94       	cli
 7c8:	de bf       	out	0x3e, r29	; 62
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	cd bf       	out	0x3d, r28	; 61
 7ce:	8b 83       	std	Y+3, r24	; 0x03
 7d0:	6c 83       	std	Y+4, r22	; 0x04
 7d2:	5e 83       	std	Y+6, r21	; 0x06
 7d4:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8_Erorr_State = ES_OK ;
 7d6:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Pin_Value ;
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && (Copy_u8_Returned_Pin_Value != NULL)){
 7d8:	8b 81       	ldd	r24, Y+3	; 0x03
 7da:	84 30       	cpi	r24, 0x04	; 4
 7dc:	08 f0       	brcs	.+2      	; 0x7e0 <DIO_u8_Get_Pin_Value+0x26>
 7de:	9e c0       	rjmp	.+316    	; 0x91c <DIO_u8_Get_Pin_Value+0x162>
 7e0:	8c 81       	ldd	r24, Y+4	; 0x04
 7e2:	88 30       	cpi	r24, 0x08	; 8
 7e4:	08 f0       	brcs	.+2      	; 0x7e8 <DIO_u8_Get_Pin_Value+0x2e>
 7e6:	9a c0       	rjmp	.+308    	; 0x91c <DIO_u8_Get_Pin_Value+0x162>
 7e8:	8d 81       	ldd	r24, Y+5	; 0x05
 7ea:	9e 81       	ldd	r25, Y+6	; 0x06
 7ec:	00 97       	sbiw	r24, 0x00	; 0
 7ee:	09 f4       	brne	.+2      	; 0x7f2 <DIO_u8_Get_Pin_Value+0x38>
 7f0:	95 c0       	rjmp	.+298    	; 0x91c <DIO_u8_Get_Pin_Value+0x162>
		switch (Copy_u8_Port_ID)
 7f2:	8b 81       	ldd	r24, Y+3	; 0x03
 7f4:	28 2f       	mov	r18, r24
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	38 87       	std	Y+8, r19	; 0x08
 7fa:	2f 83       	std	Y+7, r18	; 0x07
 7fc:	8f 81       	ldd	r24, Y+7	; 0x07
 7fe:	98 85       	ldd	r25, Y+8	; 0x08
 800:	81 30       	cpi	r24, 0x01	; 1
 802:	91 05       	cpc	r25, r1
 804:	a1 f1       	breq	.+104    	; 0x86e <DIO_u8_Get_Pin_Value+0xb4>
 806:	2f 81       	ldd	r18, Y+7	; 0x07
 808:	38 85       	ldd	r19, Y+8	; 0x08
 80a:	22 30       	cpi	r18, 0x02	; 2
 80c:	31 05       	cpc	r19, r1
 80e:	2c f4       	brge	.+10     	; 0x81a <DIO_u8_Get_Pin_Value+0x60>
 810:	8f 81       	ldd	r24, Y+7	; 0x07
 812:	98 85       	ldd	r25, Y+8	; 0x08
 814:	00 97       	sbiw	r24, 0x00	; 0
 816:	71 f0       	breq	.+28     	; 0x834 <DIO_u8_Get_Pin_Value+0x7a>
 818:	83 c0       	rjmp	.+262    	; 0x920 <DIO_u8_Get_Pin_Value+0x166>
 81a:	2f 81       	ldd	r18, Y+7	; 0x07
 81c:	38 85       	ldd	r19, Y+8	; 0x08
 81e:	22 30       	cpi	r18, 0x02	; 2
 820:	31 05       	cpc	r19, r1
 822:	09 f4       	brne	.+2      	; 0x826 <DIO_u8_Get_Pin_Value+0x6c>
 824:	41 c0       	rjmp	.+130    	; 0x8a8 <DIO_u8_Get_Pin_Value+0xee>
 826:	8f 81       	ldd	r24, Y+7	; 0x07
 828:	98 85       	ldd	r25, Y+8	; 0x08
 82a:	83 30       	cpi	r24, 0x03	; 3
 82c:	91 05       	cpc	r25, r1
 82e:	09 f4       	brne	.+2      	; 0x832 <DIO_u8_Get_Pin_Value+0x78>
 830:	58 c0       	rjmp	.+176    	; 0x8e2 <DIO_u8_Get_Pin_Value+0x128>
 832:	76 c0       	rjmp	.+236    	; 0x920 <DIO_u8_Get_Pin_Value+0x166>
		{
		     case DIO_u8_PORTA :
		      Local_u8_Pin_Value = GET_BIT (DIO_u8_PINA_REG, Copy_u8_Pin_ID) ;
 834:	e9 e3       	ldi	r30, 0x39	; 57
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	48 2f       	mov	r20, r24
 83c:	8c 81       	ldd	r24, Y+4	; 0x04
 83e:	28 2f       	mov	r18, r24
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	02 2e       	mov	r0, r18
 848:	02 c0       	rjmp	.+4      	; 0x84e <DIO_u8_Get_Pin_Value+0x94>
 84a:	88 0f       	add	r24, r24
 84c:	99 1f       	adc	r25, r25
 84e:	0a 94       	dec	r0
 850:	e2 f7       	brpl	.-8      	; 0x84a <DIO_u8_Get_Pin_Value+0x90>
 852:	84 23       	and	r24, r20
 854:	89 83       	std	Y+1, r24	; 0x01

		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
 856:	89 81       	ldd	r24, Y+1	; 0x01
 858:	88 23       	and	r24, r24
 85a:	21 f4       	brne	.+8      	; 0x864 <DIO_u8_Get_Pin_Value+0xaa>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
 85c:	ed 81       	ldd	r30, Y+5	; 0x05
 85e:	fe 81       	ldd	r31, Y+6	; 0x06
 860:	10 82       	st	Z, r1
 862:	5e c0       	rjmp	.+188    	; 0x920 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		    	 else
		    	 {
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
 864:	ed 81       	ldd	r30, Y+5	; 0x05
 866:	fe 81       	ldd	r31, Y+6	; 0x06
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	80 83       	st	Z, r24
 86c:	59 c0       	rjmp	.+178    	; 0x920 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		     break;
		     case DIO_u8_PORTB :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINB_REG,Copy_u8_Pin_ID ) ;
 86e:	e6 e3       	ldi	r30, 0x36	; 54
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 81       	ld	r24, Z
 874:	48 2f       	mov	r20, r24
 876:	8c 81       	ldd	r24, Y+4	; 0x04
 878:	28 2f       	mov	r18, r24
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	02 2e       	mov	r0, r18
 882:	02 c0       	rjmp	.+4      	; 0x888 <DIO_u8_Get_Pin_Value+0xce>
 884:	88 0f       	add	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	0a 94       	dec	r0
 88a:	e2 f7       	brpl	.-8      	; 0x884 <DIO_u8_Get_Pin_Value+0xca>
 88c:	84 23       	and	r24, r20
 88e:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
 890:	89 81       	ldd	r24, Y+1	; 0x01
 892:	88 23       	and	r24, r24
 894:	21 f4       	brne	.+8      	; 0x89e <DIO_u8_Get_Pin_Value+0xe4>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
 896:	ed 81       	ldd	r30, Y+5	; 0x05
 898:	fe 81       	ldd	r31, Y+6	; 0x06
 89a:	10 82       	st	Z, r1
 89c:	41 c0       	rjmp	.+130    	; 0x920 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
 89e:	ed 81       	ldd	r30, Y+5	; 0x05
 8a0:	fe 81       	ldd	r31, Y+6	; 0x06
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	80 83       	st	Z, r24
 8a6:	3c c0       	rjmp	.+120    	; 0x920 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTC :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINC_REG,Copy_u8_Pin_ID ) ;
 8a8:	e3 e3       	ldi	r30, 0x33	; 51
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	80 81       	ld	r24, Z
 8ae:	48 2f       	mov	r20, r24
 8b0:	8c 81       	ldd	r24, Y+4	; 0x04
 8b2:	28 2f       	mov	r18, r24
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	02 2e       	mov	r0, r18
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <DIO_u8_Get_Pin_Value+0x108>
 8be:	88 0f       	add	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	0a 94       	dec	r0
 8c4:	e2 f7       	brpl	.-8      	; 0x8be <DIO_u8_Get_Pin_Value+0x104>
 8c6:	84 23       	and	r24, r20
 8c8:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
 8ca:	89 81       	ldd	r24, Y+1	; 0x01
 8cc:	88 23       	and	r24, r24
 8ce:	21 f4       	brne	.+8      	; 0x8d8 <DIO_u8_Get_Pin_Value+0x11e>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
 8d0:	ed 81       	ldd	r30, Y+5	; 0x05
 8d2:	fe 81       	ldd	r31, Y+6	; 0x06
 8d4:	10 82       	st	Z, r1
 8d6:	24 c0       	rjmp	.+72     	; 0x920 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
 8d8:	ed 81       	ldd	r30, Y+5	; 0x05
 8da:	fe 81       	ldd	r31, Y+6	; 0x06
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	80 83       	st	Z, r24
 8e0:	1f c0       	rjmp	.+62     	; 0x920 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTD :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PIND_REG,Copy_u8_Pin_ID ) ;
 8e2:	e0 e3       	ldi	r30, 0x30	; 48
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	80 81       	ld	r24, Z
 8e8:	48 2f       	mov	r20, r24
 8ea:	8c 81       	ldd	r24, Y+4	; 0x04
 8ec:	28 2f       	mov	r18, r24
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	02 2e       	mov	r0, r18
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <DIO_u8_Get_Pin_Value+0x142>
 8f8:	88 0f       	add	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	0a 94       	dec	r0
 8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <DIO_u8_Get_Pin_Value+0x13e>
 900:	84 23       	and	r24, r20
 902:	89 83       	std	Y+1, r24	; 0x01
		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
 904:	89 81       	ldd	r24, Y+1	; 0x01
 906:	88 23       	and	r24, r24
 908:	21 f4       	brne	.+8      	; 0x912 <DIO_u8_Get_Pin_Value+0x158>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
 90a:	ed 81       	ldd	r30, Y+5	; 0x05
 90c:	fe 81       	ldd	r31, Y+6	; 0x06
 90e:	10 82       	st	Z, r1
 910:	07 c0       	rjmp	.+14     	; 0x920 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
 912:	ed 81       	ldd	r30, Y+5	; 0x05
 914:	fe 81       	ldd	r31, Y+6	; 0x06
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	80 83       	st	Z, r24
 91a:	02 c0       	rjmp	.+4      	; 0x920 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	8a 83       	std	Y+2, r24	; 0x02
		}
		return Local_u8_Erorr_State ;
 920:	8a 81       	ldd	r24, Y+2	; 0x02
}
 922:	28 96       	adiw	r28, 0x08	; 8
 924:	0f b6       	in	r0, 0x3f	; 63
 926:	f8 94       	cli
 928:	de bf       	out	0x3e, r29	; 62
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	cd bf       	out	0x3d, r28	; 61
 92e:	cf 91       	pop	r28
 930:	df 91       	pop	r29
 932:	08 95       	ret

00000934 <DIO_u8_Set_Port_Direction>:

u8 DIO_u8_Set_Port_Direction (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Direction ){
 934:	df 93       	push	r29
 936:	cf 93       	push	r28
 938:	cd b7       	in	r28, 0x3d	; 61
 93a:	de b7       	in	r29, 0x3e	; 62
 93c:	2d 97       	sbiw	r28, 0x0d	; 13
 93e:	0f b6       	in	r0, 0x3f	; 63
 940:	f8 94       	cli
 942:	de bf       	out	0x3e, r29	; 62
 944:	0f be       	out	0x3f, r0	; 63
 946:	cd bf       	out	0x3d, r28	; 61
 948:	8a 83       	std	Y+2, r24	; 0x02
 94a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
 94c:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && ((Copy_u8_Port_Direction == DIO_u8_INPUT)||(Copy_u8_Port_Direction == DIO_u8_OUTPUT)))
 94e:	8a 81       	ldd	r24, Y+2	; 0x02
 950:	84 30       	cpi	r24, 0x04	; 4
 952:	08 f0       	brcs	.+2      	; 0x956 <DIO_u8_Set_Port_Direction+0x22>
 954:	87 c0       	rjmp	.+270    	; 0xa64 <DIO_u8_Set_Port_Direction+0x130>
 956:	8b 81       	ldd	r24, Y+3	; 0x03
 958:	88 23       	and	r24, r24
 95a:	21 f0       	breq	.+8      	; 0x964 <DIO_u8_Set_Port_Direction+0x30>
 95c:	8b 81       	ldd	r24, Y+3	; 0x03
 95e:	81 30       	cpi	r24, 0x01	; 1
 960:	09 f0       	breq	.+2      	; 0x964 <DIO_u8_Set_Port_Direction+0x30>
 962:	80 c0       	rjmp	.+256    	; 0xa64 <DIO_u8_Set_Port_Direction+0x130>
	{
		switch (Copy_u8_Port_ID)
 964:	8a 81       	ldd	r24, Y+2	; 0x02
 966:	28 2f       	mov	r18, r24
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	3d 87       	std	Y+13, r19	; 0x0d
 96c:	2c 87       	std	Y+12, r18	; 0x0c
 96e:	8c 85       	ldd	r24, Y+12	; 0x0c
 970:	9d 85       	ldd	r25, Y+13	; 0x0d
 972:	81 30       	cpi	r24, 0x01	; 1
 974:	91 05       	cpc	r25, r1
 976:	71 f1       	breq	.+92     	; 0x9d4 <DIO_u8_Set_Port_Direction+0xa0>
 978:	2c 85       	ldd	r18, Y+12	; 0x0c
 97a:	3d 85       	ldd	r19, Y+13	; 0x0d
 97c:	22 30       	cpi	r18, 0x02	; 2
 97e:	31 05       	cpc	r19, r1
 980:	2c f4       	brge	.+10     	; 0x98c <DIO_u8_Set_Port_Direction+0x58>
 982:	8c 85       	ldd	r24, Y+12	; 0x0c
 984:	9d 85       	ldd	r25, Y+13	; 0x0d
 986:	00 97       	sbiw	r24, 0x00	; 0
 988:	69 f0       	breq	.+26     	; 0x9a4 <DIO_u8_Set_Port_Direction+0x70>
 98a:	69 c0       	rjmp	.+210    	; 0xa5e <DIO_u8_Set_Port_Direction+0x12a>
 98c:	2c 85       	ldd	r18, Y+12	; 0x0c
 98e:	3d 85       	ldd	r19, Y+13	; 0x0d
 990:	22 30       	cpi	r18, 0x02	; 2
 992:	31 05       	cpc	r19, r1
 994:	b1 f1       	breq	.+108    	; 0xa02 <DIO_u8_Set_Port_Direction+0xce>
 996:	8c 85       	ldd	r24, Y+12	; 0x0c
 998:	9d 85       	ldd	r25, Y+13	; 0x0d
 99a:	83 30       	cpi	r24, 0x03	; 3
 99c:	91 05       	cpc	r25, r1
 99e:	09 f4       	brne	.+2      	; 0x9a2 <DIO_u8_Set_Port_Direction+0x6e>
 9a0:	47 c0       	rjmp	.+142    	; 0xa30 <DIO_u8_Set_Port_Direction+0xfc>
 9a2:	5d c0       	rjmp	.+186    	; 0xa5e <DIO_u8_Set_Port_Direction+0x12a>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Port_Direction)
 9a4:	8b 81       	ldd	r24, Y+3	; 0x03
 9a6:	28 2f       	mov	r18, r24
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	3b 87       	std	Y+11, r19	; 0x0b
 9ac:	2a 87       	std	Y+10, r18	; 0x0a
 9ae:	8a 85       	ldd	r24, Y+10	; 0x0a
 9b0:	9b 85       	ldd	r25, Y+11	; 0x0b
 9b2:	00 97       	sbiw	r24, 0x00	; 0
 9b4:	59 f0       	breq	.+22     	; 0x9cc <DIO_u8_Set_Port_Direction+0x98>
 9b6:	2a 85       	ldd	r18, Y+10	; 0x0a
 9b8:	3b 85       	ldd	r19, Y+11	; 0x0b
 9ba:	21 30       	cpi	r18, 0x01	; 1
 9bc:	31 05       	cpc	r19, r1
 9be:	09 f0       	breq	.+2      	; 0x9c2 <DIO_u8_Set_Port_Direction+0x8e>
 9c0:	53 c0       	rjmp	.+166    	; 0xa68 <DIO_u8_Set_Port_Direction+0x134>
			{
			    case DIO_u8_OUTPUT : DIO_u8_PORTA_REG = 0xff;break;
 9c2:	eb e3       	ldi	r30, 0x3B	; 59
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	8f ef       	ldi	r24, 0xFF	; 255
 9c8:	80 83       	st	Z, r24
 9ca:	4e c0       	rjmp	.+156    	; 0xa68 <DIO_u8_Set_Port_Direction+0x134>
			    case DIO_u8_INPUT : DIO_u8_PORTA_REG = 0x00;break;
 9cc:	eb e3       	ldi	r30, 0x3B	; 59
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	10 82       	st	Z, r1
 9d2:	4a c0       	rjmp	.+148    	; 0xa68 <DIO_u8_Set_Port_Direction+0x134>
			}
			break;
			case DIO_u8_PORTB :
				switch (Copy_u8_Port_Direction)
 9d4:	8b 81       	ldd	r24, Y+3	; 0x03
 9d6:	28 2f       	mov	r18, r24
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	39 87       	std	Y+9, r19	; 0x09
 9dc:	28 87       	std	Y+8, r18	; 0x08
 9de:	88 85       	ldd	r24, Y+8	; 0x08
 9e0:	99 85       	ldd	r25, Y+9	; 0x09
 9e2:	00 97       	sbiw	r24, 0x00	; 0
 9e4:	51 f0       	breq	.+20     	; 0x9fa <DIO_u8_Set_Port_Direction+0xc6>
 9e6:	28 85       	ldd	r18, Y+8	; 0x08
 9e8:	39 85       	ldd	r19, Y+9	; 0x09
 9ea:	21 30       	cpi	r18, 0x01	; 1
 9ec:	31 05       	cpc	r19, r1
 9ee:	e1 f5       	brne	.+120    	; 0xa68 <DIO_u8_Set_Port_Direction+0x134>
				{
				    case DIO_u8_OUTPUT : DIO_u8_PORTB_REG = 0xff;break;
 9f0:	e8 e3       	ldi	r30, 0x38	; 56
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	8f ef       	ldi	r24, 0xFF	; 255
 9f6:	80 83       	st	Z, r24
 9f8:	37 c0       	rjmp	.+110    	; 0xa68 <DIO_u8_Set_Port_Direction+0x134>
				    case DIO_u8_INPUT : DIO_u8_PORTB_REG = 0x00;break;
 9fa:	e8 e3       	ldi	r30, 0x38	; 56
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	10 82       	st	Z, r1
 a00:	33 c0       	rjmp	.+102    	; 0xa68 <DIO_u8_Set_Port_Direction+0x134>
				}
				break;
				case DIO_u8_PORTC :
					switch (Copy_u8_Port_Direction)
 a02:	8b 81       	ldd	r24, Y+3	; 0x03
 a04:	28 2f       	mov	r18, r24
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	3f 83       	std	Y+7, r19	; 0x07
 a0a:	2e 83       	std	Y+6, r18	; 0x06
 a0c:	8e 81       	ldd	r24, Y+6	; 0x06
 a0e:	9f 81       	ldd	r25, Y+7	; 0x07
 a10:	00 97       	sbiw	r24, 0x00	; 0
 a12:	51 f0       	breq	.+20     	; 0xa28 <DIO_u8_Set_Port_Direction+0xf4>
 a14:	2e 81       	ldd	r18, Y+6	; 0x06
 a16:	3f 81       	ldd	r19, Y+7	; 0x07
 a18:	21 30       	cpi	r18, 0x01	; 1
 a1a:	31 05       	cpc	r19, r1
 a1c:	29 f5       	brne	.+74     	; 0xa68 <DIO_u8_Set_Port_Direction+0x134>
					{
					    case DIO_u8_OUTPUT : DIO_u8_PORTC_REG = 0xff;break;
 a1e:	e5 e3       	ldi	r30, 0x35	; 53
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	8f ef       	ldi	r24, 0xFF	; 255
 a24:	80 83       	st	Z, r24
 a26:	20 c0       	rjmp	.+64     	; 0xa68 <DIO_u8_Set_Port_Direction+0x134>
					    case DIO_u8_INPUT : DIO_u8_PORTC_REG = 0x00;break;
 a28:	e5 e3       	ldi	r30, 0x35	; 53
 a2a:	f0 e0       	ldi	r31, 0x00	; 0
 a2c:	10 82       	st	Z, r1
 a2e:	1c c0       	rjmp	.+56     	; 0xa68 <DIO_u8_Set_Port_Direction+0x134>
					}
					break;
					case DIO_u8_PORTD :
						switch (Copy_u8_Port_Direction)
 a30:	8b 81       	ldd	r24, Y+3	; 0x03
 a32:	28 2f       	mov	r18, r24
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	3d 83       	std	Y+5, r19	; 0x05
 a38:	2c 83       	std	Y+4, r18	; 0x04
 a3a:	8c 81       	ldd	r24, Y+4	; 0x04
 a3c:	9d 81       	ldd	r25, Y+5	; 0x05
 a3e:	00 97       	sbiw	r24, 0x00	; 0
 a40:	51 f0       	breq	.+20     	; 0xa56 <DIO_u8_Set_Port_Direction+0x122>
 a42:	2c 81       	ldd	r18, Y+4	; 0x04
 a44:	3d 81       	ldd	r19, Y+5	; 0x05
 a46:	21 30       	cpi	r18, 0x01	; 1
 a48:	31 05       	cpc	r19, r1
 a4a:	71 f4       	brne	.+28     	; 0xa68 <DIO_u8_Set_Port_Direction+0x134>
						{
						    case DIO_u8_OUTPUT : DIO_u8_PORTD_REG = 0xff;break;
 a4c:	e2 e3       	ldi	r30, 0x32	; 50
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	80 83       	st	Z, r24
 a54:	09 c0       	rjmp	.+18     	; 0xa68 <DIO_u8_Set_Port_Direction+0x134>
						    case DIO_u8_INPUT : DIO_u8_PORTD_REG = 0x00;break;
 a56:	e2 e3       	ldi	r30, 0x32	; 50
 a58:	f0 e0       	ldi	r31, 0x00	; 0
 a5a:	10 82       	st	Z, r1
 a5c:	05 c0       	rjmp	.+10     	; 0xa68 <DIO_u8_Set_Port_Direction+0x134>
						}
						break;
						default:Local_u8_Erorr_State = ES_NOK ;
 a5e:	81 e0       	ldi	r24, 0x01	; 1
 a60:	89 83       	std	Y+1, r24	; 0x01
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <DIO_u8_Set_Port_Direction+0x134>

		}
	}
	else {
				Local_u8_Erorr_State = ES_NOK ;
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
 a68:	89 81       	ldd	r24, Y+1	; 0x01

}
 a6a:	2d 96       	adiw	r28, 0x0d	; 13
 a6c:	0f b6       	in	r0, 0x3f	; 63
 a6e:	f8 94       	cli
 a70:	de bf       	out	0x3e, r29	; 62
 a72:	0f be       	out	0x3f, r0	; 63
 a74:	cd bf       	out	0x3d, r28	; 61
 a76:	cf 91       	pop	r28
 a78:	df 91       	pop	r29
 a7a:	08 95       	ret

00000a7c <DIO_u8_Set_Port_Value>:

u8 DIO_u8_Set_Port_Value     (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Value ){
 a7c:	df 93       	push	r29
 a7e:	cf 93       	push	r28
 a80:	00 d0       	rcall	.+0      	; 0xa82 <DIO_u8_Set_Port_Value+0x6>
 a82:	00 d0       	rcall	.+0      	; 0xa84 <DIO_u8_Set_Port_Value+0x8>
 a84:	0f 92       	push	r0
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
 a8a:	8a 83       	std	Y+2, r24	; 0x02
 a8c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
 a8e:	19 82       	std	Y+1, r1	; 0x01

			switch (Copy_u8_Port_ID)
 a90:	8a 81       	ldd	r24, Y+2	; 0x02
 a92:	28 2f       	mov	r18, r24
 a94:	30 e0       	ldi	r19, 0x00	; 0
 a96:	3d 83       	std	Y+5, r19	; 0x05
 a98:	2c 83       	std	Y+4, r18	; 0x04
 a9a:	8c 81       	ldd	r24, Y+4	; 0x04
 a9c:	9d 81       	ldd	r25, Y+5	; 0x05
 a9e:	81 30       	cpi	r24, 0x01	; 1
 aa0:	91 05       	cpc	r25, r1
 aa2:	d1 f0       	breq	.+52     	; 0xad8 <DIO_u8_Set_Port_Value+0x5c>
 aa4:	2c 81       	ldd	r18, Y+4	; 0x04
 aa6:	3d 81       	ldd	r19, Y+5	; 0x05
 aa8:	22 30       	cpi	r18, 0x02	; 2
 aaa:	31 05       	cpc	r19, r1
 aac:	2c f4       	brge	.+10     	; 0xab8 <DIO_u8_Set_Port_Value+0x3c>
 aae:	8c 81       	ldd	r24, Y+4	; 0x04
 ab0:	9d 81       	ldd	r25, Y+5	; 0x05
 ab2:	00 97       	sbiw	r24, 0x00	; 0
 ab4:	61 f0       	breq	.+24     	; 0xace <DIO_u8_Set_Port_Value+0x52>
 ab6:	1f c0       	rjmp	.+62     	; 0xaf6 <DIO_u8_Set_Port_Value+0x7a>
 ab8:	2c 81       	ldd	r18, Y+4	; 0x04
 aba:	3d 81       	ldd	r19, Y+5	; 0x05
 abc:	22 30       	cpi	r18, 0x02	; 2
 abe:	31 05       	cpc	r19, r1
 ac0:	81 f0       	breq	.+32     	; 0xae2 <DIO_u8_Set_Port_Value+0x66>
 ac2:	8c 81       	ldd	r24, Y+4	; 0x04
 ac4:	9d 81       	ldd	r25, Y+5	; 0x05
 ac6:	83 30       	cpi	r24, 0x03	; 3
 ac8:	91 05       	cpc	r25, r1
 aca:	81 f0       	breq	.+32     	; 0xaec <DIO_u8_Set_Port_Value+0x70>
 acc:	14 c0       	rjmp	.+40     	; 0xaf6 <DIO_u8_Set_Port_Value+0x7a>
			{
			case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8_Port_Value; break;
 ace:	eb e3       	ldi	r30, 0x3B	; 59
 ad0:	f0 e0       	ldi	r31, 0x00	; 0
 ad2:	8b 81       	ldd	r24, Y+3	; 0x03
 ad4:	80 83       	st	Z, r24
 ad6:	11 c0       	rjmp	.+34     	; 0xafa <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8_Port_Value; break;
 ad8:	e8 e3       	ldi	r30, 0x38	; 56
 ada:	f0 e0       	ldi	r31, 0x00	; 0
 adc:	8b 81       	ldd	r24, Y+3	; 0x03
 ade:	80 83       	st	Z, r24
 ae0:	0c c0       	rjmp	.+24     	; 0xafa <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8_Port_Value; break;
 ae2:	e5 e3       	ldi	r30, 0x35	; 53
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	8b 81       	ldd	r24, Y+3	; 0x03
 ae8:	80 83       	st	Z, r24
 aea:	07 c0       	rjmp	.+14     	; 0xafa <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8_Port_Value; break;
 aec:	e2 e3       	ldi	r30, 0x32	; 50
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	8b 81       	ldd	r24, Y+3	; 0x03
 af2:	80 83       	st	Z, r24
 af4:	02 c0       	rjmp	.+4      	; 0xafa <DIO_u8_Set_Port_Value+0x7e>
			default :Local_u8_Erorr_State = ES_NOK;
 af6:	81 e0       	ldi	r24, 0x01	; 1
 af8:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
 afa:	89 81       	ldd	r24, Y+1	; 0x01

}
 afc:	0f 90       	pop	r0
 afe:	0f 90       	pop	r0
 b00:	0f 90       	pop	r0
 b02:	0f 90       	pop	r0
 b04:	0f 90       	pop	r0
 b06:	cf 91       	pop	r28
 b08:	df 91       	pop	r29
 b0a:	08 95       	ret

00000b0c <DIO_u8_Get_Port_Value>:

u8 DIO_u8_Get_Port_Value     (u8 Copy_u8_Port_ID, u8 * Copy_u8_Returned_Port_Value ){
 b0c:	df 93       	push	r29
 b0e:	cf 93       	push	r28
 b10:	00 d0       	rcall	.+0      	; 0xb12 <DIO_u8_Get_Port_Value+0x6>
 b12:	00 d0       	rcall	.+0      	; 0xb14 <DIO_u8_Get_Port_Value+0x8>
 b14:	00 d0       	rcall	.+0      	; 0xb16 <DIO_u8_Get_Port_Value+0xa>
 b16:	cd b7       	in	r28, 0x3d	; 61
 b18:	de b7       	in	r29, 0x3e	; 62
 b1a:	8a 83       	std	Y+2, r24	; 0x02
 b1c:	7c 83       	std	Y+4, r23	; 0x04
 b1e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
 b20:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8_Returned_Port_Value != NULL){
 b22:	8b 81       	ldd	r24, Y+3	; 0x03
 b24:	9c 81       	ldd	r25, Y+4	; 0x04
 b26:	00 97       	sbiw	r24, 0x00	; 0
 b28:	09 f4       	brne	.+2      	; 0xb2c <DIO_u8_Get_Port_Value+0x20>
 b2a:	3e c0       	rjmp	.+124    	; 0xba8 <DIO_u8_Get_Port_Value+0x9c>
		switch (Copy_u8_Port_ID)
 b2c:	8a 81       	ldd	r24, Y+2	; 0x02
 b2e:	28 2f       	mov	r18, r24
 b30:	30 e0       	ldi	r19, 0x00	; 0
 b32:	3e 83       	std	Y+6, r19	; 0x06
 b34:	2d 83       	std	Y+5, r18	; 0x05
 b36:	8d 81       	ldd	r24, Y+5	; 0x05
 b38:	9e 81       	ldd	r25, Y+6	; 0x06
 b3a:	81 30       	cpi	r24, 0x01	; 1
 b3c:	91 05       	cpc	r25, r1
 b3e:	e1 f0       	breq	.+56     	; 0xb78 <DIO_u8_Get_Port_Value+0x6c>
 b40:	2d 81       	ldd	r18, Y+5	; 0x05
 b42:	3e 81       	ldd	r19, Y+6	; 0x06
 b44:	22 30       	cpi	r18, 0x02	; 2
 b46:	31 05       	cpc	r19, r1
 b48:	2c f4       	brge	.+10     	; 0xb54 <DIO_u8_Get_Port_Value+0x48>
 b4a:	8d 81       	ldd	r24, Y+5	; 0x05
 b4c:	9e 81       	ldd	r25, Y+6	; 0x06
 b4e:	00 97       	sbiw	r24, 0x00	; 0
 b50:	61 f0       	breq	.+24     	; 0xb6a <DIO_u8_Get_Port_Value+0x5e>
 b52:	27 c0       	rjmp	.+78     	; 0xba2 <DIO_u8_Get_Port_Value+0x96>
 b54:	2d 81       	ldd	r18, Y+5	; 0x05
 b56:	3e 81       	ldd	r19, Y+6	; 0x06
 b58:	22 30       	cpi	r18, 0x02	; 2
 b5a:	31 05       	cpc	r19, r1
 b5c:	a1 f0       	breq	.+40     	; 0xb86 <DIO_u8_Get_Port_Value+0x7a>
 b5e:	8d 81       	ldd	r24, Y+5	; 0x05
 b60:	9e 81       	ldd	r25, Y+6	; 0x06
 b62:	83 30       	cpi	r24, 0x03	; 3
 b64:	91 05       	cpc	r25, r1
 b66:	b1 f0       	breq	.+44     	; 0xb94 <DIO_u8_Get_Port_Value+0x88>
 b68:	1c c0       	rjmp	.+56     	; 0xba2 <DIO_u8_Get_Port_Value+0x96>
		{
		case DIO_u8_PORTA :* Copy_u8_Returned_Port_Value =DIO_u8_PORTA_REG; break;
 b6a:	eb e3       	ldi	r30, 0x3B	; 59
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	eb 81       	ldd	r30, Y+3	; 0x03
 b72:	fc 81       	ldd	r31, Y+4	; 0x04
 b74:	80 83       	st	Z, r24
 b76:	1a c0       	rjmp	.+52     	; 0xbac <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTB :* Copy_u8_Returned_Port_Value =DIO_u8_PORTB_REG; break;
 b78:	e8 e3       	ldi	r30, 0x38	; 56
 b7a:	f0 e0       	ldi	r31, 0x00	; 0
 b7c:	80 81       	ld	r24, Z
 b7e:	eb 81       	ldd	r30, Y+3	; 0x03
 b80:	fc 81       	ldd	r31, Y+4	; 0x04
 b82:	80 83       	st	Z, r24
 b84:	13 c0       	rjmp	.+38     	; 0xbac <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTC :* Copy_u8_Returned_Port_Value =DIO_u8_PORTC_REG; break;
 b86:	e5 e3       	ldi	r30, 0x35	; 53
 b88:	f0 e0       	ldi	r31, 0x00	; 0
 b8a:	80 81       	ld	r24, Z
 b8c:	eb 81       	ldd	r30, Y+3	; 0x03
 b8e:	fc 81       	ldd	r31, Y+4	; 0x04
 b90:	80 83       	st	Z, r24
 b92:	0c c0       	rjmp	.+24     	; 0xbac <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTD :* Copy_u8_Returned_Port_Value =DIO_u8_PORTD_REG; break;
 b94:	e2 e3       	ldi	r30, 0x32	; 50
 b96:	f0 e0       	ldi	r31, 0x00	; 0
 b98:	80 81       	ld	r24, Z
 b9a:	eb 81       	ldd	r30, Y+3	; 0x03
 b9c:	fc 81       	ldd	r31, Y+4	; 0x04
 b9e:	80 83       	st	Z, r24
 ba0:	05 c0       	rjmp	.+10     	; 0xbac <DIO_u8_Get_Port_Value+0xa0>
		default :Local_u8_Erorr_State = ES_NOK;
 ba2:	81 e0       	ldi	r24, 0x01	; 1
 ba4:	89 83       	std	Y+1, r24	; 0x01
 ba6:	02 c0       	rjmp	.+4      	; 0xbac <DIO_u8_Get_Port_Value+0xa0>
		}}
		else {
			Local_u8_Erorr_State = ES_NOK ;
 ba8:	81 e0       	ldi	r24, 0x01	; 1
 baa:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8_Erorr_State ;
 bac:	89 81       	ldd	r24, Y+1	; 0x01

}
 bae:	26 96       	adiw	r28, 0x06	; 6
 bb0:	0f b6       	in	r0, 0x3f	; 63
 bb2:	f8 94       	cli
 bb4:	de bf       	out	0x3e, r29	; 62
 bb6:	0f be       	out	0x3f, r0	; 63
 bb8:	cd bf       	out	0x3d, r28	; 61
 bba:	cf 91       	pop	r28
 bbc:	df 91       	pop	r29
 bbe:	08 95       	ret

00000bc0 <main>:

#include<util/delay.h>


#define string_check  "#h#"
int main(){
 bc0:	df 93       	push	r29
 bc2:	cf 93       	push	r28
 bc4:	00 d0       	rcall	.+0      	; 0xbc6 <main+0x6>
 bc6:	00 d0       	rcall	.+0      	; 0xbc8 <main+0x8>
 bc8:	cd b7       	in	r28, 0x3d	; 61
 bca:	de b7       	in	r29, 0x3e	; 62
	u8 data,string;
	DIO_voidInit();
 bcc:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_voidInit>
	UART_enum_INIT();
 bd0:	0e 94 41 00 	call	0x82	; 0x82 <UART_enum_INIT>
//	DIO_u8_Set_Port_Direction(DIO_u8_PORTA,DIO_u8_OUTPUT);
//	DIO_u8_Set_Port_Value(DIO_u8_PORTA,DIO_u8_LOW);

	DIO_u8_Set_Pin_Direction(DIO_u8_PORTD,DIO_u8_PIN0,DIO_u8_INPUT);
 bd4:	83 e0       	ldi	r24, 0x03	; 3
 bd6:	60 e0       	ldi	r22, 0x00	; 0
 bd8:	40 e0       	ldi	r20, 0x00	; 0
 bda:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_u8_Set_Pin_Direction>
	DIO_u8_Set_Pin_Direction(DIO_u8_PORTD,DIO_u8_PIN1,DIO_u8_OUTPUT);
 bde:	83 e0       	ldi	r24, 0x03	; 3
 be0:	61 e0       	ldi	r22, 0x01	; 1
 be2:	41 e0       	ldi	r20, 0x01	; 1
 be4:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_u8_Set_Pin_Direction>
//test
//	DIO_u8_Set_Pin_Value(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);

//print in terminal
	UART_enum_Send_String("enter r , y or g ");
 be8:	80 e6       	ldi	r24, 0x60	; 96
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 db 00 	call	0x1b6	; 0x1b6 <UART_enum_Send_String>
	while(1){
	UART_enum_RECIEVE_String (&string);
 bf0:	ce 01       	movw	r24, r28
 bf2:	02 96       	adiw	r24, 0x02	; 2
 bf4:	0e 94 17 01 	call	0x22e	; 0x22e <UART_enum_RECIEVE_String>
UART_enum_RECIEVE_Byte(&data);
 bf8:	ce 01       	movw	r24, r28
 bfa:	01 96       	adiw	r24, 0x01	; 1
 bfc:	0e 94 b9 00 	call	0x172	; 0x172 <UART_enum_RECIEVE_Byte>

switch(data){
 c00:	89 81       	ldd	r24, Y+1	; 0x01
 c02:	28 2f       	mov	r18, r24
 c04:	30 e0       	ldi	r19, 0x00	; 0
 c06:	3c 83       	std	Y+4, r19	; 0x04
 c08:	2b 83       	std	Y+3, r18	; 0x03
 c0a:	8b 81       	ldd	r24, Y+3	; 0x03
 c0c:	9c 81       	ldd	r25, Y+4	; 0x04
 c0e:	82 37       	cpi	r24, 0x72	; 114
 c10:	91 05       	cpc	r25, r1
 c12:	59 f0       	breq	.+22     	; 0xc2a <main+0x6a>
 c14:	2b 81       	ldd	r18, Y+3	; 0x03
 c16:	3c 81       	ldd	r19, Y+4	; 0x04
 c18:	29 37       	cpi	r18, 0x79	; 121
 c1a:	31 05       	cpc	r19, r1
 c1c:	61 f0       	breq	.+24     	; 0xc36 <main+0x76>
 c1e:	8b 81       	ldd	r24, Y+3	; 0x03
 c20:	9c 81       	ldd	r25, Y+4	; 0x04
 c22:	87 36       	cpi	r24, 0x67	; 103
 c24:	91 05       	cpc	r25, r1
 c26:	69 f0       	breq	.+26     	; 0xc42 <main+0x82>
 c28:	11 c0       	rjmp	.+34     	; 0xc4c <main+0x8c>
case 'r':	DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
 c2a:	80 e0       	ldi	r24, 0x00	; 0
 c2c:	60 e0       	ldi	r22, 0x00	; 0
 c2e:	41 e0       	ldi	r20, 0x01	; 1
 c30:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_u8_Set_Pin_Value>
 c34:	0b c0       	rjmp	.+22     	; 0xc4c <main+0x8c>
break;
case 'y':	DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_HIGH);
 c36:	80 e0       	ldi	r24, 0x00	; 0
 c38:	61 e0       	ldi	r22, 0x01	; 1
 c3a:	41 e0       	ldi	r20, 0x01	; 1
 c3c:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_u8_Set_Pin_Value>
 c40:	05 c0       	rjmp	.+10     	; 0xc4c <main+0x8c>
break;
case 'g':	DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_HIGH);
 c42:	80 e0       	ldi	r24, 0x00	; 0
 c44:	62 e0       	ldi	r22, 0x02	; 2
 c46:	41 e0       	ldi	r20, 0x01	; 1
 c48:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_u8_Set_Pin_Value>
break;
}

if(string==string_check){
 c4c:	8a 81       	ldd	r24, Y+2	; 0x02
 c4e:	88 2f       	mov	r24, r24
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	20 e0       	ldi	r18, 0x00	; 0
 c54:	82 37       	cpi	r24, 0x72	; 114
 c56:	92 07       	cpc	r25, r18
 c58:	59 f6       	brne	.-106    	; 0xbf0 <main+0x30>
	DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_HIGH);
 c5a:	80 e0       	ldi	r24, 0x00	; 0
 c5c:	63 e0       	ldi	r22, 0x03	; 3
 c5e:	41 e0       	ldi	r20, 0x01	; 1
 c60:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_u8_Set_Pin_Value>
 c64:	c5 cf       	rjmp	.-118    	; 0xbf0 <main+0x30>

00000c66 <_exit>:
 c66:	f8 94       	cli

00000c68 <__stop_program>:
 c68:	ff cf       	rjmp	.-2      	; 0xc68 <__stop_program>

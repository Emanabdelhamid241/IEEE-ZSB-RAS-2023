
UART_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c2e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000c2e  00000ca2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000012e4  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bb9  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 b8 05 	call	0xb70	; 0xb70 <main>
  7a:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_enum_INIT>:
#include "../../MCAL/1-DIO/DIO_interface.h"


#include<util/delay.h>
ES_t  UART_enum_INIT (void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <UART_enum_INIT+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <UART_enum_INIT+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State= ES_OK;
  8e:	1c 82       	std	Y+4, r1	; 0x04
	u16 local_u16_baud_rate_value = UART_u8_inital_baud_rate_9600;
  90:	87 e6       	ldi	r24, 0x67	; 103
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	9b 83       	std	Y+3, r25	; 0x03
  96:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8_UCSRC_value= UART_INTIAL_UCSRC_value;
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	89 83       	std	Y+1, r24	; 0x01

    /*baud rate = 9600*/
    UART_u8_UBRRL_REG= (u8)local_u16_baud_rate_value;
  9c:	e9 e2       	ldi	r30, 0x29	; 41
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	8a 81       	ldd	r24, Y+2	; 0x02
  a2:	80 83       	st	Z, r24
    UART_u8_UBRRH_REG= (u8)(local_u16_baud_rate_value >> no_of_bit_of_one_byte);
  a4:	e0 e4       	ldi	r30, 0x40	; 64
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	9b 81       	ldd	r25, Y+3	; 0x03
  ac:	89 2f       	mov	r24, r25
  ae:	99 27       	eor	r25, r25
  b0:	80 83       	st	Z, r24

     /*Normal speed*/
	CLR_BIT(UART_u8_UCSRA_REG,UART_u8_U2X_BIT1);
  b2:	ab e2       	ldi	r26, 0x2B	; 43
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	eb e2       	ldi	r30, 0x2B	; 43
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	8d 7f       	andi	r24, 0xFD	; 253
  be:	8c 93       	st	X, r24

	/*Disable MPCM */
	CLR_BIT (UART_u8_UCSRA_REG ,UART_u8_MPCM_BIT0);
  c0:	ab e2       	ldi	r26, 0x2B	; 43
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	eb e2       	ldi	r30, 0x2B	; 43
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	8c 93       	st	X, r24

	/*Enable Rx ,Tx*/
	SET_BIT(UART_u8_UCSRB_REG,UART_u8_TXEN_BIT3);
  ce:	aa e2       	ldi	r26, 0x2A	; 42
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	ea e2       	ldi	r30, 0x2A	; 42
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG,UART_u8_RXEN_BIT4);
  dc:	aa e2       	ldi	r26, 0x2A	; 42
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	ea e2       	ldi	r30, 0x2A	; 42
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	8c 93       	st	X, r24


	/*Select 8 bit */
	CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSZ2_BIT2);
  ea:	aa e2       	ldi	r26, 0x2A	; 42
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	ea e2       	ldi	r30, 0x2A	; 42
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8b 7f       	andi	r24, 0xFB	; 251
  f6:	8c 93       	st	X, r24
	SET_BIT(local_u8_UCSRC_value,UART_u8_UCSZ0_BIT1);
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_u8_UCSRC_value,UART_u8_UCSZ1_BIT2);
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	84 60       	ori	r24, 0x04	; 4
 102:	89 83       	std	Y+1, r24	; 0x01

     /*Select Asynch Mode */
	CLR_BIT(local_u8_UCSRC_value,UART_u8_UMSEL_BIT6);
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	8f 7b       	andi	r24, 0xBF	; 191
 108:	89 83       	std	Y+1, r24	; 0x01

	/*NO Parity Bit*/
	CLR_BIT(local_u8_UCSRC_value,UART_u8_UPM0_BIT4);
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(local_u8_UCSRC_value,UART_u8_UPM1_BIT5);
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	8f 7d       	andi	r24, 0xDF	; 223
 114:	89 83       	std	Y+1, r24	; 0x01

	/*Enable 2 Stop Bits*/
	SET_BIT(local_u8_UCSRC_value,UART_u8_USBS_BIT3);
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	89 83       	std	Y+1, r24	; 0x01

    /*Update UCSRC REG*/
	UART_u8_UCSRC_REG=local_u8_UCSRC_value;
 11c:	e0 e4       	ldi	r30, 0x40	; 64
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	80 83       	st	Z, r24


	//test
	DIO_u8_Set_Pin_Value(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	0e 94 82 02 	call	0x504	; 0x504 <DIO_u8_Set_Pin_Value>

	return Local_enu_Erorr_State;
 12e:	8c 81       	ldd	r24, Y+4	; 0x04
}
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	08 95       	ret

0000013e <UART_enum_SEND_Byte>:
ES_t  UART_enum_SEND_Byte (u8 copy_UART_u8_data_byte)
{
 13e:	df 93       	push	r29
 140:	cf 93       	push	r28
 142:	00 d0       	rcall	.+0      	; 0x144 <UART_enum_SEND_Byte+0x6>
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
 14a:	19 82       	std	Y+1, r1	; 0x01
     /* wait until the transmit reg is empty*/
	while (GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT5)==0);
 14c:	eb e2       	ldi	r30, 0x2B	; 43
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 2f       	mov	r24, r24
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	80 72       	andi	r24, 0x20	; 32
 158:	90 70       	andi	r25, 0x00	; 0
 15a:	00 97       	sbiw	r24, 0x00	; 0
 15c:	b9 f3       	breq	.-18     	; 0x14c <UART_enum_SEND_Byte+0xe>

	/* send data byte */
	UART_u8_UDR_REG=copy_UART_u8_data_byte;
 15e:	ec e2       	ldi	r30, 0x2C	; 44
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	80 83       	st	Z, r24
	return Local_enu_Erorr_State;
 166:	89 81       	ldd	r24, Y+1	; 0x01

}
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	08 95       	ret

00000172 <UART_enum_RECIEVE_Byte>:
ES_t  UART_enum_RECIEVE_Byte (u8 *copy_UART_pu8_recieve_byte)
{
 172:	df 93       	push	r29
 174:	cf 93       	push	r28
 176:	00 d0       	rcall	.+0      	; 0x178 <UART_enum_RECIEVE_Byte+0x6>
 178:	0f 92       	push	r0
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	9b 83       	std	Y+3, r25	; 0x03
 180:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
 182:	19 82       	std	Y+1, r1	; 0x01

	if(copy_UART_pu8_recieve_byte != NULL)
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	9b 81       	ldd	r25, Y+3	; 0x03
 188:	00 97       	sbiw	r24, 0x00	; 0
 18a:	61 f0       	breq	.+24     	; 0x1a4 <UART_enum_RECIEVE_Byte+0x32>
	{
//		DIO_u8_Set_Pin_Value(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);

	/* wait until the data is recieved */
	while (!GET_BIT(UART_u8_UCSRA_REG,UART_u8_RXC_BIT7));
 18c:	eb e2       	ldi	r30, 0x2B	; 43
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	88 23       	and	r24, r24
 194:	dc f7       	brge	.-10     	; 0x18c <UART_enum_RECIEVE_Byte+0x1a>

	/* read data byte*/
	*copy_UART_pu8_recieve_byte=UART_u8_UDR_REG;
 196:	ec e2       	ldi	r30, 0x2C	; 44
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	ea 81       	ldd	r30, Y+2	; 0x02
 19e:	fb 81       	ldd	r31, Y+3	; 0x03
 1a0:	80 83       	st	Z, r24
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <UART_enum_RECIEVE_Byte+0x36>


	}
	else{

			Local_enu_Erorr_State = ES_NOK;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	89 83       	std	Y+1, r24	; 0x01
		    }
	return Local_enu_Erorr_State;
 1a8:	89 81       	ldd	r24, Y+1	; 0x01



}
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	08 95       	ret

000001b6 <UART_enum_Send_String>:

ES_t UART_enum_Send_String(u8 *copy_pu8_string)
{
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <UART_enum_Send_String+0x6>
 1bc:	00 d0       	rcall	.+0      	; 0x1be <UART_enum_Send_String+0x8>
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	9c 83       	std	Y+4, r25	; 0x04
 1c4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enu_Erorr_State= ES_OK;
 1c6:	1a 82       	std	Y+2, r1	; 0x02
	if(copy_pu8_string!= NULL){
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	9c 81       	ldd	r25, Y+4	; 0x04
 1cc:	00 97       	sbiw	r24, 0x00	; 0
 1ce:	29 f1       	breq	.+74     	; 0x21a <UART_enum_Send_String+0x64>
 1d0:	18 c0       	rjmp	.+48     	; 0x202 <UART_enum_Send_String+0x4c>
	for (u8 Local_u8_Iterator ; copy_pu8_string[Local_u8_Iterator] != '\0'; Local_u8_Iterator++){
		 /* wait until the transmit reg is empty*/
			while (GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT5)==0);
 1d2:	eb e2       	ldi	r30, 0x2B	; 43
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	88 2f       	mov	r24, r24
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	80 72       	andi	r24, 0x20	; 32
 1de:	90 70       	andi	r25, 0x00	; 0
 1e0:	00 97       	sbiw	r24, 0x00	; 0
 1e2:	b9 f3       	breq	.-18     	; 0x1d2 <UART_enum_Send_String+0x1c>

			/* send data byte */
			UART_u8_UDR_REG=copy_pu8_string[Local_u8_Iterator];
 1e4:	ac e2       	ldi	r26, 0x2C	; 44
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	9c 81       	ldd	r25, Y+4	; 0x04
 1f2:	fc 01       	movw	r30, r24
 1f4:	e2 0f       	add	r30, r18
 1f6:	f3 1f       	adc	r31, r19
 1f8:	80 81       	ld	r24, Z
 1fa:	8c 93       	st	X, r24

ES_t UART_enum_Send_String(u8 *copy_pu8_string)
{
	ES_t Local_enu_Erorr_State= ES_OK;
	if(copy_pu8_string!= NULL){
	for (u8 Local_u8_Iterator ; copy_pu8_string[Local_u8_Iterator] != '\0'; Local_u8_Iterator++){
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	89 83       	std	Y+1, r24	; 0x01
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	28 2f       	mov	r18, r24
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	9c 81       	ldd	r25, Y+4	; 0x04
 20c:	fc 01       	movw	r30, r24
 20e:	e2 0f       	add	r30, r18
 210:	f3 1f       	adc	r31, r19
 212:	80 81       	ld	r24, Z
 214:	88 23       	and	r24, r24
 216:	e9 f6       	brne	.-70     	; 0x1d2 <UART_enum_Send_String+0x1c>
 218:	02 c0       	rjmp	.+4      	; 0x21e <UART_enum_Send_String+0x68>
			/* send data byte */
			UART_u8_UDR_REG=copy_pu8_string[Local_u8_Iterator];
	}
	}
	else{
		Local_enu_Erorr_State = ES_NOK;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	8a 83       	std	Y+2, r24	; 0x02
	    }

	return Local_enu_Erorr_State;
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
}
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	cf 91       	pop	r28
 22a:	df 91       	pop	r29
 22c:	08 95       	ret

0000022e <UART_enum_RECIEVE_String>:
ES_t  UART_enum_RECIEVE_String (u8 * copy_UART_pu8_recieve_String)
{
 22e:	df 93       	push	r29
 230:	cf 93       	push	r28
 232:	00 d0       	rcall	.+0      	; 0x234 <UART_enum_RECIEVE_String+0x6>
 234:	0f 92       	push	r0
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	9b 83       	std	Y+3, r25	; 0x03
 23c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
 23e:	19 82       	std	Y+1, r1	; 0x01
		if(copy_UART_pu8_recieve_String != NULL)
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	9b 81       	ldd	r25, Y+3	; 0x03
 244:	00 97       	sbiw	r24, 0x00	; 0
 246:	11 f4       	brne	.+4      	; 0x24c <UART_enum_RECIEVE_String+0x1e>
		{

		}
		else{
				Local_enu_Erorr_State = ES_NOK;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	89 83       	std	Y+1, r24	; 0x01
			    }
		return Local_enu_Erorr_State;
 24c:	89 81       	ldd	r24, Y+1	; 0x01

}
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	cf 91       	pop	r28
 256:	df 91       	pop	r29
 258:	08 95       	ret

0000025a <DIO_voidInit>:
//MCAL Layer
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidInit(void){
 25a:	df 93       	push	r29
 25c:	cf 93       	push	r28
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = CONC(DIO_U8_PA7_INTIAL_DIRECTION, DIO_U8_PA6_INTIAL_DIRECTION, DIO_U8_PA5_INTIAL_DIRECTION, DIO_U8_PA4_INTIAL_DIRECTION,
 262:	ea e3       	ldi	r30, 0x3A	; 58
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 83       	st	Z, r24
		                   DIO_U8_PA3_INTIAL_DIRECTION, DIO_U8_PA2_INTIAL_DIRECTION, DIO_U8_PA1_INTIAL_DIRECTION, DIO_U8_PA0_INTIAL_DIRECTION);
		                 			
	DIO_u8_DDRB_REG = CONC(DIO_U8_PB7_INTIAL_DIRECTION, DIO_U8_PB6_INTIAL_DIRECTION, DIO_U8_PB5_INTIAL_DIRECTION, DIO_U8_PB4_INTIAL_DIRECTION,
 26a:	e7 e3       	ldi	r30, 0x37	; 55
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	87 e2       	ldi	r24, 0x27	; 39
 270:	80 83       	st	Z, r24
				           DIO_U8_PB3_INTIAL_DIRECTION, DIO_U8_PB2_INTIAL_DIRECTION, DIO_U8_PB1_INTIAL_DIRECTION, DIO_U8_PB0_INTIAL_DIRECTION);
					                                                                                                                      
	DIO_u8_DDRC_REG = CONC(DIO_U8_PC7_INTIAL_DIRECTION, DIO_U8_PC6_INTIAL_DIRECTION, DIO_U8_PC5_INTIAL_DIRECTION, DIO_U8_PC4_INTIAL_DIRECTION,
 272:	e4 e3       	ldi	r30, 0x34	; 52
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	10 82       	st	Z, r1
		                   DIO_U8_PC3_INTIAL_DIRECTION, DIO_U8_PC2_INTIAL_DIRECTION, DIO_U8_PC1_INTIAL_DIRECTION, DIO_U8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = CONC(DIO_U8_PD7_INTIAL_DIRECTION, DIO_U8_PD6_INTIAL_DIRECTION, DIO_U8_PD5_INTIAL_DIRECTION, DIO_U8_PD4_INTIAL_DIRECTION,
 278:	e1 e3       	ldi	r30, 0x31	; 49
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	8e ef       	ldi	r24, 0xFE	; 254
 27e:	80 83       	st	Z, r24
				           DIO_U8_PD3_INTIAL_DIRECTION, DIO_U8_PD2_INTIAL_DIRECTION, DIO_U8_PD1_INTIAL_DIRECTION, DIO_U8_PD0_INTIAL_DIRECTION);

	DIO_u8_PORTA_REG = CONC(DIO_U8_PA7_INTIAL_VALUE, DIO_U8_PA6_INTIAL_VALUE, DIO_U8_PA5_INTIAL_VALUE, DIO_U8_PA4_INTIAL_VALUE,
 280:	eb e3       	ldi	r30, 0x3B	; 59
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	10 82       	st	Z, r1
						    DIO_U8_PA3_INTIAL_VALUE, DIO_U8_PA2_INTIAL_VALUE, DIO_U8_PA1_INTIAL_VALUE, DIO_U8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = CONC(DIO_U8_PB7_INTIAL_VALUE, DIO_U8_PB6_INTIAL_VALUE, DIO_U8_PB5_INTIAL_VALUE, DIO_U8_PB4_INTIAL_VALUE,
 286:	e8 e3       	ldi	r30, 0x38	; 56
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	10 82       	st	Z, r1
						   	DIO_U8_PB3_INTIAL_VALUE, DIO_U8_PB2_INTIAL_VALUE, DIO_U8_PB1_INTIAL_VALUE, DIO_U8_PB0_INTIAL_VALUE);
												 
    DIO_u8_PORTC_REG = CONC(DIO_U8_PC7_INTIAL_VALUE, DIO_U8_PC6_INTIAL_VALUE, DIO_U8_PC5_INTIAL_VALUE, DIO_U8_PC4_INTIAL_VALUE,
 28c:	e5 e3       	ldi	r30, 0x35	; 53
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	10 82       	st	Z, r1
					        DIO_U8_PC3_INTIAL_VALUE, DIO_U8_PC2_INTIAL_VALUE, DIO_U8_PC1_INTIAL_VALUE, DIO_U8_PC0_INTIAL_VALUE);
																		   
    DIO_u8_PORTD_REG = CONC(DIO_U8_PD7_INTIAL_VALUE, DIO_U8_PD6_INTIAL_VALUE, DIO_U8_PD5_INTIAL_VALUE, DIO_U8_PD4_INTIAL_VALUE,
 292:	e2 e3       	ldi	r30, 0x32	; 50
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	10 82       	st	Z, r1
						    DIO_U8_PD3_INTIAL_VALUE, DIO_U8_PD2_INTIAL_VALUE, DIO_U8_PD1_INTIAL_VALUE, DIO_U8_PD0_INTIAL_VALUE);
    }
 298:	cf 91       	pop	r28
 29a:	df 91       	pop	r29
 29c:	08 95       	ret

0000029e <DIO_u8_Set_Pin_Direction>:

u8 DIO_u8_Set_Pin_Direction  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Direction ){
 29e:	df 93       	push	r29
 2a0:	cf 93       	push	r28
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	2e 97       	sbiw	r28, 0x0e	; 14
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	f8 94       	cli
 2ac:	de bf       	out	0x3e, r29	; 62
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	cd bf       	out	0x3d, r28	; 61
 2b2:	8a 83       	std	Y+2, r24	; 0x02
 2b4:	6b 83       	std	Y+3, r22	; 0x03
 2b6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
 2b8:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Direction == DIO_u8_INTIAL_INPUT)||(Copy_u8_Pin_Direction == DIO_u8_INTIAL_OUTPUT)))
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	84 30       	cpi	r24, 0x04	; 4
 2be:	08 f0       	brcs	.+2      	; 0x2c2 <DIO_u8_Set_Pin_Direction+0x24>
 2c0:	15 c1       	rjmp	.+554    	; 0x4ec <__stack+0x8d>
 2c2:	8b 81       	ldd	r24, Y+3	; 0x03
 2c4:	88 30       	cpi	r24, 0x08	; 8
 2c6:	08 f0       	brcs	.+2      	; 0x2ca <DIO_u8_Set_Pin_Direction+0x2c>
 2c8:	11 c1       	rjmp	.+546    	; 0x4ec <__stack+0x8d>
 2ca:	8c 81       	ldd	r24, Y+4	; 0x04
 2cc:	88 23       	and	r24, r24
 2ce:	21 f0       	breq	.+8      	; 0x2d8 <DIO_u8_Set_Pin_Direction+0x3a>
 2d0:	8c 81       	ldd	r24, Y+4	; 0x04
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <DIO_u8_Set_Pin_Direction+0x3a>
 2d6:	0a c1       	rjmp	.+532    	; 0x4ec <__stack+0x8d>
	{
        switch (Copy_u8_Port_ID)
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	28 2f       	mov	r18, r24
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	3e 87       	std	Y+14, r19	; 0x0e
 2e0:	2d 87       	std	Y+13, r18	; 0x0d
 2e2:	8d 85       	ldd	r24, Y+13	; 0x0d
 2e4:	9e 85       	ldd	r25, Y+14	; 0x0e
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	91 05       	cpc	r25, r1
 2ea:	09 f4       	brne	.+2      	; 0x2ee <DIO_u8_Set_Pin_Direction+0x50>
 2ec:	51 c0       	rjmp	.+162    	; 0x390 <DIO_u8_Set_Pin_Direction+0xf2>
 2ee:	2d 85       	ldd	r18, Y+13	; 0x0d
 2f0:	3e 85       	ldd	r19, Y+14	; 0x0e
 2f2:	22 30       	cpi	r18, 0x02	; 2
 2f4:	31 05       	cpc	r19, r1
 2f6:	2c f4       	brge	.+10     	; 0x302 <DIO_u8_Set_Pin_Direction+0x64>
 2f8:	8d 85       	ldd	r24, Y+13	; 0x0d
 2fa:	9e 85       	ldd	r25, Y+14	; 0x0e
 2fc:	00 97       	sbiw	r24, 0x00	; 0
 2fe:	71 f0       	breq	.+28     	; 0x31c <DIO_u8_Set_Pin_Direction+0x7e>
 300:	f7 c0       	rjmp	.+494    	; 0x4f0 <__stack+0x91>
 302:	2d 85       	ldd	r18, Y+13	; 0x0d
 304:	3e 85       	ldd	r19, Y+14	; 0x0e
 306:	22 30       	cpi	r18, 0x02	; 2
 308:	31 05       	cpc	r19, r1
 30a:	09 f4       	brne	.+2      	; 0x30e <DIO_u8_Set_Pin_Direction+0x70>
 30c:	7b c0       	rjmp	.+246    	; 0x404 <DIO_u8_Set_Pin_Direction+0x166>
 30e:	8d 85       	ldd	r24, Y+13	; 0x0d
 310:	9e 85       	ldd	r25, Y+14	; 0x0e
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	91 05       	cpc	r25, r1
 316:	09 f4       	brne	.+2      	; 0x31a <DIO_u8_Set_Pin_Direction+0x7c>
 318:	af c0       	rjmp	.+350    	; 0x478 <__stack+0x19>
 31a:	ea c0       	rjmp	.+468    	; 0x4f0 <__stack+0x91>
        {
               case DIO_u8_PORTA:
            	   switch (Copy_u8_Pin_Direction)
 31c:	8c 81       	ldd	r24, Y+4	; 0x04
 31e:	28 2f       	mov	r18, r24
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	3c 87       	std	Y+12, r19	; 0x0c
 324:	2b 87       	std	Y+11, r18	; 0x0b
 326:	8b 85       	ldd	r24, Y+11	; 0x0b
 328:	9c 85       	ldd	r25, Y+12	; 0x0c
 32a:	00 97       	sbiw	r24, 0x00	; 0
 32c:	c9 f0       	breq	.+50     	; 0x360 <DIO_u8_Set_Pin_Direction+0xc2>
 32e:	2b 85       	ldd	r18, Y+11	; 0x0b
 330:	3c 85       	ldd	r19, Y+12	; 0x0c
 332:	21 30       	cpi	r18, 0x01	; 1
 334:	31 05       	cpc	r19, r1
 336:	49 f5       	brne	.+82     	; 0x38a <DIO_u8_Set_Pin_Direction+0xec>
            	   {
                    	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
 338:	aa e3       	ldi	r26, 0x3A	; 58
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	ea e3       	ldi	r30, 0x3A	; 58
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	48 2f       	mov	r20, r24
 344:	8b 81       	ldd	r24, Y+3	; 0x03
 346:	28 2f       	mov	r18, r24
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 2e       	mov	r0, r18
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_u8_Set_Pin_Direction+0xb8>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	0a 94       	dec	r0
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_u8_Set_Pin_Direction+0xb4>
 35a:	84 2b       	or	r24, r20
 35c:	8c 93       	st	X, r24
 35e:	c8 c0       	rjmp	.+400    	; 0x4f0 <__stack+0x91>
                    	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
 360:	aa e3       	ldi	r26, 0x3A	; 58
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	ea e3       	ldi	r30, 0x3A	; 58
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	48 2f       	mov	r20, r24
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 2e       	mov	r0, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_u8_Set_Pin_Direction+0xe0>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	0a 94       	dec	r0
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_u8_Set_Pin_Direction+0xdc>
 382:	80 95       	com	r24
 384:	84 23       	and	r24, r20
 386:	8c 93       	st	X, r24
 388:	b3 c0       	rjmp	.+358    	; 0x4f0 <__stack+0x91>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	89 83       	std	Y+1, r24	; 0x01
 38e:	b0 c0       	rjmp	.+352    	; 0x4f0 <__stack+0x91>

            	   }
                  break;
               case DIO_u8_PORTB:
             	   switch (Copy_u8_Pin_Direction)
 390:	8c 81       	ldd	r24, Y+4	; 0x04
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	3a 87       	std	Y+10, r19	; 0x0a
 398:	29 87       	std	Y+9, r18	; 0x09
 39a:	89 85       	ldd	r24, Y+9	; 0x09
 39c:	9a 85       	ldd	r25, Y+10	; 0x0a
 39e:	00 97       	sbiw	r24, 0x00	; 0
 3a0:	c9 f0       	breq	.+50     	; 0x3d4 <DIO_u8_Set_Pin_Direction+0x136>
 3a2:	29 85       	ldd	r18, Y+9	; 0x09
 3a4:	3a 85       	ldd	r19, Y+10	; 0x0a
 3a6:	21 30       	cpi	r18, 0x01	; 1
 3a8:	31 05       	cpc	r19, r1
 3aa:	49 f5       	brne	.+82     	; 0x3fe <DIO_u8_Set_Pin_Direction+0x160>
             	   {
                     	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
 3ac:	a7 e3       	ldi	r26, 0x37	; 55
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	e7 e3       	ldi	r30, 0x37	; 55
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	48 2f       	mov	r20, r24
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 2e       	mov	r0, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_u8_Set_Pin_Direction+0x12c>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	0a 94       	dec	r0
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_u8_Set_Pin_Direction+0x128>
 3ce:	84 2b       	or	r24, r20
 3d0:	8c 93       	st	X, r24
 3d2:	8e c0       	rjmp	.+284    	; 0x4f0 <__stack+0x91>
                     	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
 3d4:	a7 e3       	ldi	r26, 0x37	; 55
 3d6:	b0 e0       	ldi	r27, 0x00	; 0
 3d8:	e7 e3       	ldi	r30, 0x37	; 55
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	48 2f       	mov	r20, r24
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 2e       	mov	r0, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_u8_Set_Pin_Direction+0x154>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_u8_Set_Pin_Direction+0x150>
 3f6:	80 95       	com	r24
 3f8:	84 23       	and	r24, r20
 3fa:	8c 93       	st	X, r24
 3fc:	79 c0       	rjmp	.+242    	; 0x4f0 <__stack+0x91>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	89 83       	std	Y+1, r24	; 0x01
 402:	76 c0       	rjmp	.+236    	; 0x4f0 <__stack+0x91>

             	   }
                   break;
               case DIO_u8_PORTC:
                   switch (Copy_u8_Pin_Direction)
 404:	8c 81       	ldd	r24, Y+4	; 0x04
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	38 87       	std	Y+8, r19	; 0x08
 40c:	2f 83       	std	Y+7, r18	; 0x07
 40e:	8f 81       	ldd	r24, Y+7	; 0x07
 410:	98 85       	ldd	r25, Y+8	; 0x08
 412:	00 97       	sbiw	r24, 0x00	; 0
 414:	c9 f0       	breq	.+50     	; 0x448 <DIO_u8_Set_Pin_Direction+0x1aa>
 416:	2f 81       	ldd	r18, Y+7	; 0x07
 418:	38 85       	ldd	r19, Y+8	; 0x08
 41a:	21 30       	cpi	r18, 0x01	; 1
 41c:	31 05       	cpc	r19, r1
 41e:	49 f5       	brne	.+82     	; 0x472 <__stack+0x13>
                 	   {
                         	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
 420:	a4 e3       	ldi	r26, 0x34	; 52
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	e4 e3       	ldi	r30, 0x34	; 52
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	48 2f       	mov	r20, r24
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	28 2f       	mov	r18, r24
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 2e       	mov	r0, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_u8_Set_Pin_Direction+0x1a0>
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	0a 94       	dec	r0
 440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_u8_Set_Pin_Direction+0x19c>
 442:	84 2b       	or	r24, r20
 444:	8c 93       	st	X, r24
 446:	54 c0       	rjmp	.+168    	; 0x4f0 <__stack+0x91>
                         	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
 448:	a4 e3       	ldi	r26, 0x34	; 52
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	e4 e3       	ldi	r30, 0x34	; 52
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	48 2f       	mov	r20, r24
 454:	8b 81       	ldd	r24, Y+3	; 0x03
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 2e       	mov	r0, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <__stack+0x7>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	0a 94       	dec	r0
 468:	e2 f7       	brpl	.-8      	; 0x462 <__stack+0x3>
 46a:	80 95       	com	r24
 46c:	84 23       	and	r24, r20
 46e:	8c 93       	st	X, r24
 470:	3f c0       	rjmp	.+126    	; 0x4f0 <__stack+0x91>
  			           	     default :Local_u8_Erorr_State = ES_NOK ;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	89 83       	std	Y+1, r24	; 0x01
 476:	3c c0       	rjmp	.+120    	; 0x4f0 <__stack+0x91>

                 	   }
                       break;

               case DIO_u8_PORTD:
                    switch (Copy_u8_Pin_Direction)
 478:	8c 81       	ldd	r24, Y+4	; 0x04
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	3e 83       	std	Y+6, r19	; 0x06
 480:	2d 83       	std	Y+5, r18	; 0x05
 482:	8d 81       	ldd	r24, Y+5	; 0x05
 484:	9e 81       	ldd	r25, Y+6	; 0x06
 486:	00 97       	sbiw	r24, 0x00	; 0
 488:	c9 f0       	breq	.+50     	; 0x4bc <__stack+0x5d>
 48a:	2d 81       	ldd	r18, Y+5	; 0x05
 48c:	3e 81       	ldd	r19, Y+6	; 0x06
 48e:	21 30       	cpi	r18, 0x01	; 1
 490:	31 05       	cpc	r19, r1
 492:	49 f5       	brne	.+82     	; 0x4e6 <__stack+0x87>
                     	   {
                             	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
 494:	a1 e3       	ldi	r26, 0x31	; 49
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	e1 e3       	ldi	r30, 0x31	; 49
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	48 2f       	mov	r20, r24
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 2e       	mov	r0, r18
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__stack+0x53>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__stack+0x4f>
 4b6:	84 2b       	or	r24, r20
 4b8:	8c 93       	st	X, r24
 4ba:	1a c0       	rjmp	.+52     	; 0x4f0 <__stack+0x91>
                             	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
 4bc:	a1 e3       	ldi	r26, 0x31	; 49
 4be:	b0 e0       	ldi	r27, 0x00	; 0
 4c0:	e1 e3       	ldi	r30, 0x31	; 49
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	48 2f       	mov	r20, r24
 4c8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 2e       	mov	r0, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__stack+0x7b>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	0a 94       	dec	r0
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <__stack+0x77>
 4de:	80 95       	com	r24
 4e0:	84 23       	and	r24, r20
 4e2:	8c 93       	st	X, r24
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <__stack+0x91>
      			           	     default :Local_u8_Erorr_State = ES_NOK ;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	89 83       	std	Y+1, r24	; 0x01
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__stack+0x91>
                     	   }
                           break;
        }
	}
	else {
		Local_u8_Erorr_State = ES_NOK ;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_Erorr_State ;
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
}
 4f2:	2e 96       	adiw	r28, 0x0e	; 14
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
 4fe:	cf 91       	pop	r28
 500:	df 91       	pop	r29
 502:	08 95       	ret

00000504 <DIO_u8_Set_Pin_Value>:

u8 DIO_u8_Set_Pin_Value  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Value ){
 504:	df 93       	push	r29
 506:	cf 93       	push	r28
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
 50c:	2e 97       	sbiw	r28, 0x0e	; 14
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	de bf       	out	0x3e, r29	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	cd bf       	out	0x3d, r28	; 61
 518:	8a 83       	std	Y+2, r24	; 0x02
 51a:	6b 83       	std	Y+3, r22	; 0x03
 51c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
 51e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Value == DIO_u8_INPUT)||(Copy_u8_Pin_Value == DIO_u8_OUTPUT)))
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	84 30       	cpi	r24, 0x04	; 4
 524:	08 f0       	brcs	.+2      	; 0x528 <DIO_u8_Set_Pin_Value+0x24>
 526:	15 c1       	rjmp	.+554    	; 0x752 <DIO_u8_Set_Pin_Value+0x24e>
 528:	8b 81       	ldd	r24, Y+3	; 0x03
 52a:	88 30       	cpi	r24, 0x08	; 8
 52c:	08 f0       	brcs	.+2      	; 0x530 <DIO_u8_Set_Pin_Value+0x2c>
 52e:	11 c1       	rjmp	.+546    	; 0x752 <DIO_u8_Set_Pin_Value+0x24e>
 530:	8c 81       	ldd	r24, Y+4	; 0x04
 532:	88 23       	and	r24, r24
 534:	21 f0       	breq	.+8      	; 0x53e <DIO_u8_Set_Pin_Value+0x3a>
 536:	8c 81       	ldd	r24, Y+4	; 0x04
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	09 f0       	breq	.+2      	; 0x53e <DIO_u8_Set_Pin_Value+0x3a>
 53c:	0a c1       	rjmp	.+532    	; 0x752 <DIO_u8_Set_Pin_Value+0x24e>
	{
		switch (Copy_u8_Port_ID)
 53e:	8a 81       	ldd	r24, Y+2	; 0x02
 540:	28 2f       	mov	r18, r24
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	3e 87       	std	Y+14, r19	; 0x0e
 546:	2d 87       	std	Y+13, r18	; 0x0d
 548:	8d 85       	ldd	r24, Y+13	; 0x0d
 54a:	9e 85       	ldd	r25, Y+14	; 0x0e
 54c:	81 30       	cpi	r24, 0x01	; 1
 54e:	91 05       	cpc	r25, r1
 550:	09 f4       	brne	.+2      	; 0x554 <DIO_u8_Set_Pin_Value+0x50>
 552:	51 c0       	rjmp	.+162    	; 0x5f6 <DIO_u8_Set_Pin_Value+0xf2>
 554:	2d 85       	ldd	r18, Y+13	; 0x0d
 556:	3e 85       	ldd	r19, Y+14	; 0x0e
 558:	22 30       	cpi	r18, 0x02	; 2
 55a:	31 05       	cpc	r19, r1
 55c:	2c f4       	brge	.+10     	; 0x568 <DIO_u8_Set_Pin_Value+0x64>
 55e:	8d 85       	ldd	r24, Y+13	; 0x0d
 560:	9e 85       	ldd	r25, Y+14	; 0x0e
 562:	00 97       	sbiw	r24, 0x00	; 0
 564:	71 f0       	breq	.+28     	; 0x582 <DIO_u8_Set_Pin_Value+0x7e>
 566:	f7 c0       	rjmp	.+494    	; 0x756 <DIO_u8_Set_Pin_Value+0x252>
 568:	2d 85       	ldd	r18, Y+13	; 0x0d
 56a:	3e 85       	ldd	r19, Y+14	; 0x0e
 56c:	22 30       	cpi	r18, 0x02	; 2
 56e:	31 05       	cpc	r19, r1
 570:	09 f4       	brne	.+2      	; 0x574 <DIO_u8_Set_Pin_Value+0x70>
 572:	7b c0       	rjmp	.+246    	; 0x66a <DIO_u8_Set_Pin_Value+0x166>
 574:	8d 85       	ldd	r24, Y+13	; 0x0d
 576:	9e 85       	ldd	r25, Y+14	; 0x0e
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	91 05       	cpc	r25, r1
 57c:	09 f4       	brne	.+2      	; 0x580 <DIO_u8_Set_Pin_Value+0x7c>
 57e:	af c0       	rjmp	.+350    	; 0x6de <DIO_u8_Set_Pin_Value+0x1da>
 580:	ea c0       	rjmp	.+468    	; 0x756 <DIO_u8_Set_Pin_Value+0x252>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Pin_Value)
 582:	8c 81       	ldd	r24, Y+4	; 0x04
 584:	28 2f       	mov	r18, r24
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	3c 87       	std	Y+12, r19	; 0x0c
 58a:	2b 87       	std	Y+11, r18	; 0x0b
 58c:	8b 85       	ldd	r24, Y+11	; 0x0b
 58e:	9c 85       	ldd	r25, Y+12	; 0x0c
 590:	00 97       	sbiw	r24, 0x00	; 0
 592:	c9 f0       	breq	.+50     	; 0x5c6 <DIO_u8_Set_Pin_Value+0xc2>
 594:	2b 85       	ldd	r18, Y+11	; 0x0b
 596:	3c 85       	ldd	r19, Y+12	; 0x0c
 598:	21 30       	cpi	r18, 0x01	; 1
 59a:	31 05       	cpc	r19, r1
 59c:	49 f5       	brne	.+82     	; 0x5f0 <DIO_u8_Set_Pin_Value+0xec>
			{
			     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
 59e:	ab e3       	ldi	r26, 0x3B	; 59
 5a0:	b0 e0       	ldi	r27, 0x00	; 0
 5a2:	eb e3       	ldi	r30, 0x3B	; 59
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	48 2f       	mov	r20, r24
 5aa:	8b 81       	ldd	r24, Y+3	; 0x03
 5ac:	28 2f       	mov	r18, r24
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 2e       	mov	r0, r18
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_u8_Set_Pin_Value+0xb8>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	0a 94       	dec	r0
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_u8_Set_Pin_Value+0xb4>
 5c0:	84 2b       	or	r24, r20
 5c2:	8c 93       	st	X, r24
 5c4:	c8 c0       	rjmp	.+400    	; 0x756 <DIO_u8_Set_Pin_Value+0x252>
           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
 5c6:	ab e3       	ldi	r26, 0x3B	; 59
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	eb e3       	ldi	r30, 0x3B	; 59
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	48 2f       	mov	r20, r24
 5d2:	8b 81       	ldd	r24, Y+3	; 0x03
 5d4:	28 2f       	mov	r18, r24
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 2e       	mov	r0, r18
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_u8_Set_Pin_Value+0xe0>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	0a 94       	dec	r0
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_u8_Set_Pin_Value+0xdc>
 5e8:	80 95       	com	r24
 5ea:	84 23       	and	r24, r20
 5ec:	8c 93       	st	X, r24
 5ee:	b3 c0       	rjmp	.+358    	; 0x756 <DIO_u8_Set_Pin_Value+0x252>
           	     default :Local_u8_Erorr_State = ES_NOK ;
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	89 83       	std	Y+1, r24	; 0x01
 5f4:	b0 c0       	rjmp	.+352    	; 0x756 <DIO_u8_Set_Pin_Value+0x252>

			}
			break;
		case DIO_u8_PORTB :
			switch (Copy_u8_Pin_Value)
 5f6:	8c 81       	ldd	r24, Y+4	; 0x04
 5f8:	28 2f       	mov	r18, r24
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	3a 87       	std	Y+10, r19	; 0x0a
 5fe:	29 87       	std	Y+9, r18	; 0x09
 600:	89 85       	ldd	r24, Y+9	; 0x09
 602:	9a 85       	ldd	r25, Y+10	; 0x0a
 604:	00 97       	sbiw	r24, 0x00	; 0
 606:	c9 f0       	breq	.+50     	; 0x63a <DIO_u8_Set_Pin_Value+0x136>
 608:	29 85       	ldd	r18, Y+9	; 0x09
 60a:	3a 85       	ldd	r19, Y+10	; 0x0a
 60c:	21 30       	cpi	r18, 0x01	; 1
 60e:	31 05       	cpc	r19, r1
 610:	49 f5       	brne	.+82     	; 0x664 <DIO_u8_Set_Pin_Value+0x160>
				{
				     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
 612:	a8 e3       	ldi	r26, 0x38	; 56
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	e8 e3       	ldi	r30, 0x38	; 56
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	48 2f       	mov	r20, r24
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	28 2f       	mov	r18, r24
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 2e       	mov	r0, r18
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_u8_Set_Pin_Value+0x12c>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	0a 94       	dec	r0
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_u8_Set_Pin_Value+0x128>
 634:	84 2b       	or	r24, r20
 636:	8c 93       	st	X, r24
 638:	8e c0       	rjmp	.+284    	; 0x756 <DIO_u8_Set_Pin_Value+0x252>
	           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
 63a:	a8 e3       	ldi	r26, 0x38	; 56
 63c:	b0 e0       	ldi	r27, 0x00	; 0
 63e:	e8 e3       	ldi	r30, 0x38	; 56
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	80 81       	ld	r24, Z
 644:	48 2f       	mov	r20, r24
 646:	8b 81       	ldd	r24, Y+3	; 0x03
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 2e       	mov	r0, r18
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_u8_Set_Pin_Value+0x154>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	0a 94       	dec	r0
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_u8_Set_Pin_Value+0x150>
 65c:	80 95       	com	r24
 65e:	84 23       	and	r24, r20
 660:	8c 93       	st	X, r24
 662:	79 c0       	rjmp	.+242    	; 0x756 <DIO_u8_Set_Pin_Value+0x252>
	           	     default :Local_u8_Erorr_State = ES_NOK ;
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	89 83       	std	Y+1, r24	; 0x01
 668:	76 c0       	rjmp	.+236    	; 0x756 <DIO_u8_Set_Pin_Value+0x252>

				}
	     	break;
		case DIO_u8_PORTC :
			switch (Copy_u8_Pin_Value)
 66a:	8c 81       	ldd	r24, Y+4	; 0x04
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	38 87       	std	Y+8, r19	; 0x08
 672:	2f 83       	std	Y+7, r18	; 0x07
 674:	8f 81       	ldd	r24, Y+7	; 0x07
 676:	98 85       	ldd	r25, Y+8	; 0x08
 678:	00 97       	sbiw	r24, 0x00	; 0
 67a:	c9 f0       	breq	.+50     	; 0x6ae <DIO_u8_Set_Pin_Value+0x1aa>
 67c:	2f 81       	ldd	r18, Y+7	; 0x07
 67e:	38 85       	ldd	r19, Y+8	; 0x08
 680:	21 30       	cpi	r18, 0x01	; 1
 682:	31 05       	cpc	r19, r1
 684:	49 f5       	brne	.+82     	; 0x6d8 <DIO_u8_Set_Pin_Value+0x1d4>
					{
					     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
 686:	a5 e3       	ldi	r26, 0x35	; 53
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e5 e3       	ldi	r30, 0x35	; 53
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	48 2f       	mov	r20, r24
 692:	8b 81       	ldd	r24, Y+3	; 0x03
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 2e       	mov	r0, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_u8_Set_Pin_Value+0x1a0>
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	0a 94       	dec	r0
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_u8_Set_Pin_Value+0x19c>
 6a8:	84 2b       	or	r24, r20
 6aa:	8c 93       	st	X, r24
 6ac:	54 c0       	rjmp	.+168    	; 0x756 <DIO_u8_Set_Pin_Value+0x252>
		           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
 6ae:	a5 e3       	ldi	r26, 0x35	; 53
 6b0:	b0 e0       	ldi	r27, 0x00	; 0
 6b2:	e5 e3       	ldi	r30, 0x35	; 53
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	48 2f       	mov	r20, r24
 6ba:	8b 81       	ldd	r24, Y+3	; 0x03
 6bc:	28 2f       	mov	r18, r24
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 2e       	mov	r0, r18
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_u8_Set_Pin_Value+0x1c8>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	0a 94       	dec	r0
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_u8_Set_Pin_Value+0x1c4>
 6d0:	80 95       	com	r24
 6d2:	84 23       	and	r24, r20
 6d4:	8c 93       	st	X, r24
 6d6:	3f c0       	rjmp	.+126    	; 0x756 <DIO_u8_Set_Pin_Value+0x252>
		           	     default :Local_u8_Erorr_State = ES_NOK ;
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	89 83       	std	Y+1, r24	; 0x01
 6dc:	3c c0       	rjmp	.+120    	; 0x756 <DIO_u8_Set_Pin_Value+0x252>

					}
		   break;
		case DIO_u8_PORTD :
			switch (Copy_u8_Pin_Value)
 6de:	8c 81       	ldd	r24, Y+4	; 0x04
 6e0:	28 2f       	mov	r18, r24
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	3e 83       	std	Y+6, r19	; 0x06
 6e6:	2d 83       	std	Y+5, r18	; 0x05
 6e8:	8d 81       	ldd	r24, Y+5	; 0x05
 6ea:	9e 81       	ldd	r25, Y+6	; 0x06
 6ec:	00 97       	sbiw	r24, 0x00	; 0
 6ee:	c9 f0       	breq	.+50     	; 0x722 <DIO_u8_Set_Pin_Value+0x21e>
 6f0:	2d 81       	ldd	r18, Y+5	; 0x05
 6f2:	3e 81       	ldd	r19, Y+6	; 0x06
 6f4:	21 30       	cpi	r18, 0x01	; 1
 6f6:	31 05       	cpc	r19, r1
 6f8:	49 f5       	brne	.+82     	; 0x74c <DIO_u8_Set_Pin_Value+0x248>
						{
						     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
 6fa:	a2 e3       	ldi	r26, 0x32	; 50
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	e2 e3       	ldi	r30, 0x32	; 50
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	48 2f       	mov	r20, r24
 706:	8b 81       	ldd	r24, Y+3	; 0x03
 708:	28 2f       	mov	r18, r24
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	02 2e       	mov	r0, r18
 712:	02 c0       	rjmp	.+4      	; 0x718 <DIO_u8_Set_Pin_Value+0x214>
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	0a 94       	dec	r0
 71a:	e2 f7       	brpl	.-8      	; 0x714 <DIO_u8_Set_Pin_Value+0x210>
 71c:	84 2b       	or	r24, r20
 71e:	8c 93       	st	X, r24
 720:	1a c0       	rjmp	.+52     	; 0x756 <DIO_u8_Set_Pin_Value+0x252>
			           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
 722:	a2 e3       	ldi	r26, 0x32	; 50
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	e2 e3       	ldi	r30, 0x32	; 50
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	48 2f       	mov	r20, r24
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	28 2f       	mov	r18, r24
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	02 2e       	mov	r0, r18
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_u8_Set_Pin_Value+0x23c>
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	0a 94       	dec	r0
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_u8_Set_Pin_Value+0x238>
 744:	80 95       	com	r24
 746:	84 23       	and	r24, r20
 748:	8c 93       	st	X, r24
 74a:	05 c0       	rjmp	.+10     	; 0x756 <DIO_u8_Set_Pin_Value+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	89 83       	std	Y+1, r24	; 0x01
 750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_u8_Set_Pin_Value+0x252>
						}
			break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8_Erorr_State ;
 756:	89 81       	ldd	r24, Y+1	; 0x01
}
 758:	2e 96       	adiw	r28, 0x0e	; 14
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	f8 94       	cli
 75e:	de bf       	out	0x3e, r29	; 62
 760:	0f be       	out	0x3f, r0	; 63
 762:	cd bf       	out	0x3d, r28	; 61
 764:	cf 91       	pop	r28
 766:	df 91       	pop	r29
 768:	08 95       	ret

0000076a <DIO_u8_Get_Pin_Value>:

u8 DIO_u8_Get_Pin_Value      (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 *Copy_u8_Returned_Pin_Value ){
 76a:	df 93       	push	r29
 76c:	cf 93       	push	r28
 76e:	cd b7       	in	r28, 0x3d	; 61
 770:	de b7       	in	r29, 0x3e	; 62
 772:	28 97       	sbiw	r28, 0x08	; 8
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	f8 94       	cli
 778:	de bf       	out	0x3e, r29	; 62
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	cd bf       	out	0x3d, r28	; 61
 77e:	8b 83       	std	Y+3, r24	; 0x03
 780:	6c 83       	std	Y+4, r22	; 0x04
 782:	5e 83       	std	Y+6, r21	; 0x06
 784:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8_Erorr_State = ES_OK ;
 786:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Pin_Value ;
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && (Copy_u8_Returned_Pin_Value != NULL)){
 788:	8b 81       	ldd	r24, Y+3	; 0x03
 78a:	84 30       	cpi	r24, 0x04	; 4
 78c:	08 f0       	brcs	.+2      	; 0x790 <DIO_u8_Get_Pin_Value+0x26>
 78e:	9e c0       	rjmp	.+316    	; 0x8cc <DIO_u8_Get_Pin_Value+0x162>
 790:	8c 81       	ldd	r24, Y+4	; 0x04
 792:	88 30       	cpi	r24, 0x08	; 8
 794:	08 f0       	brcs	.+2      	; 0x798 <DIO_u8_Get_Pin_Value+0x2e>
 796:	9a c0       	rjmp	.+308    	; 0x8cc <DIO_u8_Get_Pin_Value+0x162>
 798:	8d 81       	ldd	r24, Y+5	; 0x05
 79a:	9e 81       	ldd	r25, Y+6	; 0x06
 79c:	00 97       	sbiw	r24, 0x00	; 0
 79e:	09 f4       	brne	.+2      	; 0x7a2 <DIO_u8_Get_Pin_Value+0x38>
 7a0:	95 c0       	rjmp	.+298    	; 0x8cc <DIO_u8_Get_Pin_Value+0x162>
		switch (Copy_u8_Port_ID)
 7a2:	8b 81       	ldd	r24, Y+3	; 0x03
 7a4:	28 2f       	mov	r18, r24
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	38 87       	std	Y+8, r19	; 0x08
 7aa:	2f 83       	std	Y+7, r18	; 0x07
 7ac:	8f 81       	ldd	r24, Y+7	; 0x07
 7ae:	98 85       	ldd	r25, Y+8	; 0x08
 7b0:	81 30       	cpi	r24, 0x01	; 1
 7b2:	91 05       	cpc	r25, r1
 7b4:	a1 f1       	breq	.+104    	; 0x81e <DIO_u8_Get_Pin_Value+0xb4>
 7b6:	2f 81       	ldd	r18, Y+7	; 0x07
 7b8:	38 85       	ldd	r19, Y+8	; 0x08
 7ba:	22 30       	cpi	r18, 0x02	; 2
 7bc:	31 05       	cpc	r19, r1
 7be:	2c f4       	brge	.+10     	; 0x7ca <DIO_u8_Get_Pin_Value+0x60>
 7c0:	8f 81       	ldd	r24, Y+7	; 0x07
 7c2:	98 85       	ldd	r25, Y+8	; 0x08
 7c4:	00 97       	sbiw	r24, 0x00	; 0
 7c6:	71 f0       	breq	.+28     	; 0x7e4 <DIO_u8_Get_Pin_Value+0x7a>
 7c8:	83 c0       	rjmp	.+262    	; 0x8d0 <DIO_u8_Get_Pin_Value+0x166>
 7ca:	2f 81       	ldd	r18, Y+7	; 0x07
 7cc:	38 85       	ldd	r19, Y+8	; 0x08
 7ce:	22 30       	cpi	r18, 0x02	; 2
 7d0:	31 05       	cpc	r19, r1
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <DIO_u8_Get_Pin_Value+0x6c>
 7d4:	41 c0       	rjmp	.+130    	; 0x858 <DIO_u8_Get_Pin_Value+0xee>
 7d6:	8f 81       	ldd	r24, Y+7	; 0x07
 7d8:	98 85       	ldd	r25, Y+8	; 0x08
 7da:	83 30       	cpi	r24, 0x03	; 3
 7dc:	91 05       	cpc	r25, r1
 7de:	09 f4       	brne	.+2      	; 0x7e2 <DIO_u8_Get_Pin_Value+0x78>
 7e0:	58 c0       	rjmp	.+176    	; 0x892 <DIO_u8_Get_Pin_Value+0x128>
 7e2:	76 c0       	rjmp	.+236    	; 0x8d0 <DIO_u8_Get_Pin_Value+0x166>
		{
		     case DIO_u8_PORTA :
		      Local_u8_Pin_Value = GET_BIT (DIO_u8_PINA_REG, Copy_u8_Pin_ID) ;
 7e4:	e9 e3       	ldi	r30, 0x39	; 57
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	48 2f       	mov	r20, r24
 7ec:	8c 81       	ldd	r24, Y+4	; 0x04
 7ee:	28 2f       	mov	r18, r24
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	02 2e       	mov	r0, r18
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <DIO_u8_Get_Pin_Value+0x94>
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	0a 94       	dec	r0
 800:	e2 f7       	brpl	.-8      	; 0x7fa <DIO_u8_Get_Pin_Value+0x90>
 802:	84 23       	and	r24, r20
 804:	89 83       	std	Y+1, r24	; 0x01

		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
 806:	89 81       	ldd	r24, Y+1	; 0x01
 808:	88 23       	and	r24, r24
 80a:	21 f4       	brne	.+8      	; 0x814 <DIO_u8_Get_Pin_Value+0xaa>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
 80c:	ed 81       	ldd	r30, Y+5	; 0x05
 80e:	fe 81       	ldd	r31, Y+6	; 0x06
 810:	10 82       	st	Z, r1
 812:	5e c0       	rjmp	.+188    	; 0x8d0 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		    	 else
		    	 {
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
 814:	ed 81       	ldd	r30, Y+5	; 0x05
 816:	fe 81       	ldd	r31, Y+6	; 0x06
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	80 83       	st	Z, r24
 81c:	59 c0       	rjmp	.+178    	; 0x8d0 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		     break;
		     case DIO_u8_PORTB :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINB_REG,Copy_u8_Pin_ID ) ;
 81e:	e6 e3       	ldi	r30, 0x36	; 54
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	80 81       	ld	r24, Z
 824:	48 2f       	mov	r20, r24
 826:	8c 81       	ldd	r24, Y+4	; 0x04
 828:	28 2f       	mov	r18, r24
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	02 2e       	mov	r0, r18
 832:	02 c0       	rjmp	.+4      	; 0x838 <DIO_u8_Get_Pin_Value+0xce>
 834:	88 0f       	add	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	0a 94       	dec	r0
 83a:	e2 f7       	brpl	.-8      	; 0x834 <DIO_u8_Get_Pin_Value+0xca>
 83c:	84 23       	and	r24, r20
 83e:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
 840:	89 81       	ldd	r24, Y+1	; 0x01
 842:	88 23       	and	r24, r24
 844:	21 f4       	brne	.+8      	; 0x84e <DIO_u8_Get_Pin_Value+0xe4>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
 846:	ed 81       	ldd	r30, Y+5	; 0x05
 848:	fe 81       	ldd	r31, Y+6	; 0x06
 84a:	10 82       	st	Z, r1
 84c:	41 c0       	rjmp	.+130    	; 0x8d0 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
 84e:	ed 81       	ldd	r30, Y+5	; 0x05
 850:	fe 81       	ldd	r31, Y+6	; 0x06
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	80 83       	st	Z, r24
 856:	3c c0       	rjmp	.+120    	; 0x8d0 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTC :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINC_REG,Copy_u8_Pin_ID ) ;
 858:	e3 e3       	ldi	r30, 0x33	; 51
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	80 81       	ld	r24, Z
 85e:	48 2f       	mov	r20, r24
 860:	8c 81       	ldd	r24, Y+4	; 0x04
 862:	28 2f       	mov	r18, r24
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	02 2e       	mov	r0, r18
 86c:	02 c0       	rjmp	.+4      	; 0x872 <DIO_u8_Get_Pin_Value+0x108>
 86e:	88 0f       	add	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	0a 94       	dec	r0
 874:	e2 f7       	brpl	.-8      	; 0x86e <DIO_u8_Get_Pin_Value+0x104>
 876:	84 23       	and	r24, r20
 878:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
 87a:	89 81       	ldd	r24, Y+1	; 0x01
 87c:	88 23       	and	r24, r24
 87e:	21 f4       	brne	.+8      	; 0x888 <DIO_u8_Get_Pin_Value+0x11e>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
 880:	ed 81       	ldd	r30, Y+5	; 0x05
 882:	fe 81       	ldd	r31, Y+6	; 0x06
 884:	10 82       	st	Z, r1
 886:	24 c0       	rjmp	.+72     	; 0x8d0 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
 888:	ed 81       	ldd	r30, Y+5	; 0x05
 88a:	fe 81       	ldd	r31, Y+6	; 0x06
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	80 83       	st	Z, r24
 890:	1f c0       	rjmp	.+62     	; 0x8d0 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTD :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PIND_REG,Copy_u8_Pin_ID ) ;
 892:	e0 e3       	ldi	r30, 0x30	; 48
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	48 2f       	mov	r20, r24
 89a:	8c 81       	ldd	r24, Y+4	; 0x04
 89c:	28 2f       	mov	r18, r24
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	02 2e       	mov	r0, r18
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <DIO_u8_Get_Pin_Value+0x142>
 8a8:	88 0f       	add	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	0a 94       	dec	r0
 8ae:	e2 f7       	brpl	.-8      	; 0x8a8 <DIO_u8_Get_Pin_Value+0x13e>
 8b0:	84 23       	and	r24, r20
 8b2:	89 83       	std	Y+1, r24	; 0x01
		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
 8b4:	89 81       	ldd	r24, Y+1	; 0x01
 8b6:	88 23       	and	r24, r24
 8b8:	21 f4       	brne	.+8      	; 0x8c2 <DIO_u8_Get_Pin_Value+0x158>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
 8ba:	ed 81       	ldd	r30, Y+5	; 0x05
 8bc:	fe 81       	ldd	r31, Y+6	; 0x06
 8be:	10 82       	st	Z, r1
 8c0:	07 c0       	rjmp	.+14     	; 0x8d0 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
 8c2:	ed 81       	ldd	r30, Y+5	; 0x05
 8c4:	fe 81       	ldd	r31, Y+6	; 0x06
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	80 83       	st	Z, r24
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	8a 83       	std	Y+2, r24	; 0x02
		}
		return Local_u8_Erorr_State ;
 8d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
 8d2:	28 96       	adiw	r28, 0x08	; 8
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	f8 94       	cli
 8d8:	de bf       	out	0x3e, r29	; 62
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	cd bf       	out	0x3d, r28	; 61
 8de:	cf 91       	pop	r28
 8e0:	df 91       	pop	r29
 8e2:	08 95       	ret

000008e4 <DIO_u8_Set_Port_Direction>:

u8 DIO_u8_Set_Port_Direction (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Direction ){
 8e4:	df 93       	push	r29
 8e6:	cf 93       	push	r28
 8e8:	cd b7       	in	r28, 0x3d	; 61
 8ea:	de b7       	in	r29, 0x3e	; 62
 8ec:	2d 97       	sbiw	r28, 0x0d	; 13
 8ee:	0f b6       	in	r0, 0x3f	; 63
 8f0:	f8 94       	cli
 8f2:	de bf       	out	0x3e, r29	; 62
 8f4:	0f be       	out	0x3f, r0	; 63
 8f6:	cd bf       	out	0x3d, r28	; 61
 8f8:	8a 83       	std	Y+2, r24	; 0x02
 8fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
 8fc:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && ((Copy_u8_Port_Direction == DIO_u8_INPUT)||(Copy_u8_Port_Direction == DIO_u8_OUTPUT)))
 8fe:	8a 81       	ldd	r24, Y+2	; 0x02
 900:	84 30       	cpi	r24, 0x04	; 4
 902:	08 f0       	brcs	.+2      	; 0x906 <DIO_u8_Set_Port_Direction+0x22>
 904:	87 c0       	rjmp	.+270    	; 0xa14 <DIO_u8_Set_Port_Direction+0x130>
 906:	8b 81       	ldd	r24, Y+3	; 0x03
 908:	88 23       	and	r24, r24
 90a:	21 f0       	breq	.+8      	; 0x914 <DIO_u8_Set_Port_Direction+0x30>
 90c:	8b 81       	ldd	r24, Y+3	; 0x03
 90e:	81 30       	cpi	r24, 0x01	; 1
 910:	09 f0       	breq	.+2      	; 0x914 <DIO_u8_Set_Port_Direction+0x30>
 912:	80 c0       	rjmp	.+256    	; 0xa14 <DIO_u8_Set_Port_Direction+0x130>
	{
		switch (Copy_u8_Port_ID)
 914:	8a 81       	ldd	r24, Y+2	; 0x02
 916:	28 2f       	mov	r18, r24
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	3d 87       	std	Y+13, r19	; 0x0d
 91c:	2c 87       	std	Y+12, r18	; 0x0c
 91e:	8c 85       	ldd	r24, Y+12	; 0x0c
 920:	9d 85       	ldd	r25, Y+13	; 0x0d
 922:	81 30       	cpi	r24, 0x01	; 1
 924:	91 05       	cpc	r25, r1
 926:	71 f1       	breq	.+92     	; 0x984 <DIO_u8_Set_Port_Direction+0xa0>
 928:	2c 85       	ldd	r18, Y+12	; 0x0c
 92a:	3d 85       	ldd	r19, Y+13	; 0x0d
 92c:	22 30       	cpi	r18, 0x02	; 2
 92e:	31 05       	cpc	r19, r1
 930:	2c f4       	brge	.+10     	; 0x93c <DIO_u8_Set_Port_Direction+0x58>
 932:	8c 85       	ldd	r24, Y+12	; 0x0c
 934:	9d 85       	ldd	r25, Y+13	; 0x0d
 936:	00 97       	sbiw	r24, 0x00	; 0
 938:	69 f0       	breq	.+26     	; 0x954 <DIO_u8_Set_Port_Direction+0x70>
 93a:	69 c0       	rjmp	.+210    	; 0xa0e <DIO_u8_Set_Port_Direction+0x12a>
 93c:	2c 85       	ldd	r18, Y+12	; 0x0c
 93e:	3d 85       	ldd	r19, Y+13	; 0x0d
 940:	22 30       	cpi	r18, 0x02	; 2
 942:	31 05       	cpc	r19, r1
 944:	b1 f1       	breq	.+108    	; 0x9b2 <DIO_u8_Set_Port_Direction+0xce>
 946:	8c 85       	ldd	r24, Y+12	; 0x0c
 948:	9d 85       	ldd	r25, Y+13	; 0x0d
 94a:	83 30       	cpi	r24, 0x03	; 3
 94c:	91 05       	cpc	r25, r1
 94e:	09 f4       	brne	.+2      	; 0x952 <DIO_u8_Set_Port_Direction+0x6e>
 950:	47 c0       	rjmp	.+142    	; 0x9e0 <DIO_u8_Set_Port_Direction+0xfc>
 952:	5d c0       	rjmp	.+186    	; 0xa0e <DIO_u8_Set_Port_Direction+0x12a>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Port_Direction)
 954:	8b 81       	ldd	r24, Y+3	; 0x03
 956:	28 2f       	mov	r18, r24
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	3b 87       	std	Y+11, r19	; 0x0b
 95c:	2a 87       	std	Y+10, r18	; 0x0a
 95e:	8a 85       	ldd	r24, Y+10	; 0x0a
 960:	9b 85       	ldd	r25, Y+11	; 0x0b
 962:	00 97       	sbiw	r24, 0x00	; 0
 964:	59 f0       	breq	.+22     	; 0x97c <DIO_u8_Set_Port_Direction+0x98>
 966:	2a 85       	ldd	r18, Y+10	; 0x0a
 968:	3b 85       	ldd	r19, Y+11	; 0x0b
 96a:	21 30       	cpi	r18, 0x01	; 1
 96c:	31 05       	cpc	r19, r1
 96e:	09 f0       	breq	.+2      	; 0x972 <DIO_u8_Set_Port_Direction+0x8e>
 970:	53 c0       	rjmp	.+166    	; 0xa18 <DIO_u8_Set_Port_Direction+0x134>
			{
			    case DIO_u8_OUTPUT : DIO_u8_PORTA_REG = 0xff;break;
 972:	eb e3       	ldi	r30, 0x3B	; 59
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	80 83       	st	Z, r24
 97a:	4e c0       	rjmp	.+156    	; 0xa18 <DIO_u8_Set_Port_Direction+0x134>
			    case DIO_u8_INPUT : DIO_u8_PORTA_REG = 0x00;break;
 97c:	eb e3       	ldi	r30, 0x3B	; 59
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	10 82       	st	Z, r1
 982:	4a c0       	rjmp	.+148    	; 0xa18 <DIO_u8_Set_Port_Direction+0x134>
			}
			break;
			case DIO_u8_PORTB :
				switch (Copy_u8_Port_Direction)
 984:	8b 81       	ldd	r24, Y+3	; 0x03
 986:	28 2f       	mov	r18, r24
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	39 87       	std	Y+9, r19	; 0x09
 98c:	28 87       	std	Y+8, r18	; 0x08
 98e:	88 85       	ldd	r24, Y+8	; 0x08
 990:	99 85       	ldd	r25, Y+9	; 0x09
 992:	00 97       	sbiw	r24, 0x00	; 0
 994:	51 f0       	breq	.+20     	; 0x9aa <DIO_u8_Set_Port_Direction+0xc6>
 996:	28 85       	ldd	r18, Y+8	; 0x08
 998:	39 85       	ldd	r19, Y+9	; 0x09
 99a:	21 30       	cpi	r18, 0x01	; 1
 99c:	31 05       	cpc	r19, r1
 99e:	e1 f5       	brne	.+120    	; 0xa18 <DIO_u8_Set_Port_Direction+0x134>
				{
				    case DIO_u8_OUTPUT : DIO_u8_PORTB_REG = 0xff;break;
 9a0:	e8 e3       	ldi	r30, 0x38	; 56
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	80 83       	st	Z, r24
 9a8:	37 c0       	rjmp	.+110    	; 0xa18 <DIO_u8_Set_Port_Direction+0x134>
				    case DIO_u8_INPUT : DIO_u8_PORTB_REG = 0x00;break;
 9aa:	e8 e3       	ldi	r30, 0x38	; 56
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	10 82       	st	Z, r1
 9b0:	33 c0       	rjmp	.+102    	; 0xa18 <DIO_u8_Set_Port_Direction+0x134>
				}
				break;
				case DIO_u8_PORTC :
					switch (Copy_u8_Port_Direction)
 9b2:	8b 81       	ldd	r24, Y+3	; 0x03
 9b4:	28 2f       	mov	r18, r24
 9b6:	30 e0       	ldi	r19, 0x00	; 0
 9b8:	3f 83       	std	Y+7, r19	; 0x07
 9ba:	2e 83       	std	Y+6, r18	; 0x06
 9bc:	8e 81       	ldd	r24, Y+6	; 0x06
 9be:	9f 81       	ldd	r25, Y+7	; 0x07
 9c0:	00 97       	sbiw	r24, 0x00	; 0
 9c2:	51 f0       	breq	.+20     	; 0x9d8 <DIO_u8_Set_Port_Direction+0xf4>
 9c4:	2e 81       	ldd	r18, Y+6	; 0x06
 9c6:	3f 81       	ldd	r19, Y+7	; 0x07
 9c8:	21 30       	cpi	r18, 0x01	; 1
 9ca:	31 05       	cpc	r19, r1
 9cc:	29 f5       	brne	.+74     	; 0xa18 <DIO_u8_Set_Port_Direction+0x134>
					{
					    case DIO_u8_OUTPUT : DIO_u8_PORTC_REG = 0xff;break;
 9ce:	e5 e3       	ldi	r30, 0x35	; 53
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	8f ef       	ldi	r24, 0xFF	; 255
 9d4:	80 83       	st	Z, r24
 9d6:	20 c0       	rjmp	.+64     	; 0xa18 <DIO_u8_Set_Port_Direction+0x134>
					    case DIO_u8_INPUT : DIO_u8_PORTC_REG = 0x00;break;
 9d8:	e5 e3       	ldi	r30, 0x35	; 53
 9da:	f0 e0       	ldi	r31, 0x00	; 0
 9dc:	10 82       	st	Z, r1
 9de:	1c c0       	rjmp	.+56     	; 0xa18 <DIO_u8_Set_Port_Direction+0x134>
					}
					break;
					case DIO_u8_PORTD :
						switch (Copy_u8_Port_Direction)
 9e0:	8b 81       	ldd	r24, Y+3	; 0x03
 9e2:	28 2f       	mov	r18, r24
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	3d 83       	std	Y+5, r19	; 0x05
 9e8:	2c 83       	std	Y+4, r18	; 0x04
 9ea:	8c 81       	ldd	r24, Y+4	; 0x04
 9ec:	9d 81       	ldd	r25, Y+5	; 0x05
 9ee:	00 97       	sbiw	r24, 0x00	; 0
 9f0:	51 f0       	breq	.+20     	; 0xa06 <DIO_u8_Set_Port_Direction+0x122>
 9f2:	2c 81       	ldd	r18, Y+4	; 0x04
 9f4:	3d 81       	ldd	r19, Y+5	; 0x05
 9f6:	21 30       	cpi	r18, 0x01	; 1
 9f8:	31 05       	cpc	r19, r1
 9fa:	71 f4       	brne	.+28     	; 0xa18 <DIO_u8_Set_Port_Direction+0x134>
						{
						    case DIO_u8_OUTPUT : DIO_u8_PORTD_REG = 0xff;break;
 9fc:	e2 e3       	ldi	r30, 0x32	; 50
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	8f ef       	ldi	r24, 0xFF	; 255
 a02:	80 83       	st	Z, r24
 a04:	09 c0       	rjmp	.+18     	; 0xa18 <DIO_u8_Set_Port_Direction+0x134>
						    case DIO_u8_INPUT : DIO_u8_PORTD_REG = 0x00;break;
 a06:	e2 e3       	ldi	r30, 0x32	; 50
 a08:	f0 e0       	ldi	r31, 0x00	; 0
 a0a:	10 82       	st	Z, r1
 a0c:	05 c0       	rjmp	.+10     	; 0xa18 <DIO_u8_Set_Port_Direction+0x134>
						}
						break;
						default:Local_u8_Erorr_State = ES_NOK ;
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	89 83       	std	Y+1, r24	; 0x01
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <DIO_u8_Set_Port_Direction+0x134>

		}
	}
	else {
				Local_u8_Erorr_State = ES_NOK ;
 a14:	81 e0       	ldi	r24, 0x01	; 1
 a16:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
 a18:	89 81       	ldd	r24, Y+1	; 0x01

}
 a1a:	2d 96       	adiw	r28, 0x0d	; 13
 a1c:	0f b6       	in	r0, 0x3f	; 63
 a1e:	f8 94       	cli
 a20:	de bf       	out	0x3e, r29	; 62
 a22:	0f be       	out	0x3f, r0	; 63
 a24:	cd bf       	out	0x3d, r28	; 61
 a26:	cf 91       	pop	r28
 a28:	df 91       	pop	r29
 a2a:	08 95       	ret

00000a2c <DIO_u8_Set_Port_Value>:

u8 DIO_u8_Set_Port_Value     (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Value ){
 a2c:	df 93       	push	r29
 a2e:	cf 93       	push	r28
 a30:	00 d0       	rcall	.+0      	; 0xa32 <DIO_u8_Set_Port_Value+0x6>
 a32:	00 d0       	rcall	.+0      	; 0xa34 <DIO_u8_Set_Port_Value+0x8>
 a34:	0f 92       	push	r0
 a36:	cd b7       	in	r28, 0x3d	; 61
 a38:	de b7       	in	r29, 0x3e	; 62
 a3a:	8a 83       	std	Y+2, r24	; 0x02
 a3c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
 a3e:	19 82       	std	Y+1, r1	; 0x01

			switch (Copy_u8_Port_ID)
 a40:	8a 81       	ldd	r24, Y+2	; 0x02
 a42:	28 2f       	mov	r18, r24
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	3d 83       	std	Y+5, r19	; 0x05
 a48:	2c 83       	std	Y+4, r18	; 0x04
 a4a:	8c 81       	ldd	r24, Y+4	; 0x04
 a4c:	9d 81       	ldd	r25, Y+5	; 0x05
 a4e:	81 30       	cpi	r24, 0x01	; 1
 a50:	91 05       	cpc	r25, r1
 a52:	d1 f0       	breq	.+52     	; 0xa88 <DIO_u8_Set_Port_Value+0x5c>
 a54:	2c 81       	ldd	r18, Y+4	; 0x04
 a56:	3d 81       	ldd	r19, Y+5	; 0x05
 a58:	22 30       	cpi	r18, 0x02	; 2
 a5a:	31 05       	cpc	r19, r1
 a5c:	2c f4       	brge	.+10     	; 0xa68 <DIO_u8_Set_Port_Value+0x3c>
 a5e:	8c 81       	ldd	r24, Y+4	; 0x04
 a60:	9d 81       	ldd	r25, Y+5	; 0x05
 a62:	00 97       	sbiw	r24, 0x00	; 0
 a64:	61 f0       	breq	.+24     	; 0xa7e <DIO_u8_Set_Port_Value+0x52>
 a66:	1f c0       	rjmp	.+62     	; 0xaa6 <DIO_u8_Set_Port_Value+0x7a>
 a68:	2c 81       	ldd	r18, Y+4	; 0x04
 a6a:	3d 81       	ldd	r19, Y+5	; 0x05
 a6c:	22 30       	cpi	r18, 0x02	; 2
 a6e:	31 05       	cpc	r19, r1
 a70:	81 f0       	breq	.+32     	; 0xa92 <DIO_u8_Set_Port_Value+0x66>
 a72:	8c 81       	ldd	r24, Y+4	; 0x04
 a74:	9d 81       	ldd	r25, Y+5	; 0x05
 a76:	83 30       	cpi	r24, 0x03	; 3
 a78:	91 05       	cpc	r25, r1
 a7a:	81 f0       	breq	.+32     	; 0xa9c <DIO_u8_Set_Port_Value+0x70>
 a7c:	14 c0       	rjmp	.+40     	; 0xaa6 <DIO_u8_Set_Port_Value+0x7a>
			{
			case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8_Port_Value; break;
 a7e:	eb e3       	ldi	r30, 0x3B	; 59
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	8b 81       	ldd	r24, Y+3	; 0x03
 a84:	80 83       	st	Z, r24
 a86:	11 c0       	rjmp	.+34     	; 0xaaa <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8_Port_Value; break;
 a88:	e8 e3       	ldi	r30, 0x38	; 56
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	8b 81       	ldd	r24, Y+3	; 0x03
 a8e:	80 83       	st	Z, r24
 a90:	0c c0       	rjmp	.+24     	; 0xaaa <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8_Port_Value; break;
 a92:	e5 e3       	ldi	r30, 0x35	; 53
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	8b 81       	ldd	r24, Y+3	; 0x03
 a98:	80 83       	st	Z, r24
 a9a:	07 c0       	rjmp	.+14     	; 0xaaa <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8_Port_Value; break;
 a9c:	e2 e3       	ldi	r30, 0x32	; 50
 a9e:	f0 e0       	ldi	r31, 0x00	; 0
 aa0:	8b 81       	ldd	r24, Y+3	; 0x03
 aa2:	80 83       	st	Z, r24
 aa4:	02 c0       	rjmp	.+4      	; 0xaaa <DIO_u8_Set_Port_Value+0x7e>
			default :Local_u8_Erorr_State = ES_NOK;
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
 aaa:	89 81       	ldd	r24, Y+1	; 0x01

}
 aac:	0f 90       	pop	r0
 aae:	0f 90       	pop	r0
 ab0:	0f 90       	pop	r0
 ab2:	0f 90       	pop	r0
 ab4:	0f 90       	pop	r0
 ab6:	cf 91       	pop	r28
 ab8:	df 91       	pop	r29
 aba:	08 95       	ret

00000abc <DIO_u8_Get_Port_Value>:

u8 DIO_u8_Get_Port_Value     (u8 Copy_u8_Port_ID, u8 * Copy_u8_Returned_Port_Value ){
 abc:	df 93       	push	r29
 abe:	cf 93       	push	r28
 ac0:	00 d0       	rcall	.+0      	; 0xac2 <DIO_u8_Get_Port_Value+0x6>
 ac2:	00 d0       	rcall	.+0      	; 0xac4 <DIO_u8_Get_Port_Value+0x8>
 ac4:	00 d0       	rcall	.+0      	; 0xac6 <DIO_u8_Get_Port_Value+0xa>
 ac6:	cd b7       	in	r28, 0x3d	; 61
 ac8:	de b7       	in	r29, 0x3e	; 62
 aca:	8a 83       	std	Y+2, r24	; 0x02
 acc:	7c 83       	std	Y+4, r23	; 0x04
 ace:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
 ad0:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8_Returned_Port_Value != NULL){
 ad2:	8b 81       	ldd	r24, Y+3	; 0x03
 ad4:	9c 81       	ldd	r25, Y+4	; 0x04
 ad6:	00 97       	sbiw	r24, 0x00	; 0
 ad8:	09 f4       	brne	.+2      	; 0xadc <DIO_u8_Get_Port_Value+0x20>
 ada:	3e c0       	rjmp	.+124    	; 0xb58 <DIO_u8_Get_Port_Value+0x9c>
		switch (Copy_u8_Port_ID)
 adc:	8a 81       	ldd	r24, Y+2	; 0x02
 ade:	28 2f       	mov	r18, r24
 ae0:	30 e0       	ldi	r19, 0x00	; 0
 ae2:	3e 83       	std	Y+6, r19	; 0x06
 ae4:	2d 83       	std	Y+5, r18	; 0x05
 ae6:	8d 81       	ldd	r24, Y+5	; 0x05
 ae8:	9e 81       	ldd	r25, Y+6	; 0x06
 aea:	81 30       	cpi	r24, 0x01	; 1
 aec:	91 05       	cpc	r25, r1
 aee:	e1 f0       	breq	.+56     	; 0xb28 <DIO_u8_Get_Port_Value+0x6c>
 af0:	2d 81       	ldd	r18, Y+5	; 0x05
 af2:	3e 81       	ldd	r19, Y+6	; 0x06
 af4:	22 30       	cpi	r18, 0x02	; 2
 af6:	31 05       	cpc	r19, r1
 af8:	2c f4       	brge	.+10     	; 0xb04 <DIO_u8_Get_Port_Value+0x48>
 afa:	8d 81       	ldd	r24, Y+5	; 0x05
 afc:	9e 81       	ldd	r25, Y+6	; 0x06
 afe:	00 97       	sbiw	r24, 0x00	; 0
 b00:	61 f0       	breq	.+24     	; 0xb1a <DIO_u8_Get_Port_Value+0x5e>
 b02:	27 c0       	rjmp	.+78     	; 0xb52 <DIO_u8_Get_Port_Value+0x96>
 b04:	2d 81       	ldd	r18, Y+5	; 0x05
 b06:	3e 81       	ldd	r19, Y+6	; 0x06
 b08:	22 30       	cpi	r18, 0x02	; 2
 b0a:	31 05       	cpc	r19, r1
 b0c:	a1 f0       	breq	.+40     	; 0xb36 <DIO_u8_Get_Port_Value+0x7a>
 b0e:	8d 81       	ldd	r24, Y+5	; 0x05
 b10:	9e 81       	ldd	r25, Y+6	; 0x06
 b12:	83 30       	cpi	r24, 0x03	; 3
 b14:	91 05       	cpc	r25, r1
 b16:	b1 f0       	breq	.+44     	; 0xb44 <DIO_u8_Get_Port_Value+0x88>
 b18:	1c c0       	rjmp	.+56     	; 0xb52 <DIO_u8_Get_Port_Value+0x96>
		{
		case DIO_u8_PORTA :* Copy_u8_Returned_Port_Value =DIO_u8_PORTA_REG; break;
 b1a:	eb e3       	ldi	r30, 0x3B	; 59
 b1c:	f0 e0       	ldi	r31, 0x00	; 0
 b1e:	80 81       	ld	r24, Z
 b20:	eb 81       	ldd	r30, Y+3	; 0x03
 b22:	fc 81       	ldd	r31, Y+4	; 0x04
 b24:	80 83       	st	Z, r24
 b26:	1a c0       	rjmp	.+52     	; 0xb5c <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTB :* Copy_u8_Returned_Port_Value =DIO_u8_PORTB_REG; break;
 b28:	e8 e3       	ldi	r30, 0x38	; 56
 b2a:	f0 e0       	ldi	r31, 0x00	; 0
 b2c:	80 81       	ld	r24, Z
 b2e:	eb 81       	ldd	r30, Y+3	; 0x03
 b30:	fc 81       	ldd	r31, Y+4	; 0x04
 b32:	80 83       	st	Z, r24
 b34:	13 c0       	rjmp	.+38     	; 0xb5c <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTC :* Copy_u8_Returned_Port_Value =DIO_u8_PORTC_REG; break;
 b36:	e5 e3       	ldi	r30, 0x35	; 53
 b38:	f0 e0       	ldi	r31, 0x00	; 0
 b3a:	80 81       	ld	r24, Z
 b3c:	eb 81       	ldd	r30, Y+3	; 0x03
 b3e:	fc 81       	ldd	r31, Y+4	; 0x04
 b40:	80 83       	st	Z, r24
 b42:	0c c0       	rjmp	.+24     	; 0xb5c <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTD :* Copy_u8_Returned_Port_Value =DIO_u8_PORTD_REG; break;
 b44:	e2 e3       	ldi	r30, 0x32	; 50
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	80 81       	ld	r24, Z
 b4a:	eb 81       	ldd	r30, Y+3	; 0x03
 b4c:	fc 81       	ldd	r31, Y+4	; 0x04
 b4e:	80 83       	st	Z, r24
 b50:	05 c0       	rjmp	.+10     	; 0xb5c <DIO_u8_Get_Port_Value+0xa0>
		default :Local_u8_Erorr_State = ES_NOK;
 b52:	81 e0       	ldi	r24, 0x01	; 1
 b54:	89 83       	std	Y+1, r24	; 0x01
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <DIO_u8_Get_Port_Value+0xa0>
		}}
		else {
			Local_u8_Erorr_State = ES_NOK ;
 b58:	81 e0       	ldi	r24, 0x01	; 1
 b5a:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8_Erorr_State ;
 b5c:	89 81       	ldd	r24, Y+1	; 0x01

}
 b5e:	26 96       	adiw	r28, 0x06	; 6
 b60:	0f b6       	in	r0, 0x3f	; 63
 b62:	f8 94       	cli
 b64:	de bf       	out	0x3e, r29	; 62
 b66:	0f be       	out	0x3f, r0	; 63
 b68:	cd bf       	out	0x3d, r28	; 61
 b6a:	cf 91       	pop	r28
 b6c:	df 91       	pop	r29
 b6e:	08 95       	ret

00000b70 <main>:
#include "../MCAL/1-DIO/DIO_interface.h"
#include "../MCAL/7-UART/UART_interface.h"

#include<util/delay.h>

int main(){
 b70:	df 93       	push	r29
 b72:	cf 93       	push	r28
 b74:	0f 92       	push	r0
 b76:	cd b7       	in	r28, 0x3d	; 61
 b78:	de b7       	in	r29, 0x3e	; 62
	u8 data=0;
 b7a:	19 82       	std	Y+1, r1	; 0x01
	DIO_voidInit();
 b7c:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_voidInit>
	UART_enum_INIT();
 b80:	0e 94 41 00 	call	0x82	; 0x82 <UART_enum_INIT>
	DIO_u8_Set_Port_Direction(DIO_u8_PORTA,DIO_u8_OUTPUT);
 b84:	80 e0       	ldi	r24, 0x00	; 0
 b86:	61 e0       	ldi	r22, 0x01	; 1
 b88:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_u8_Set_Port_Direction>
	DIO_u8_Set_Port_Value(DIO_u8_PORTA,DIO_u8_LOW);
 b8c:	80 e0       	ldi	r24, 0x00	; 0
 b8e:	60 e0       	ldi	r22, 0x00	; 0
 b90:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_u8_Set_Port_Value>

	DIO_u8_Set_Pin_Direction(DIO_u8_PORTD,DIO_u8_PIN0,DIO_u8_INPUT);
 b94:	83 e0       	ldi	r24, 0x03	; 3
 b96:	60 e0       	ldi	r22, 0x00	; 0
 b98:	40 e0       	ldi	r20, 0x00	; 0
 b9a:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_u8_Set_Pin_Direction>
	DIO_u8_Set_Pin_Direction(DIO_u8_PORTD,DIO_u8_PIN1,DIO_u8_OUTPUT);
 b9e:	83 e0       	ldi	r24, 0x03	; 3
 ba0:	61 e0       	ldi	r22, 0x01	; 1
 ba2:	41 e0       	ldi	r20, 0x01	; 1
 ba4:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_u8_Set_Pin_Direction>
//test
//	DIO_u8_Set_Pin_Value(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);

//print in terminal
	UART_enum_Send_String("enter r , y or g ");
 ba8:	80 e6       	ldi	r24, 0x60	; 96
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	0e 94 db 00 	call	0x1b6	; 0x1b6 <UART_enum_Send_String>
	while(1){

UART_enum_RECIEVE_Byte(&data);
 bb0:	ce 01       	movw	r24, r28
 bb2:	01 96       	adiw	r24, 0x01	; 1
 bb4:	0e 94 b9 00 	call	0x172	; 0x172 <UART_enum_RECIEVE_Byte>
if(data == 'r'){
 bb8:	89 81       	ldd	r24, Y+1	; 0x01
 bba:	82 37       	cpi	r24, 0x72	; 114
 bbc:	81 f4       	brne	.+32     	; 0xbde <main+0x6e>
	DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
 bbe:	80 e0       	ldi	r24, 0x00	; 0
 bc0:	60 e0       	ldi	r22, 0x00	; 0
 bc2:	41 e0       	ldi	r20, 0x01	; 1
 bc4:	0e 94 82 02 	call	0x504	; 0x504 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
 bc8:	81 e0       	ldi	r24, 0x01	; 1
 bca:	61 e0       	ldi	r22, 0x01	; 1
 bcc:	40 e0       	ldi	r20, 0x00	; 0
 bce:	0e 94 82 02 	call	0x504	; 0x504 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_LOW);
 bd2:	80 e0       	ldi	r24, 0x00	; 0
 bd4:	62 e0       	ldi	r22, 0x02	; 2
 bd6:	40 e0       	ldi	r20, 0x00	; 0
 bd8:	0e 94 82 02 	call	0x504	; 0x504 <DIO_u8_Set_Pin_Value>
 bdc:	e9 cf       	rjmp	.-46     	; 0xbb0 <main+0x40>

}
else if(data=='y'){
 bde:	89 81       	ldd	r24, Y+1	; 0x01
 be0:	89 37       	cpi	r24, 0x79	; 121
 be2:	81 f4       	brne	.+32     	; 0xc04 <main+0x94>
	DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
 be4:	80 e0       	ldi	r24, 0x00	; 0
 be6:	60 e0       	ldi	r22, 0x00	; 0
 be8:	40 e0       	ldi	r20, 0x00	; 0
 bea:	0e 94 82 02 	call	0x504	; 0x504 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_HIGH);
 bee:	80 e0       	ldi	r24, 0x00	; 0
 bf0:	61 e0       	ldi	r22, 0x01	; 1
 bf2:	41 e0       	ldi	r20, 0x01	; 1
 bf4:	0e 94 82 02 	call	0x504	; 0x504 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW);
 bf8:	80 e0       	ldi	r24, 0x00	; 0
 bfa:	61 e0       	ldi	r22, 0x01	; 1
 bfc:	40 e0       	ldi	r20, 0x00	; 0
 bfe:	0e 94 82 02 	call	0x504	; 0x504 <DIO_u8_Set_Pin_Value>
 c02:	d6 cf       	rjmp	.-84     	; 0xbb0 <main+0x40>

}
else if(data=='g'){
 c04:	89 81       	ldd	r24, Y+1	; 0x01
 c06:	87 36       	cpi	r24, 0x67	; 103
 c08:	99 f6       	brne	.-90     	; 0xbb0 <main+0x40>
	DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
 c0a:	80 e0       	ldi	r24, 0x00	; 0
 c0c:	60 e0       	ldi	r22, 0x00	; 0
 c0e:	40 e0       	ldi	r20, 0x00	; 0
 c10:	0e 94 82 02 	call	0x504	; 0x504 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW);
 c14:	80 e0       	ldi	r24, 0x00	; 0
 c16:	61 e0       	ldi	r22, 0x01	; 1
 c18:	40 e0       	ldi	r20, 0x00	; 0
 c1a:	0e 94 82 02 	call	0x504	; 0x504 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_HIGH);
 c1e:	80 e0       	ldi	r24, 0x00	; 0
 c20:	61 e0       	ldi	r22, 0x01	; 1
 c22:	41 e0       	ldi	r20, 0x01	; 1
 c24:	0e 94 82 02 	call	0x504	; 0x504 <DIO_u8_Set_Pin_Value>
 c28:	c3 cf       	rjmp	.-122    	; 0xbb0 <main+0x40>

00000c2a <_exit>:
 c2a:	f8 94       	cli

00000c2c <__stop_program>:
 c2c:	ff cf       	rjmp	.-2      	; 0xc2c <__stop_program>

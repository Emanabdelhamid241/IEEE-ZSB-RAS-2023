
STEPPER_MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003836  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00800060  00003836  000038ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800128  00800128  00003992  2**0
                  ALLOC
  3 .stab         000034c8  00000000  00000000  00003994  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000128b  00000000  00000000  00006e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000080e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008247  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000083d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a41b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c4a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 32       	cpi	r26, 0x28	; 40
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e2       	ldi	r26, 0x28	; 40
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 39 18 	call	0x3072	; 0x3072 <main>
      8a:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e0       	ldi	r26, 0x07	; 7
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ee 1b 	jmp	0x37dc	; 0x37dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0a 1c 	jmp	0x3814	; 0x3814 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ee 1b 	jmp	0x37dc	; 0x37dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0a 1c 	jmp	0x3814	; 0x3814 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e0       	ldi	r24, 0x07	; 7
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ee 1b 	jmp	0x37dc	; 0x37dc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0a 1c 	jmp	0x3814	; 0x3814 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ee 1b 	jmp	0x37dc	; 0x37dc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0a 1c 	jmp	0x3814	; 0x3814 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ee 1b 	jmp	0x37dc	; 0x37dc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0a 1c 	jmp	0x3814	; 0x3814 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
//MCAL Layer
#include "config.h"
#include "private.h"
#include "interface.h"

void DIO_voidInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = CONC(DIO_U8_PA7_INTIAL_DIRECTION, DIO_U8_PA6_INTIAL_DIRECTION, DIO_U8_PA5_INTIAL_DIRECTION, DIO_U8_PA4_INTIAL_DIRECTION,
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 ef       	ldi	r24, 0xF0	; 240
     cac:	80 83       	st	Z, r24
		                   DIO_U8_PA3_INTIAL_DIRECTION, DIO_U8_PA2_INTIAL_DIRECTION, DIO_U8_PA1_INTIAL_DIRECTION, DIO_U8_PA0_INTIAL_DIRECTION);
		                 			
	DIO_u8_DDRB_REG = CONC(DIO_U8_PB7_INTIAL_DIRECTION, DIO_U8_PB6_INTIAL_DIRECTION, DIO_U8_PB5_INTIAL_DIRECTION, DIO_U8_PB4_INTIAL_DIRECTION,
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	87 e0       	ldi	r24, 0x07	; 7
     cb4:	80 83       	st	Z, r24
				           DIO_U8_PB3_INTIAL_DIRECTION, DIO_U8_PB2_INTIAL_DIRECTION, DIO_U8_PB1_INTIAL_DIRECTION, DIO_U8_PB0_INTIAL_DIRECTION);
					                                                                                                                      
	DIO_u8_DDRC_REG = CONC(DIO_U8_PC7_INTIAL_DIRECTION, DIO_U8_PC6_INTIAL_DIRECTION, DIO_U8_PC5_INTIAL_DIRECTION, DIO_U8_PC4_INTIAL_DIRECTION,
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	10 82       	st	Z, r1
		                   DIO_U8_PC3_INTIAL_DIRECTION, DIO_U8_PC2_INTIAL_DIRECTION, DIO_U8_PC1_INTIAL_DIRECTION, DIO_U8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = CONC(DIO_U8_PD7_INTIAL_DIRECTION, DIO_U8_PD6_INTIAL_DIRECTION, DIO_U8_PD5_INTIAL_DIRECTION, DIO_U8_PD4_INTIAL_DIRECTION,
     cbc:	e1 e3       	ldi	r30, 0x31	; 49
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	80 83       	st	Z, r24
				           DIO_U8_PD3_INTIAL_DIRECTION, DIO_U8_PD2_INTIAL_DIRECTION, DIO_U8_PD1_INTIAL_DIRECTION, DIO_U8_PD0_INTIAL_DIRECTION);

	DIO_u8_PORTA_REG = CONC(DIO_U8_PA7_INTIAL_VALUE, DIO_U8_PA6_INTIAL_VALUE, DIO_U8_PA5_INTIAL_VALUE, DIO_U8_PA4_INTIAL_VALUE,
     cc4:	eb e3       	ldi	r30, 0x3B	; 59
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	80 83       	st	Z, r24
						    DIO_U8_PA3_INTIAL_VALUE, DIO_U8_PA2_INTIAL_VALUE, DIO_U8_PA1_INTIAL_VALUE, DIO_U8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = CONC(DIO_U8_PB7_INTIAL_VALUE, DIO_U8_PB6_INTIAL_VALUE, DIO_U8_PB5_INTIAL_VALUE, DIO_U8_PB4_INTIAL_VALUE,
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1
						   	DIO_U8_PB3_INTIAL_VALUE, DIO_U8_PB2_INTIAL_VALUE, DIO_U8_PB1_INTIAL_VALUE, DIO_U8_PB0_INTIAL_VALUE);
												 
    DIO_u8_PORTC_REG = CONC(DIO_U8_PC7_INTIAL_VALUE, DIO_U8_PC6_INTIAL_VALUE, DIO_U8_PC5_INTIAL_VALUE, DIO_U8_PC4_INTIAL_VALUE,
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	10 82       	st	Z, r1
					        DIO_U8_PC3_INTIAL_VALUE, DIO_U8_PC2_INTIAL_VALUE, DIO_U8_PC1_INTIAL_VALUE, DIO_U8_PC0_INTIAL_VALUE);
																		   
    DIO_u8_PORTD_REG = CONC(DIO_U8_PD7_INTIAL_VALUE, DIO_U8_PD6_INTIAL_VALUE, DIO_U8_PD5_INTIAL_VALUE, DIO_U8_PD4_INTIAL_VALUE,
     cd8:	e2 e3       	ldi	r30, 0x32	; 50
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	10 82       	st	Z, r1
						    DIO_U8_PD3_INTIAL_VALUE, DIO_U8_PD2_INTIAL_VALUE, DIO_U8_PD1_INTIAL_VALUE, DIO_U8_PD0_INTIAL_VALUE);
    }
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <DIO_u8_Set_Pin_Direction>:

u8 DIO_u8_Set_Pin_Direction  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Direction ){
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	2e 97       	sbiw	r28, 0x0e	; 14
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	8a 83       	std	Y+2, r24	; 0x02
     cfa:	6b 83       	std	Y+3, r22	; 0x03
     cfc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
     cfe:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Direction == DIO_u8_INTIAL_INPUT)||(Copy_u8_Pin_Direction == DIO_u8_INTIAL_OUTPUT)))
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	08 f0       	brcs	.+2      	; 0xd08 <DIO_u8_Set_Pin_Direction+0x24>
     d06:	15 c1       	rjmp	.+554    	; 0xf32 <DIO_u8_Set_Pin_Direction+0x24e>
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	88 30       	cpi	r24, 0x08	; 8
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <DIO_u8_Set_Pin_Direction+0x2c>
     d0e:	11 c1       	rjmp	.+546    	; 0xf32 <DIO_u8_Set_Pin_Direction+0x24e>
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	88 23       	and	r24, r24
     d14:	21 f0       	breq	.+8      	; 0xd1e <DIO_u8_Set_Pin_Direction+0x3a>
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	09 f0       	breq	.+2      	; 0xd1e <DIO_u8_Set_Pin_Direction+0x3a>
     d1c:	0a c1       	rjmp	.+532    	; 0xf32 <DIO_u8_Set_Pin_Direction+0x24e>
	{
        switch (Copy_u8_Port_ID)
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	3e 87       	std	Y+14, r19	; 0x0e
     d26:	2d 87       	std	Y+13, r18	; 0x0d
     d28:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	91 05       	cpc	r25, r1
     d30:	09 f4       	brne	.+2      	; 0xd34 <DIO_u8_Set_Pin_Direction+0x50>
     d32:	51 c0       	rjmp	.+162    	; 0xdd6 <DIO_u8_Set_Pin_Direction+0xf2>
     d34:	2d 85       	ldd	r18, Y+13	; 0x0d
     d36:	3e 85       	ldd	r19, Y+14	; 0x0e
     d38:	22 30       	cpi	r18, 0x02	; 2
     d3a:	31 05       	cpc	r19, r1
     d3c:	2c f4       	brge	.+10     	; 0xd48 <DIO_u8_Set_Pin_Direction+0x64>
     d3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d40:	9e 85       	ldd	r25, Y+14	; 0x0e
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	71 f0       	breq	.+28     	; 0xd62 <DIO_u8_Set_Pin_Direction+0x7e>
     d46:	f7 c0       	rjmp	.+494    	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>
     d48:	2d 85       	ldd	r18, Y+13	; 0x0d
     d4a:	3e 85       	ldd	r19, Y+14	; 0x0e
     d4c:	22 30       	cpi	r18, 0x02	; 2
     d4e:	31 05       	cpc	r19, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <DIO_u8_Set_Pin_Direction+0x70>
     d52:	7b c0       	rjmp	.+246    	; 0xe4a <DIO_u8_Set_Pin_Direction+0x166>
     d54:	8d 85       	ldd	r24, Y+13	; 0x0d
     d56:	9e 85       	ldd	r25, Y+14	; 0x0e
     d58:	83 30       	cpi	r24, 0x03	; 3
     d5a:	91 05       	cpc	r25, r1
     d5c:	09 f4       	brne	.+2      	; 0xd60 <DIO_u8_Set_Pin_Direction+0x7c>
     d5e:	af c0       	rjmp	.+350    	; 0xebe <DIO_u8_Set_Pin_Direction+0x1da>
     d60:	ea c0       	rjmp	.+468    	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>
        {
               case DIO_u8_PORTA:
            	   switch (Copy_u8_Pin_Direction)
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3c 87       	std	Y+12, r19	; 0x0c
     d6a:	2b 87       	std	Y+11, r18	; 0x0b
     d6c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d6e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	c9 f0       	breq	.+50     	; 0xda6 <DIO_u8_Set_Pin_Direction+0xc2>
     d74:	2b 85       	ldd	r18, Y+11	; 0x0b
     d76:	3c 85       	ldd	r19, Y+12	; 0x0c
     d78:	21 30       	cpi	r18, 0x01	; 1
     d7a:	31 05       	cpc	r19, r1
     d7c:	49 f5       	brne	.+82     	; 0xdd0 <DIO_u8_Set_Pin_Direction+0xec>
            	   {
                    	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
     d7e:	aa e3       	ldi	r26, 0x3A	; 58
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	ea e3       	ldi	r30, 0x3A	; 58
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_u8_Set_Pin_Direction+0xb8>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_u8_Set_Pin_Direction+0xb4>
     da0:	84 2b       	or	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	c8 c0       	rjmp	.+400    	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>
                    	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
     da6:	aa e3       	ldi	r26, 0x3A	; 58
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	ea e3       	ldi	r30, 0x3A	; 58
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_u8_Set_Pin_Direction+0xe0>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_u8_Set_Pin_Direction+0xdc>
     dc8:	80 95       	com	r24
     dca:	84 23       	and	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	b3 c0       	rjmp	.+358    	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	b0 c0       	rjmp	.+352    	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>

            	   }
                  break;
               case DIO_u8_PORTB:
             	   switch (Copy_u8_Pin_Direction)
     dd6:	8c 81       	ldd	r24, Y+4	; 0x04
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	3a 87       	std	Y+10, r19	; 0x0a
     dde:	29 87       	std	Y+9, r18	; 0x09
     de0:	89 85       	ldd	r24, Y+9	; 0x09
     de2:	9a 85       	ldd	r25, Y+10	; 0x0a
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	c9 f0       	breq	.+50     	; 0xe1a <DIO_u8_Set_Pin_Direction+0x136>
     de8:	29 85       	ldd	r18, Y+9	; 0x09
     dea:	3a 85       	ldd	r19, Y+10	; 0x0a
     dec:	21 30       	cpi	r18, 0x01	; 1
     dee:	31 05       	cpc	r19, r1
     df0:	49 f5       	brne	.+82     	; 0xe44 <DIO_u8_Set_Pin_Direction+0x160>
             	   {
                     	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
     df2:	a7 e3       	ldi	r26, 0x37	; 55
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e7 e3       	ldi	r30, 0x37	; 55
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_u8_Set_Pin_Direction+0x12c>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_u8_Set_Pin_Direction+0x128>
     e14:	84 2b       	or	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	8e c0       	rjmp	.+284    	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>
                     	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
     e1a:	a7 e3       	ldi	r26, 0x37	; 55
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e7 e3       	ldi	r30, 0x37	; 55
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <DIO_u8_Set_Pin_Direction+0x154>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <DIO_u8_Set_Pin_Direction+0x150>
     e3c:	80 95       	com	r24
     e3e:	84 23       	and	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	79 c0       	rjmp	.+242    	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	76 c0       	rjmp	.+236    	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>

             	   }
                   break;
               case DIO_u8_PORTC:
                   switch (Copy_u8_Pin_Direction)
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	38 87       	std	Y+8, r19	; 0x08
     e52:	2f 83       	std	Y+7, r18	; 0x07
     e54:	8f 81       	ldd	r24, Y+7	; 0x07
     e56:	98 85       	ldd	r25, Y+8	; 0x08
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	c9 f0       	breq	.+50     	; 0xe8e <DIO_u8_Set_Pin_Direction+0x1aa>
     e5c:	2f 81       	ldd	r18, Y+7	; 0x07
     e5e:	38 85       	ldd	r19, Y+8	; 0x08
     e60:	21 30       	cpi	r18, 0x01	; 1
     e62:	31 05       	cpc	r19, r1
     e64:	49 f5       	brne	.+82     	; 0xeb8 <DIO_u8_Set_Pin_Direction+0x1d4>
                 	   {
                         	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
     e66:	a4 e3       	ldi	r26, 0x34	; 52
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e4 e3       	ldi	r30, 0x34	; 52
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_u8_Set_Pin_Direction+0x1a0>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_u8_Set_Pin_Direction+0x19c>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	54 c0       	rjmp	.+168    	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>
                         	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
     e8e:	a4 e3       	ldi	r26, 0x34	; 52
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e4 e3       	ldi	r30, 0x34	; 52
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_u8_Set_Pin_Direction+0x1c8>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_u8_Set_Pin_Direction+0x1c4>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	3f c0       	rjmp	.+126    	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>
  			           	     default :Local_u8_Erorr_State = ES_NOK ;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	3c c0       	rjmp	.+120    	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>

                 	   }
                       break;

               case DIO_u8_PORTD:
                    switch (Copy_u8_Pin_Direction)
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	3e 83       	std	Y+6, r19	; 0x06
     ec6:	2d 83       	std	Y+5, r18	; 0x05
     ec8:	8d 81       	ldd	r24, Y+5	; 0x05
     eca:	9e 81       	ldd	r25, Y+6	; 0x06
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	c9 f0       	breq	.+50     	; 0xf02 <DIO_u8_Set_Pin_Direction+0x21e>
     ed0:	2d 81       	ldd	r18, Y+5	; 0x05
     ed2:	3e 81       	ldd	r19, Y+6	; 0x06
     ed4:	21 30       	cpi	r18, 0x01	; 1
     ed6:	31 05       	cpc	r19, r1
     ed8:	49 f5       	brne	.+82     	; 0xf2c <DIO_u8_Set_Pin_Direction+0x248>
                     	   {
                             	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
     eda:	a1 e3       	ldi	r26, 0x31	; 49
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e1 e3       	ldi	r30, 0x31	; 49
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_u8_Set_Pin_Direction+0x214>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_u8_Set_Pin_Direction+0x210>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	1a c0       	rjmp	.+52     	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>
                             	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
     f02:	a1 e3       	ldi	r26, 0x31	; 49
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e1 e3       	ldi	r30, 0x31	; 49
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_u8_Set_Pin_Direction+0x23c>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_u8_Set_Pin_Direction+0x238>
     f24:	80 95       	com	r24
     f26:	84 23       	and	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	05 c0       	rjmp	.+10     	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>
      			           	     default :Local_u8_Erorr_State = ES_NOK ;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_u8_Set_Pin_Direction+0x252>
                     	   }
                           break;
        }
	}
	else {
		Local_u8_Erorr_State = ES_NOK ;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_Erorr_State ;
     f36:	89 81       	ldd	r24, Y+1	; 0x01
}
     f38:	2e 96       	adiw	r28, 0x0e	; 14
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <DIO_u8_Set_Pin_Value>:

u8 DIO_u8_Set_Pin_Value  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Value ){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	2e 97       	sbiw	r28, 0x0e	; 14
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	8a 83       	std	Y+2, r24	; 0x02
     f60:	6b 83       	std	Y+3, r22	; 0x03
     f62:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
     f64:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Value == DIO_u8_INPUT)||(Copy_u8_Pin_Value == DIO_u8_OUTPUT)))
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	84 30       	cpi	r24, 0x04	; 4
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <DIO_u8_Set_Pin_Value+0x24>
     f6c:	15 c1       	rjmp	.+554    	; 0x1198 <DIO_u8_Set_Pin_Value+0x24e>
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	88 30       	cpi	r24, 0x08	; 8
     f72:	08 f0       	brcs	.+2      	; 0xf76 <DIO_u8_Set_Pin_Value+0x2c>
     f74:	11 c1       	rjmp	.+546    	; 0x1198 <DIO_u8_Set_Pin_Value+0x24e>
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	88 23       	and	r24, r24
     f7a:	21 f0       	breq	.+8      	; 0xf84 <DIO_u8_Set_Pin_Value+0x3a>
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	09 f0       	breq	.+2      	; 0xf84 <DIO_u8_Set_Pin_Value+0x3a>
     f82:	0a c1       	rjmp	.+532    	; 0x1198 <DIO_u8_Set_Pin_Value+0x24e>
	{
		switch (Copy_u8_Port_ID)
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	3e 87       	std	Y+14, r19	; 0x0e
     f8c:	2d 87       	std	Y+13, r18	; 0x0d
     f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f90:	9e 85       	ldd	r25, Y+14	; 0x0e
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	91 05       	cpc	r25, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <DIO_u8_Set_Pin_Value+0x50>
     f98:	51 c0       	rjmp	.+162    	; 0x103c <DIO_u8_Set_Pin_Value+0xf2>
     f9a:	2d 85       	ldd	r18, Y+13	; 0x0d
     f9c:	3e 85       	ldd	r19, Y+14	; 0x0e
     f9e:	22 30       	cpi	r18, 0x02	; 2
     fa0:	31 05       	cpc	r19, r1
     fa2:	2c f4       	brge	.+10     	; 0xfae <DIO_u8_Set_Pin_Value+0x64>
     fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	71 f0       	breq	.+28     	; 0xfc8 <DIO_u8_Set_Pin_Value+0x7e>
     fac:	f7 c0       	rjmp	.+494    	; 0x119c <DIO_u8_Set_Pin_Value+0x252>
     fae:	2d 85       	ldd	r18, Y+13	; 0x0d
     fb0:	3e 85       	ldd	r19, Y+14	; 0x0e
     fb2:	22 30       	cpi	r18, 0x02	; 2
     fb4:	31 05       	cpc	r19, r1
     fb6:	09 f4       	brne	.+2      	; 0xfba <DIO_u8_Set_Pin_Value+0x70>
     fb8:	7b c0       	rjmp	.+246    	; 0x10b0 <DIO_u8_Set_Pin_Value+0x166>
     fba:	8d 85       	ldd	r24, Y+13	; 0x0d
     fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbe:	83 30       	cpi	r24, 0x03	; 3
     fc0:	91 05       	cpc	r25, r1
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <DIO_u8_Set_Pin_Value+0x7c>
     fc4:	af c0       	rjmp	.+350    	; 0x1124 <DIO_u8_Set_Pin_Value+0x1da>
     fc6:	ea c0       	rjmp	.+468    	; 0x119c <DIO_u8_Set_Pin_Value+0x252>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Pin_Value)
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	3c 87       	std	Y+12, r19	; 0x0c
     fd0:	2b 87       	std	Y+11, r18	; 0x0b
     fd2:	8b 85       	ldd	r24, Y+11	; 0x0b
     fd4:	9c 85       	ldd	r25, Y+12	; 0x0c
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	c9 f0       	breq	.+50     	; 0x100c <DIO_u8_Set_Pin_Value+0xc2>
     fda:	2b 85       	ldd	r18, Y+11	; 0x0b
     fdc:	3c 85       	ldd	r19, Y+12	; 0x0c
     fde:	21 30       	cpi	r18, 0x01	; 1
     fe0:	31 05       	cpc	r19, r1
     fe2:	49 f5       	brne	.+82     	; 0x1036 <DIO_u8_Set_Pin_Value+0xec>
			{
			     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
     fe4:	ab e3       	ldi	r26, 0x3B	; 59
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	eb e3       	ldi	r30, 0x3B	; 59
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_u8_Set_Pin_Value+0xb8>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_u8_Set_Pin_Value+0xb4>
    1006:	84 2b       	or	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	c8 c0       	rjmp	.+400    	; 0x119c <DIO_u8_Set_Pin_Value+0x252>
           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    100c:	ab e3       	ldi	r26, 0x3B	; 59
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	eb e3       	ldi	r30, 0x3B	; 59
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <DIO_u8_Set_Pin_Value+0xe0>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <DIO_u8_Set_Pin_Value+0xdc>
    102e:	80 95       	com	r24
    1030:	84 23       	and	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	b3 c0       	rjmp	.+358    	; 0x119c <DIO_u8_Set_Pin_Value+0x252>
           	     default :Local_u8_Erorr_State = ES_NOK ;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	b0 c0       	rjmp	.+352    	; 0x119c <DIO_u8_Set_Pin_Value+0x252>

			}
			break;
		case DIO_u8_PORTB :
			switch (Copy_u8_Pin_Value)
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3a 87       	std	Y+10, r19	; 0x0a
    1044:	29 87       	std	Y+9, r18	; 0x09
    1046:	89 85       	ldd	r24, Y+9	; 0x09
    1048:	9a 85       	ldd	r25, Y+10	; 0x0a
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	c9 f0       	breq	.+50     	; 0x1080 <DIO_u8_Set_Pin_Value+0x136>
    104e:	29 85       	ldd	r18, Y+9	; 0x09
    1050:	3a 85       	ldd	r19, Y+10	; 0x0a
    1052:	21 30       	cpi	r18, 0x01	; 1
    1054:	31 05       	cpc	r19, r1
    1056:	49 f5       	brne	.+82     	; 0x10aa <DIO_u8_Set_Pin_Value+0x160>
				{
				     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    1058:	a8 e3       	ldi	r26, 0x38	; 56
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e8 e3       	ldi	r30, 0x38	; 56
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_u8_Set_Pin_Value+0x12c>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_u8_Set_Pin_Value+0x128>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	8e c0       	rjmp	.+284    	; 0x119c <DIO_u8_Set_Pin_Value+0x252>
	           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    1080:	a8 e3       	ldi	r26, 0x38	; 56
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e8 e3       	ldi	r30, 0x38	; 56
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_u8_Set_Pin_Value+0x154>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_u8_Set_Pin_Value+0x150>
    10a2:	80 95       	com	r24
    10a4:	84 23       	and	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	79 c0       	rjmp	.+242    	; 0x119c <DIO_u8_Set_Pin_Value+0x252>
	           	     default :Local_u8_Erorr_State = ES_NOK ;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	76 c0       	rjmp	.+236    	; 0x119c <DIO_u8_Set_Pin_Value+0x252>

				}
	     	break;
		case DIO_u8_PORTC :
			switch (Copy_u8_Pin_Value)
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	38 87       	std	Y+8, r19	; 0x08
    10b8:	2f 83       	std	Y+7, r18	; 0x07
    10ba:	8f 81       	ldd	r24, Y+7	; 0x07
    10bc:	98 85       	ldd	r25, Y+8	; 0x08
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	c9 f0       	breq	.+50     	; 0x10f4 <DIO_u8_Set_Pin_Value+0x1aa>
    10c2:	2f 81       	ldd	r18, Y+7	; 0x07
    10c4:	38 85       	ldd	r19, Y+8	; 0x08
    10c6:	21 30       	cpi	r18, 0x01	; 1
    10c8:	31 05       	cpc	r19, r1
    10ca:	49 f5       	brne	.+82     	; 0x111e <DIO_u8_Set_Pin_Value+0x1d4>
					{
					     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    10cc:	a5 e3       	ldi	r26, 0x35	; 53
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e3       	ldi	r30, 0x35	; 53
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_u8_Set_Pin_Value+0x1a0>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_u8_Set_Pin_Value+0x19c>
    10ee:	84 2b       	or	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	54 c0       	rjmp	.+168    	; 0x119c <DIO_u8_Set_Pin_Value+0x252>
		           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    10f4:	a5 e3       	ldi	r26, 0x35	; 53
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e3       	ldi	r30, 0x35	; 53
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_u8_Set_Pin_Value+0x1c8>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_u8_Set_Pin_Value+0x1c4>
    1116:	80 95       	com	r24
    1118:	84 23       	and	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	3f c0       	rjmp	.+126    	; 0x119c <DIO_u8_Set_Pin_Value+0x252>
		           	     default :Local_u8_Erorr_State = ES_NOK ;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	3c c0       	rjmp	.+120    	; 0x119c <DIO_u8_Set_Pin_Value+0x252>

					}
		   break;
		case DIO_u8_PORTD :
			switch (Copy_u8_Pin_Value)
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3e 83       	std	Y+6, r19	; 0x06
    112c:	2d 83       	std	Y+5, r18	; 0x05
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	9e 81       	ldd	r25, Y+6	; 0x06
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	c9 f0       	breq	.+50     	; 0x1168 <DIO_u8_Set_Pin_Value+0x21e>
    1136:	2d 81       	ldd	r18, Y+5	; 0x05
    1138:	3e 81       	ldd	r19, Y+6	; 0x06
    113a:	21 30       	cpi	r18, 0x01	; 1
    113c:	31 05       	cpc	r19, r1
    113e:	49 f5       	brne	.+82     	; 0x1192 <DIO_u8_Set_Pin_Value+0x248>
						{
						     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    1140:	a2 e3       	ldi	r26, 0x32	; 50
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e2 e3       	ldi	r30, 0x32	; 50
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_u8_Set_Pin_Value+0x214>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_u8_Set_Pin_Value+0x210>
    1162:	84 2b       	or	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	1a c0       	rjmp	.+52     	; 0x119c <DIO_u8_Set_Pin_Value+0x252>
			           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    1168:	a2 e3       	ldi	r26, 0x32	; 50
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e2 e3       	ldi	r30, 0x32	; 50
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_u8_Set_Pin_Value+0x23c>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_u8_Set_Pin_Value+0x238>
    118a:	80 95       	com	r24
    118c:	84 23       	and	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	05 c0       	rjmp	.+10     	; 0x119c <DIO_u8_Set_Pin_Value+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_u8_Set_Pin_Value+0x252>
						}
			break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8_Erorr_State ;
    119c:	89 81       	ldd	r24, Y+1	; 0x01
}
    119e:	2e 96       	adiw	r28, 0x0e	; 14
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <DIO_u8_Get_Pin_Value>:

u8 DIO_u8_Get_Pin_Value      (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 *Copy_u8_Returned_Pin_Value ){
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	28 97       	sbiw	r28, 0x08	; 8
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	8b 83       	std	Y+3, r24	; 0x03
    11c6:	6c 83       	std	Y+4, r22	; 0x04
    11c8:	5e 83       	std	Y+6, r21	; 0x06
    11ca:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8_Erorr_State = ES_OK ;
    11cc:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Pin_Value ;
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && (Copy_u8_Returned_Pin_Value != NULL)){
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	84 30       	cpi	r24, 0x04	; 4
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <DIO_u8_Get_Pin_Value+0x26>
    11d4:	9e c0       	rjmp	.+316    	; 0x1312 <DIO_u8_Get_Pin_Value+0x162>
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	88 30       	cpi	r24, 0x08	; 8
    11da:	08 f0       	brcs	.+2      	; 0x11de <DIO_u8_Get_Pin_Value+0x2e>
    11dc:	9a c0       	rjmp	.+308    	; 0x1312 <DIO_u8_Get_Pin_Value+0x162>
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <DIO_u8_Get_Pin_Value+0x38>
    11e6:	95 c0       	rjmp	.+298    	; 0x1312 <DIO_u8_Get_Pin_Value+0x162>
		switch (Copy_u8_Port_ID)
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	38 87       	std	Y+8, r19	; 0x08
    11f0:	2f 83       	std	Y+7, r18	; 0x07
    11f2:	8f 81       	ldd	r24, Y+7	; 0x07
    11f4:	98 85       	ldd	r25, Y+8	; 0x08
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	91 05       	cpc	r25, r1
    11fa:	a1 f1       	breq	.+104    	; 0x1264 <DIO_u8_Get_Pin_Value+0xb4>
    11fc:	2f 81       	ldd	r18, Y+7	; 0x07
    11fe:	38 85       	ldd	r19, Y+8	; 0x08
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	2c f4       	brge	.+10     	; 0x1210 <DIO_u8_Get_Pin_Value+0x60>
    1206:	8f 81       	ldd	r24, Y+7	; 0x07
    1208:	98 85       	ldd	r25, Y+8	; 0x08
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	71 f0       	breq	.+28     	; 0x122a <DIO_u8_Get_Pin_Value+0x7a>
    120e:	83 c0       	rjmp	.+262    	; 0x1316 <DIO_u8_Get_Pin_Value+0x166>
    1210:	2f 81       	ldd	r18, Y+7	; 0x07
    1212:	38 85       	ldd	r19, Y+8	; 0x08
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <DIO_u8_Get_Pin_Value+0x6c>
    121a:	41 c0       	rjmp	.+130    	; 0x129e <DIO_u8_Get_Pin_Value+0xee>
    121c:	8f 81       	ldd	r24, Y+7	; 0x07
    121e:	98 85       	ldd	r25, Y+8	; 0x08
    1220:	83 30       	cpi	r24, 0x03	; 3
    1222:	91 05       	cpc	r25, r1
    1224:	09 f4       	brne	.+2      	; 0x1228 <DIO_u8_Get_Pin_Value+0x78>
    1226:	58 c0       	rjmp	.+176    	; 0x12d8 <DIO_u8_Get_Pin_Value+0x128>
    1228:	76 c0       	rjmp	.+236    	; 0x1316 <DIO_u8_Get_Pin_Value+0x166>
		{
		     case DIO_u8_PORTA :
		      Local_u8_Pin_Value = GET_BIT (DIO_u8_PINA_REG, Copy_u8_Pin_ID) ;
    122a:	e9 e3       	ldi	r30, 0x39	; 57
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_u8_Get_Pin_Value+0x94>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_u8_Get_Pin_Value+0x90>
    1248:	84 23       	and	r24, r20
    124a:	89 83       	std	Y+1, r24	; 0x01

		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	88 23       	and	r24, r24
    1250:	21 f4       	brne	.+8      	; 0x125a <DIO_u8_Get_Pin_Value+0xaa>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    1252:	ed 81       	ldd	r30, Y+5	; 0x05
    1254:	fe 81       	ldd	r31, Y+6	; 0x06
    1256:	10 82       	st	Z, r1
    1258:	5e c0       	rjmp	.+188    	; 0x1316 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		    	 else
		    	 {
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    125a:	ed 81       	ldd	r30, Y+5	; 0x05
    125c:	fe 81       	ldd	r31, Y+6	; 0x06
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	80 83       	st	Z, r24
    1262:	59 c0       	rjmp	.+178    	; 0x1316 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		     break;
		     case DIO_u8_PORTB :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINB_REG,Copy_u8_Pin_ID ) ;
    1264:	e6 e3       	ldi	r30, 0x36	; 54
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_u8_Get_Pin_Value+0xce>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_u8_Get_Pin_Value+0xca>
    1282:	84 23       	and	r24, r20
    1284:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	88 23       	and	r24, r24
    128a:	21 f4       	brne	.+8      	; 0x1294 <DIO_u8_Get_Pin_Value+0xe4>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    128c:	ed 81       	ldd	r30, Y+5	; 0x05
    128e:	fe 81       	ldd	r31, Y+6	; 0x06
    1290:	10 82       	st	Z, r1
    1292:	41 c0       	rjmp	.+130    	; 0x1316 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1294:	ed 81       	ldd	r30, Y+5	; 0x05
    1296:	fe 81       	ldd	r31, Y+6	; 0x06
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	80 83       	st	Z, r24
    129c:	3c c0       	rjmp	.+120    	; 0x1316 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTC :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINC_REG,Copy_u8_Pin_ID ) ;
    129e:	e3 e3       	ldi	r30, 0x33	; 51
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_u8_Get_Pin_Value+0x108>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_u8_Get_Pin_Value+0x104>
    12bc:	84 23       	and	r24, r20
    12be:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	88 23       	and	r24, r24
    12c4:	21 f4       	brne	.+8      	; 0x12ce <DIO_u8_Get_Pin_Value+0x11e>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    12c6:	ed 81       	ldd	r30, Y+5	; 0x05
    12c8:	fe 81       	ldd	r31, Y+6	; 0x06
    12ca:	10 82       	st	Z, r1
    12cc:	24 c0       	rjmp	.+72     	; 0x1316 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    12ce:	ed 81       	ldd	r30, Y+5	; 0x05
    12d0:	fe 81       	ldd	r31, Y+6	; 0x06
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	80 83       	st	Z, r24
    12d6:	1f c0       	rjmp	.+62     	; 0x1316 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTD :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PIND_REG,Copy_u8_Pin_ID ) ;
    12d8:	e0 e3       	ldi	r30, 0x30	; 48
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_u8_Get_Pin_Value+0x142>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_u8_Get_Pin_Value+0x13e>
    12f6:	84 23       	and	r24, r20
    12f8:	89 83       	std	Y+1, r24	; 0x01
		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	88 23       	and	r24, r24
    12fe:	21 f4       	brne	.+8      	; 0x1308 <DIO_u8_Get_Pin_Value+0x158>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    1300:	ed 81       	ldd	r30, Y+5	; 0x05
    1302:	fe 81       	ldd	r31, Y+6	; 0x06
    1304:	10 82       	st	Z, r1
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1308:	ed 81       	ldd	r30, Y+5	; 0x05
    130a:	fe 81       	ldd	r31, Y+6	; 0x06
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	80 83       	st	Z, r24
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	8a 83       	std	Y+2, r24	; 0x02
		}
		return Local_u8_Erorr_State ;
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1318:	28 96       	adiw	r28, 0x08	; 8
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <DIO_u8_Set_Port_Direction>:

u8 DIO_u8_Set_Port_Direction (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Direction ){
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	2d 97       	sbiw	r28, 0x0d	; 13
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	8a 83       	std	Y+2, r24	; 0x02
    1340:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1342:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && ((Copy_u8_Port_Direction == DIO_u8_INPUT)||(Copy_u8_Port_Direction == DIO_u8_OUTPUT)))
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	84 30       	cpi	r24, 0x04	; 4
    1348:	08 f0       	brcs	.+2      	; 0x134c <DIO_u8_Set_Port_Direction+0x22>
    134a:	87 c0       	rjmp	.+270    	; 0x145a <DIO_u8_Set_Port_Direction+0x130>
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	88 23       	and	r24, r24
    1350:	21 f0       	breq	.+8      	; 0x135a <DIO_u8_Set_Port_Direction+0x30>
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	09 f0       	breq	.+2      	; 0x135a <DIO_u8_Set_Port_Direction+0x30>
    1358:	80 c0       	rjmp	.+256    	; 0x145a <DIO_u8_Set_Port_Direction+0x130>
	{
		switch (Copy_u8_Port_ID)
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3d 87       	std	Y+13, r19	; 0x0d
    1362:	2c 87       	std	Y+12, r18	; 0x0c
    1364:	8c 85       	ldd	r24, Y+12	; 0x0c
    1366:	9d 85       	ldd	r25, Y+13	; 0x0d
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	91 05       	cpc	r25, r1
    136c:	71 f1       	breq	.+92     	; 0x13ca <DIO_u8_Set_Port_Direction+0xa0>
    136e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1370:	3d 85       	ldd	r19, Y+13	; 0x0d
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	2c f4       	brge	.+10     	; 0x1382 <DIO_u8_Set_Port_Direction+0x58>
    1378:	8c 85       	ldd	r24, Y+12	; 0x0c
    137a:	9d 85       	ldd	r25, Y+13	; 0x0d
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	69 f0       	breq	.+26     	; 0x139a <DIO_u8_Set_Port_Direction+0x70>
    1380:	69 c0       	rjmp	.+210    	; 0x1454 <DIO_u8_Set_Port_Direction+0x12a>
    1382:	2c 85       	ldd	r18, Y+12	; 0x0c
    1384:	3d 85       	ldd	r19, Y+13	; 0x0d
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	b1 f1       	breq	.+108    	; 0x13f8 <DIO_u8_Set_Port_Direction+0xce>
    138c:	8c 85       	ldd	r24, Y+12	; 0x0c
    138e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <DIO_u8_Set_Port_Direction+0x6e>
    1396:	47 c0       	rjmp	.+142    	; 0x1426 <DIO_u8_Set_Port_Direction+0xfc>
    1398:	5d c0       	rjmp	.+186    	; 0x1454 <DIO_u8_Set_Port_Direction+0x12a>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Port_Direction)
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3b 87       	std	Y+11, r19	; 0x0b
    13a2:	2a 87       	std	Y+10, r18	; 0x0a
    13a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	59 f0       	breq	.+22     	; 0x13c2 <DIO_u8_Set_Port_Direction+0x98>
    13ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    13ae:	3b 85       	ldd	r19, Y+11	; 0x0b
    13b0:	21 30       	cpi	r18, 0x01	; 1
    13b2:	31 05       	cpc	r19, r1
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <DIO_u8_Set_Port_Direction+0x8e>
    13b6:	53 c0       	rjmp	.+166    	; 0x145e <DIO_u8_Set_Port_Direction+0x134>
			{
			    case DIO_u8_OUTPUT : DIO_u8_PORTA_REG = 0xff;break;
    13b8:	eb e3       	ldi	r30, 0x3B	; 59
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	8f ef       	ldi	r24, 0xFF	; 255
    13be:	80 83       	st	Z, r24
    13c0:	4e c0       	rjmp	.+156    	; 0x145e <DIO_u8_Set_Port_Direction+0x134>
			    case DIO_u8_INPUT : DIO_u8_PORTA_REG = 0x00;break;
    13c2:	eb e3       	ldi	r30, 0x3B	; 59
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	10 82       	st	Z, r1
    13c8:	4a c0       	rjmp	.+148    	; 0x145e <DIO_u8_Set_Port_Direction+0x134>
			}
			break;
			case DIO_u8_PORTB :
				switch (Copy_u8_Port_Direction)
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	39 87       	std	Y+9, r19	; 0x09
    13d2:	28 87       	std	Y+8, r18	; 0x08
    13d4:	88 85       	ldd	r24, Y+8	; 0x08
    13d6:	99 85       	ldd	r25, Y+9	; 0x09
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	51 f0       	breq	.+20     	; 0x13f0 <DIO_u8_Set_Port_Direction+0xc6>
    13dc:	28 85       	ldd	r18, Y+8	; 0x08
    13de:	39 85       	ldd	r19, Y+9	; 0x09
    13e0:	21 30       	cpi	r18, 0x01	; 1
    13e2:	31 05       	cpc	r19, r1
    13e4:	e1 f5       	brne	.+120    	; 0x145e <DIO_u8_Set_Port_Direction+0x134>
				{
				    case DIO_u8_OUTPUT : DIO_u8_PORTB_REG = 0xff;break;
    13e6:	e8 e3       	ldi	r30, 0x38	; 56
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	80 83       	st	Z, r24
    13ee:	37 c0       	rjmp	.+110    	; 0x145e <DIO_u8_Set_Port_Direction+0x134>
				    case DIO_u8_INPUT : DIO_u8_PORTB_REG = 0x00;break;
    13f0:	e8 e3       	ldi	r30, 0x38	; 56
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	10 82       	st	Z, r1
    13f6:	33 c0       	rjmp	.+102    	; 0x145e <DIO_u8_Set_Port_Direction+0x134>
				}
				break;
				case DIO_u8_PORTC :
					switch (Copy_u8_Port_Direction)
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3f 83       	std	Y+7, r19	; 0x07
    1400:	2e 83       	std	Y+6, r18	; 0x06
    1402:	8e 81       	ldd	r24, Y+6	; 0x06
    1404:	9f 81       	ldd	r25, Y+7	; 0x07
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	51 f0       	breq	.+20     	; 0x141e <DIO_u8_Set_Port_Direction+0xf4>
    140a:	2e 81       	ldd	r18, Y+6	; 0x06
    140c:	3f 81       	ldd	r19, Y+7	; 0x07
    140e:	21 30       	cpi	r18, 0x01	; 1
    1410:	31 05       	cpc	r19, r1
    1412:	29 f5       	brne	.+74     	; 0x145e <DIO_u8_Set_Port_Direction+0x134>
					{
					    case DIO_u8_OUTPUT : DIO_u8_PORTC_REG = 0xff;break;
    1414:	e5 e3       	ldi	r30, 0x35	; 53
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	80 83       	st	Z, r24
    141c:	20 c0       	rjmp	.+64     	; 0x145e <DIO_u8_Set_Port_Direction+0x134>
					    case DIO_u8_INPUT : DIO_u8_PORTC_REG = 0x00;break;
    141e:	e5 e3       	ldi	r30, 0x35	; 53
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	10 82       	st	Z, r1
    1424:	1c c0       	rjmp	.+56     	; 0x145e <DIO_u8_Set_Port_Direction+0x134>
					}
					break;
					case DIO_u8_PORTD :
						switch (Copy_u8_Port_Direction)
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3d 83       	std	Y+5, r19	; 0x05
    142e:	2c 83       	std	Y+4, r18	; 0x04
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	51 f0       	breq	.+20     	; 0x144c <DIO_u8_Set_Port_Direction+0x122>
    1438:	2c 81       	ldd	r18, Y+4	; 0x04
    143a:	3d 81       	ldd	r19, Y+5	; 0x05
    143c:	21 30       	cpi	r18, 0x01	; 1
    143e:	31 05       	cpc	r19, r1
    1440:	71 f4       	brne	.+28     	; 0x145e <DIO_u8_Set_Port_Direction+0x134>
						{
						    case DIO_u8_OUTPUT : DIO_u8_PORTD_REG = 0xff;break;
    1442:	e2 e3       	ldi	r30, 0x32	; 50
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	8f ef       	ldi	r24, 0xFF	; 255
    1448:	80 83       	st	Z, r24
    144a:	09 c0       	rjmp	.+18     	; 0x145e <DIO_u8_Set_Port_Direction+0x134>
						    case DIO_u8_INPUT : DIO_u8_PORTD_REG = 0x00;break;
    144c:	e2 e3       	ldi	r30, 0x32	; 50
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	10 82       	st	Z, r1
    1452:	05 c0       	rjmp	.+10     	; 0x145e <DIO_u8_Set_Port_Direction+0x134>
						}
						break;
						default:Local_u8_Erorr_State = ES_NOK ;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	02 c0       	rjmp	.+4      	; 0x145e <DIO_u8_Set_Port_Direction+0x134>

		}
	}
	else {
				Local_u8_Erorr_State = ES_NOK ;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    145e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1460:	2d 96       	adiw	r28, 0x0d	; 13
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <DIO_u8_Set_Port_Value>:

u8 DIO_u8_Set_Port_Value     (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Value ){
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	00 d0       	rcall	.+0      	; 0x1478 <DIO_u8_Set_Port_Value+0x6>
    1478:	00 d0       	rcall	.+0      	; 0x147a <DIO_u8_Set_Port_Value+0x8>
    147a:	0f 92       	push	r0
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	8a 83       	std	Y+2, r24	; 0x02
    1482:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1484:	19 82       	std	Y+1, r1	; 0x01

			switch (Copy_u8_Port_ID)
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	3d 83       	std	Y+5, r19	; 0x05
    148e:	2c 83       	std	Y+4, r18	; 0x04
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	9d 81       	ldd	r25, Y+5	; 0x05
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	91 05       	cpc	r25, r1
    1498:	d1 f0       	breq	.+52     	; 0x14ce <DIO_u8_Set_Port_Value+0x5c>
    149a:	2c 81       	ldd	r18, Y+4	; 0x04
    149c:	3d 81       	ldd	r19, Y+5	; 0x05
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	2c f4       	brge	.+10     	; 0x14ae <DIO_u8_Set_Port_Value+0x3c>
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	9d 81       	ldd	r25, Y+5	; 0x05
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	61 f0       	breq	.+24     	; 0x14c4 <DIO_u8_Set_Port_Value+0x52>
    14ac:	1f c0       	rjmp	.+62     	; 0x14ec <DIO_u8_Set_Port_Value+0x7a>
    14ae:	2c 81       	ldd	r18, Y+4	; 0x04
    14b0:	3d 81       	ldd	r19, Y+5	; 0x05
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	81 f0       	breq	.+32     	; 0x14d8 <DIO_u8_Set_Port_Value+0x66>
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	91 05       	cpc	r25, r1
    14c0:	81 f0       	breq	.+32     	; 0x14e2 <DIO_u8_Set_Port_Value+0x70>
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <DIO_u8_Set_Port_Value+0x7a>
			{
			case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8_Port_Value; break;
    14c4:	eb e3       	ldi	r30, 0x3B	; 59
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	80 83       	st	Z, r24
    14cc:	11 c0       	rjmp	.+34     	; 0x14f0 <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8_Port_Value; break;
    14ce:	e8 e3       	ldi	r30, 0x38	; 56
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	80 83       	st	Z, r24
    14d6:	0c c0       	rjmp	.+24     	; 0x14f0 <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8_Port_Value; break;
    14d8:	e5 e3       	ldi	r30, 0x35	; 53
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	80 83       	st	Z, r24
    14e0:	07 c0       	rjmp	.+14     	; 0x14f0 <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8_Port_Value; break;
    14e2:	e2 e3       	ldi	r30, 0x32	; 50
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	80 83       	st	Z, r24
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_u8_Set_Port_Value+0x7e>
			default :Local_u8_Erorr_State = ES_NOK;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    14f0:	89 81       	ldd	r24, Y+1	; 0x01

}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <DIO_u8_Get_Port_Value>:

u8 DIO_u8_Get_Port_Value     (u8 Copy_u8_Port_ID, u8 * Copy_u8_Returned_Port_Value ){
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	00 d0       	rcall	.+0      	; 0x1508 <DIO_u8_Get_Port_Value+0x6>
    1508:	00 d0       	rcall	.+0      	; 0x150a <DIO_u8_Get_Port_Value+0x8>
    150a:	00 d0       	rcall	.+0      	; 0x150c <DIO_u8_Get_Port_Value+0xa>
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	8a 83       	std	Y+2, r24	; 0x02
    1512:	7c 83       	std	Y+4, r23	; 0x04
    1514:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1516:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8_Returned_Port_Value != NULL){
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	09 f4       	brne	.+2      	; 0x1522 <DIO_u8_Get_Port_Value+0x20>
    1520:	3e c0       	rjmp	.+124    	; 0x159e <DIO_u8_Get_Port_Value+0x9c>
		switch (Copy_u8_Port_ID)
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	3e 83       	std	Y+6, r19	; 0x06
    152a:	2d 83       	std	Y+5, r18	; 0x05
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	91 05       	cpc	r25, r1
    1534:	e1 f0       	breq	.+56     	; 0x156e <DIO_u8_Get_Port_Value+0x6c>
    1536:	2d 81       	ldd	r18, Y+5	; 0x05
    1538:	3e 81       	ldd	r19, Y+6	; 0x06
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	2c f4       	brge	.+10     	; 0x154a <DIO_u8_Get_Port_Value+0x48>
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	61 f0       	breq	.+24     	; 0x1560 <DIO_u8_Get_Port_Value+0x5e>
    1548:	27 c0       	rjmp	.+78     	; 0x1598 <DIO_u8_Get_Port_Value+0x96>
    154a:	2d 81       	ldd	r18, Y+5	; 0x05
    154c:	3e 81       	ldd	r19, Y+6	; 0x06
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	a1 f0       	breq	.+40     	; 0x157c <DIO_u8_Get_Port_Value+0x7a>
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	91 05       	cpc	r25, r1
    155c:	b1 f0       	breq	.+44     	; 0x158a <DIO_u8_Get_Port_Value+0x88>
    155e:	1c c0       	rjmp	.+56     	; 0x1598 <DIO_u8_Get_Port_Value+0x96>
		{
		case DIO_u8_PORTA :* Copy_u8_Returned_Port_Value =DIO_u8_PORTA_REG; break;
    1560:	eb e3       	ldi	r30, 0x3B	; 59
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	eb 81       	ldd	r30, Y+3	; 0x03
    1568:	fc 81       	ldd	r31, Y+4	; 0x04
    156a:	80 83       	st	Z, r24
    156c:	1a c0       	rjmp	.+52     	; 0x15a2 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTB :* Copy_u8_Returned_Port_Value =DIO_u8_PORTB_REG; break;
    156e:	e8 e3       	ldi	r30, 0x38	; 56
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	eb 81       	ldd	r30, Y+3	; 0x03
    1576:	fc 81       	ldd	r31, Y+4	; 0x04
    1578:	80 83       	st	Z, r24
    157a:	13 c0       	rjmp	.+38     	; 0x15a2 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTC :* Copy_u8_Returned_Port_Value =DIO_u8_PORTC_REG; break;
    157c:	e5 e3       	ldi	r30, 0x35	; 53
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	eb 81       	ldd	r30, Y+3	; 0x03
    1584:	fc 81       	ldd	r31, Y+4	; 0x04
    1586:	80 83       	st	Z, r24
    1588:	0c c0       	rjmp	.+24     	; 0x15a2 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTD :* Copy_u8_Returned_Port_Value =DIO_u8_PORTD_REG; break;
    158a:	e2 e3       	ldi	r30, 0x32	; 50
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	eb 81       	ldd	r30, Y+3	; 0x03
    1592:	fc 81       	ldd	r31, Y+4	; 0x04
    1594:	80 83       	st	Z, r24
    1596:	05 c0       	rjmp	.+10     	; 0x15a2 <DIO_u8_Get_Port_Value+0xa0>
		default :Local_u8_Erorr_State = ES_NOK;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <DIO_u8_Get_Port_Value+0xa0>
		}}
		else {
			Local_u8_Erorr_State = ES_NOK ;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8_Erorr_State ;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01

}
    15a4:	26 96       	adiw	r28, 0x06	; 6
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <Stepper_motor_enum_INIT>:
#include "STEPPER_MOTOR_interface.h"
#include "STEPPER_MOTOR_private.h"

#include<util/delay.h>

ES_t Stepper_motor_enum_INIT (){
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	0f 92       	push	r0
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State=ES_OK;
    15c0:	19 82       	std	Y+1, r1	; 0x01

	 DIO_u8_Set_Pin_Direction  (STEPPER_MOTOR_BLUE_PORT, STEPPER_MOTOR_BLUE_PIN, DIO_u8_OUTPUT );
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>
	 DIO_u8_Set_Pin_Direction  (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN, DIO_u8_OUTPUT );
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>
	 DIO_u8_Set_Pin_Direction  (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN , DIO_u8_OUTPUT );
    15d6:	82 e0       	ldi	r24, 0x02	; 2
    15d8:	62 e0       	ldi	r22, 0x02	; 2
    15da:	41 e0       	ldi	r20, 0x01	; 1
    15dc:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>
	 DIO_u8_Set_Pin_Direction  (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN, DIO_u8_OUTPUT );
    15e0:	82 e0       	ldi	r24, 0x02	; 2
    15e2:	63 e0       	ldi	r22, 0x03	; 3
    15e4:	41 e0       	ldi	r20, 0x01	; 1
    15e6:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>


	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	61 e0       	ldi	r22, 0x01	; 1
    15f8:	41 e0       	ldi	r20, 0x01	; 1
    15fa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
     DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	62 e0       	ldi	r22, 0x02	; 2
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
     DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	63 e0       	ldi	r22, 0x03	; 3
    160c:	41 e0       	ldi	r20, 0x01	; 1
    160e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
return Local_enu_Erorr_State;
    1612:	89 81       	ldd	r24, Y+1	; 0x01
}
    1614:	0f 90       	pop	r0
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <Stepper_moter_enum_Move>:


ES_t Stepper_moter_enum_Move(u8 copy_u8_direction,u8 copy_u8_Angle){
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	c6 57       	subi	r28, 0x76	; 118
    162a:	d0 40       	sbci	r29, 0x00	; 0
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	fe 01       	movw	r30, r28
    1638:	eb 58       	subi	r30, 0x8B	; 139
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 83       	st	Z, r24
    163e:	fe 01       	movw	r30, r28
    1640:	ea 58       	subi	r30, 0x8A	; 138
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	60 83       	st	Z, r22
u8 Local_u8_step_Counter;
ES_t Local_enu_Erorr_State=ES_OK;
    1646:	fe 01       	movw	r30, r28
    1648:	ed 58       	subi	r30, 0x8D	; 141
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	10 82       	st	Z, r1

//to calculate number of steps for custom angle
u8 Number_Of_Steps = ((copy_u8_Angle*Namber_Of_Steps_for_360degree)/degree_360);
    164e:	fe 01       	movw	r30, r28
    1650:	ea 58       	subi	r30, 0x8A	; 138
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 81       	ld	r24, Z
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e0       	ldi	r26, 0x00	; 0
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	07 2e       	mov	r0, r23
    1660:	7b e0       	ldi	r23, 0x0B	; 11
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	aa 1f       	adc	r26, r26
    1668:	bb 1f       	adc	r27, r27
    166a:	7a 95       	dec	r23
    166c:	d1 f7       	brne	.-12     	; 0x1662 <Stepper_moter_enum_Move+0x46>
    166e:	70 2d       	mov	r23, r0
    1670:	28 e6       	ldi	r18, 0x68	; 104
    1672:	31 e0       	ldi	r19, 0x01	; 1
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	bc 01       	movw	r22, r24
    167a:	cd 01       	movw	r24, r26
    167c:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__udivmodsi4>
    1680:	da 01       	movw	r26, r20
    1682:	c9 01       	movw	r24, r18
    1684:	fe 01       	movw	r30, r28
    1686:	ee 58       	subi	r30, 0x8E	; 142
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	80 83       	st	Z, r24
u8 Number_Of_Forloop =Number_Of_Steps/number_of_steps_in_full_step;
    168c:	de 01       	movw	r26, r28
    168e:	af 58       	subi	r26, 0x8F	; 143
    1690:	bf 4f       	sbci	r27, 0xFF	; 255
    1692:	fe 01       	movw	r30, r28
    1694:	ee 58       	subi	r30, 0x8E	; 142
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	80 81       	ld	r24, Z
    169a:	86 95       	lsr	r24
    169c:	86 95       	lsr	r24
    169e:	8c 93       	st	X, r24
//FOR LOOP TO ROTATE AT CUSTOM ANGLE

if(copy_u8_direction==CW){
    16a0:	fe 01       	movw	r30, r28
    16a2:	eb 58       	subi	r30, 0x8B	; 139
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	09 f0       	breq	.+2      	; 0x16ae <Stepper_moter_enum_Move+0x92>
    16ac:	08 c3       	rjmp	.+1552   	; 0x1cbe <Stepper_moter_enum_Move+0x6a2>
for (Local_u8_step_Counter=start;Local_u8_step_Counter<Number_Of_Forloop;Local_u8_step_Counter++){
    16ae:	fe 01       	movw	r30, r28
    16b0:	ec 58       	subi	r30, 0x8C	; 140
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	10 82       	st	Z, r1
    16b6:	f7 c2       	rjmp	.+1518   	; 0x1ca6 <Stepper_moter_enum_Move+0x68a>

     //step1 -------->BLUE PIN IS LOW
 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_LOW );
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	61 e0       	ldi	r22, 0x01	; 1
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	62 e0       	ldi	r22, 0x02	; 2
    16d0:	41 e0       	ldi	r20, 0x01	; 1
    16d2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	63 e0       	ldi	r22, 0x03	; 3
    16da:	41 e0       	ldi	r20, 0x01	; 1
    16dc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
    16e0:	fe 01       	movw	r30, r28
    16e2:	e3 59       	subi	r30, 0x93	; 147
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	a0 e2       	ldi	r26, 0x20	; 32
    16ec:	b1 e4       	ldi	r27, 0x41	; 65
    16ee:	80 83       	st	Z, r24
    16f0:	91 83       	std	Z+1, r25	; 0x01
    16f2:	a2 83       	std	Z+2, r26	; 0x02
    16f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f6:	8e 01       	movw	r16, r28
    16f8:	07 59       	subi	r16, 0x97	; 151
    16fa:	1f 4f       	sbci	r17, 0xFF	; 255
    16fc:	fe 01       	movw	r30, r28
    16fe:	e3 59       	subi	r30, 0x93	; 147
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	4a e7       	ldi	r20, 0x7A	; 122
    1710:	53 e4       	ldi	r21, 0x43	; 67
    1712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	f8 01       	movw	r30, r16
    171c:	80 83       	st	Z, r24
    171e:	91 83       	std	Z+1, r25	; 0x01
    1720:	a2 83       	std	Z+2, r26	; 0x02
    1722:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1724:	fe 01       	movw	r30, r28
    1726:	e7 59       	subi	r30, 0x97	; 151
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	60 81       	ld	r22, Z
    172c:	71 81       	ldd	r23, Z+1	; 0x01
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	93 81       	ldd	r25, Z+3	; 0x03
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e8       	ldi	r20, 0x80	; 128
    1738:	5f e3       	ldi	r21, 0x3F	; 63
    173a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    173e:	88 23       	and	r24, r24
    1740:	44 f4       	brge	.+16     	; 0x1752 <Stepper_moter_enum_Move+0x136>
		__ticks = 1;
    1742:	fe 01       	movw	r30, r28
    1744:	e9 59       	subi	r30, 0x99	; 153
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	91 83       	std	Z+1, r25	; 0x01
    174e:	80 83       	st	Z, r24
    1750:	64 c0       	rjmp	.+200    	; 0x181a <Stepper_moter_enum_Move+0x1fe>
	else if (__tmp > 65535)
    1752:	fe 01       	movw	r30, r28
    1754:	e7 59       	subi	r30, 0x97	; 151
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	60 81       	ld	r22, Z
    175a:	71 81       	ldd	r23, Z+1	; 0x01
    175c:	82 81       	ldd	r24, Z+2	; 0x02
    175e:	93 81       	ldd	r25, Z+3	; 0x03
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	3f ef       	ldi	r19, 0xFF	; 255
    1764:	4f e7       	ldi	r20, 0x7F	; 127
    1766:	57 e4       	ldi	r21, 0x47	; 71
    1768:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    176c:	18 16       	cp	r1, r24
    176e:	0c f0       	brlt	.+2      	; 0x1772 <Stepper_moter_enum_Move+0x156>
    1770:	43 c0       	rjmp	.+134    	; 0x17f8 <Stepper_moter_enum_Move+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1772:	fe 01       	movw	r30, r28
    1774:	e3 59       	subi	r30, 0x93	; 147
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e2       	ldi	r20, 0x20	; 32
    1786:	51 e4       	ldi	r21, 0x41	; 65
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	8e 01       	movw	r16, r28
    1792:	09 59       	subi	r16, 0x99	; 153
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	f8 01       	movw	r30, r16
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	80 83       	st	Z, r24
    17a8:	1f c0       	rjmp	.+62     	; 0x17e8 <Stepper_moter_enum_Move+0x1cc>
    17aa:	fe 01       	movw	r30, r28
    17ac:	eb 59       	subi	r30, 0x9B	; 155
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	89 e1       	ldi	r24, 0x19	; 25
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	91 83       	std	Z+1, r25	; 0x01
    17b6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17b8:	fe 01       	movw	r30, r28
    17ba:	eb 59       	subi	r30, 0x9B	; 155
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	80 81       	ld	r24, Z
    17c0:	91 81       	ldd	r25, Z+1	; 0x01
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <Stepper_moter_enum_Move+0x1a6>
    17c6:	fe 01       	movw	r30, r28
    17c8:	eb 59       	subi	r30, 0x9B	; 155
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	91 83       	std	Z+1, r25	; 0x01
    17ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d0:	de 01       	movw	r26, r28
    17d2:	a9 59       	subi	r26, 0x99	; 153
    17d4:	bf 4f       	sbci	r27, 0xFF	; 255
    17d6:	fe 01       	movw	r30, r28
    17d8:	e9 59       	subi	r30, 0x99	; 153
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	80 81       	ld	r24, Z
    17de:	91 81       	ldd	r25, Z+1	; 0x01
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	11 96       	adiw	r26, 0x01	; 1
    17e4:	9c 93       	st	X, r25
    17e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e8:	fe 01       	movw	r30, r28
    17ea:	e9 59       	subi	r30, 0x99	; 153
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	d1 f6       	brne	.-76     	; 0x17aa <Stepper_moter_enum_Move+0x18e>
    17f6:	27 c0       	rjmp	.+78     	; 0x1846 <Stepper_moter_enum_Move+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f8:	8e 01       	movw	r16, r28
    17fa:	09 59       	subi	r16, 0x99	; 153
    17fc:	1f 4f       	sbci	r17, 0xFF	; 255
    17fe:	fe 01       	movw	r30, r28
    1800:	e7 59       	subi	r30, 0x97	; 151
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	f8 01       	movw	r30, r16
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    181a:	de 01       	movw	r26, r28
    181c:	ad 59       	subi	r26, 0x9D	; 157
    181e:	bf 4f       	sbci	r27, 0xFF	; 255
    1820:	fe 01       	movw	r30, r28
    1822:	e9 59       	subi	r30, 0x99	; 153
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	80 81       	ld	r24, Z
    1828:	91 81       	ldd	r25, Z+1	; 0x01
    182a:	8d 93       	st	X+, r24
    182c:	9c 93       	st	X, r25
    182e:	fe 01       	movw	r30, r28
    1830:	ed 59       	subi	r30, 0x9D	; 157
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	80 81       	ld	r24, Z
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <Stepper_moter_enum_Move+0x21c>
    183c:	fe 01       	movw	r30, r28
    183e:	ed 59       	subi	r30, 0x9D	; 157
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	80 83       	st	Z, r24
	_delay_ms(periodic_time_delay);
    //step1 -------->PINK PIN IS LOW
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_LOW );
    1850:	82 e0       	ldi	r24, 0x02	; 2
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    185a:	82 e0       	ldi	r24, 0x02	; 2
    185c:	62 e0       	ldi	r22, 0x02	; 2
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	63 e0       	ldi	r22, 0x03	; 3
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
    186e:	fe 01       	movw	r30, r28
    1870:	e1 5a       	subi	r30, 0xA1	; 161
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a0 e2       	ldi	r26, 0x20	; 32
    187a:	b1 e4       	ldi	r27, 0x41	; 65
    187c:	80 83       	st	Z, r24
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	a2 83       	std	Z+2, r26	; 0x02
    1882:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1884:	8e 01       	movw	r16, r28
    1886:	05 5a       	subi	r16, 0xA5	; 165
    1888:	1f 4f       	sbci	r17, 0xFF	; 255
    188a:	fe 01       	movw	r30, r28
    188c:	e1 5a       	subi	r30, 0xA1	; 161
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	60 81       	ld	r22, Z
    1892:	71 81       	ldd	r23, Z+1	; 0x01
    1894:	82 81       	ldd	r24, Z+2	; 0x02
    1896:	93 81       	ldd	r25, Z+3	; 0x03
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	4a e7       	ldi	r20, 0x7A	; 122
    189e:	53 e4       	ldi	r21, 0x43	; 67
    18a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	f8 01       	movw	r30, r16
    18aa:	80 83       	st	Z, r24
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	a2 83       	std	Z+2, r26	; 0x02
    18b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b2:	fe 01       	movw	r30, r28
    18b4:	e5 5a       	subi	r30, 0xA5	; 165
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e8       	ldi	r20, 0x80	; 128
    18c6:	5f e3       	ldi	r21, 0x3F	; 63
    18c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18cc:	88 23       	and	r24, r24
    18ce:	44 f4       	brge	.+16     	; 0x18e0 <Stepper_moter_enum_Move+0x2c4>
		__ticks = 1;
    18d0:	fe 01       	movw	r30, r28
    18d2:	e7 5a       	subi	r30, 0xA7	; 167
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	91 83       	std	Z+1, r25	; 0x01
    18dc:	80 83       	st	Z, r24
    18de:	64 c0       	rjmp	.+200    	; 0x19a8 <Stepper_moter_enum_Move+0x38c>
	else if (__tmp > 65535)
    18e0:	fe 01       	movw	r30, r28
    18e2:	e5 5a       	subi	r30, 0xA5	; 165
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	60 81       	ld	r22, Z
    18e8:	71 81       	ldd	r23, Z+1	; 0x01
    18ea:	82 81       	ldd	r24, Z+2	; 0x02
    18ec:	93 81       	ldd	r25, Z+3	; 0x03
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	0c f0       	brlt	.+2      	; 0x1900 <Stepper_moter_enum_Move+0x2e4>
    18fe:	43 c0       	rjmp	.+134    	; 0x1986 <Stepper_moter_enum_Move+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1900:	fe 01       	movw	r30, r28
    1902:	e1 5a       	subi	r30, 0xA1	; 161
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	93 81       	ldd	r25, Z+3	; 0x03
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e2       	ldi	r20, 0x20	; 32
    1914:	51 e4       	ldi	r21, 0x41	; 65
    1916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	8e 01       	movw	r16, r28
    1920:	07 5a       	subi	r16, 0xA7	; 167
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	f8 01       	movw	r30, r16
    1932:	91 83       	std	Z+1, r25	; 0x01
    1934:	80 83       	st	Z, r24
    1936:	1f c0       	rjmp	.+62     	; 0x1976 <Stepper_moter_enum_Move+0x35a>
    1938:	fe 01       	movw	r30, r28
    193a:	e9 5a       	subi	r30, 0xA9	; 169
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	89 e1       	ldi	r24, 0x19	; 25
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	80 83       	st	Z, r24
    1946:	fe 01       	movw	r30, r28
    1948:	e9 5a       	subi	r30, 0xA9	; 169
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	80 81       	ld	r24, Z
    194e:	91 81       	ldd	r25, Z+1	; 0x01
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <Stepper_moter_enum_Move+0x334>
    1954:	fe 01       	movw	r30, r28
    1956:	e9 5a       	subi	r30, 0xA9	; 169
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	91 83       	std	Z+1, r25	; 0x01
    195c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195e:	de 01       	movw	r26, r28
    1960:	a7 5a       	subi	r26, 0xA7	; 167
    1962:	bf 4f       	sbci	r27, 0xFF	; 255
    1964:	fe 01       	movw	r30, r28
    1966:	e7 5a       	subi	r30, 0xA7	; 167
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	80 81       	ld	r24, Z
    196c:	91 81       	ldd	r25, Z+1	; 0x01
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	11 96       	adiw	r26, 0x01	; 1
    1972:	9c 93       	st	X, r25
    1974:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1976:	fe 01       	movw	r30, r28
    1978:	e7 5a       	subi	r30, 0xA7	; 167
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	80 81       	ld	r24, Z
    197e:	91 81       	ldd	r25, Z+1	; 0x01
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	d1 f6       	brne	.-76     	; 0x1938 <Stepper_moter_enum_Move+0x31c>
    1984:	27 c0       	rjmp	.+78     	; 0x19d4 <Stepper_moter_enum_Move+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1986:	8e 01       	movw	r16, r28
    1988:	07 5a       	subi	r16, 0xA7	; 167
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	fe 01       	movw	r30, r28
    198e:	e5 5a       	subi	r30, 0xA5	; 165
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	60 81       	ld	r22, Z
    1994:	71 81       	ldd	r23, Z+1	; 0x01
    1996:	82 81       	ldd	r24, Z+2	; 0x02
    1998:	93 81       	ldd	r25, Z+3	; 0x03
    199a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	f8 01       	movw	r30, r16
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	80 83       	st	Z, r24
    19a8:	de 01       	movw	r26, r28
    19aa:	ab 5a       	subi	r26, 0xAB	; 171
    19ac:	bf 4f       	sbci	r27, 0xFF	; 255
    19ae:	fe 01       	movw	r30, r28
    19b0:	e7 5a       	subi	r30, 0xA7	; 167
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	8d 93       	st	X+, r24
    19ba:	9c 93       	st	X, r25
    19bc:	fe 01       	movw	r30, r28
    19be:	eb 5a       	subi	r30, 0xAB	; 171
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	80 81       	ld	r24, Z
    19c4:	91 81       	ldd	r25, Z+1	; 0x01
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <Stepper_moter_enum_Move+0x3aa>
    19ca:	fe 01       	movw	r30, r28
    19cc:	eb 5a       	subi	r30, 0xAB	; 171
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	80 83       	st	Z, r24
	_delay_ms(periodic_time_delay);
	//step1 -------->YELLOW PIN IS LOW
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    19d4:	82 e0       	ldi	r24, 0x02	; 2
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	41 e0       	ldi	r20, 0x01	; 1
    19da:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    19de:	82 e0       	ldi	r24, 0x02	; 2
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	41 e0       	ldi	r20, 0x01	; 1
    19e4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_LOW );
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	62 e0       	ldi	r22, 0x02	; 2
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	63 e0       	ldi	r22, 0x03	; 3
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
    19fc:	fe 01       	movw	r30, r28
    19fe:	ef 5a       	subi	r30, 0xAF	; 175
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	a0 e2       	ldi	r26, 0x20	; 32
    1a08:	b1 e4       	ldi	r27, 0x41	; 65
    1a0a:	80 83       	st	Z, r24
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	a2 83       	std	Z+2, r26	; 0x02
    1a10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a12:	8e 01       	movw	r16, r28
    1a14:	03 5b       	subi	r16, 0xB3	; 179
    1a16:	1f 4f       	sbci	r17, 0xFF	; 255
    1a18:	fe 01       	movw	r30, r28
    1a1a:	ef 5a       	subi	r30, 0xAF	; 175
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	60 81       	ld	r22, Z
    1a20:	71 81       	ldd	r23, Z+1	; 0x01
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a e7       	ldi	r20, 0x7A	; 122
    1a2c:	53 e4       	ldi	r21, 0x43	; 67
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	f8 01       	movw	r30, r16
    1a38:	80 83       	st	Z, r24
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	a2 83       	std	Z+2, r26	; 0x02
    1a3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a40:	fe 01       	movw	r30, r28
    1a42:	e3 5b       	subi	r30, 0xB3	; 179
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	44 f4       	brge	.+16     	; 0x1a6e <Stepper_moter_enum_Move+0x452>
		__ticks = 1;
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e5 5b       	subi	r30, 0xB5	; 181
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
    1a6c:	64 c0       	rjmp	.+200    	; 0x1b36 <Stepper_moter_enum_Move+0x51a>
	else if (__tmp > 65535)
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e3 5b       	subi	r30, 0xB3	; 179
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	93 81       	ldd	r25, Z+3	; 0x03
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	3f ef       	ldi	r19, 0xFF	; 255
    1a80:	4f e7       	ldi	r20, 0x7F	; 127
    1a82:	57 e4       	ldi	r21, 0x47	; 71
    1a84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	0c f0       	brlt	.+2      	; 0x1a8e <Stepper_moter_enum_Move+0x472>
    1a8c:	43 c0       	rjmp	.+134    	; 0x1b14 <Stepper_moter_enum_Move+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8e:	fe 01       	movw	r30, r28
    1a90:	ef 5a       	subi	r30, 0xAF	; 175
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	8e 01       	movw	r16, r28
    1aae:	05 5b       	subi	r16, 0xB5	; 181
    1ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	f8 01       	movw	r30, r16
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
    1ac4:	1f c0       	rjmp	.+62     	; 0x1b04 <Stepper_moter_enum_Move+0x4e8>
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e7 5b       	subi	r30, 0xB7	; 183
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	89 e1       	ldi	r24, 0x19	; 25
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	80 83       	st	Z, r24
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e7 5b       	subi	r30, 0xB7	; 183
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <Stepper_moter_enum_Move+0x4c2>
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e7 5b       	subi	r30, 0xB7	; 183
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	91 83       	std	Z+1, r25	; 0x01
    1aea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aec:	de 01       	movw	r26, r28
    1aee:	a5 5b       	subi	r26, 0xB5	; 181
    1af0:	bf 4f       	sbci	r27, 0xFF	; 255
    1af2:	fe 01       	movw	r30, r28
    1af4:	e5 5b       	subi	r30, 0xB5	; 181
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	91 81       	ldd	r25, Z+1	; 0x01
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	11 96       	adiw	r26, 0x01	; 1
    1b00:	9c 93       	st	X, r25
    1b02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	fe 01       	movw	r30, r28
    1b06:	e5 5b       	subi	r30, 0xB5	; 181
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	80 81       	ld	r24, Z
    1b0c:	91 81       	ldd	r25, Z+1	; 0x01
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	d1 f6       	brne	.-76     	; 0x1ac6 <Stepper_moter_enum_Move+0x4aa>
    1b12:	27 c0       	rjmp	.+78     	; 0x1b62 <Stepper_moter_enum_Move+0x546>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	8e 01       	movw	r16, r28
    1b16:	05 5b       	subi	r16, 0xB5	; 181
    1b18:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e3 5b       	subi	r30, 0xB3	; 179
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	f8 01       	movw	r30, r16
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	de 01       	movw	r26, r28
    1b38:	a9 5b       	subi	r26, 0xB9	; 185
    1b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e5 5b       	subi	r30, 0xB5	; 181
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	8d 93       	st	X+, r24
    1b48:	9c 93       	st	X, r25
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e9 5b       	subi	r30, 0xB9	; 185
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <Stepper_moter_enum_Move+0x538>
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e9 5b       	subi	r30, 0xB9	; 185
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	80 83       	st	Z, r24
	_delay_ms(periodic_time_delay);
	//step1 -------->ORANGE PIN IS LOW
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	41 e0       	ldi	r20, 0x01	; 1
    1b68:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	41 e0       	ldi	r20, 0x01	; 1
    1b72:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	62 e0       	ldi	r22, 0x02	; 2
    1b7a:	41 e0       	ldi	r20, 0x01	; 1
    1b7c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_LOW );
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	63 e0       	ldi	r22, 0x03	; 3
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	ed 5b       	subi	r30, 0xBD	; 189
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e2       	ldi	r26, 0x20	; 32
    1b96:	b1 e4       	ldi	r27, 0x41	; 65
    1b98:	80 83       	st	Z, r24
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	a2 83       	std	Z+2, r26	; 0x02
    1b9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	8e 01       	movw	r16, r28
    1ba2:	01 5c       	subi	r16, 0xC1	; 193
    1ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	ed 5b       	subi	r30, 0xBD	; 189
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	60 81       	ld	r22, Z
    1bae:	71 81       	ldd	r23, Z+1	; 0x01
    1bb0:	82 81       	ldd	r24, Z+2	; 0x02
    1bb2:	93 81       	ldd	r25, Z+3	; 0x03
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a e7       	ldi	r20, 0x7A	; 122
    1bba:	53 e4       	ldi	r21, 0x43	; 67
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	80 83       	st	Z, r24
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	a2 83       	std	Z+2, r26	; 0x02
    1bcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bce:	fe 01       	movw	r30, r28
    1bd0:	ff 96       	adiw	r30, 0x3f	; 63
    1bd2:	60 81       	ld	r22, Z
    1bd4:	71 81       	ldd	r23, Z+1	; 0x01
    1bd6:	82 81       	ldd	r24, Z+2	; 0x02
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e8       	ldi	r20, 0x80	; 128
    1be0:	5f e3       	ldi	r21, 0x3F	; 63
    1be2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be6:	88 23       	and	r24, r24
    1be8:	2c f4       	brge	.+10     	; 0x1bf4 <Stepper_moter_enum_Move+0x5d8>
		__ticks = 1;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9e af       	std	Y+62, r25	; 0x3e
    1bf0:	8d af       	std	Y+61, r24	; 0x3d
    1bf2:	46 c0       	rjmp	.+140    	; 0x1c80 <Stepper_moter_enum_Move+0x664>
	else if (__tmp > 65535)
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	ff 96       	adiw	r30, 0x3f	; 63
    1bf8:	60 81       	ld	r22, Z
    1bfa:	71 81       	ldd	r23, Z+1	; 0x01
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	4f e7       	ldi	r20, 0x7F	; 127
    1c06:	57 e4       	ldi	r21, 0x47	; 71
    1c08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	64 f5       	brge	.+88     	; 0x1c68 <Stepper_moter_enum_Move+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c10:	fe 01       	movw	r30, r28
    1c12:	ed 5b       	subi	r30, 0xBD	; 189
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9e af       	std	Y+62, r25	; 0x3e
    1c3c:	8d af       	std	Y+61, r24	; 0x3d
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <Stepper_moter_enum_Move+0x642>
    1c40:	89 e1       	ldi	r24, 0x19	; 25
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9c af       	std	Y+60, r25	; 0x3c
    1c46:	8b af       	std	Y+59, r24	; 0x3b
    1c48:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c4a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <Stepper_moter_enum_Move+0x630>
    1c50:	9c af       	std	Y+60, r25	; 0x3c
    1c52:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c54:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c56:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	9e af       	std	Y+62, r25	; 0x3e
    1c5c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c60:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	69 f7       	brne	.-38     	; 0x1c40 <Stepper_moter_enum_Move+0x624>
    1c66:	16 c0       	rjmp	.+44     	; 0x1c94 <Stepper_moter_enum_Move+0x678>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c68:	fe 01       	movw	r30, r28
    1c6a:	ff 96       	adiw	r30, 0x3f	; 63
    1c6c:	60 81       	ld	r22, Z
    1c6e:	71 81       	ldd	r23, Z+1	; 0x01
    1c70:	82 81       	ldd	r24, Z+2	; 0x02
    1c72:	93 81       	ldd	r25, Z+3	; 0x03
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9e af       	std	Y+62, r25	; 0x3e
    1c7e:	8d af       	std	Y+61, r24	; 0x3d
    1c80:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c82:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c84:	9a af       	std	Y+58, r25	; 0x3a
    1c86:	89 af       	std	Y+57, r24	; 0x39
    1c88:	89 ad       	ldd	r24, Y+57	; 0x39
    1c8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <Stepper_moter_enum_Move+0x670>
    1c90:	9a af       	std	Y+58, r25	; 0x3a
    1c92:	89 af       	std	Y+57, r24	; 0x39
u8 Number_Of_Steps = ((copy_u8_Angle*Namber_Of_Steps_for_360degree)/degree_360);
u8 Number_Of_Forloop =Number_Of_Steps/number_of_steps_in_full_step;
//FOR LOOP TO ROTATE AT CUSTOM ANGLE

if(copy_u8_direction==CW){
for (Local_u8_step_Counter=start;Local_u8_step_Counter<Number_Of_Forloop;Local_u8_step_Counter++){
    1c94:	de 01       	movw	r26, r28
    1c96:	ac 58       	subi	r26, 0x8C	; 140
    1c98:	bf 4f       	sbci	r27, 0xFF	; 255
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	ec 58       	subi	r30, 0x8C	; 140
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	80 81       	ld	r24, Z
    1ca2:	8f 5f       	subi	r24, 0xFF	; 255
    1ca4:	8c 93       	st	X, r24
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	ec 58       	subi	r30, 0x8C	; 140
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	de 01       	movw	r26, r28
    1cae:	af 58       	subi	r26, 0x8F	; 143
    1cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb2:	90 81       	ld	r25, Z
    1cb4:	8c 91       	ld	r24, X
    1cb6:	98 17       	cp	r25, r24
    1cb8:	08 f4       	brcc	.+2      	; 0x1cbc <Stepper_moter_enum_Move+0x6a0>
    1cba:	fe cc       	rjmp	.-1540   	; 0x16b8 <Stepper_moter_enum_Move+0x9c>
    1cbc:	38 c2       	rjmp	.+1136   	; 0x212e <Stepper_moter_enum_Move+0xb12>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_LOW );
	_delay_ms(periodic_time_delay);
}
}
else if (copy_u8_direction==CCW){
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	eb 58       	subi	r30, 0x8B	; 139
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 81       	ld	r24, Z
    1cc6:	82 30       	cpi	r24, 0x02	; 2
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <Stepper_moter_enum_Move+0x6b0>
    1cca:	31 c2       	rjmp	.+1122   	; 0x212e <Stepper_moter_enum_Move+0xb12>
	for (Local_u8_step_Counter=start;Local_u8_step_Counter<Number_Of_Forloop;Local_u8_step_Counter++){
    1ccc:	fe 01       	movw	r30, r28
    1cce:	ec 58       	subi	r30, 0x8C	; 140
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	10 82       	st	Z, r1
    1cd4:	21 c2       	rjmp	.+1090   	; 0x2118 <Stepper_moter_enum_Move+0xafc>

	     //step1 -------->BLUE PIN IS LOW
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    1cd6:	82 e0       	ldi	r24, 0x02	; 2
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	62 e0       	ldi	r22, 0x02	; 2
    1cee:	41 e0       	ldi	r20, 0x01	; 1
    1cf0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_LOW );
    1cf4:	82 e0       	ldi	r24, 0x02	; 2
    1cf6:	63 e0       	ldi	r22, 0x03	; 3
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a0 e2       	ldi	r26, 0x20	; 32
    1d04:	b1 e4       	ldi	r27, 0x41	; 65
    1d06:	8d ab       	std	Y+53, r24	; 0x35
    1d08:	9e ab       	std	Y+54, r25	; 0x36
    1d0a:	af ab       	std	Y+55, r26	; 0x37
    1d0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d10:	7e a9       	ldd	r23, Y+54	; 0x36
    1d12:	8f a9       	ldd	r24, Y+55	; 0x37
    1d14:	98 ad       	ldd	r25, Y+56	; 0x38
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	4a e7       	ldi	r20, 0x7A	; 122
    1d1c:	53 e4       	ldi	r21, 0x43	; 67
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	89 ab       	std	Y+49, r24	; 0x31
    1d28:	9a ab       	std	Y+50, r25	; 0x32
    1d2a:	ab ab       	std	Y+51, r26	; 0x33
    1d2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d30:	7a a9       	ldd	r23, Y+50	; 0x32
    1d32:	8b a9       	ldd	r24, Y+51	; 0x33
    1d34:	9c a9       	ldd	r25, Y+52	; 0x34
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <Stepper_moter_enum_Move+0x734>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	98 ab       	std	Y+48, r25	; 0x30
    1d4c:	8f a7       	std	Y+47, r24	; 0x2f
    1d4e:	3f c0       	rjmp	.+126    	; 0x1dce <Stepper_moter_enum_Move+0x7b2>
	else if (__tmp > 65535)
    1d50:	69 a9       	ldd	r22, Y+49	; 0x31
    1d52:	7a a9       	ldd	r23, Y+50	; 0x32
    1d54:	8b a9       	ldd	r24, Y+51	; 0x33
    1d56:	9c a9       	ldd	r25, Y+52	; 0x34
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	4c f5       	brge	.+82     	; 0x1dba <Stepper_moter_enum_Move+0x79e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	6d a9       	ldd	r22, Y+53	; 0x35
    1d6a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d6c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d6e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	98 ab       	std	Y+48, r25	; 0x30
    1d8e:	8f a7       	std	Y+47, r24	; 0x2f
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <Stepper_moter_enum_Move+0x794>
    1d92:	89 e1       	ldi	r24, 0x19	; 25
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9e a7       	std	Y+46, r25	; 0x2e
    1d98:	8d a7       	std	Y+45, r24	; 0x2d
    1d9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <Stepper_moter_enum_Move+0x782>
    1da2:	9e a7       	std	Y+46, r25	; 0x2e
    1da4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1da8:	98 a9       	ldd	r25, Y+48	; 0x30
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	98 ab       	std	Y+48, r25	; 0x30
    1dae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1db2:	98 a9       	ldd	r25, Y+48	; 0x30
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	69 f7       	brne	.-38     	; 0x1d92 <Stepper_moter_enum_Move+0x776>
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <Stepper_moter_enum_Move+0x7c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	69 a9       	ldd	r22, Y+49	; 0x31
    1dbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1dc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	98 ab       	std	Y+48, r25	; 0x30
    1dcc:	8f a7       	std	Y+47, r24	; 0x2f
    1dce:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd0:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd2:	9c a7       	std	Y+44, r25	; 0x2c
    1dd4:	8b a7       	std	Y+43, r24	; 0x2b
    1dd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <Stepper_moter_enum_Move+0x7be>
    1dde:	9c a7       	std	Y+44, r25	; 0x2c
    1de0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(periodic_time_delay);
	    //step1 -------->PINK PIN IS LOW
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	41 e0       	ldi	r20, 0x01	; 1
    1de8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	61 e0       	ldi	r22, 0x01	; 1
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_LOW );
    1df6:	82 e0       	ldi	r24, 0x02	; 2
    1df8:	62 e0       	ldi	r22, 0x02	; 2
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	63 e0       	ldi	r22, 0x03	; 3
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	a0 e2       	ldi	r26, 0x20	; 32
    1e10:	b1 e4       	ldi	r27, 0x41	; 65
    1e12:	8f a3       	std	Y+39, r24	; 0x27
    1e14:	98 a7       	std	Y+40, r25	; 0x28
    1e16:	a9 a7       	std	Y+41, r26	; 0x29
    1e18:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e1c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	4a e7       	ldi	r20, 0x7A	; 122
    1e28:	53 e4       	ldi	r21, 0x43	; 67
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	8b a3       	std	Y+35, r24	; 0x23
    1e34:	9c a3       	std	Y+36, r25	; 0x24
    1e36:	ad a3       	std	Y+37, r26	; 0x25
    1e38:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e40:	9e a1       	ldd	r25, Y+38	; 0x26
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e8       	ldi	r20, 0x80	; 128
    1e48:	5f e3       	ldi	r21, 0x3F	; 63
    1e4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e4e:	88 23       	and	r24, r24
    1e50:	2c f4       	brge	.+10     	; 0x1e5c <Stepper_moter_enum_Move+0x840>
		__ticks = 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9a a3       	std	Y+34, r25	; 0x22
    1e58:	89 a3       	std	Y+33, r24	; 0x21
    1e5a:	3f c0       	rjmp	.+126    	; 0x1eda <Stepper_moter_enum_Move+0x8be>
	else if (__tmp > 65535)
    1e5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e60:	8d a1       	ldd	r24, Y+37	; 0x25
    1e62:	9e a1       	ldd	r25, Y+38	; 0x26
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	3f ef       	ldi	r19, 0xFF	; 255
    1e68:	4f e7       	ldi	r20, 0x7F	; 127
    1e6a:	57 e4       	ldi	r21, 0x47	; 71
    1e6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e70:	18 16       	cp	r1, r24
    1e72:	4c f5       	brge	.+82     	; 0x1ec6 <Stepper_moter_enum_Move+0x8aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e74:	6f a1       	ldd	r22, Y+39	; 0x27
    1e76:	78 a5       	ldd	r23, Y+40	; 0x28
    1e78:	89 a5       	ldd	r24, Y+41	; 0x29
    1e7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e2       	ldi	r20, 0x20	; 32
    1e82:	51 e4       	ldi	r21, 0x41	; 65
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	9a a3       	std	Y+34, r25	; 0x22
    1e9a:	89 a3       	std	Y+33, r24	; 0x21
    1e9c:	0f c0       	rjmp	.+30     	; 0x1ebc <Stepper_moter_enum_Move+0x8a0>
    1e9e:	89 e1       	ldi	r24, 0x19	; 25
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	98 a3       	std	Y+32, r25	; 0x20
    1ea4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ea6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ea8:	98 a1       	ldd	r25, Y+32	; 0x20
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <Stepper_moter_enum_Move+0x88e>
    1eae:	98 a3       	std	Y+32, r25	; 0x20
    1eb0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb2:	89 a1       	ldd	r24, Y+33	; 0x21
    1eb4:	9a a1       	ldd	r25, Y+34	; 0x22
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	9a a3       	std	Y+34, r25	; 0x22
    1eba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ebc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ebe:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	69 f7       	brne	.-38     	; 0x1e9e <Stepper_moter_enum_Move+0x882>
    1ec4:	14 c0       	rjmp	.+40     	; 0x1eee <Stepper_moter_enum_Move+0x8d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eca:	8d a1       	ldd	r24, Y+37	; 0x25
    1ecc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	9a a3       	std	Y+34, r25	; 0x22
    1ed8:	89 a3       	std	Y+33, r24	; 0x21
    1eda:	89 a1       	ldd	r24, Y+33	; 0x21
    1edc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ede:	9e 8f       	std	Y+30, r25	; 0x1e
    1ee0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ee2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ee4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <Stepper_moter_enum_Move+0x8ca>
    1eea:	9e 8f       	std	Y+30, r25	; 0x1e
    1eec:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(periodic_time_delay);
		//step1 -------->YELLOW PIN IS LOW
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_LOW );
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	62 e0       	ldi	r22, 0x02	; 2
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	63 e0       	ldi	r22, 0x03	; 3
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a0 e2       	ldi	r26, 0x20	; 32
    1f1c:	b1 e4       	ldi	r27, 0x41	; 65
    1f1e:	89 8f       	std	Y+25, r24	; 0x19
    1f20:	9a 8f       	std	Y+26, r25	; 0x1a
    1f22:	ab 8f       	std	Y+27, r26	; 0x1b
    1f24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f26:	69 8d       	ldd	r22, Y+25	; 0x19
    1f28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	4a e7       	ldi	r20, 0x7A	; 122
    1f34:	53 e4       	ldi	r21, 0x43	; 67
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	8d 8b       	std	Y+21, r24	; 0x15
    1f40:	9e 8b       	std	Y+22, r25	; 0x16
    1f42:	af 8b       	std	Y+23, r26	; 0x17
    1f44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f46:	6d 89       	ldd	r22, Y+21	; 0x15
    1f48:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e8       	ldi	r20, 0x80	; 128
    1f54:	5f e3       	ldi	r21, 0x3F	; 63
    1f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f5a:	88 23       	and	r24, r24
    1f5c:	2c f4       	brge	.+10     	; 0x1f68 <Stepper_moter_enum_Move+0x94c>
		__ticks = 1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	9c 8b       	std	Y+20, r25	; 0x14
    1f64:	8b 8b       	std	Y+19, r24	; 0x13
    1f66:	3f c0       	rjmp	.+126    	; 0x1fe6 <Stepper_moter_enum_Move+0x9ca>
	else if (__tmp > 65535)
    1f68:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	3f ef       	ldi	r19, 0xFF	; 255
    1f74:	4f e7       	ldi	r20, 0x7F	; 127
    1f76:	57 e4       	ldi	r21, 0x47	; 71
    1f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f7c:	18 16       	cp	r1, r24
    1f7e:	4c f5       	brge	.+82     	; 0x1fd2 <Stepper_moter_enum_Move+0x9b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f80:	69 8d       	ldd	r22, Y+25	; 0x19
    1f82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e2       	ldi	r20, 0x20	; 32
    1f8e:	51 e4       	ldi	r21, 0x41	; 65
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9c 8b       	std	Y+20, r25	; 0x14
    1fa6:	8b 8b       	std	Y+19, r24	; 0x13
    1fa8:	0f c0       	rjmp	.+30     	; 0x1fc8 <Stepper_moter_enum_Move+0x9ac>
    1faa:	89 e1       	ldi	r24, 0x19	; 25
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9a 8b       	std	Y+18, r25	; 0x12
    1fb0:	89 8b       	std	Y+17, r24	; 0x11
    1fb2:	89 89       	ldd	r24, Y+17	; 0x11
    1fb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <Stepper_moter_enum_Move+0x99a>
    1fba:	9a 8b       	std	Y+18, r25	; 0x12
    1fbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	9c 8b       	std	Y+20, r25	; 0x14
    1fc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fca:	9c 89       	ldd	r25, Y+20	; 0x14
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	69 f7       	brne	.-38     	; 0x1faa <Stepper_moter_enum_Move+0x98e>
    1fd0:	14 c0       	rjmp	.+40     	; 0x1ffa <Stepper_moter_enum_Move+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9c 8b       	std	Y+20, r25	; 0x14
    1fe4:	8b 8b       	std	Y+19, r24	; 0x13
    1fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fea:	98 8b       	std	Y+16, r25	; 0x10
    1fec:	8f 87       	std	Y+15, r24	; 0x0f
    1fee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff0:	98 89       	ldd	r25, Y+16	; 0x10
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <Stepper_moter_enum_Move+0x9d6>
    1ff6:	98 8b       	std	Y+16, r25	; 0x10
    1ff8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(periodic_time_delay);
		//step1 -------->ORANGE PIN IS LOW
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_LOW );
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	60 e0       	ldi	r22, 0x00	; 0
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	61 e0       	ldi	r22, 0x01	; 1
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    200e:	82 e0       	ldi	r24, 0x02	; 2
    2010:	62 e0       	ldi	r22, 0x02	; 2
    2012:	41 e0       	ldi	r20, 0x01	; 1
    2014:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	63 e0       	ldi	r22, 0x03	; 3
    201c:	41 e0       	ldi	r20, 0x01	; 1
    201e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a0 e2       	ldi	r26, 0x20	; 32
    2028:	b1 e4       	ldi	r27, 0x41	; 65
    202a:	8b 87       	std	Y+11, r24	; 0x0b
    202c:	9c 87       	std	Y+12, r25	; 0x0c
    202e:	ad 87       	std	Y+13, r26	; 0x0d
    2030:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2032:	6b 85       	ldd	r22, Y+11	; 0x0b
    2034:	7c 85       	ldd	r23, Y+12	; 0x0c
    2036:	8d 85       	ldd	r24, Y+13	; 0x0d
    2038:	9e 85       	ldd	r25, Y+14	; 0x0e
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a e7       	ldi	r20, 0x7A	; 122
    2040:	53 e4       	ldi	r21, 0x43	; 67
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8f 83       	std	Y+7, r24	; 0x07
    204c:	98 87       	std	Y+8, r25	; 0x08
    204e:	a9 87       	std	Y+9, r26	; 0x09
    2050:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2052:	6f 81       	ldd	r22, Y+7	; 0x07
    2054:	78 85       	ldd	r23, Y+8	; 0x08
    2056:	89 85       	ldd	r24, Y+9	; 0x09
    2058:	9a 85       	ldd	r25, Y+10	; 0x0a
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2066:	88 23       	and	r24, r24
    2068:	2c f4       	brge	.+10     	; 0x2074 <Stepper_moter_enum_Move+0xa58>
		__ticks = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
    2072:	3f c0       	rjmp	.+126    	; 0x20f2 <Stepper_moter_enum_Move+0xad6>
	else if (__tmp > 65535)
    2074:	6f 81       	ldd	r22, Y+7	; 0x07
    2076:	78 85       	ldd	r23, Y+8	; 0x08
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	9a 85       	ldd	r25, Y+10	; 0x0a
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	3f ef       	ldi	r19, 0xFF	; 255
    2080:	4f e7       	ldi	r20, 0x7F	; 127
    2082:	57 e4       	ldi	r21, 0x47	; 71
    2084:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2088:	18 16       	cp	r1, r24
    208a:	4c f5       	brge	.+82     	; 0x20de <Stepper_moter_enum_Move+0xac2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	6b 85       	ldd	r22, Y+11	; 0x0b
    208e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2090:	8d 85       	ldd	r24, Y+13	; 0x0d
    2092:	9e 85       	ldd	r25, Y+14	; 0x0e
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e2       	ldi	r20, 0x20	; 32
    209a:	51 e4       	ldi	r21, 0x41	; 65
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9e 83       	std	Y+6, r25	; 0x06
    20b2:	8d 83       	std	Y+5, r24	; 0x05
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <Stepper_moter_enum_Move+0xab8>
    20b6:	89 e1       	ldi	r24, 0x19	; 25
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9c 83       	std	Y+4, r25	; 0x04
    20bc:	8b 83       	std	Y+3, r24	; 0x03
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	9c 81       	ldd	r25, Y+4	; 0x04
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <Stepper_moter_enum_Move+0xaa6>
    20c6:	9c 83       	std	Y+4, r25	; 0x04
    20c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	9e 81       	ldd	r25, Y+6	; 0x06
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	69 f7       	brne	.-38     	; 0x20b6 <Stepper_moter_enum_Move+0xa9a>
    20dc:	14 c0       	rjmp	.+40     	; 0x2106 <Stepper_moter_enum_Move+0xaea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	6f 81       	ldd	r22, Y+7	; 0x07
    20e0:	78 85       	ldd	r23, Y+8	; 0x08
    20e2:	89 85       	ldd	r24, Y+9	; 0x09
    20e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	9a 83       	std	Y+2, r25	; 0x02
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	9a 81       	ldd	r25, Y+2	; 0x02
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <Stepper_moter_enum_Move+0xae2>
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_LOW );
	_delay_ms(periodic_time_delay);
}
}
else if (copy_u8_direction==CCW){
	for (Local_u8_step_Counter=start;Local_u8_step_Counter<Number_Of_Forloop;Local_u8_step_Counter++){
    2106:	de 01       	movw	r26, r28
    2108:	ac 58       	subi	r26, 0x8C	; 140
    210a:	bf 4f       	sbci	r27, 0xFF	; 255
    210c:	fe 01       	movw	r30, r28
    210e:	ec 58       	subi	r30, 0x8C	; 140
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	80 81       	ld	r24, Z
    2114:	8f 5f       	subi	r24, 0xFF	; 255
    2116:	8c 93       	st	X, r24
    2118:	fe 01       	movw	r30, r28
    211a:	ec 58       	subi	r30, 0x8C	; 140
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	de 01       	movw	r26, r28
    2120:	af 58       	subi	r26, 0x8F	; 143
    2122:	bf 4f       	sbci	r27, 0xFF	; 255
    2124:	90 81       	ld	r25, Z
    2126:	8c 91       	ld	r24, X
    2128:	98 17       	cp	r25, r24
    212a:	08 f4       	brcc	.+2      	; 0x212e <Stepper_moter_enum_Move+0xb12>
    212c:	d4 cd       	rjmp	.-1112   	; 0x1cd6 <Stepper_moter_enum_Move+0x6ba>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
		_delay_ms(periodic_time_delay);
	}
}
	return Local_enu_Erorr_State;
    212e:	fe 01       	movw	r30, r28
    2130:	ed 58       	subi	r30, 0x8D	; 141
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
}
    2136:	ca 58       	subi	r28, 0x8A	; 138
    2138:	df 4f       	sbci	r29, 0xFF	; 255
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	de bf       	out	0x3e, r29	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	cd bf       	out	0x3d, r28	; 61
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	08 95       	ret

0000214e <DC_MOTOR_enum_INIT>:
#include "DC_MOTOR_private.h"

#include<util/delay.h>


ES_t DC_MOTOR_enum_INIT(){
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	0f 92       	push	r0
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State=ES_OK ;
    2158:	19 82       	std	Y+1, r1	; 0x01
	DIO_u8_Set_Pin_Direction(DC_MOTOR_EN1_PORT , DC_MOTOR_EN1_PIN , DIO_u8_INTIAL_OUTPUT);
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	64 e0       	ldi	r22, 0x04	; 4
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>
	DIO_u8_Set_Pin_Direction(DC_MOTOR_INPUT1_PORT , DC_MOTOR_INPUT1_PIN , DIO_u8_INTIAL_OUTPUT);
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	65 e0       	ldi	r22, 0x05	; 5
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>
	DIO_u8_Set_Pin_Direction(DC_MOTOR_INPUT2_PORT , DC_MOTOR_INPUT2_PIN , DIO_u8_INTIAL_OUTPUT);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	66 e0       	ldi	r22, 0x06	; 6
    2172:	41 e0       	ldi	r20, 0x01	; 1
    2174:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>


	DIO_u8_Set_Pin_Value  (DC_MOTOR_EN1_PORT, DC_MOTOR_EN1_PIN,DIO_u8_INTIAL_LOW );
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	64 e0       	ldi	r22, 0x04	; 4
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT1_PORT, DC_MOTOR_INPUT1_PIN,DIO_u8_INTIAL_HIGH );
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	65 e0       	ldi	r22, 0x05	; 5
    2186:	41 e0       	ldi	r20, 0x01	; 1
    2188:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT2_PORT, DC_MOTOR_INPUT2_PIN,DIO_u8_INTIAL_HIGH );
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	66 e0       	ldi	r22, 0x06	; 6
    2190:	41 e0       	ldi	r20, 0x01	; 1
    2192:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>

	return Local_enu_Erorr_State;
    2196:	89 81       	ldd	r24, Y+1	; 0x01

}
    2198:	0f 90       	pop	r0
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <DC_MOTOR_enum_Start>:

ES_t DC_MOTOR_enum_Start(u8 copy_u8_DC_MOTOT_Direction){
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <DC_MOTOR_enum_Start+0x6>
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State=ES_OK ;
    21ac:	19 82       	std	Y+1, r1	; 0x01
	DIO_u8_Set_Pin_Value  (DC_MOTOR_EN1_PORT, DC_MOTOR_EN1_PIN,DIO_u8_HIGH );
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	64 e0       	ldi	r22, 0x04	; 4
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>


if(copy_u8_DC_MOTOT_Direction == CW){
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	59 f4       	brne	.+22     	; 0x21d4 <DC_MOTOR_enum_Start+0x34>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT1_PORT, DC_MOTOR_INPUT1_PIN,DIO_u8_HIGH );
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	65 e0       	ldi	r22, 0x05	; 5
    21c2:	41 e0       	ldi	r20, 0x01	; 1
    21c4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT2_PORT, DC_MOTOR_INPUT2_PIN,DIO_u8_LOW );
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	66 e0       	ldi	r22, 0x06	; 6
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
    21d2:	10 c0       	rjmp	.+32     	; 0x21f4 <DC_MOTOR_enum_Start+0x54>

}
else if(copy_u8_DC_MOTOT_Direction==CCW){
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	82 30       	cpi	r24, 0x02	; 2
    21d8:	59 f4       	brne	.+22     	; 0x21f0 <DC_MOTOR_enum_Start+0x50>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT1_PORT, DC_MOTOR_INPUT1_PIN,DIO_u8_LOW );
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	65 e0       	ldi	r22, 0x05	; 5
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT2_PORT, DC_MOTOR_INPUT2_PIN,DIO_u8_HIGH );
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	66 e0       	ldi	r22, 0x06	; 6
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <DC_MOTOR_enum_Start+0x54>
}
	else{
		Local_enu_Erorr_State= ES_NOK ;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	89 83       	std	Y+1, r24	; 0x01
}
return Local_enu_Erorr_State;
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <DC_MOTOR_enum_Stop>:
ES_t DC_MOTOR_enum_Stop(){
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	0f 92       	push	r0
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State=ES_OK;
    220a:	19 82       	std	Y+1, r1	; 0x01
//STOP DC MOTOR
	DIO_u8_Set_Pin_Value  (DC_MOTOR_EN1_PORT, DC_MOTOR_EN1_PIN,DIO_u8_LOW );
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	64 e0       	ldi	r22, 0x04	; 4
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT1_PORT, DC_MOTOR_INPUT1_PIN,DIO_u8_LOW );
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	65 e0       	ldi	r22, 0x05	; 5
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT2_PORT, DC_MOTOR_INPUT2_PIN,DIO_u8_LOW );
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	66 e0       	ldi	r22, 0x06	; 6
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>

	Local_enu_Erorr_State=ES_NOK;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_Erorr_State;
    222e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <KPD_enum_Init>:
     const u8 KPD_Au8_Keys[4][4]   = KPD_Keys ;
	 const u8 KPD_Au8_Rows_Pins[4] ={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
	 const u8 KPD_Au8_Cols_Pins[4] ={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};

	ES_t KPD_enum_Init(void)
	{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	0f 92       	push	r0
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
		ES_t Local_enu_Erorr_State = ES_OK;
    2242:	19 82       	std	Y+1, r1	; 0x01
//		DIO_u8_Set_Pin_Value(2 , 0 , 0);

		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R1_PIN , DIO_u8_INTIAL_OUTPUT);
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	41 e0       	ldi	r20, 0x01	; 1
    224a:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R2_PIN , DIO_u8_INTIAL_OUTPUT);
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	61 e0       	ldi	r22, 0x01	; 1
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R3_PIN , DIO_u8_INTIAL_OUTPUT);
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	62 e0       	ldi	r22, 0x02	; 2
    225c:	41 e0       	ldi	r20, 0x01	; 1
    225e:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R4_PIN , DIO_u8_INTIAL_OUTPUT);
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	63 e0       	ldi	r22, 0x03	; 3
    2266:	41 e0       	ldi	r20, 0x01	; 1
    2268:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>

		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C1_PIN , DIO_u8_INTIAL_INPUT);
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	64 e0       	ldi	r22, 0x04	; 4
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C2_PIN , DIO_u8_INTIAL_INPUT);
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	65 e0       	ldi	r22, 0x05	; 5
    227a:	40 e0       	ldi	r20, 0x00	; 0
    227c:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C3_PIN , DIO_u8_INTIAL_INPUT);
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	66 e0       	ldi	r22, 0x06	; 6
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C4_PIN , DIO_u8_INTIAL_INPUT);
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	67 e0       	ldi	r22, 0x07	; 7
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8_Set_Pin_Direction>

		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R1_PIN , DIO_u8_INTIAL_PULL_UP);
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	41 e0       	ldi	r20, 0x01	; 1
    229a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R2_PIN , DIO_u8_INTIAL_PULL_UP);
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	61 e0       	ldi	r22, 0x01	; 1
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R3_PIN , DIO_u8_INTIAL_PULL_UP);
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	62 e0       	ldi	r22, 0x02	; 2
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R4_PIN , DIO_u8_INTIAL_PULL_UP);
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	63 e0       	ldi	r22, 0x03	; 3
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>

		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C1_PIN , DIO_u8_INTIAL_HIGH);
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	64 e0       	ldi	r22, 0x04	; 4
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C2_PIN , DIO_u8_INTIAL_HIGH);
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	65 e0       	ldi	r22, 0x05	; 5
    22ca:	41 e0       	ldi	r20, 0x01	; 1
    22cc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C3_PIN , DIO_u8_INTIAL_HIGH);
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	66 e0       	ldi	r22, 0x06	; 6
    22d4:	41 e0       	ldi	r20, 0x01	; 1
    22d6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C4_PIN , DIO_u8_INTIAL_HIGH);
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	67 e0       	ldi	r22, 0x07	; 7
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>

		return Local_enu_Erorr_State;
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
	}
    22e6:	0f 90       	pop	r0
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <KPD_enum_Get_Key_State>:
ES_t KPD_enum_Get_Key_State(u8 *Copy_pu8_Returned_Key){
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	65 97       	sbiw	r28, 0x15	; 21
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	9d 8b       	std	Y+21, r25	; 0x15
    2304:	8c 8b       	std	Y+20, r24	; 0x14

//	*Copy_pu8_Returned_Key = KPD_u8_Keys_NO_Pressed;
 ES_t Local_enu_Erorr_State = ES_OK ;
    2306:	1a 8a       	std	Y+18, r1	; 0x12
 u8 Local_u8_Rows_Counter, Local_u8_Cols_Counter, Local_u8_Key_Value=0, Local_u8_Flag =DIO_u8_LOW;
    2308:	1b 8a       	std	Y+19, r1	; 0x13
    230a:	1f 86       	std	Y+15, r1	; 0x0f
 if ( Copy_pu8_Returned_Key != NULL ){
    230c:	8c 89       	ldd	r24, Y+20	; 0x14
    230e:	9d 89       	ldd	r25, Y+21	; 0x15
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	09 f4       	brne	.+2      	; 0x2316 <KPD_enum_Get_Key_State+0x28>
    2314:	f0 c0       	rjmp	.+480    	; 0x24f6 <KPD_enum_Get_Key_State+0x208>
		*Copy_pu8_Returned_Key = KPD_u8_Keys_NO_Pressed;
    2316:	ec 89       	ldd	r30, Y+20	; 0x14
    2318:	fd 89       	ldd	r31, Y+21	; 0x15
    231a:	8f ef       	ldi	r24, 0xFF	; 255
    231c:	80 83       	st	Z, r24



/* activate each row by for loop */
	 for (Local_u8_Rows_Counter=KPD_u8_R1; Local_u8_Rows_Counter<=KPD_u8_R4; Local_u8_Rows_Counter++){
    231e:	19 8a       	std	Y+17, r1	; 0x11
    2320:	e5 c0       	rjmp	.+458    	; 0x24ec <KPD_enum_Get_Key_State+0x1fe>
		 DIO_u8_Set_Pin_Value (KPD_u8_PORT, KPD_Au8_Rows_Pins[Local_u8_Rows_Counter],  DIO_u8_LOW );
    2322:	89 89       	ldd	r24, Y+17	; 0x11
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	fc 01       	movw	r30, r24
    232a:	e1 5e       	subi	r30, 0xE1	; 225
    232c:	fe 4f       	sbci	r31, 0xFE	; 254
    232e:	90 81       	ld	r25, Z
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	69 2f       	mov	r22, r25
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
//			DIO_u8_Set_Pin_Value(2 , 0 , 1);

		 /*check which input pin has zero		  */
		 for (Local_u8_Cols_Counter=KPD_u8_C1; Local_u8_Cols_Counter<=KPD_u8_C4; Local_u8_Cols_Counter++){
    233a:	18 8a       	std	Y+16, r1	; 0x10
    233c:	c1 c0       	rjmp	.+386    	; 0x24c0 <KPD_enum_Get_Key_State+0x1d2>
			 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT, KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
    233e:	88 89       	ldd	r24, Y+16	; 0x10
    2340:	88 2f       	mov	r24, r24
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	fc 01       	movw	r30, r24
    2346:	ed 5d       	subi	r30, 0xDD	; 221
    2348:	fe 4f       	sbci	r31, 0xFE	; 254
    234a:	90 81       	ld	r25, Z
    234c:	9e 01       	movw	r18, r28
    234e:	2d 5e       	subi	r18, 0xED	; 237
    2350:	3f 4f       	sbci	r19, 0xFF	; 255
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	69 2f       	mov	r22, r25
    2356:	a9 01       	movw	r20, r18
    2358:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_u8_Get_Pin_Value>
//	 			DIO_u8_Set_Pin_Value(2 , 0 , 1);

//           if switch is pressed
			 if (Local_u8_Key_Value == DIO_u8_LOW)
    235c:	8b 89       	ldd	r24, Y+19	; 0x13
    235e:	88 23       	and	r24, r24
    2360:	09 f0       	breq	.+2      	; 0x2364 <KPD_enum_Get_Key_State+0x76>
    2362:	ab c0       	rjmp	.+342    	; 0x24ba <KPD_enum_Get_Key_State+0x1cc>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	a0 ea       	ldi	r26, 0xA0	; 160
    236a:	b1 e4       	ldi	r27, 0x41	; 65
    236c:	8b 87       	std	Y+11, r24	; 0x0b
    236e:	9c 87       	std	Y+12, r25	; 0x0c
    2370:	ad 87       	std	Y+13, r26	; 0x0d
    2372:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2374:	6b 85       	ldd	r22, Y+11	; 0x0b
    2376:	7c 85       	ldd	r23, Y+12	; 0x0c
    2378:	8d 85       	ldd	r24, Y+13	; 0x0d
    237a:	9e 85       	ldd	r25, Y+14	; 0x0e
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a e7       	ldi	r20, 0x7A	; 122
    2382:	53 e4       	ldi	r21, 0x43	; 67
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	8f 83       	std	Y+7, r24	; 0x07
    238e:	98 87       	std	Y+8, r25	; 0x08
    2390:	a9 87       	std	Y+9, r26	; 0x09
    2392:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2394:	6f 81       	ldd	r22, Y+7	; 0x07
    2396:	78 85       	ldd	r23, Y+8	; 0x08
    2398:	89 85       	ldd	r24, Y+9	; 0x09
    239a:	9a 85       	ldd	r25, Y+10	; 0x0a
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23a8:	88 23       	and	r24, r24
    23aa:	2c f4       	brge	.+10     	; 0x23b6 <KPD_enum_Get_Key_State+0xc8>
		__ticks = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
    23b4:	3f c0       	rjmp	.+126    	; 0x2434 <KPD_enum_Get_Key_State+0x146>
	else if (__tmp > 65535)
    23b6:	6f 81       	ldd	r22, Y+7	; 0x07
    23b8:	78 85       	ldd	r23, Y+8	; 0x08
    23ba:	89 85       	ldd	r24, Y+9	; 0x09
    23bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f ef       	ldi	r19, 0xFF	; 255
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	57 e4       	ldi	r21, 0x47	; 71
    23c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	4c f5       	brge	.+82     	; 0x2420 <KPD_enum_Get_Key_State+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e2       	ldi	r20, 0x20	; 32
    23dc:	51 e4       	ldi	r21, 0x41	; 65
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	9e 83       	std	Y+6, r25	; 0x06
    23f4:	8d 83       	std	Y+5, r24	; 0x05
    23f6:	0f c0       	rjmp	.+30     	; 0x2416 <KPD_enum_Get_Key_State+0x128>
    23f8:	89 e1       	ldi	r24, 0x19	; 25
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9c 83       	std	Y+4, r25	; 0x04
    23fe:	8b 83       	std	Y+3, r24	; 0x03
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	9c 81       	ldd	r25, Y+4	; 0x04
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <KPD_enum_Get_Key_State+0x116>
    2408:	9c 83       	std	Y+4, r25	; 0x04
    240a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	9e 81       	ldd	r25, Y+6	; 0x06
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	69 f7       	brne	.-38     	; 0x23f8 <KPD_enum_Get_Key_State+0x10a>
    241e:	14 c0       	rjmp	.+40     	; 0x2448 <KPD_enum_Get_Key_State+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2420:	6f 81       	ldd	r22, Y+7	; 0x07
    2422:	78 85       	ldd	r23, Y+8	; 0x08
    2424:	89 85       	ldd	r24, Y+9	; 0x09
    2426:	9a 85       	ldd	r25, Y+10	; 0x0a
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9e 83       	std	Y+6, r25	; 0x06
    2432:	8d 83       	std	Y+5, r24	; 0x05
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	9e 81       	ldd	r25, Y+6	; 0x06
    2438:	9a 83       	std	Y+2, r25	; 0x02
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	9a 81       	ldd	r25, Y+2	; 0x02
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <KPD_enum_Get_Key_State+0x152>
    2444:	9a 83       	std	Y+2, r25	; 0x02
    2446:	89 83       	std	Y+1, r24	; 0x01
            {

          /*Debouncing */
         _delay_ms(20);
		 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT, KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
    2448:	88 89       	ldd	r24, Y+16	; 0x10
    244a:	88 2f       	mov	r24, r24
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	fc 01       	movw	r30, r24
    2450:	ed 5d       	subi	r30, 0xDD	; 221
    2452:	fe 4f       	sbci	r31, 0xFE	; 254
    2454:	90 81       	ld	r25, Z
    2456:	9e 01       	movw	r18, r28
    2458:	2d 5e       	subi	r18, 0xED	; 237
    245a:	3f 4f       	sbci	r19, 0xFF	; 255
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	69 2f       	mov	r22, r25
    2460:	a9 01       	movw	r20, r18
    2462:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_u8_Get_Pin_Value>
    2466:	0f c0       	rjmp	.+30     	; 0x2486 <KPD_enum_Get_Key_State+0x198>
//			DIO_u8_Set_Pin_Value(2 , 1 , 1);

         /*check if the pin is still pressed */
		 while (Local_u8_Key_Value == DIO_u8_LOW){
			 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT,  KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
    2468:	88 89       	ldd	r24, Y+16	; 0x10
    246a:	88 2f       	mov	r24, r24
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	fc 01       	movw	r30, r24
    2470:	ed 5d       	subi	r30, 0xDD	; 221
    2472:	fe 4f       	sbci	r31, 0xFE	; 254
    2474:	90 81       	ld	r25, Z
    2476:	9e 01       	movw	r18, r28
    2478:	2d 5e       	subi	r18, 0xED	; 237
    247a:	3f 4f       	sbci	r19, 0xFF	; 255
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	69 2f       	mov	r22, r25
    2480:	a9 01       	movw	r20, r18
    2482:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_u8_Get_Pin_Value>
         _delay_ms(20);
		 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT, KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
//			DIO_u8_Set_Pin_Value(2 , 1 , 1);

         /*check if the pin is still pressed */
		 while (Local_u8_Key_Value == DIO_u8_LOW){
    2486:	8b 89       	ldd	r24, Y+19	; 0x13
    2488:	88 23       	and	r24, r24
    248a:	71 f3       	breq	.-36     	; 0x2468 <KPD_enum_Get_Key_State+0x17a>
			 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT,  KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
//			 Local_enu_Erorr_State= ES_OK;
		 }
      *Copy_pu8_Returned_Key = KPD_Au8_Keys[Local_u8_Rows_Counter][Local_u8_Cols_Counter];
    248c:	89 89       	ldd	r24, Y+17	; 0x11
    248e:	48 2f       	mov	r20, r24
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	88 89       	ldd	r24, Y+16	; 0x10
    2494:	28 2f       	mov	r18, r24
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	ca 01       	movw	r24, r20
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	82 0f       	add	r24, r18
    24a4:	93 1f       	adc	r25, r19
    24a6:	fc 01       	movw	r30, r24
    24a8:	e1 5f       	subi	r30, 0xF1	; 241
    24aa:	fe 4f       	sbci	r31, 0xFE	; 254
    24ac:	80 81       	ld	r24, Z
    24ae:	ec 89       	ldd	r30, Y+20	; 0x14
    24b0:	fd 89       	ldd	r31, Y+21	; 0x15
    24b2:	80 83       	st	Z, r24
       Local_u8_Flag =DIO_u8_HIGH;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	8f 87       	std	Y+15, r24	; 0x0f
    24b8:	07 c0       	rjmp	.+14     	; 0x24c8 <KPD_enum_Get_Key_State+0x1da>
	 for (Local_u8_Rows_Counter=KPD_u8_R1; Local_u8_Rows_Counter<=KPD_u8_R4; Local_u8_Rows_Counter++){
		 DIO_u8_Set_Pin_Value (KPD_u8_PORT, KPD_Au8_Rows_Pins[Local_u8_Rows_Counter],  DIO_u8_LOW );
//			DIO_u8_Set_Pin_Value(2 , 0 , 1);

		 /*check which input pin has zero		  */
		 for (Local_u8_Cols_Counter=KPD_u8_C1; Local_u8_Cols_Counter<=KPD_u8_C4; Local_u8_Cols_Counter++){
    24ba:	88 89       	ldd	r24, Y+16	; 0x10
    24bc:	8f 5f       	subi	r24, 0xFF	; 255
    24be:	88 8b       	std	Y+16, r24	; 0x10
    24c0:	88 89       	ldd	r24, Y+16	; 0x10
    24c2:	84 30       	cpi	r24, 0x04	; 4
    24c4:	08 f4       	brcc	.+2      	; 0x24c8 <KPD_enum_Get_Key_State+0x1da>
    24c6:	3b cf       	rjmp	.-394    	; 0x233e <KPD_enum_Get_Key_State+0x50>
       Local_u8_Flag =DIO_u8_HIGH;
        break;
            }
		 }
/*deactivate rows */
		 DIO_u8_Set_Pin_Value(KPD_u8_PORT,KPD_Au8_Rows_Pins[Local_u8_Rows_Counter],DIO_u8_HIGH);
    24c8:	89 89       	ldd	r24, Y+17	; 0x11
    24ca:	88 2f       	mov	r24, r24
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	fc 01       	movw	r30, r24
    24d0:	e1 5e       	subi	r30, 0xE1	; 225
    24d2:	fe 4f       	sbci	r31, 0xFE	; 254
    24d4:	90 81       	ld	r25, Z
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	69 2f       	mov	r22, r25
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
		 			if(Local_u8_Flag == DIO_u8_HIGH)
    24e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e2:	81 30       	cpi	r24, 0x01	; 1
    24e4:	51 f0       	breq	.+20     	; 0x24fa <KPD_enum_Get_Key_State+0x20c>
		*Copy_pu8_Returned_Key = KPD_u8_Keys_NO_Pressed;



/* activate each row by for loop */
	 for (Local_u8_Rows_Counter=KPD_u8_R1; Local_u8_Rows_Counter<=KPD_u8_R4; Local_u8_Rows_Counter++){
    24e6:	89 89       	ldd	r24, Y+17	; 0x11
    24e8:	8f 5f       	subi	r24, 0xFF	; 255
    24ea:	89 8b       	std	Y+17, r24	; 0x11
    24ec:	89 89       	ldd	r24, Y+17	; 0x11
    24ee:	84 30       	cpi	r24, 0x04	; 4
    24f0:	08 f4       	brcc	.+2      	; 0x24f4 <KPD_enum_Get_Key_State+0x206>
    24f2:	17 cf       	rjmp	.-466    	; 0x2322 <KPD_enum_Get_Key_State+0x34>
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <KPD_enum_Get_Key_State+0x20c>
		 				break;
	 }
 }
 else
     {
	 Local_enu_Erorr_State = ES_NOK;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	8a 8b       	std	Y+18, r24	; 0x12
     }
 return Local_enu_Erorr_State;
    24fa:	8a 89       	ldd	r24, Y+18	; 0x12
}
    24fc:	65 96       	adiw	r28, 0x15	; 21
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <LCD_enum_INIT>:
#include"LCD_private.h"

//#define F_CPU 8000000UL
#include<util/delay.h>

ES_t LCD_enum_INIT (void){
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	c2 54       	subi	r28, 0x42	; 66
    2518:	d0 40       	sbci	r29, 0x00	; 0
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	fe 01       	movw	r30, r28
    2526:	ff 96       	adiw	r30, 0x3f	; 63
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	ac e0       	ldi	r26, 0x0C	; 12
    252e:	b2 e4       	ldi	r27, 0x42	; 66
    2530:	80 83       	st	Z, r24
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	a2 83       	std	Z+2, r26	; 0x02
    2536:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	fe 01       	movw	r30, r28
    253a:	ff 96       	adiw	r30, 0x3f	; 63
    253c:	60 81       	ld	r22, Z
    253e:	71 81       	ldd	r23, Z+1	; 0x01
    2540:	82 81       	ldd	r24, Z+2	; 0x02
    2542:	93 81       	ldd	r25, Z+3	; 0x03
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	4a e7       	ldi	r20, 0x7A	; 122
    254a:	53 e4       	ldi	r21, 0x43	; 67
    254c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	8b af       	std	Y+59, r24	; 0x3b
    2556:	9c af       	std	Y+60, r25	; 0x3c
    2558:	ad af       	std	Y+61, r26	; 0x3d
    255a:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    255c:	6b ad       	ldd	r22, Y+59	; 0x3b
    255e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2560:	8d ad       	ldd	r24, Y+61	; 0x3d
    2562:	9e ad       	ldd	r25, Y+62	; 0x3e
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2570:	88 23       	and	r24, r24
    2572:	2c f4       	brge	.+10     	; 0x257e <LCD_enum_INIT+0x70>
		__ticks = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9a af       	std	Y+58, r25	; 0x3a
    257a:	89 af       	std	Y+57, r24	; 0x39
    257c:	41 c0       	rjmp	.+130    	; 0x2600 <LCD_enum_INIT+0xf2>
	else if (__tmp > 65535)
    257e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2580:	7c ad       	ldd	r23, Y+60	; 0x3c
    2582:	8d ad       	ldd	r24, Y+61	; 0x3d
    2584:	9e ad       	ldd	r25, Y+62	; 0x3e
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	3f ef       	ldi	r19, 0xFF	; 255
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	57 e4       	ldi	r21, 0x47	; 71
    258e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2592:	18 16       	cp	r1, r24
    2594:	5c f5       	brge	.+86     	; 0x25ec <LCD_enum_INIT+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2596:	fe 01       	movw	r30, r28
    2598:	ff 96       	adiw	r30, 0x3f	; 63
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e2       	ldi	r20, 0x20	; 32
    25a8:	51 e4       	ldi	r21, 0x41	; 65
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	bc 01       	movw	r22, r24
    25b4:	cd 01       	movw	r24, r26
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9a af       	std	Y+58, r25	; 0x3a
    25c0:	89 af       	std	Y+57, r24	; 0x39
    25c2:	0f c0       	rjmp	.+30     	; 0x25e2 <LCD_enum_INIT+0xd4>
    25c4:	89 e1       	ldi	r24, 0x19	; 25
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	98 af       	std	Y+56, r25	; 0x38
    25ca:	8f ab       	std	Y+55, r24	; 0x37
    25cc:	8f a9       	ldd	r24, Y+55	; 0x37
    25ce:	98 ad       	ldd	r25, Y+56	; 0x38
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <LCD_enum_INIT+0xc2>
    25d4:	98 af       	std	Y+56, r25	; 0x38
    25d6:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d8:	89 ad       	ldd	r24, Y+57	; 0x39
    25da:	9a ad       	ldd	r25, Y+58	; 0x3a
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	9a af       	std	Y+58, r25	; 0x3a
    25e0:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e2:	89 ad       	ldd	r24, Y+57	; 0x39
    25e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	69 f7       	brne	.-38     	; 0x25c4 <LCD_enum_INIT+0xb6>
    25ea:	14 c0       	rjmp	.+40     	; 0x2614 <LCD_enum_INIT+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ec:	6b ad       	ldd	r22, Y+59	; 0x3b
    25ee:	7c ad       	ldd	r23, Y+60	; 0x3c
    25f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    25f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9a af       	std	Y+58, r25	; 0x3a
    25fe:	89 af       	std	Y+57, r24	; 0x39
    2600:	89 ad       	ldd	r24, Y+57	; 0x39
    2602:	9a ad       	ldd	r25, Y+58	; 0x3a
    2604:	9e ab       	std	Y+54, r25	; 0x36
    2606:	8d ab       	std	Y+53, r24	; 0x35
    2608:	8d a9       	ldd	r24, Y+53	; 0x35
    260a:	9e a9       	ldd	r25, Y+54	; 0x36
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <LCD_enum_INIT+0xfe>
    2610:	9e ab       	std	Y+54, r25	; 0x36
    2612:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(35);
//to set CMND
	LCD_enum_Send_Comnd(FUN_SET_8BIT_2LINES_5X7);
    2614:	88 e3       	ldi	r24, 0x38	; 56
    2616:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_enum_Send_Comnd>
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	a0 e2       	ldi	r26, 0x20	; 32
    2620:	b2 e4       	ldi	r27, 0x42	; 66
    2622:	89 ab       	std	Y+49, r24	; 0x31
    2624:	9a ab       	std	Y+50, r25	; 0x32
    2626:	ab ab       	std	Y+51, r26	; 0x33
    2628:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    262a:	69 a9       	ldd	r22, Y+49	; 0x31
    262c:	7a a9       	ldd	r23, Y+50	; 0x32
    262e:	8b a9       	ldd	r24, Y+51	; 0x33
    2630:	9c a9       	ldd	r25, Y+52	; 0x34
    2632:	2b ea       	ldi	r18, 0xAB	; 171
    2634:	3a ea       	ldi	r19, 0xAA	; 170
    2636:	4a ea       	ldi	r20, 0xAA	; 170
    2638:	5e e3       	ldi	r21, 0x3E	; 62
    263a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	8d a7       	std	Y+45, r24	; 0x2d
    2644:	9e a7       	std	Y+46, r25	; 0x2e
    2646:	af a7       	std	Y+47, r26	; 0x2f
    2648:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    264a:	6d a5       	ldd	r22, Y+45	; 0x2d
    264c:	7e a5       	ldd	r23, Y+46	; 0x2e
    264e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2650:	98 a9       	ldd	r25, Y+48	; 0x30
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e8       	ldi	r20, 0x80	; 128
    2658:	5f e3       	ldi	r21, 0x3F	; 63
    265a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    265e:	88 23       	and	r24, r24
    2660:	1c f4       	brge	.+6      	; 0x2668 <LCD_enum_INIT+0x15a>
		__ticks = 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	8c a7       	std	Y+44, r24	; 0x2c
    2666:	91 c0       	rjmp	.+290    	; 0x278a <LCD_enum_INIT+0x27c>
	else if (__tmp > 255)
    2668:	6d a5       	ldd	r22, Y+45	; 0x2d
    266a:	7e a5       	ldd	r23, Y+46	; 0x2e
    266c:	8f a5       	ldd	r24, Y+47	; 0x2f
    266e:	98 a9       	ldd	r25, Y+48	; 0x30
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	4f e7       	ldi	r20, 0x7F	; 127
    2676:	53 e4       	ldi	r21, 0x43	; 67
    2678:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    267c:	18 16       	cp	r1, r24
    267e:	0c f0       	brlt	.+2      	; 0x2682 <LCD_enum_INIT+0x174>
    2680:	7b c0       	rjmp	.+246    	; 0x2778 <LCD_enum_INIT+0x26a>
	{
		_delay_ms(__us / 1000.0);
    2682:	69 a9       	ldd	r22, Y+49	; 0x31
    2684:	7a a9       	ldd	r23, Y+50	; 0x32
    2686:	8b a9       	ldd	r24, Y+51	; 0x33
    2688:	9c a9       	ldd	r25, Y+52	; 0x34
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	4a e7       	ldi	r20, 0x7A	; 122
    2690:	54 e4       	ldi	r21, 0x44	; 68
    2692:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	88 a7       	std	Y+40, r24	; 0x28
    269c:	99 a7       	std	Y+41, r25	; 0x29
    269e:	aa a7       	std	Y+42, r26	; 0x2a
    26a0:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a2:	68 a5       	ldd	r22, Y+40	; 0x28
    26a4:	79 a5       	ldd	r23, Y+41	; 0x29
    26a6:	8a a5       	ldd	r24, Y+42	; 0x2a
    26a8:	9b a5       	ldd	r25, Y+43	; 0x2b
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	4a e7       	ldi	r20, 0x7A	; 122
    26b0:	53 e4       	ldi	r21, 0x43	; 67
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	8c a3       	std	Y+36, r24	; 0x24
    26bc:	9d a3       	std	Y+37, r25	; 0x25
    26be:	ae a3       	std	Y+38, r26	; 0x26
    26c0:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    26c2:	6c a1       	ldd	r22, Y+36	; 0x24
    26c4:	7d a1       	ldd	r23, Y+37	; 0x25
    26c6:	8e a1       	ldd	r24, Y+38	; 0x26
    26c8:	9f a1       	ldd	r25, Y+39	; 0x27
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e8       	ldi	r20, 0x80	; 128
    26d0:	5f e3       	ldi	r21, 0x3F	; 63
    26d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d6:	88 23       	and	r24, r24
    26d8:	2c f4       	brge	.+10     	; 0x26e4 <LCD_enum_INIT+0x1d6>
		__ticks = 1;
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9b a3       	std	Y+35, r25	; 0x23
    26e0:	8a a3       	std	Y+34, r24	; 0x22
    26e2:	3f c0       	rjmp	.+126    	; 0x2762 <LCD_enum_INIT+0x254>
	else if (__tmp > 65535)
    26e4:	6c a1       	ldd	r22, Y+36	; 0x24
    26e6:	7d a1       	ldd	r23, Y+37	; 0x25
    26e8:	8e a1       	ldd	r24, Y+38	; 0x26
    26ea:	9f a1       	ldd	r25, Y+39	; 0x27
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	3f ef       	ldi	r19, 0xFF	; 255
    26f0:	4f e7       	ldi	r20, 0x7F	; 127
    26f2:	57 e4       	ldi	r21, 0x47	; 71
    26f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f8:	18 16       	cp	r1, r24
    26fa:	4c f5       	brge	.+82     	; 0x274e <LCD_enum_INIT+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fc:	68 a5       	ldd	r22, Y+40	; 0x28
    26fe:	79 a5       	ldd	r23, Y+41	; 0x29
    2700:	8a a5       	ldd	r24, Y+42	; 0x2a
    2702:	9b a5       	ldd	r25, Y+43	; 0x2b
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e2       	ldi	r20, 0x20	; 32
    270a:	51 e4       	ldi	r21, 0x41	; 65
    270c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	bc 01       	movw	r22, r24
    2716:	cd 01       	movw	r24, r26
    2718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	9b a3       	std	Y+35, r25	; 0x23
    2722:	8a a3       	std	Y+34, r24	; 0x22
    2724:	0f c0       	rjmp	.+30     	; 0x2744 <LCD_enum_INIT+0x236>
    2726:	89 e1       	ldi	r24, 0x19	; 25
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	99 a3       	std	Y+33, r25	; 0x21
    272c:	88 a3       	std	Y+32, r24	; 0x20
    272e:	88 a1       	ldd	r24, Y+32	; 0x20
    2730:	99 a1       	ldd	r25, Y+33	; 0x21
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <LCD_enum_INIT+0x224>
    2736:	99 a3       	std	Y+33, r25	; 0x21
    2738:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273a:	8a a1       	ldd	r24, Y+34	; 0x22
    273c:	9b a1       	ldd	r25, Y+35	; 0x23
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	9b a3       	std	Y+35, r25	; 0x23
    2742:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2744:	8a a1       	ldd	r24, Y+34	; 0x22
    2746:	9b a1       	ldd	r25, Y+35	; 0x23
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	69 f7       	brne	.-38     	; 0x2726 <LCD_enum_INIT+0x218>
    274c:	24 c0       	rjmp	.+72     	; 0x2796 <LCD_enum_INIT+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274e:	6c a1       	ldd	r22, Y+36	; 0x24
    2750:	7d a1       	ldd	r23, Y+37	; 0x25
    2752:	8e a1       	ldd	r24, Y+38	; 0x26
    2754:	9f a1       	ldd	r25, Y+39	; 0x27
    2756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	9b a3       	std	Y+35, r25	; 0x23
    2760:	8a a3       	std	Y+34, r24	; 0x22
    2762:	8a a1       	ldd	r24, Y+34	; 0x22
    2764:	9b a1       	ldd	r25, Y+35	; 0x23
    2766:	9f 8f       	std	Y+31, r25	; 0x1f
    2768:	8e 8f       	std	Y+30, r24	; 0x1e
    276a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    276c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	f1 f7       	brne	.-4      	; 0x276e <LCD_enum_INIT+0x260>
    2772:	9f 8f       	std	Y+31, r25	; 0x1f
    2774:	8e 8f       	std	Y+30, r24	; 0x1e
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <LCD_enum_INIT+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2778:	6d a5       	ldd	r22, Y+45	; 0x2d
    277a:	7e a5       	ldd	r23, Y+46	; 0x2e
    277c:	8f a5       	ldd	r24, Y+47	; 0x2f
    277e:	98 a9       	ldd	r25, Y+48	; 0x30
    2780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	8c a7       	std	Y+44, r24	; 0x2c
    278a:	8c a5       	ldd	r24, Y+44	; 0x2c
    278c:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    278e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2790:	8a 95       	dec	r24
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_enum_INIT+0x282>
    2794:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(40);
	LCD_enum_Send_Comnd(DIS_ON_CURSOR_ON_BLINKING);
    2796:	8f e0       	ldi	r24, 0x0F	; 15
    2798:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_enum_Send_Comnd>
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	a0 e2       	ldi	r26, 0x20	; 32
    27a2:	b2 e4       	ldi	r27, 0x42	; 66
    27a4:	89 8f       	std	Y+25, r24	; 0x19
    27a6:	9a 8f       	std	Y+26, r25	; 0x1a
    27a8:	ab 8f       	std	Y+27, r26	; 0x1b
    27aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ac:	69 8d       	ldd	r22, Y+25	; 0x19
    27ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	4a e7       	ldi	r20, 0x7A	; 122
    27ba:	53 e4       	ldi	r21, 0x43	; 67
    27bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	8d 8b       	std	Y+21, r24	; 0x15
    27c6:	9e 8b       	std	Y+22, r25	; 0x16
    27c8:	af 8b       	std	Y+23, r26	; 0x17
    27ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27cc:	6d 89       	ldd	r22, Y+21	; 0x15
    27ce:	7e 89       	ldd	r23, Y+22	; 0x16
    27d0:	8f 89       	ldd	r24, Y+23	; 0x17
    27d2:	98 8d       	ldd	r25, Y+24	; 0x18
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e8       	ldi	r20, 0x80	; 128
    27da:	5f e3       	ldi	r21, 0x3F	; 63
    27dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27e0:	88 23       	and	r24, r24
    27e2:	2c f4       	brge	.+10     	; 0x27ee <LCD_enum_INIT+0x2e0>
		__ticks = 1;
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	9c 8b       	std	Y+20, r25	; 0x14
    27ea:	8b 8b       	std	Y+19, r24	; 0x13
    27ec:	3f c0       	rjmp	.+126    	; 0x286c <LCD_enum_INIT+0x35e>
	else if (__tmp > 65535)
    27ee:	6d 89       	ldd	r22, Y+21	; 0x15
    27f0:	7e 89       	ldd	r23, Y+22	; 0x16
    27f2:	8f 89       	ldd	r24, Y+23	; 0x17
    27f4:	98 8d       	ldd	r25, Y+24	; 0x18
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	3f ef       	ldi	r19, 0xFF	; 255
    27fa:	4f e7       	ldi	r20, 0x7F	; 127
    27fc:	57 e4       	ldi	r21, 0x47	; 71
    27fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2802:	18 16       	cp	r1, r24
    2804:	4c f5       	brge	.+82     	; 0x2858 <LCD_enum_INIT+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2806:	69 8d       	ldd	r22, Y+25	; 0x19
    2808:	7a 8d       	ldd	r23, Y+26	; 0x1a
    280a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    280c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e2       	ldi	r20, 0x20	; 32
    2814:	51 e4       	ldi	r21, 0x41	; 65
    2816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	bc 01       	movw	r22, r24
    2820:	cd 01       	movw	r24, r26
    2822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	9c 8b       	std	Y+20, r25	; 0x14
    282c:	8b 8b       	std	Y+19, r24	; 0x13
    282e:	0f c0       	rjmp	.+30     	; 0x284e <LCD_enum_INIT+0x340>
    2830:	89 e1       	ldi	r24, 0x19	; 25
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	9a 8b       	std	Y+18, r25	; 0x12
    2836:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2838:	89 89       	ldd	r24, Y+17	; 0x11
    283a:	9a 89       	ldd	r25, Y+18	; 0x12
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <LCD_enum_INIT+0x32e>
    2840:	9a 8b       	std	Y+18, r25	; 0x12
    2842:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2844:	8b 89       	ldd	r24, Y+19	; 0x13
    2846:	9c 89       	ldd	r25, Y+20	; 0x14
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	9c 8b       	std	Y+20, r25	; 0x14
    284c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284e:	8b 89       	ldd	r24, Y+19	; 0x13
    2850:	9c 89       	ldd	r25, Y+20	; 0x14
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	69 f7       	brne	.-38     	; 0x2830 <LCD_enum_INIT+0x322>
    2856:	14 c0       	rjmp	.+40     	; 0x2880 <LCD_enum_INIT+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2858:	6d 89       	ldd	r22, Y+21	; 0x15
    285a:	7e 89       	ldd	r23, Y+22	; 0x16
    285c:	8f 89       	ldd	r24, Y+23	; 0x17
    285e:	98 8d       	ldd	r25, Y+24	; 0x18
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	9c 8b       	std	Y+20, r25	; 0x14
    286a:	8b 8b       	std	Y+19, r24	; 0x13
    286c:	8b 89       	ldd	r24, Y+19	; 0x13
    286e:	9c 89       	ldd	r25, Y+20	; 0x14
    2870:	98 8b       	std	Y+16, r25	; 0x10
    2872:	8f 87       	std	Y+15, r24	; 0x0f
    2874:	8f 85       	ldd	r24, Y+15	; 0x0f
    2876:	98 89       	ldd	r25, Y+16	; 0x10
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <LCD_enum_INIT+0x36a>
    287c:	98 8b       	std	Y+16, r25	; 0x10
    287e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	LCD_enum_Send_Comnd(DISPLAY_CLEAR);
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_enum_Send_Comnd>
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	a0 e8       	ldi	r26, 0x80	; 128
    288c:	bf e3       	ldi	r27, 0x3F	; 63
    288e:	8b 87       	std	Y+11, r24	; 0x0b
    2890:	9c 87       	std	Y+12, r25	; 0x0c
    2892:	ad 87       	std	Y+13, r26	; 0x0d
    2894:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2896:	6b 85       	ldd	r22, Y+11	; 0x0b
    2898:	7c 85       	ldd	r23, Y+12	; 0x0c
    289a:	8d 85       	ldd	r24, Y+13	; 0x0d
    289c:	9e 85       	ldd	r25, Y+14	; 0x0e
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	4a e7       	ldi	r20, 0x7A	; 122
    28a4:	53 e4       	ldi	r21, 0x43	; 67
    28a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	8f 83       	std	Y+7, r24	; 0x07
    28b0:	98 87       	std	Y+8, r25	; 0x08
    28b2:	a9 87       	std	Y+9, r26	; 0x09
    28b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b6:	6f 81       	ldd	r22, Y+7	; 0x07
    28b8:	78 85       	ldd	r23, Y+8	; 0x08
    28ba:	89 85       	ldd	r24, Y+9	; 0x09
    28bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e8       	ldi	r20, 0x80	; 128
    28c4:	5f e3       	ldi	r21, 0x3F	; 63
    28c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ca:	88 23       	and	r24, r24
    28cc:	2c f4       	brge	.+10     	; 0x28d8 <LCD_enum_INIT+0x3ca>
		__ticks = 1;
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9e 83       	std	Y+6, r25	; 0x06
    28d4:	8d 83       	std	Y+5, r24	; 0x05
    28d6:	3f c0       	rjmp	.+126    	; 0x2956 <LCD_enum_INIT+0x448>
	else if (__tmp > 65535)
    28d8:	6f 81       	ldd	r22, Y+7	; 0x07
    28da:	78 85       	ldd	r23, Y+8	; 0x08
    28dc:	89 85       	ldd	r24, Y+9	; 0x09
    28de:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	3f ef       	ldi	r19, 0xFF	; 255
    28e4:	4f e7       	ldi	r20, 0x7F	; 127
    28e6:	57 e4       	ldi	r21, 0x47	; 71
    28e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ec:	18 16       	cp	r1, r24
    28ee:	4c f5       	brge	.+82     	; 0x2942 <LCD_enum_INIT+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e2       	ldi	r20, 0x20	; 32
    28fe:	51 e4       	ldi	r21, 0x41	; 65
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	bc 01       	movw	r22, r24
    290a:	cd 01       	movw	r24, r26
    290c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9e 83       	std	Y+6, r25	; 0x06
    2916:	8d 83       	std	Y+5, r24	; 0x05
    2918:	0f c0       	rjmp	.+30     	; 0x2938 <LCD_enum_INIT+0x42a>
    291a:	89 e1       	ldi	r24, 0x19	; 25
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9c 83       	std	Y+4, r25	; 0x04
    2920:	8b 83       	std	Y+3, r24	; 0x03
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	9c 81       	ldd	r25, Y+4	; 0x04
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <LCD_enum_INIT+0x418>
    292a:	9c 83       	std	Y+4, r25	; 0x04
    292c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292e:	8d 81       	ldd	r24, Y+5	; 0x05
    2930:	9e 81       	ldd	r25, Y+6	; 0x06
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	9e 83       	std	Y+6, r25	; 0x06
    2936:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2938:	8d 81       	ldd	r24, Y+5	; 0x05
    293a:	9e 81       	ldd	r25, Y+6	; 0x06
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	69 f7       	brne	.-38     	; 0x291a <LCD_enum_INIT+0x40c>
    2940:	14 c0       	rjmp	.+40     	; 0x296a <LCD_enum_INIT+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2942:	6f 81       	ldd	r22, Y+7	; 0x07
    2944:	78 85       	ldd	r23, Y+8	; 0x08
    2946:	89 85       	ldd	r24, Y+9	; 0x09
    2948:	9a 85       	ldd	r25, Y+10	; 0x0a
    294a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	9e 83       	std	Y+6, r25	; 0x06
    2954:	8d 83       	std	Y+5, r24	; 0x05
    2956:	8d 81       	ldd	r24, Y+5	; 0x05
    2958:	9e 81       	ldd	r25, Y+6	; 0x06
    295a:	9a 83       	std	Y+2, r25	; 0x02
    295c:	89 83       	std	Y+1, r24	; 0x01
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	9a 81       	ldd	r25, Y+2	; 0x02
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	f1 f7       	brne	.-4      	; 0x2962 <LCD_enum_INIT+0x454>
    2966:	9a 83       	std	Y+2, r25	; 0x02
    2968:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_enum_Send_Comnd(ENTRY_MOOD);
    296a:	86 e0       	ldi	r24, 0x06	; 6
    296c:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_enum_Send_Comnd>
    return ES_OK;
    2970:	80 e0       	ldi	r24, 0x00	; 0
}
    2972:	ce 5b       	subi	r28, 0xBE	; 190
    2974:	df 4f       	sbci	r29, 0xFF	; 255
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <LCD_enum_Send_Comnd>:
//to send a command
ES_t LCD_enum_Send_Comnd(u8 Copy_u8_Comnd){
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	69 97       	sbiw	r28, 0x19	; 25
    2990:	0f b6       	in	r0, 0x3f	; 63
    2992:	f8 94       	cli
    2994:	de bf       	out	0x3e, r29	; 62
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	cd bf       	out	0x3d, r28	; 61
    299a:	89 8f       	std	Y+25, r24	; 0x19
#if  LCD_u8_MODE == LCD_u8_MODE_8_bit
//RS =0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_LOW );
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	60 e0       	ldi	r22, 0x00	; 0
    29a0:	40 e0       	ldi	r20, 0x00	; 0
    29a2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
//RW = 0

 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	61 e0       	ldi	r22, 0x01	; 1
    29aa:	40 e0       	ldi	r20, 0x00	; 0
    29ac:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>

//Write Command
 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_Comnd);
    29b0:	83 e0       	ldi	r24, 0x03	; 3
    29b2:	69 8d       	ldd	r22, Y+25	; 0x19
    29b4:	0e 94 39 0a 	call	0x1472	; 0x1472 <DIO_u8_Set_Port_Value>

//E = 1
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	62 e0       	ldi	r22, 0x02	; 2
    29bc:	41 e0       	ldi	r20, 0x01	; 1
    29be:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	a0 e8       	ldi	r26, 0x80	; 128
    29c8:	bf e3       	ldi	r27, 0x3F	; 63
    29ca:	8d 8b       	std	Y+21, r24	; 0x15
    29cc:	9e 8b       	std	Y+22, r25	; 0x16
    29ce:	af 8b       	std	Y+23, r26	; 0x17
    29d0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29d2:	6d 89       	ldd	r22, Y+21	; 0x15
    29d4:	7e 89       	ldd	r23, Y+22	; 0x16
    29d6:	8f 89       	ldd	r24, Y+23	; 0x17
    29d8:	98 8d       	ldd	r25, Y+24	; 0x18
    29da:	2b ea       	ldi	r18, 0xAB	; 171
    29dc:	3a ea       	ldi	r19, 0xAA	; 170
    29de:	4a ea       	ldi	r20, 0xAA	; 170
    29e0:	5e e3       	ldi	r21, 0x3E	; 62
    29e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	89 8b       	std	Y+17, r24	; 0x11
    29ec:	9a 8b       	std	Y+18, r25	; 0x12
    29ee:	ab 8b       	std	Y+19, r26	; 0x13
    29f0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    29f2:	69 89       	ldd	r22, Y+17	; 0x11
    29f4:	7a 89       	ldd	r23, Y+18	; 0x12
    29f6:	8b 89       	ldd	r24, Y+19	; 0x13
    29f8:	9c 89       	ldd	r25, Y+20	; 0x14
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e8       	ldi	r20, 0x80	; 128
    2a00:	5f e3       	ldi	r21, 0x3F	; 63
    2a02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a06:	88 23       	and	r24, r24
    2a08:	1c f4       	brge	.+6      	; 0x2a10 <LCD_enum_Send_Comnd+0x8a>
		__ticks = 1;
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	88 8b       	std	Y+16, r24	; 0x10
    2a0e:	91 c0       	rjmp	.+290    	; 0x2b32 <LCD_enum_Send_Comnd+0x1ac>
	else if (__tmp > 255)
    2a10:	69 89       	ldd	r22, Y+17	; 0x11
    2a12:	7a 89       	ldd	r23, Y+18	; 0x12
    2a14:	8b 89       	ldd	r24, Y+19	; 0x13
    2a16:	9c 89       	ldd	r25, Y+20	; 0x14
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	4f e7       	ldi	r20, 0x7F	; 127
    2a1e:	53 e4       	ldi	r21, 0x43	; 67
    2a20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a24:	18 16       	cp	r1, r24
    2a26:	0c f0       	brlt	.+2      	; 0x2a2a <LCD_enum_Send_Comnd+0xa4>
    2a28:	7b c0       	rjmp	.+246    	; 0x2b20 <LCD_enum_Send_Comnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a30:	98 8d       	ldd	r25, Y+24	; 0x18
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	4a e7       	ldi	r20, 0x7A	; 122
    2a38:	54 e4       	ldi	r21, 0x44	; 68
    2a3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	8c 87       	std	Y+12, r24	; 0x0c
    2a44:	9d 87       	std	Y+13, r25	; 0x0d
    2a46:	ae 87       	std	Y+14, r26	; 0x0e
    2a48:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a4c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a50:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	4a e7       	ldi	r20, 0x7A	; 122
    2a58:	53 e4       	ldi	r21, 0x43	; 67
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	88 87       	std	Y+8, r24	; 0x08
    2a64:	99 87       	std	Y+9, r25	; 0x09
    2a66:	aa 87       	std	Y+10, r26	; 0x0a
    2a68:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2a6a:	68 85       	ldd	r22, Y+8	; 0x08
    2a6c:	79 85       	ldd	r23, Y+9	; 0x09
    2a6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a70:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e8       	ldi	r20, 0x80	; 128
    2a78:	5f e3       	ldi	r21, 0x3F	; 63
    2a7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a7e:	88 23       	and	r24, r24
    2a80:	2c f4       	brge	.+10     	; 0x2a8c <LCD_enum_Send_Comnd+0x106>
		__ticks = 1;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9f 83       	std	Y+7, r25	; 0x07
    2a88:	8e 83       	std	Y+6, r24	; 0x06
    2a8a:	3f c0       	rjmp	.+126    	; 0x2b0a <LCD_enum_Send_Comnd+0x184>
	else if (__tmp > 65535)
    2a8c:	68 85       	ldd	r22, Y+8	; 0x08
    2a8e:	79 85       	ldd	r23, Y+9	; 0x09
    2a90:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a92:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	3f ef       	ldi	r19, 0xFF	; 255
    2a98:	4f e7       	ldi	r20, 0x7F	; 127
    2a9a:	57 e4       	ldi	r21, 0x47	; 71
    2a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa0:	18 16       	cp	r1, r24
    2aa2:	4c f5       	brge	.+82     	; 0x2af6 <LCD_enum_Send_Comnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2aa6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2aa8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2aaa:	9f 85       	ldd	r25, Y+15	; 0x0f
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e2       	ldi	r20, 0x20	; 32
    2ab2:	51 e4       	ldi	r21, 0x41	; 65
    2ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	9f 83       	std	Y+7, r25	; 0x07
    2aca:	8e 83       	std	Y+6, r24	; 0x06
    2acc:	0f c0       	rjmp	.+30     	; 0x2aec <LCD_enum_Send_Comnd+0x166>
    2ace:	89 e1       	ldi	r24, 0x19	; 25
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	9d 83       	std	Y+5, r25	; 0x05
    2ad4:	8c 83       	std	Y+4, r24	; 0x04
    2ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad8:	9d 81       	ldd	r25, Y+5	; 0x05
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <LCD_enum_Send_Comnd+0x154>
    2ade:	9d 83       	std	Y+5, r25	; 0x05
    2ae0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	9f 83       	std	Y+7, r25	; 0x07
    2aea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aec:	8e 81       	ldd	r24, Y+6	; 0x06
    2aee:	9f 81       	ldd	r25, Y+7	; 0x07
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	69 f7       	brne	.-38     	; 0x2ace <LCD_enum_Send_Comnd+0x148>
    2af4:	24 c0       	rjmp	.+72     	; 0x2b3e <LCD_enum_Send_Comnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af6:	68 85       	ldd	r22, Y+8	; 0x08
    2af8:	79 85       	ldd	r23, Y+9	; 0x09
    2afa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2afc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9f 83       	std	Y+7, r25	; 0x07
    2b08:	8e 83       	std	Y+6, r24	; 0x06
    2b0a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b0c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b0e:	9b 83       	std	Y+3, r25	; 0x03
    2b10:	8a 83       	std	Y+2, r24	; 0x02
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	9b 81       	ldd	r25, Y+3	; 0x03
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <LCD_enum_Send_Comnd+0x190>
    2b1a:	9b 83       	std	Y+3, r25	; 0x03
    2b1c:	8a 83       	std	Y+2, r24	; 0x02
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <LCD_enum_Send_Comnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b20:	69 89       	ldd	r22, Y+17	; 0x11
    2b22:	7a 89       	ldd	r23, Y+18	; 0x12
    2b24:	8b 89       	ldd	r24, Y+19	; 0x13
    2b26:	9c 89       	ldd	r25, Y+20	; 0x14
    2b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	88 8b       	std	Y+16, r24	; 0x10
    2b32:	88 89       	ldd	r24, Y+16	; 0x10
    2b34:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	8a 95       	dec	r24
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <LCD_enum_Send_Comnd+0x1b2>
    2b3c:	89 83       	std	Y+1, r24	; 0x01
_delay_us(1);

//E = 0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	62 e0       	ldi	r22, 0x02	; 2
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
 return ES_OK;
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
return ES_OK;

#endif

}
    2b4a:	69 96       	adiw	r28, 0x19	; 25
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <LCD_enum_Send_char>:
//function to send a character
ES_t LCD_enum_Send_char(u8 Copy_u8_char){
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	69 97       	sbiw	r28, 0x19	; 25
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	89 8f       	std	Y+25, r24	; 0x19
	//RS =0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_HIGH );
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	41 e0       	ldi	r20, 0x01	; 1
    2b78:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	//RW = 0

	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	61 e0       	ldi	r22, 0x01	; 1
    2b80:	40 e0       	ldi	r20, 0x00	; 0
    2b82:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>

	//Write char
	 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_char);
    2b86:	83 e0       	ldi	r24, 0x03	; 3
    2b88:	69 8d       	ldd	r22, Y+25	; 0x19
    2b8a:	0e 94 39 0a 	call	0x1472	; 0x1472 <DIO_u8_Set_Port_Value>

	//E = 1
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	62 e0       	ldi	r22, 0x02	; 2
    2b92:	41 e0       	ldi	r20, 0x01	; 1
    2b94:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	a0 e8       	ldi	r26, 0x80	; 128
    2b9e:	bf e3       	ldi	r27, 0x3F	; 63
    2ba0:	8d 8b       	std	Y+21, r24	; 0x15
    2ba2:	9e 8b       	std	Y+22, r25	; 0x16
    2ba4:	af 8b       	std	Y+23, r26	; 0x17
    2ba6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    2baa:	7e 89       	ldd	r23, Y+22	; 0x16
    2bac:	8f 89       	ldd	r24, Y+23	; 0x17
    2bae:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb0:	2b ea       	ldi	r18, 0xAB	; 171
    2bb2:	3a ea       	ldi	r19, 0xAA	; 170
    2bb4:	4a ea       	ldi	r20, 0xAA	; 170
    2bb6:	5e e3       	ldi	r21, 0x3E	; 62
    2bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	89 8b       	std	Y+17, r24	; 0x11
    2bc2:	9a 8b       	std	Y+18, r25	; 0x12
    2bc4:	ab 8b       	std	Y+19, r26	; 0x13
    2bc6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2bc8:	69 89       	ldd	r22, Y+17	; 0x11
    2bca:	7a 89       	ldd	r23, Y+18	; 0x12
    2bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bce:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e8       	ldi	r20, 0x80	; 128
    2bd6:	5f e3       	ldi	r21, 0x3F	; 63
    2bd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bdc:	88 23       	and	r24, r24
    2bde:	1c f4       	brge	.+6      	; 0x2be6 <LCD_enum_Send_char+0x8a>
		__ticks = 1;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	88 8b       	std	Y+16, r24	; 0x10
    2be4:	91 c0       	rjmp	.+290    	; 0x2d08 <LCD_enum_Send_char+0x1ac>
	else if (__tmp > 255)
    2be6:	69 89       	ldd	r22, Y+17	; 0x11
    2be8:	7a 89       	ldd	r23, Y+18	; 0x12
    2bea:	8b 89       	ldd	r24, Y+19	; 0x13
    2bec:	9c 89       	ldd	r25, Y+20	; 0x14
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	4f e7       	ldi	r20, 0x7F	; 127
    2bf4:	53 e4       	ldi	r21, 0x43	; 67
    2bf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bfa:	18 16       	cp	r1, r24
    2bfc:	0c f0       	brlt	.+2      	; 0x2c00 <LCD_enum_Send_char+0xa4>
    2bfe:	7b c0       	rjmp	.+246    	; 0x2cf6 <LCD_enum_Send_char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2c00:	6d 89       	ldd	r22, Y+21	; 0x15
    2c02:	7e 89       	ldd	r23, Y+22	; 0x16
    2c04:	8f 89       	ldd	r24, Y+23	; 0x17
    2c06:	98 8d       	ldd	r25, Y+24	; 0x18
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	4a e7       	ldi	r20, 0x7A	; 122
    2c0e:	54 e4       	ldi	r21, 0x44	; 68
    2c10:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	8c 87       	std	Y+12, r24	; 0x0c
    2c1a:	9d 87       	std	Y+13, r25	; 0x0d
    2c1c:	ae 87       	std	Y+14, r26	; 0x0e
    2c1e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c20:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c22:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c24:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c26:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	4a e7       	ldi	r20, 0x7A	; 122
    2c2e:	53 e4       	ldi	r21, 0x43	; 67
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	88 87       	std	Y+8, r24	; 0x08
    2c3a:	99 87       	std	Y+9, r25	; 0x09
    2c3c:	aa 87       	std	Y+10, r26	; 0x0a
    2c3e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c40:	68 85       	ldd	r22, Y+8	; 0x08
    2c42:	79 85       	ldd	r23, Y+9	; 0x09
    2c44:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c46:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e8       	ldi	r20, 0x80	; 128
    2c4e:	5f e3       	ldi	r21, 0x3F	; 63
    2c50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c54:	88 23       	and	r24, r24
    2c56:	2c f4       	brge	.+10     	; 0x2c62 <LCD_enum_Send_char+0x106>
		__ticks = 1;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	9f 83       	std	Y+7, r25	; 0x07
    2c5e:	8e 83       	std	Y+6, r24	; 0x06
    2c60:	3f c0       	rjmp	.+126    	; 0x2ce0 <LCD_enum_Send_char+0x184>
	else if (__tmp > 65535)
    2c62:	68 85       	ldd	r22, Y+8	; 0x08
    2c64:	79 85       	ldd	r23, Y+9	; 0x09
    2c66:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c68:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	3f ef       	ldi	r19, 0xFF	; 255
    2c6e:	4f e7       	ldi	r20, 0x7F	; 127
    2c70:	57 e4       	ldi	r21, 0x47	; 71
    2c72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c76:	18 16       	cp	r1, r24
    2c78:	4c f5       	brge	.+82     	; 0x2ccc <LCD_enum_Send_char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c7c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c80:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e2       	ldi	r20, 0x20	; 32
    2c88:	51 e4       	ldi	r21, 0x41	; 65
    2c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	bc 01       	movw	r22, r24
    2c94:	cd 01       	movw	r24, r26
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9f 83       	std	Y+7, r25	; 0x07
    2ca0:	8e 83       	std	Y+6, r24	; 0x06
    2ca2:	0f c0       	rjmp	.+30     	; 0x2cc2 <LCD_enum_Send_char+0x166>
    2ca4:	89 e1       	ldi	r24, 0x19	; 25
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	9d 83       	std	Y+5, r25	; 0x05
    2caa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cac:	8c 81       	ldd	r24, Y+4	; 0x04
    2cae:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <LCD_enum_Send_char+0x154>
    2cb4:	9d 83       	std	Y+5, r25	; 0x05
    2cb6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb8:	8e 81       	ldd	r24, Y+6	; 0x06
    2cba:	9f 81       	ldd	r25, Y+7	; 0x07
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	9f 83       	std	Y+7, r25	; 0x07
    2cc0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc4:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	69 f7       	brne	.-38     	; 0x2ca4 <LCD_enum_Send_char+0x148>
    2cca:	24 c0       	rjmp	.+72     	; 0x2d14 <LCD_enum_Send_char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ccc:	68 85       	ldd	r22, Y+8	; 0x08
    2cce:	79 85       	ldd	r23, Y+9	; 0x09
    2cd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	9f 83       	std	Y+7, r25	; 0x07
    2cde:	8e 83       	std	Y+6, r24	; 0x06
    2ce0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ce4:	9b 83       	std	Y+3, r25	; 0x03
    2ce6:	8a 83       	std	Y+2, r24	; 0x02
    2ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cea:	9b 81       	ldd	r25, Y+3	; 0x03
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <LCD_enum_Send_char+0x190>
    2cf0:	9b 83       	std	Y+3, r25	; 0x03
    2cf2:	8a 83       	std	Y+2, r24	; 0x02
    2cf4:	0f c0       	rjmp	.+30     	; 0x2d14 <LCD_enum_Send_char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cf6:	69 89       	ldd	r22, Y+17	; 0x11
    2cf8:	7a 89       	ldd	r23, Y+18	; 0x12
    2cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	88 8b       	std	Y+16, r24	; 0x10
    2d08:	88 89       	ldd	r24, Y+16	; 0x10
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	8a 95       	dec	r24
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <LCD_enum_Send_char+0x1b2>
    2d12:	89 83       	std	Y+1, r24	; 0x01
	 _delay_us(1);

	//E = 0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	62 e0       	ldi	r22, 0x02	; 2
    2d18:	40 e0       	ldi	r20, 0x00	; 0
    2d1a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_u8_Set_Pin_Value>
	    return ES_OK;
    2d1e:	80 e0       	ldi	r24, 0x00	; 0

}
    2d20:	69 96       	adiw	r28, 0x19	; 25
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	cf 91       	pop	r28
    2d2e:	df 91       	pop	r29
    2d30:	08 95       	ret

00002d32 <LCD_enum_GO_TO_XY>:
//function to set a location
ES_t LCD_enum_GO_TO_XY (u8 Copy_u8_line_Num , u8 Copy_u8_Location ){
    2d32:	df 93       	push	r29
    2d34:	cf 93       	push	r28
    2d36:	00 d0       	rcall	.+0      	; 0x2d38 <LCD_enum_GO_TO_XY+0x6>
    2d38:	00 d0       	rcall	.+0      	; 0x2d3a <LCD_enum_GO_TO_XY+0x8>
    2d3a:	0f 92       	push	r0
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    2d40:	89 83       	std	Y+1, r24	; 0x01
    2d42:	6a 83       	std	Y+2, r22	; 0x02
//	u8 Local_u8_Erorr_State = ES_OK;
	if(Copy_u8_Location <= 39 ){
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	88 32       	cpi	r24, 0x28	; 40
    2d48:	f8 f4       	brcc	.+62     	; 0x2d88 <LCD_enum_GO_TO_XY+0x56>
		switch (Copy_u8_line_Num)
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	28 2f       	mov	r18, r24
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	3d 83       	std	Y+5, r19	; 0x05
    2d52:	2c 83       	std	Y+4, r18	; 0x04
    2d54:	8c 81       	ldd	r24, Y+4	; 0x04
    2d56:	9d 81       	ldd	r25, Y+5	; 0x05
    2d58:	81 30       	cpi	r24, 0x01	; 1
    2d5a:	91 05       	cpc	r25, r1
    2d5c:	31 f0       	breq	.+12     	; 0x2d6a <LCD_enum_GO_TO_XY+0x38>
    2d5e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d60:	3d 81       	ldd	r19, Y+5	; 0x05
    2d62:	22 30       	cpi	r18, 0x02	; 2
    2d64:	31 05       	cpc	r19, r1
    2d66:	31 f0       	breq	.+12     	; 0x2d74 <LCD_enum_GO_TO_XY+0x42>
    2d68:	0a c0       	rjmp	.+20     	; 0x2d7e <LCD_enum_GO_TO_XY+0x4c>
		{
		case LCD_u8_LINE1 : LCD_enum_Send_Comnd(ADDRESS_OF_LINE1+Copy_u8_Location);break;
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	80 58       	subi	r24, 0x80	; 128
    2d6e:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_enum_Send_Comnd>
    2d72:	08 c0       	rjmp	.+16     	; 0x2d84 <LCD_enum_GO_TO_XY+0x52>
		case LCD_u8_LINE2 : LCD_enum_Send_Comnd(ADDRESS_OF_LINE2+Copy_u8_Location);break;
    2d74:	8a 81       	ldd	r24, Y+2	; 0x02
    2d76:	80 54       	subi	r24, 0x40	; 64
    2d78:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_enum_Send_Comnd>
    2d7c:	03 c0       	rjmp	.+6      	; 0x2d84 <LCD_enum_GO_TO_XY+0x52>
        default   :  return ES_NOK;
    2d7e:	31 e0       	ldi	r19, 0x01	; 1
    2d80:	3b 83       	std	Y+3, r19	; 0x03
    2d82:	04 c0       	rjmp	.+8      	; 0x2d8c <LCD_enum_GO_TO_XY+0x5a>
		else {
			return ES_NOK;


	}
    return ES_OK;
    2d84:	1b 82       	std	Y+3, r1	; 0x03
    2d86:	02 c0       	rjmp	.+4      	; 0x2d8c <LCD_enum_GO_TO_XY+0x5a>

		}

	}
		else {
			return ES_NOK;
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	8b 83       	std	Y+3, r24	; 0x03
    2d8c:	8b 81       	ldd	r24, Y+3	; 0x03


	}
    return ES_OK;
}
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <LCD_enum_Send_String>:
//function to send string
ES_t LCD_enum_Send_String(u8 *copy_pu8_string){
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	00 d0       	rcall	.+0      	; 0x2da4 <LCD_enum_Send_String+0x6>
    2da4:	0f 92       	push	r0
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	9b 83       	std	Y+3, r25	; 0x03
    2dac:	8a 83       	std	Y+2, r24	; 0x02
    2dae:	0e c0       	rjmp	.+28     	; 0x2dcc <LCD_enum_Send_String+0x2e>
	for (u8 i ; copy_pu8_string[i] != '\0'; i++){
		LCD_enum_Send_char(copy_pu8_string[i]);
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	8a 81       	ldd	r24, Y+2	; 0x02
    2db8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dba:	fc 01       	movw	r30, r24
    2dbc:	e2 0f       	add	r30, r18
    2dbe:	f3 1f       	adc	r31, r19
    2dc0:	80 81       	ld	r24, Z
    2dc2:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <LCD_enum_Send_char>
	}
    return ES_OK;
}
//function to send string
ES_t LCD_enum_Send_String(u8 *copy_pu8_string){
	for (u8 i ; copy_pu8_string[i] != '\0'; i++){
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	8f 5f       	subi	r24, 0xFF	; 255
    2dca:	89 83       	std	Y+1, r24	; 0x01
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	28 2f       	mov	r18, r24
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	e2 0f       	add	r30, r18
    2dda:	f3 1f       	adc	r31, r19
    2ddc:	80 81       	ld	r24, Z
    2dde:	88 23       	and	r24, r24
    2de0:	39 f7       	brne	.-50     	; 0x2db0 <LCD_enum_Send_String+0x12>
		LCD_enum_Send_char(copy_pu8_string[i]);
	}
	return ES_OK;
    2de2:	80 e0       	ldi	r24, 0x00	; 0
}
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <LCD_enum_Clear>:

//function to clear
ES_t LCD_enum_Clear (void){
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	2e 97       	sbiw	r28, 0x0e	; 14
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	cd bf       	out	0x3d, r28	; 61
	LCD_enum_Send_Comnd(DISPLAY_CLEAR);
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_enum_Send_Comnd>
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	a0 e8       	ldi	r26, 0x80	; 128
    2e10:	bf e3       	ldi	r27, 0x3F	; 63
    2e12:	8b 87       	std	Y+11, r24	; 0x0b
    2e14:	9c 87       	std	Y+12, r25	; 0x0c
    2e16:	ad 87       	std	Y+13, r26	; 0x0d
    2e18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	4a e7       	ldi	r20, 0x7A	; 122
    2e28:	53 e4       	ldi	r21, 0x43	; 67
    2e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	8f 83       	std	Y+7, r24	; 0x07
    2e34:	98 87       	std	Y+8, r25	; 0x08
    2e36:	a9 87       	std	Y+9, r26	; 0x09
    2e38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3c:	78 85       	ldd	r23, Y+8	; 0x08
    2e3e:	89 85       	ldd	r24, Y+9	; 0x09
    2e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	40 e8       	ldi	r20, 0x80	; 128
    2e48:	5f e3       	ldi	r21, 0x3F	; 63
    2e4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e4e:	88 23       	and	r24, r24
    2e50:	2c f4       	brge	.+10     	; 0x2e5c <LCD_enum_Clear+0x6c>
		__ticks = 1;
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	9e 83       	std	Y+6, r25	; 0x06
    2e58:	8d 83       	std	Y+5, r24	; 0x05
    2e5a:	3f c0       	rjmp	.+126    	; 0x2eda <LCD_enum_Clear+0xea>
	else if (__tmp > 65535)
    2e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5e:	78 85       	ldd	r23, Y+8	; 0x08
    2e60:	89 85       	ldd	r24, Y+9	; 0x09
    2e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	3f ef       	ldi	r19, 0xFF	; 255
    2e68:	4f e7       	ldi	r20, 0x7F	; 127
    2e6a:	57 e4       	ldi	r21, 0x47	; 71
    2e6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e70:	18 16       	cp	r1, r24
    2e72:	4c f5       	brge	.+82     	; 0x2ec6 <LCD_enum_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	40 e2       	ldi	r20, 0x20	; 32
    2e82:	51 e4       	ldi	r21, 0x41	; 65
    2e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	bc 01       	movw	r22, r24
    2e8e:	cd 01       	movw	r24, r26
    2e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e94:	dc 01       	movw	r26, r24
    2e96:	cb 01       	movw	r24, r22
    2e98:	9e 83       	std	Y+6, r25	; 0x06
    2e9a:	8d 83       	std	Y+5, r24	; 0x05
    2e9c:	0f c0       	rjmp	.+30     	; 0x2ebc <LCD_enum_Clear+0xcc>
    2e9e:	89 e1       	ldi	r24, 0x19	; 25
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	9c 83       	std	Y+4, r25	; 0x04
    2ea4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	f1 f7       	brne	.-4      	; 0x2eaa <LCD_enum_Clear+0xba>
    2eae:	9c 83       	std	Y+4, r25	; 0x04
    2eb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb6:	01 97       	sbiw	r24, 0x01	; 1
    2eb8:	9e 83       	std	Y+6, r25	; 0x06
    2eba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec0:	00 97       	sbiw	r24, 0x00	; 0
    2ec2:	69 f7       	brne	.-38     	; 0x2e9e <LCD_enum_Clear+0xae>
    2ec4:	14 c0       	rjmp	.+40     	; 0x2eee <LCD_enum_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec8:	78 85       	ldd	r23, Y+8	; 0x08
    2eca:	89 85       	ldd	r24, Y+9	; 0x09
    2ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    2eda:	8d 81       	ldd	r24, Y+5	; 0x05
    2edc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ede:	9a 83       	std	Y+2, r25	; 0x02
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	f1 f7       	brne	.-4      	; 0x2ee6 <LCD_enum_Clear+0xf6>
    2eea:	9a 83       	std	Y+2, r25	; 0x02
    2eec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	return ES_OK;
    2eee:	80 e0       	ldi	r24, 0x00	; 0
}
    2ef0:	2e 96       	adiw	r28, 0x0e	; 14
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <LCD_enum_Send_Custom_char>:

//function to send custom char
ES_t LCD_enum_Send_Custom_char(u8 Copy_u8_Location , u8 * Copy_pu8_char_Array){
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <LCD_enum_Send_Custom_char+0x6>
    2f08:	00 d0       	rcall	.+0      	; 0x2f0a <LCD_enum_Send_Custom_char+0x8>
    2f0a:	0f 92       	push	r0
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
    2f10:	8a 83       	std	Y+2, r24	; 0x02
    2f12:	7c 83       	std	Y+4, r23	; 0x04
    2f14:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_pu8_char_Array != NULL && Copy_u8_Location < MAX_CHARACTERS )
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	41 f1       	breq	.+80     	; 0x2f6e <LCD_enum_Send_Custom_char+0x6c>
    2f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f20:	88 30       	cpi	r24, 0x08	; 8
    2f22:	28 f5       	brcc	.+74     	; 0x2f6e <LCD_enum_Send_Custom_char+0x6c>
	    {
		LCD_enum_Send_Comnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS ));
    2f24:	8a 81       	ldd	r24, Y+2	; 0x02
    2f26:	88 2f       	mov	r24, r24
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	08 96       	adiw	r24, 0x08	; 8
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	88 0f       	add	r24, r24
    2f32:	99 1f       	adc	r25, r25
    2f34:	88 0f       	add	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_enum_Send_Comnd>
	        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS ; Local_u8_Counter++)
    2f3c:	19 82       	std	Y+1, r1	; 0x01
    2f3e:	0e c0       	rjmp	.+28     	; 0x2f5c <LCD_enum_Send_Custom_char+0x5a>
	        {
	        	LCD_enum_Send_char(Copy_pu8_char_Array[Local_u8_Counter]);
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	28 2f       	mov	r18, r24
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	e2 0f       	add	r30, r18
    2f4e:	f3 1f       	adc	r31, r19
    2f50:	80 81       	ld	r24, Z
    2f52:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <LCD_enum_Send_char>
//function to send custom char
ES_t LCD_enum_Send_Custom_char(u8 Copy_u8_Location , u8 * Copy_pu8_char_Array){
	if(Copy_pu8_char_Array != NULL && Copy_u8_Location < MAX_CHARACTERS )
	    {
		LCD_enum_Send_Comnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS ));
	        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS ; Local_u8_Counter++)
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	8f 5f       	subi	r24, 0xFF	; 255
    2f5a:	89 83       	std	Y+1, r24	; 0x01
    2f5c:	89 81       	ldd	r24, Y+1	; 0x01
    2f5e:	88 30       	cpi	r24, 0x08	; 8
    2f60:	78 f3       	brcs	.-34     	; 0x2f40 <LCD_enum_Send_Custom_char+0x3e>
	        {
	        	LCD_enum_Send_char(Copy_pu8_char_Array[Local_u8_Counter]);
	        }
	        LCD_enum_GO_TO_XY(LCD_u8_LINE1,0);
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	60 e0       	ldi	r22, 0x00	; 0
    2f66:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_enum_GO_TO_XY>
//	        LCD_enum_Send_char(Copy_u8_Location);
	        return ES_OK;
    2f6a:	1d 82       	std	Y+5, r1	; 0x05
    2f6c:	02 c0       	rjmp	.+4      	; 0x2f72 <LCD_enum_Send_Custom_char+0x70>

	    }
	    else
	    {
	        return ES_NOK;
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	8d 83       	std	Y+5, r24	; 0x05
    2f72:	8d 81       	ldd	r24, Y+5	; 0x05
	    }

}
    2f74:	0f 90       	pop	r0
    2f76:	0f 90       	pop	r0
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	08 95       	ret

00002f84 <LCD_enum_Send_Num>:
ES_t LCD_enum_Send_Num(u32 Copy_LCD_u32_Num)
{
    2f84:	0f 93       	push	r16
    2f86:	1f 93       	push	r17
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    2f90:	60 97       	sbiw	r28, 0x10	; 16
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	6d 87       	std	Y+13, r22	; 0x0d
    2f9e:	7e 87       	std	Y+14, r23	; 0x0e
    2fa0:	8f 87       	std	Y+15, r24	; 0x0f
    2fa2:	98 8b       	std	Y+16, r25	; 0x10
	u8 arr[10], i = 0, j = 0;
    2fa4:	1a 82       	std	Y+2, r1	; 0x02
    2fa6:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_LCD_u32_Num == 0)
    2fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fac:	af 85       	ldd	r26, Y+15	; 0x0f
    2fae:	b8 89       	ldd	r27, Y+16	; 0x10
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	a1 05       	cpc	r26, r1
    2fb4:	b1 05       	cpc	r27, r1
    2fb6:	91 f5       	brne	.+100    	; 0x301c <LCD_enum_Send_Num+0x98>
	{
		LCD_enum_Send_char('0');
    2fb8:	80 e3       	ldi	r24, 0x30	; 48
    2fba:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <LCD_enum_Send_char>
    2fbe:	4d c0       	rjmp	.+154    	; 0x305a <LCD_enum_Send_Num+0xd6>
	}
	else
	{
		while (Copy_LCD_u32_Num)
		{
			arr[i] = Copy_LCD_u32_Num % 10 + '0';
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	08 2f       	mov	r16, r24
    2fc4:	10 e0       	ldi	r17, 0x00	; 0
    2fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fca:	af 85       	ldd	r26, Y+15	; 0x0f
    2fcc:	b8 89       	ldd	r27, Y+16	; 0x10
    2fce:	2a e0       	ldi	r18, 0x0A	; 10
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e0       	ldi	r20, 0x00	; 0
    2fd4:	50 e0       	ldi	r21, 0x00	; 0
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__udivmodsi4>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	28 2f       	mov	r18, r24
    2fe4:	20 5d       	subi	r18, 0xD0	; 208
    2fe6:	ce 01       	movw	r24, r28
    2fe8:	03 96       	adiw	r24, 0x03	; 3
    2fea:	fc 01       	movw	r30, r24
    2fec:	e0 0f       	add	r30, r16
    2fee:	f1 1f       	adc	r31, r17
    2ff0:	20 83       	st	Z, r18
			Copy_LCD_u32_Num /= 10;
    2ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff6:	af 85       	ldd	r26, Y+15	; 0x0f
    2ff8:	b8 89       	ldd	r27, Y+16	; 0x10
    2ffa:	2a e0       	ldi	r18, 0x0A	; 10
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e0       	ldi	r20, 0x00	; 0
    3000:	50 e0       	ldi	r21, 0x00	; 0
    3002:	bc 01       	movw	r22, r24
    3004:	cd 01       	movw	r24, r26
    3006:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__udivmodsi4>
    300a:	da 01       	movw	r26, r20
    300c:	c9 01       	movw	r24, r18
    300e:	8d 87       	std	Y+13, r24	; 0x0d
    3010:	9e 87       	std	Y+14, r25	; 0x0e
    3012:	af 87       	std	Y+15, r26	; 0x0f
    3014:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    3016:	8a 81       	ldd	r24, Y+2	; 0x02
    3018:	8f 5f       	subi	r24, 0xFF	; 255
    301a:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_enum_Send_char('0');
	}
	else
	{
		while (Copy_LCD_u32_Num)
    301c:	8d 85       	ldd	r24, Y+13	; 0x0d
    301e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3020:	af 85       	ldd	r26, Y+15	; 0x0f
    3022:	b8 89       	ldd	r27, Y+16	; 0x10
    3024:	00 97       	sbiw	r24, 0x00	; 0
    3026:	a1 05       	cpc	r26, r1
    3028:	b1 05       	cpc	r27, r1
    302a:	51 f6       	brne	.-108    	; 0x2fc0 <LCD_enum_Send_Num+0x3c>
			arr[i] = Copy_LCD_u32_Num % 10 + '0';
			Copy_LCD_u32_Num /= 10;
			i++;
		}

		for (j = i; j > 0; j--)
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	89 83       	std	Y+1, r24	; 0x01
    3030:	11 c0       	rjmp	.+34     	; 0x3054 <LCD_enum_Send_Num+0xd0>
		{
			LCD_enum_Send_char(arr[j - 1]);
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	88 2f       	mov	r24, r24
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	9c 01       	movw	r18, r24
    303a:	21 50       	subi	r18, 0x01	; 1
    303c:	30 40       	sbci	r19, 0x00	; 0
    303e:	ce 01       	movw	r24, r28
    3040:	03 96       	adiw	r24, 0x03	; 3
    3042:	fc 01       	movw	r30, r24
    3044:	e2 0f       	add	r30, r18
    3046:	f3 1f       	adc	r31, r19
    3048:	80 81       	ld	r24, Z
    304a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <LCD_enum_Send_char>
			arr[i] = Copy_LCD_u32_Num % 10 + '0';
			Copy_LCD_u32_Num /= 10;
			i++;
		}

		for (j = i; j > 0; j--)
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	81 50       	subi	r24, 0x01	; 1
    3052:	89 83       	std	Y+1, r24	; 0x01
    3054:	89 81       	ldd	r24, Y+1	; 0x01
    3056:	88 23       	and	r24, r24
    3058:	61 f7       	brne	.-40     	; 0x3032 <LCD_enum_Send_Num+0xae>
		{
			LCD_enum_Send_char(arr[j - 1]);
		}
	}
    return ES_NOK;
    305a:	81 e0       	ldi	r24, 0x01	; 1
}
    305c:	60 96       	adiw	r28, 0x10	; 16
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	cf 91       	pop	r28
    306a:	df 91       	pop	r29
    306c:	1f 91       	pop	r17
    306e:	0f 91       	pop	r16
    3070:	08 95       	ret

00003072 <main>:
#define len 4

#define pass "0000"
#define MAX_try_check    3
u8 Local_u8_input[len] ;
int main(void){
    3072:	df 93       	push	r29
    3074:	cf 93       	push	r28
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    307a:	c7 54       	subi	r28, 0x47	; 71
    307c:	d0 40       	sbci	r29, 0x00	; 0
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8_Key,Local_u8_Counter=0,flag=0;
    3088:	1c ae       	std	Y+60, r1	; 0x3c
    308a:	1b ae       	std	Y+59, r1	; 0x3b
	u8 spass[]=pass;
    308c:	ce 01       	movw	r24, r28
    308e:	ce 96       	adiw	r24, 0x3e	; 62
    3090:	25 96       	adiw	r28, 0x05	; 5
    3092:	9f af       	std	Y+63, r25	; 0x3f
    3094:	8e af       	std	Y+62, r24	; 0x3e
    3096:	25 97       	sbiw	r28, 0x05	; 5
    3098:	ee eb       	ldi	r30, 0xBE	; 190
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	27 96       	adiw	r28, 0x07	; 7
    309e:	ff af       	std	Y+63, r31	; 0x3f
    30a0:	ee af       	std	Y+62, r30	; 0x3e
    30a2:	27 97       	sbiw	r28, 0x07	; 7
    30a4:	f5 e0       	ldi	r31, 0x05	; 5
    30a6:	28 96       	adiw	r28, 0x08	; 8
    30a8:	ff af       	std	Y+63, r31	; 0x3f
    30aa:	28 97       	sbiw	r28, 0x08	; 8
    30ac:	27 96       	adiw	r28, 0x07	; 7
    30ae:	ee ad       	ldd	r30, Y+62	; 0x3e
    30b0:	ff ad       	ldd	r31, Y+63	; 0x3f
    30b2:	27 97       	sbiw	r28, 0x07	; 7
    30b4:	00 80       	ld	r0, Z
    30b6:	27 96       	adiw	r28, 0x07	; 7
    30b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    30ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    30bc:	27 97       	sbiw	r28, 0x07	; 7
    30be:	01 96       	adiw	r24, 0x01	; 1
    30c0:	27 96       	adiw	r28, 0x07	; 7
    30c2:	9f af       	std	Y+63, r25	; 0x3f
    30c4:	8e af       	std	Y+62, r24	; 0x3e
    30c6:	27 97       	sbiw	r28, 0x07	; 7
    30c8:	25 96       	adiw	r28, 0x05	; 5
    30ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    30cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    30ce:	25 97       	sbiw	r28, 0x05	; 5
    30d0:	00 82       	st	Z, r0
    30d2:	25 96       	adiw	r28, 0x05	; 5
    30d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    30d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    30d8:	25 97       	sbiw	r28, 0x05	; 5
    30da:	01 96       	adiw	r24, 0x01	; 1
    30dc:	25 96       	adiw	r28, 0x05	; 5
    30de:	9f af       	std	Y+63, r25	; 0x3f
    30e0:	8e af       	std	Y+62, r24	; 0x3e
    30e2:	25 97       	sbiw	r28, 0x05	; 5
    30e4:	28 96       	adiw	r28, 0x08	; 8
    30e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    30e8:	28 97       	sbiw	r28, 0x08	; 8
    30ea:	91 50       	subi	r25, 0x01	; 1
    30ec:	28 96       	adiw	r28, 0x08	; 8
    30ee:	9f af       	std	Y+63, r25	; 0x3f
    30f0:	28 97       	sbiw	r28, 0x08	; 8
    30f2:	28 96       	adiw	r28, 0x08	; 8
    30f4:	ef ad       	ldd	r30, Y+63	; 0x3f
    30f6:	28 97       	sbiw	r28, 0x08	; 8
    30f8:	ee 23       	and	r30, r30
    30fa:	c1 f6       	brne	.-80     	; 0x30ac <main+0x3a>
	u8 Local_u8_index_input ;
u8 try_check=0;
    30fc:	19 ae       	std	Y+57, r1	; 0x39

	            DIO_voidInit();
    30fe:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidInit>
				LCD_enum_INIT();
    3102:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_enum_INIT>
				KPD_enum_Init();
    3106:	0e 94 1c 11 	call	0x2238	; 0x2238 <KPD_enum_Init>
				LCD_enum_Send_String("enter password");
    310a:	80 e6       	ldi	r24, 0x60	; 96
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	aa e7       	ldi	r26, 0x7A	; 122
    3118:	b4 e4       	ldi	r27, 0x44	; 68
    311a:	8d ab       	std	Y+53, r24	; 0x35
    311c:	9e ab       	std	Y+54, r25	; 0x36
    311e:	af ab       	std	Y+55, r26	; 0x37
    3120:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3122:	6d a9       	ldd	r22, Y+53	; 0x35
    3124:	7e a9       	ldd	r23, Y+54	; 0x36
    3126:	8f a9       	ldd	r24, Y+55	; 0x37
    3128:	98 ad       	ldd	r25, Y+56	; 0x38
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	4a e7       	ldi	r20, 0x7A	; 122
    3130:	53 e4       	ldi	r21, 0x43	; 67
    3132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	89 ab       	std	Y+49, r24	; 0x31
    313c:	9a ab       	std	Y+50, r25	; 0x32
    313e:	ab ab       	std	Y+51, r26	; 0x33
    3140:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3142:	69 a9       	ldd	r22, Y+49	; 0x31
    3144:	7a a9       	ldd	r23, Y+50	; 0x32
    3146:	8b a9       	ldd	r24, Y+51	; 0x33
    3148:	9c a9       	ldd	r25, Y+52	; 0x34
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e8       	ldi	r20, 0x80	; 128
    3150:	5f e3       	ldi	r21, 0x3F	; 63
    3152:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3156:	88 23       	and	r24, r24
    3158:	2c f4       	brge	.+10     	; 0x3164 <main+0xf2>
		__ticks = 1;
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	98 ab       	std	Y+48, r25	; 0x30
    3160:	8f a7       	std	Y+47, r24	; 0x2f
    3162:	3f c0       	rjmp	.+126    	; 0x31e2 <main+0x170>
	else if (__tmp > 65535)
    3164:	69 a9       	ldd	r22, Y+49	; 0x31
    3166:	7a a9       	ldd	r23, Y+50	; 0x32
    3168:	8b a9       	ldd	r24, Y+51	; 0x33
    316a:	9c a9       	ldd	r25, Y+52	; 0x34
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	3f ef       	ldi	r19, 0xFF	; 255
    3170:	4f e7       	ldi	r20, 0x7F	; 127
    3172:	57 e4       	ldi	r21, 0x47	; 71
    3174:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3178:	18 16       	cp	r1, r24
    317a:	4c f5       	brge	.+82     	; 0x31ce <main+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317c:	6d a9       	ldd	r22, Y+53	; 0x35
    317e:	7e a9       	ldd	r23, Y+54	; 0x36
    3180:	8f a9       	ldd	r24, Y+55	; 0x37
    3182:	98 ad       	ldd	r25, Y+56	; 0x38
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e2       	ldi	r20, 0x20	; 32
    318a:	51 e4       	ldi	r21, 0x41	; 65
    318c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	bc 01       	movw	r22, r24
    3196:	cd 01       	movw	r24, r26
    3198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	98 ab       	std	Y+48, r25	; 0x30
    31a2:	8f a7       	std	Y+47, r24	; 0x2f
    31a4:	0f c0       	rjmp	.+30     	; 0x31c4 <main+0x152>
    31a6:	89 e1       	ldi	r24, 0x19	; 25
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	9e a7       	std	Y+46, r25	; 0x2e
    31ac:	8d a7       	std	Y+45, r24	; 0x2d
    31ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    31b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	f1 f7       	brne	.-4      	; 0x31b2 <main+0x140>
    31b6:	9e a7       	std	Y+46, r25	; 0x2e
    31b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    31bc:	98 a9       	ldd	r25, Y+48	; 0x30
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	98 ab       	std	Y+48, r25	; 0x30
    31c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    31c6:	98 a9       	ldd	r25, Y+48	; 0x30
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	69 f7       	brne	.-38     	; 0x31a6 <main+0x134>
    31cc:	14 c0       	rjmp	.+40     	; 0x31f6 <main+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ce:	69 a9       	ldd	r22, Y+49	; 0x31
    31d0:	7a a9       	ldd	r23, Y+50	; 0x32
    31d2:	8b a9       	ldd	r24, Y+51	; 0x33
    31d4:	9c a9       	ldd	r25, Y+52	; 0x34
    31d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	98 ab       	std	Y+48, r25	; 0x30
    31e0:	8f a7       	std	Y+47, r24	; 0x2f
    31e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    31e4:	98 a9       	ldd	r25, Y+48	; 0x30
    31e6:	9c a7       	std	Y+44, r25	; 0x2c
    31e8:	8b a7       	std	Y+43, r24	; 0x2b
    31ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	f1 f7       	brne	.-4      	; 0x31ee <main+0x17c>
    31f2:	9c a7       	std	Y+44, r25	; 0x2c
    31f4:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
					LCD_enum_Clear ();
    31f6:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_enum_Clear>


	while(1){
       	KPD_enum_Get_Key_State(&Local_u8_Key);
    31fa:	ce 01       	movw	r24, r28
    31fc:	cd 96       	adiw	r24, 0x3d	; 61
    31fe:	0e 94 77 11 	call	0x22ee	; 0x22ee <KPD_enum_Get_Key_State>
/*is there is no keys pressed*/
	/*no displaying on LCD*/
	if(Local_u8_Key != KPD_u8_Keys_NO_Pressed  ){
    3202:	8d ad       	ldd	r24, Y+61	; 0x3d
    3204:	8f 3f       	cpi	r24, 0xFF	; 255
    3206:	89 f0       	breq	.+34     	; 0x322a <main+0x1b8>
         LCD_enum_Send_char('*');
    3208:	8a e2       	ldi	r24, 0x2A	; 42
    320a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <LCD_enum_Send_char>

         Local_u8_input[Local_u8_index_input] = Local_u8_Key;
    320e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3210:	88 2f       	mov	r24, r24
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	2d ad       	ldd	r18, Y+61	; 0x3d
    3216:	fc 01       	movw	r30, r24
    3218:	e7 5d       	subi	r30, 0xD7	; 215
    321a:	fe 4f       	sbci	r31, 0xFE	; 254
    321c:	20 83       	st	Z, r18
         Local_u8_index_input++;
    321e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3220:	8f 5f       	subi	r24, 0xFF	; 255
    3222:	8a af       	std	Y+58, r24	; 0x3a
         Local_u8_Counter++;
    3224:	8c ad       	ldd	r24, Y+60	; 0x3c
    3226:	8f 5f       	subi	r24, 0xFF	; 255
    3228:	8c af       	std	Y+60, r24	; 0x3c
	}
    	 if (Local_u8_Counter == len) {
    322a:	8c ad       	ldd	r24, Y+60	; 0x3c
    322c:	84 30       	cpi	r24, 0x04	; 4
    322e:	29 f7       	brne	.-54     	; 0x31fa <main+0x188>
    		 for(Local_u8_index_input =0 ;Local_u8_index_input<len ; Local_u8_index_input++){
    3230:	1a ae       	std	Y+58, r1	; 0x3a
    3232:	94 c1       	rjmp	.+808    	; 0x355c <main+0x4ea>
    		 				if(Local_u8_input[Local_u8_index_input] == spass[Local_u8_index_input]){
    3234:	8a ad       	ldd	r24, Y+58	; 0x3a
    3236:	88 2f       	mov	r24, r24
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	fc 01       	movw	r30, r24
    323c:	e7 5d       	subi	r30, 0xD7	; 215
    323e:	fe 4f       	sbci	r31, 0xFE	; 254
    3240:	40 81       	ld	r20, Z
    3242:	8a ad       	ldd	r24, Y+58	; 0x3a
    3244:	28 2f       	mov	r18, r24
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	ce 01       	movw	r24, r28
    324a:	ce 96       	adiw	r24, 0x3e	; 62
    324c:	fc 01       	movw	r30, r24
    324e:	e2 0f       	add	r30, r18
    3250:	f3 1f       	adc	r31, r19
    3252:	80 81       	ld	r24, Z
    3254:	48 17       	cp	r20, r24
    3256:	09 f0       	breq	.+2      	; 0x325a <main+0x1e8>
    3258:	7d c0       	rjmp	.+250    	; 0x3354 <main+0x2e2>
    		 					LCD_enum_Clear ();
    325a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_enum_Clear>
    		 					 LCD_enum_Send_String ("Correct Password");
    325e:	8f e6       	ldi	r24, 0x6F	; 111
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	aa e7       	ldi	r26, 0x7A	; 122
    326c:	b4 e4       	ldi	r27, 0x44	; 68
    326e:	8f a3       	std	Y+39, r24	; 0x27
    3270:	98 a7       	std	Y+40, r25	; 0x28
    3272:	a9 a7       	std	Y+41, r26	; 0x29
    3274:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3276:	6f a1       	ldd	r22, Y+39	; 0x27
    3278:	78 a5       	ldd	r23, Y+40	; 0x28
    327a:	89 a5       	ldd	r24, Y+41	; 0x29
    327c:	9a a5       	ldd	r25, Y+42	; 0x2a
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	4a e7       	ldi	r20, 0x7A	; 122
    3284:	53 e4       	ldi	r21, 0x43	; 67
    3286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	8b a3       	std	Y+35, r24	; 0x23
    3290:	9c a3       	std	Y+36, r25	; 0x24
    3292:	ad a3       	std	Y+37, r26	; 0x25
    3294:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3296:	6b a1       	ldd	r22, Y+35	; 0x23
    3298:	7c a1       	ldd	r23, Y+36	; 0x24
    329a:	8d a1       	ldd	r24, Y+37	; 0x25
    329c:	9e a1       	ldd	r25, Y+38	; 0x26
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 e8       	ldi	r20, 0x80	; 128
    32a4:	5f e3       	ldi	r21, 0x3F	; 63
    32a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32aa:	88 23       	and	r24, r24
    32ac:	2c f4       	brge	.+10     	; 0x32b8 <main+0x246>
		__ticks = 1;
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	9a a3       	std	Y+34, r25	; 0x22
    32b4:	89 a3       	std	Y+33, r24	; 0x21
    32b6:	3f c0       	rjmp	.+126    	; 0x3336 <main+0x2c4>
	else if (__tmp > 65535)
    32b8:	6b a1       	ldd	r22, Y+35	; 0x23
    32ba:	7c a1       	ldd	r23, Y+36	; 0x24
    32bc:	8d a1       	ldd	r24, Y+37	; 0x25
    32be:	9e a1       	ldd	r25, Y+38	; 0x26
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	3f ef       	ldi	r19, 0xFF	; 255
    32c4:	4f e7       	ldi	r20, 0x7F	; 127
    32c6:	57 e4       	ldi	r21, 0x47	; 71
    32c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32cc:	18 16       	cp	r1, r24
    32ce:	4c f5       	brge	.+82     	; 0x3322 <main+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d0:	6f a1       	ldd	r22, Y+39	; 0x27
    32d2:	78 a5       	ldd	r23, Y+40	; 0x28
    32d4:	89 a5       	ldd	r24, Y+41	; 0x29
    32d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e2       	ldi	r20, 0x20	; 32
    32de:	51 e4       	ldi	r21, 0x41	; 65
    32e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	bc 01       	movw	r22, r24
    32ea:	cd 01       	movw	r24, r26
    32ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	9a a3       	std	Y+34, r25	; 0x22
    32f6:	89 a3       	std	Y+33, r24	; 0x21
    32f8:	0f c0       	rjmp	.+30     	; 0x3318 <main+0x2a6>
    32fa:	89 e1       	ldi	r24, 0x19	; 25
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	98 a3       	std	Y+32, r25	; 0x20
    3300:	8f 8f       	std	Y+31, r24	; 0x1f
    3302:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3304:	98 a1       	ldd	r25, Y+32	; 0x20
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	f1 f7       	brne	.-4      	; 0x3306 <main+0x294>
    330a:	98 a3       	std	Y+32, r25	; 0x20
    330c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330e:	89 a1       	ldd	r24, Y+33	; 0x21
    3310:	9a a1       	ldd	r25, Y+34	; 0x22
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	9a a3       	std	Y+34, r25	; 0x22
    3316:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3318:	89 a1       	ldd	r24, Y+33	; 0x21
    331a:	9a a1       	ldd	r25, Y+34	; 0x22
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	69 f7       	brne	.-38     	; 0x32fa <main+0x288>
    3320:	14 c0       	rjmp	.+40     	; 0x334a <main+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3322:	6b a1       	ldd	r22, Y+35	; 0x23
    3324:	7c a1       	ldd	r23, Y+36	; 0x24
    3326:	8d a1       	ldd	r24, Y+37	; 0x25
    3328:	9e a1       	ldd	r25, Y+38	; 0x26
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	9a a3       	std	Y+34, r25	; 0x22
    3334:	89 a3       	std	Y+33, r24	; 0x21
    3336:	89 a1       	ldd	r24, Y+33	; 0x21
    3338:	9a a1       	ldd	r25, Y+34	; 0x22
    333a:	9e 8f       	std	Y+30, r25	; 0x1e
    333c:	8d 8f       	std	Y+29, r24	; 0x1d
    333e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3340:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3342:	01 97       	sbiw	r24, 0x01	; 1
    3344:	f1 f7       	brne	.-4      	; 0x3342 <main+0x2d0>
    3346:	9e 8f       	std	Y+30, r25	; 0x1e
    3348:	8d 8f       	std	Y+29, r24	; 0x1d
    		 					_delay_ms(1000);
    		 				 LCD_enum_Clear ();
    334a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_enum_Clear>
    		 				motor_option();
    334e:	0e 94 b3 1a 	call	0x3566	; 0x3566 <motor_option>
    3352:	53 cf       	rjmp	.-346    	; 0x31fa <main+0x188>
    		 				 break;
    		 				}
    		 				else{
//    		 				    			LCD_enum_Clear ();
    		 				    			 LCD_enum_Send_String ("wrong Password,");
    3354:	80 e8       	ldi	r24, 0x80	; 128
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>
    		 				    			 LCD_enum_GO_TO_XY(2,0);
    335c:	82 e0       	ldi	r24, 0x02	; 2
    335e:	60 e0       	ldi	r22, 0x00	; 0
    3360:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_enum_GO_TO_XY>
    		 				    			LCD_enum_Send_String ("please try again");
    3364:	80 e9       	ldi	r24, 0x90	; 144
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	aa e7       	ldi	r26, 0x7A	; 122
    3372:	b4 e4       	ldi	r27, 0x44	; 68
    3374:	89 8f       	std	Y+25, r24	; 0x19
    3376:	9a 8f       	std	Y+26, r25	; 0x1a
    3378:	ab 8f       	std	Y+27, r26	; 0x1b
    337a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337c:	69 8d       	ldd	r22, Y+25	; 0x19
    337e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3380:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3382:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	4a e7       	ldi	r20, 0x7A	; 122
    338a:	53 e4       	ldi	r21, 0x43	; 67
    338c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	8d 8b       	std	Y+21, r24	; 0x15
    3396:	9e 8b       	std	Y+22, r25	; 0x16
    3398:	af 8b       	std	Y+23, r26	; 0x17
    339a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    339c:	6d 89       	ldd	r22, Y+21	; 0x15
    339e:	7e 89       	ldd	r23, Y+22	; 0x16
    33a0:	8f 89       	ldd	r24, Y+23	; 0x17
    33a2:	98 8d       	ldd	r25, Y+24	; 0x18
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	40 e8       	ldi	r20, 0x80	; 128
    33aa:	5f e3       	ldi	r21, 0x3F	; 63
    33ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33b0:	88 23       	and	r24, r24
    33b2:	2c f4       	brge	.+10     	; 0x33be <main+0x34c>
		__ticks = 1;
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	9c 8b       	std	Y+20, r25	; 0x14
    33ba:	8b 8b       	std	Y+19, r24	; 0x13
    33bc:	3f c0       	rjmp	.+126    	; 0x343c <main+0x3ca>
	else if (__tmp > 65535)
    33be:	6d 89       	ldd	r22, Y+21	; 0x15
    33c0:	7e 89       	ldd	r23, Y+22	; 0x16
    33c2:	8f 89       	ldd	r24, Y+23	; 0x17
    33c4:	98 8d       	ldd	r25, Y+24	; 0x18
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	3f ef       	ldi	r19, 0xFF	; 255
    33ca:	4f e7       	ldi	r20, 0x7F	; 127
    33cc:	57 e4       	ldi	r21, 0x47	; 71
    33ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33d2:	18 16       	cp	r1, r24
    33d4:	4c f5       	brge	.+82     	; 0x3428 <main+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d6:	69 8d       	ldd	r22, Y+25	; 0x19
    33d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e2       	ldi	r20, 0x20	; 32
    33e4:	51 e4       	ldi	r21, 0x41	; 65
    33e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	bc 01       	movw	r22, r24
    33f0:	cd 01       	movw	r24, r26
    33f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	9c 8b       	std	Y+20, r25	; 0x14
    33fc:	8b 8b       	std	Y+19, r24	; 0x13
    33fe:	0f c0       	rjmp	.+30     	; 0x341e <main+0x3ac>
    3400:	89 e1       	ldi	r24, 0x19	; 25
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	9a 8b       	std	Y+18, r25	; 0x12
    3406:	89 8b       	std	Y+17, r24	; 0x11
    3408:	89 89       	ldd	r24, Y+17	; 0x11
    340a:	9a 89       	ldd	r25, Y+18	; 0x12
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <main+0x39a>
    3410:	9a 8b       	std	Y+18, r25	; 0x12
    3412:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3414:	8b 89       	ldd	r24, Y+19	; 0x13
    3416:	9c 89       	ldd	r25, Y+20	; 0x14
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	9c 8b       	std	Y+20, r25	; 0x14
    341c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341e:	8b 89       	ldd	r24, Y+19	; 0x13
    3420:	9c 89       	ldd	r25, Y+20	; 0x14
    3422:	00 97       	sbiw	r24, 0x00	; 0
    3424:	69 f7       	brne	.-38     	; 0x3400 <main+0x38e>
    3426:	14 c0       	rjmp	.+40     	; 0x3450 <main+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3428:	6d 89       	ldd	r22, Y+21	; 0x15
    342a:	7e 89       	ldd	r23, Y+22	; 0x16
    342c:	8f 89       	ldd	r24, Y+23	; 0x17
    342e:	98 8d       	ldd	r25, Y+24	; 0x18
    3430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	9c 8b       	std	Y+20, r25	; 0x14
    343a:	8b 8b       	std	Y+19, r24	; 0x13
    343c:	8b 89       	ldd	r24, Y+19	; 0x13
    343e:	9c 89       	ldd	r25, Y+20	; 0x14
    3440:	98 8b       	std	Y+16, r25	; 0x10
    3442:	8f 87       	std	Y+15, r24	; 0x0f
    3444:	8f 85       	ldd	r24, Y+15	; 0x0f
    3446:	98 89       	ldd	r25, Y+16	; 0x10
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	f1 f7       	brne	.-4      	; 0x3448 <main+0x3d6>
    344c:	98 8b       	std	Y+16, r25	; 0x10
    344e:	8f 87       	std	Y+15, r24	; 0x0f
    		 				    			_delay_ms(1000);
    		 				    			LCD_enum_Clear ();
    3450:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_enum_Clear>
    		 				    			try_check++;
    3454:	89 ad       	ldd	r24, Y+57	; 0x39
    3456:	8f 5f       	subi	r24, 0xFF	; 255
    3458:	89 af       	std	Y+57, r24	; 0x39
    		 				    			if(try_check>=MAX_try_check){
    345a:	89 ad       	ldd	r24, Y+57	; 0x39
    345c:	83 30       	cpi	r24, 0x03	; 3
    345e:	08 f4       	brcc	.+2      	; 0x3462 <main+0x3f0>
    3460:	7a c0       	rjmp	.+244    	; 0x3556 <main+0x4e4>
    		 				    				LCD_enum_Clear ();
    3462:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_enum_Clear>
    		 				    				       			 LCD_enum_Send_String ("please try again after 1 min");
    3466:	81 ea       	ldi	r24, 0xA1	; 161
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	90 e6       	ldi	r25, 0x60	; 96
    3472:	aa e6       	ldi	r26, 0x6A	; 106
    3474:	b7 e4       	ldi	r27, 0x47	; 71
    3476:	8b 87       	std	Y+11, r24	; 0x0b
    3478:	9c 87       	std	Y+12, r25	; 0x0c
    347a:	ad 87       	std	Y+13, r26	; 0x0d
    347c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3480:	7c 85       	ldd	r23, Y+12	; 0x0c
    3482:	8d 85       	ldd	r24, Y+13	; 0x0d
    3484:	9e 85       	ldd	r25, Y+14	; 0x0e
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	4a e7       	ldi	r20, 0x7A	; 122
    348c:	53 e4       	ldi	r21, 0x43	; 67
    348e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	8f 83       	std	Y+7, r24	; 0x07
    3498:	98 87       	std	Y+8, r25	; 0x08
    349a:	a9 87       	std	Y+9, r26	; 0x09
    349c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    349e:	6f 81       	ldd	r22, Y+7	; 0x07
    34a0:	78 85       	ldd	r23, Y+8	; 0x08
    34a2:	89 85       	ldd	r24, Y+9	; 0x09
    34a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e8       	ldi	r20, 0x80	; 128
    34ac:	5f e3       	ldi	r21, 0x3F	; 63
    34ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34b2:	88 23       	and	r24, r24
    34b4:	2c f4       	brge	.+10     	; 0x34c0 <main+0x44e>
		__ticks = 1;
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	9e 83       	std	Y+6, r25	; 0x06
    34bc:	8d 83       	std	Y+5, r24	; 0x05
    34be:	3f c0       	rjmp	.+126    	; 0x353e <main+0x4cc>
	else if (__tmp > 65535)
    34c0:	6f 81       	ldd	r22, Y+7	; 0x07
    34c2:	78 85       	ldd	r23, Y+8	; 0x08
    34c4:	89 85       	ldd	r24, Y+9	; 0x09
    34c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	3f ef       	ldi	r19, 0xFF	; 255
    34cc:	4f e7       	ldi	r20, 0x7F	; 127
    34ce:	57 e4       	ldi	r21, 0x47	; 71
    34d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34d4:	18 16       	cp	r1, r24
    34d6:	4c f5       	brge	.+82     	; 0x352a <main+0x4b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34da:	7c 85       	ldd	r23, Y+12	; 0x0c
    34dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34de:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	40 e2       	ldi	r20, 0x20	; 32
    34e6:	51 e4       	ldi	r21, 0x41	; 65
    34e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	bc 01       	movw	r22, r24
    34f2:	cd 01       	movw	r24, r26
    34f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	9e 83       	std	Y+6, r25	; 0x06
    34fe:	8d 83       	std	Y+5, r24	; 0x05
    3500:	0f c0       	rjmp	.+30     	; 0x3520 <main+0x4ae>
    3502:	89 e1       	ldi	r24, 0x19	; 25
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	9c 83       	std	Y+4, r25	; 0x04
    3508:	8b 83       	std	Y+3, r24	; 0x03
    350a:	8b 81       	ldd	r24, Y+3	; 0x03
    350c:	9c 81       	ldd	r25, Y+4	; 0x04
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	f1 f7       	brne	.-4      	; 0x350e <main+0x49c>
    3512:	9c 83       	std	Y+4, r25	; 0x04
    3514:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3516:	8d 81       	ldd	r24, Y+5	; 0x05
    3518:	9e 81       	ldd	r25, Y+6	; 0x06
    351a:	01 97       	sbiw	r24, 0x01	; 1
    351c:	9e 83       	std	Y+6, r25	; 0x06
    351e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3520:	8d 81       	ldd	r24, Y+5	; 0x05
    3522:	9e 81       	ldd	r25, Y+6	; 0x06
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	69 f7       	brne	.-38     	; 0x3502 <main+0x490>
    3528:	14 c0       	rjmp	.+40     	; 0x3552 <main+0x4e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352a:	6f 81       	ldd	r22, Y+7	; 0x07
    352c:	78 85       	ldd	r23, Y+8	; 0x08
    352e:	89 85       	ldd	r24, Y+9	; 0x09
    3530:	9a 85       	ldd	r25, Y+10	; 0x0a
    3532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	9e 83       	std	Y+6, r25	; 0x06
    353c:	8d 83       	std	Y+5, r24	; 0x05
    353e:	8d 81       	ldd	r24, Y+5	; 0x05
    3540:	9e 81       	ldd	r25, Y+6	; 0x06
    3542:	9a 83       	std	Y+2, r25	; 0x02
    3544:	89 83       	std	Y+1, r24	; 0x01
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <main+0x4d8>
    354e:	9a 83       	std	Y+2, r25	; 0x02
    3550:	89 83       	std	Y+1, r24	; 0x01
    		 				    				       			 _delay_ms(60000);
    		 				    				      			LCD_enum_Clear ();
    3552:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_enum_Clear>
         Local_u8_input[Local_u8_index_input] = Local_u8_Key;
         Local_u8_index_input++;
         Local_u8_Counter++;
	}
    	 if (Local_u8_Counter == len) {
    		 for(Local_u8_index_input =0 ;Local_u8_index_input<len ; Local_u8_index_input++){
    3556:	8a ad       	ldd	r24, Y+58	; 0x3a
    3558:	8f 5f       	subi	r24, 0xFF	; 255
    355a:	8a af       	std	Y+58, r24	; 0x3a
    355c:	8a ad       	ldd	r24, Y+58	; 0x3a
    355e:	84 30       	cpi	r24, 0x04	; 4
    3560:	08 f4       	brcc	.+2      	; 0x3564 <main+0x4f2>
    3562:	68 ce       	rjmp	.-816    	; 0x3234 <main+0x1c2>
    3564:	4a ce       	rjmp	.-876    	; 0x31fa <main+0x188>

00003566 <motor_option>:
    	 return 0;
    	 	}



int motor_option(){
    3566:	df 93       	push	r29
    3568:	cf 93       	push	r28
    356a:	00 d0       	rcall	.+0      	; 0x356c <motor_option+0x6>
    356c:	0f 92       	push	r0
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62

u8 option;
                                      LCD_enum_GO_TO_XY (1 , 0);
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	60 e0       	ldi	r22, 0x00	; 0
    3576:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_enum_GO_TO_XY>
    		                		    LCD_enum_Send_String ("1-DC MOTOR");
    357a:	83 ec       	ldi	r24, 0xC3	; 195
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>
    		                		    LCD_enum_GO_TO_XY (2 , 0);
    3582:	82 e0       	ldi	r24, 0x02	; 2
    3584:	60 e0       	ldi	r22, 0x00	; 0
    3586:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_enum_GO_TO_XY>
    		                		    LCD_enum_Send_String ("2-STEPPER MOTOR");
    358a:	8e ec       	ldi	r24, 0xCE	; 206
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>
    		                		    while(1){
    		                		    	KPD_enum_Get_Key_State(&option);
    3592:	ce 01       	movw	r24, r28
    3594:	01 96       	adiw	r24, 0x01	; 1
    3596:	0e 94 77 11 	call	0x22ee	; 0x22ee <KPD_enum_Get_Key_State>
    		                		    			if (option != KPD_u8_Keys_NO_Pressed) {
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	8f 3f       	cpi	r24, 0xFF	; 255
    359e:	c9 f3       	breq	.-14     	; 0x3592 <motor_option+0x2c>
    		                		    				if (option == '1') {
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	81 33       	cpi	r24, 0x31	; 49
    35a4:	39 f4       	brne	.+14     	; 0x35b4 <motor_option+0x4e>
    		                		    					LCD_enum_Clear ();
    35a6:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_enum_Clear>
    		                		    					DC_MOTOR_enum_INIT();
    35aa:	0e 94 a7 10 	call	0x214e	; 0x214e <DC_MOTOR_enum_INIT>
    		                		    					DC_MOTOR_void_direction() ;
    35ae:	0e 94 1d 1b 	call	0x363a	; 0x363a <DC_MOTOR_void_direction>
    35b2:	0b c0       	rjmp	.+22     	; 0x35ca <motor_option+0x64>
    		                		    					break;
    		                		    				} else if (option == '2') {
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	82 33       	cpi	r24, 0x32	; 50
    35b8:	61 f7       	brne	.-40     	; 0x3592 <motor_option+0x2c>
    		                		    					LCD_enum_Clear ();
    35ba:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_enum_Clear>
    		                		    					Stepper_motor_enum_INIT ();
    35be:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <Stepper_motor_enum_INIT>
      		                		    					stepper_MOTOR_void_direction();
    35c2:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <stepper_MOTOR_void_direction>
      		                		    					choice_angle();
    35c6:	0e 94 5f 1b 	call	0x36be	; 0x36be <choice_angle>
    		                		    					break;
    		                		    				}

    		                		    }
    		                		    }
}
    35ca:	0f 90       	pop	r0
    35cc:	0f 90       	pop	r0
    35ce:	0f 90       	pop	r0
    35d0:	cf 91       	pop	r28
    35d2:	df 91       	pop	r29
    35d4:	08 95       	ret

000035d6 <stepper_MOTOR_void_direction>:

void stepper_MOTOR_void_direction() {
    35d6:	df 93       	push	r29
    35d8:	cf 93       	push	r28
    35da:	cd b7       	in	r28, 0x3d	; 61
    35dc:	de b7       	in	r29, 0x3e	; 62
//	u8 stepper_direction;

	LCD_enum_Clear ();
    35de:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_enum_Clear>
	    		                		   	LCD_enum_GO_TO_XY (1 , 0);
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	60 e0       	ldi	r22, 0x00	; 0
    35e6:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_enum_GO_TO_XY>
	    		                	    LCD_enum_Send_String ("1-CW");
    35ea:	8e ed       	ldi	r24, 0xDE	; 222
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>
	    		               	   		 LCD_enum_GO_TO_XY (2 , 0);
    35f2:	82 e0       	ldi	r24, 0x02	; 2
    35f4:	60 e0       	ldi	r22, 0x00	; 0
    35f6:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_enum_GO_TO_XY>
	    		                	   	    LCD_enum_Send_String ("2-CCW");
    35fa:	83 ee       	ldi	r24, 0xE3	; 227
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>

	while (1) {

		KPD_enum_Get_Key_State(&stepper_direction);
    3602:	88 e2       	ldi	r24, 0x28	; 40
    3604:	91 e0       	ldi	r25, 0x01	; 1
    3606:	0e 94 77 11 	call	0x22ee	; 0x22ee <KPD_enum_Get_Key_State>
		if (stepper_direction != KPD_u8_Keys_NO_Pressed) {
    360a:	80 91 28 01 	lds	r24, 0x0128
    360e:	8f 3f       	cpi	r24, 0xFF	; 255
    3610:	c1 f3       	breq	.-16     	; 0x3602 <stepper_MOTOR_void_direction+0x2c>
			if (stepper_direction == '1') {
    3612:	80 91 28 01 	lds	r24, 0x0128
    3616:	81 33       	cpi	r24, 0x31	; 49
    3618:	29 f4       	brne	.+10     	; 0x3624 <stepper_MOTOR_void_direction+0x4e>
				LCD_enum_Clear ();
    361a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_enum_Clear>
				Stepper_motor_enum_INIT ();
    361e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <Stepper_motor_enum_INIT>
    3622:	08 c0       	rjmp	.+16     	; 0x3634 <stepper_MOTOR_void_direction+0x5e>
//				Stepper_moter_enum_Move(CW,270);
				break;
			} else if (stepper_direction == '2') {
    3624:	80 91 28 01 	lds	r24, 0x0128
    3628:	82 33       	cpi	r24, 0x32	; 50
    362a:	59 f7       	brne	.-42     	; 0x3602 <stepper_MOTOR_void_direction+0x2c>
				LCD_enum_Clear ();
    362c:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_enum_Clear>
				Stepper_motor_enum_INIT ();
    3630:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <Stepper_motor_enum_INIT>
//				Stepper_moter_enum_Move(CCW,270);
				break;
			}
		}
	}
}
    3634:	cf 91       	pop	r28
    3636:	df 91       	pop	r29
    3638:	08 95       	ret

0000363a <DC_MOTOR_void_direction>:
void DC_MOTOR_void_direction(void) {
    363a:	df 93       	push	r29
    363c:	cf 93       	push	r28
    363e:	0f 92       	push	r0
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
	u8 direction;
	LCD_enum_Clear();
    3644:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_enum_Clear>
	LCD_enum_GO_TO_XY(LCD_u8_LINE1, 0);
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	60 e0       	ldi	r22, 0x00	; 0
    364c:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_enum_GO_TO_XY>
	LCD_enum_Send_String("1-CW");
    3650:	8e ed       	ldi	r24, 0xDE	; 222
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>

	LCD_enum_GO_TO_XY(LCD_u8_LINE1, 5);
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	65 e0       	ldi	r22, 0x05	; 5
    365c:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_enum_GO_TO_XY>
	LCD_enum_Send_String("2-CCW");
    3660:	83 ee       	ldi	r24, 0xE3	; 227
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>

	LCD_enum_GO_TO_XY (2 , 0);
    3668:	82 e0       	ldi	r24, 0x02	; 2
    366a:	60 e0       	ldi	r22, 0x00	; 0
    366c:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_enum_GO_TO_XY>
	LCD_enum_Send_String ("3-STOP");
    3670:	89 ee       	ldi	r24, 0xE9	; 233
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>

	while (1) {
		KPD_enum_Get_Key_State(&direction);
    3678:	ce 01       	movw	r24, r28
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	0e 94 77 11 	call	0x22ee	; 0x22ee <KPD_enum_Get_Key_State>
		if (direction != KPD_u8_Keys_NO_Pressed) {
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	8f 3f       	cpi	r24, 0xFF	; 255
    3684:	c9 f3       	breq	.-14     	; 0x3678 <DC_MOTOR_void_direction+0x3e>
			if (direction == '1') {
    3686:	89 81       	ldd	r24, Y+1	; 0x01
    3688:	81 33       	cpi	r24, 0x31	; 49
    368a:	31 f4       	brne	.+12     	; 0x3698 <DC_MOTOR_void_direction+0x5e>
				DC_MOTOR_enum_INIT();
    368c:	0e 94 a7 10 	call	0x214e	; 0x214e <DC_MOTOR_enum_INIT>
				DC_MOTOR_enum_Start(CW);
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <DC_MOTOR_enum_Start>
    3696:	0f c0       	rjmp	.+30     	; 0x36b6 <DC_MOTOR_void_direction+0x7c>
				break;
			} else if (direction == '2') {
    3698:	89 81       	ldd	r24, Y+1	; 0x01
    369a:	82 33       	cpi	r24, 0x32	; 50
    369c:	31 f4       	brne	.+12     	; 0x36aa <DC_MOTOR_void_direction+0x70>
				DC_MOTOR_enum_INIT();
    369e:	0e 94 a7 10 	call	0x214e	; 0x214e <DC_MOTOR_enum_INIT>
				DC_MOTOR_enum_Start(CCW);
    36a2:	82 e0       	ldi	r24, 0x02	; 2
    36a4:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <DC_MOTOR_enum_Start>
    36a8:	06 c0       	rjmp	.+12     	; 0x36b6 <DC_MOTOR_void_direction+0x7c>
				break;
			}
			else if(direction=='3'){
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	83 33       	cpi	r24, 0x33	; 51
    36ae:	21 f7       	brne	.-56     	; 0x3678 <DC_MOTOR_void_direction+0x3e>
				DC_MOTOR_enum_Stop();
    36b0:	0e 94 00 11 	call	0x2200	; 0x2200 <DC_MOTOR_enum_Stop>
    36b4:	e1 cf       	rjmp	.-62     	; 0x3678 <DC_MOTOR_void_direction+0x3e>
			}
		}
	}
}
    36b6:	0f 90       	pop	r0
    36b8:	cf 91       	pop	r28
    36ba:	df 91       	pop	r29
    36bc:	08 95       	ret

000036be <choice_angle>:

int choice_angle(){
    36be:	df 93       	push	r29
    36c0:	cf 93       	push	r28
    36c2:	00 d0       	rcall	.+0      	; 0x36c4 <choice_angle+0x6>
    36c4:	0f 92       	push	r0
    36c6:	cd b7       	in	r28, 0x3d	; 61
    36c8:	de b7       	in	r29, 0x3e	; 62
	u8 angle;
		LCD_enum_Clear();
    36ca:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_enum_Clear>
		LCD_enum_GO_TO_XY(LCD_u8_LINE1, 0);
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	60 e0       	ldi	r22, 0x00	; 0
    36d2:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_enum_GO_TO_XY>
		LCD_enum_Send_String("1-90");
    36d6:	80 ef       	ldi	r24, 0xF0	; 240
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>

		LCD_enum_GO_TO_XY(LCD_u8_LINE1, 5);
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	65 e0       	ldi	r22, 0x05	; 5
    36e2:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_enum_GO_TO_XY>
		LCD_enum_Send_String("2-180");
    36e6:	85 ef       	ldi	r24, 0xF5	; 245
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>

		LCD_enum_GO_TO_XY (2 , 0);
    36ee:	82 e0       	ldi	r24, 0x02	; 2
    36f0:	60 e0       	ldi	r22, 0x00	; 0
    36f2:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_enum_GO_TO_XY>
		LCD_enum_Send_String ("3-270");
    36f6:	8b ef       	ldi	r24, 0xFB	; 251
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>

		LCD_enum_GO_TO_XY (2 , 5);
    36fe:	82 e0       	ldi	r24, 0x02	; 2
    3700:	65 e0       	ldi	r22, 0x05	; 5
    3702:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_enum_GO_TO_XY>
		LCD_enum_Send_String ("4-360");
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	91 e0       	ldi	r25, 0x01	; 1
    370a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_enum_Send_String>


		while (1) {
			KPD_enum_Get_Key_State(&angle);
    370e:	ce 01       	movw	r24, r28
    3710:	01 96       	adiw	r24, 0x01	; 1
    3712:	0e 94 77 11 	call	0x22ee	; 0x22ee <KPD_enum_Get_Key_State>
			if (angle != KPD_u8_Keys_NO_Pressed) {
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	8f 3f       	cpi	r24, 0xFF	; 255
    371a:	c9 f3       	breq	.-14     	; 0x370e <choice_angle+0x50>
				if (angle == '1') {
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	81 33       	cpi	r24, 0x31	; 49
    3720:	41 f4       	brne	.+16     	; 0x3732 <choice_angle+0x74>
					Stepper_motor_enum_INIT();
    3722:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <Stepper_motor_enum_INIT>
					Stepper_moter_enum_Move(stepper_direction,90);
    3726:	80 91 28 01 	lds	r24, 0x0128
    372a:	6a e5       	ldi	r22, 0x5A	; 90
    372c:	0e 94 0e 0b 	call	0x161c	; 0x161c <Stepper_moter_enum_Move>
    3730:	21 c0       	rjmp	.+66     	; 0x3774 <choice_angle+0xb6>
					break;
				} else if (angle == '2') {
    3732:	89 81       	ldd	r24, Y+1	; 0x01
    3734:	82 33       	cpi	r24, 0x32	; 50
    3736:	41 f4       	brne	.+16     	; 0x3748 <choice_angle+0x8a>
					Stepper_motor_enum_INIT();
    3738:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <Stepper_motor_enum_INIT>
					Stepper_moter_enum_Move(stepper_direction,180);
    373c:	80 91 28 01 	lds	r24, 0x0128
    3740:	64 eb       	ldi	r22, 0xB4	; 180
    3742:	0e 94 0e 0b 	call	0x161c	; 0x161c <Stepper_moter_enum_Move>
    3746:	16 c0       	rjmp	.+44     	; 0x3774 <choice_angle+0xb6>
					break;
				}
				else if(angle=='3'){
    3748:	89 81       	ldd	r24, Y+1	; 0x01
    374a:	83 33       	cpi	r24, 0x33	; 51
    374c:	41 f4       	brne	.+16     	; 0x375e <choice_angle+0xa0>
					Stepper_motor_enum_INIT();
    374e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <Stepper_motor_enum_INIT>
					Stepper_moter_enum_Move(stepper_direction,270);
    3752:	80 91 28 01 	lds	r24, 0x0128
    3756:	6e e0       	ldi	r22, 0x0E	; 14
    3758:	0e 94 0e 0b 	call	0x161c	; 0x161c <Stepper_moter_enum_Move>
    375c:	d8 cf       	rjmp	.-80     	; 0x370e <choice_angle+0x50>
				}
				else if(angle=='4'){
    375e:	89 81       	ldd	r24, Y+1	; 0x01
    3760:	84 33       	cpi	r24, 0x34	; 52
    3762:	a9 f6       	brne	.-86     	; 0x370e <choice_angle+0x50>
									Stepper_motor_enum_INIT();
    3764:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <Stepper_motor_enum_INIT>
									Stepper_moter_enum_Move(stepper_direction,360);
    3768:	80 91 28 01 	lds	r24, 0x0128
    376c:	68 e6       	ldi	r22, 0x68	; 104
    376e:	0e 94 0e 0b 	call	0x161c	; 0x161c <Stepper_moter_enum_Move>
    3772:	cd cf       	rjmp	.-102    	; 0x370e <choice_angle+0x50>
								}
			}
		}
}
    3774:	0f 90       	pop	r0
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	cf 91       	pop	r28
    377c:	df 91       	pop	r29
    377e:	08 95       	ret

00003780 <__udivmodsi4>:
    3780:	a1 e2       	ldi	r26, 0x21	; 33
    3782:	1a 2e       	mov	r1, r26
    3784:	aa 1b       	sub	r26, r26
    3786:	bb 1b       	sub	r27, r27
    3788:	fd 01       	movw	r30, r26
    378a:	0d c0       	rjmp	.+26     	; 0x37a6 <__udivmodsi4_ep>

0000378c <__udivmodsi4_loop>:
    378c:	aa 1f       	adc	r26, r26
    378e:	bb 1f       	adc	r27, r27
    3790:	ee 1f       	adc	r30, r30
    3792:	ff 1f       	adc	r31, r31
    3794:	a2 17       	cp	r26, r18
    3796:	b3 07       	cpc	r27, r19
    3798:	e4 07       	cpc	r30, r20
    379a:	f5 07       	cpc	r31, r21
    379c:	20 f0       	brcs	.+8      	; 0x37a6 <__udivmodsi4_ep>
    379e:	a2 1b       	sub	r26, r18
    37a0:	b3 0b       	sbc	r27, r19
    37a2:	e4 0b       	sbc	r30, r20
    37a4:	f5 0b       	sbc	r31, r21

000037a6 <__udivmodsi4_ep>:
    37a6:	66 1f       	adc	r22, r22
    37a8:	77 1f       	adc	r23, r23
    37aa:	88 1f       	adc	r24, r24
    37ac:	99 1f       	adc	r25, r25
    37ae:	1a 94       	dec	r1
    37b0:	69 f7       	brne	.-38     	; 0x378c <__udivmodsi4_loop>
    37b2:	60 95       	com	r22
    37b4:	70 95       	com	r23
    37b6:	80 95       	com	r24
    37b8:	90 95       	com	r25
    37ba:	9b 01       	movw	r18, r22
    37bc:	ac 01       	movw	r20, r24
    37be:	bd 01       	movw	r22, r26
    37c0:	cf 01       	movw	r24, r30
    37c2:	08 95       	ret

000037c4 <__prologue_saves__>:
    37c4:	2f 92       	push	r2
    37c6:	3f 92       	push	r3
    37c8:	4f 92       	push	r4
    37ca:	5f 92       	push	r5
    37cc:	6f 92       	push	r6
    37ce:	7f 92       	push	r7
    37d0:	8f 92       	push	r8
    37d2:	9f 92       	push	r9
    37d4:	af 92       	push	r10
    37d6:	bf 92       	push	r11
    37d8:	cf 92       	push	r12
    37da:	df 92       	push	r13
    37dc:	ef 92       	push	r14
    37de:	ff 92       	push	r15
    37e0:	0f 93       	push	r16
    37e2:	1f 93       	push	r17
    37e4:	cf 93       	push	r28
    37e6:	df 93       	push	r29
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
    37ec:	ca 1b       	sub	r28, r26
    37ee:	db 0b       	sbc	r29, r27
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	f8 94       	cli
    37f4:	de bf       	out	0x3e, r29	; 62
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	cd bf       	out	0x3d, r28	; 61
    37fa:	09 94       	ijmp

000037fc <__epilogue_restores__>:
    37fc:	2a 88       	ldd	r2, Y+18	; 0x12
    37fe:	39 88       	ldd	r3, Y+17	; 0x11
    3800:	48 88       	ldd	r4, Y+16	; 0x10
    3802:	5f 84       	ldd	r5, Y+15	; 0x0f
    3804:	6e 84       	ldd	r6, Y+14	; 0x0e
    3806:	7d 84       	ldd	r7, Y+13	; 0x0d
    3808:	8c 84       	ldd	r8, Y+12	; 0x0c
    380a:	9b 84       	ldd	r9, Y+11	; 0x0b
    380c:	aa 84       	ldd	r10, Y+10	; 0x0a
    380e:	b9 84       	ldd	r11, Y+9	; 0x09
    3810:	c8 84       	ldd	r12, Y+8	; 0x08
    3812:	df 80       	ldd	r13, Y+7	; 0x07
    3814:	ee 80       	ldd	r14, Y+6	; 0x06
    3816:	fd 80       	ldd	r15, Y+5	; 0x05
    3818:	0c 81       	ldd	r16, Y+4	; 0x04
    381a:	1b 81       	ldd	r17, Y+3	; 0x03
    381c:	aa 81       	ldd	r26, Y+2	; 0x02
    381e:	b9 81       	ldd	r27, Y+1	; 0x01
    3820:	ce 0f       	add	r28, r30
    3822:	d1 1d       	adc	r29, r1
    3824:	0f b6       	in	r0, 0x3f	; 63
    3826:	f8 94       	cli
    3828:	de bf       	out	0x3e, r29	; 62
    382a:	0f be       	out	0x3f, r0	; 63
    382c:	cd bf       	out	0x3d, r28	; 61
    382e:	ed 01       	movw	r28, r26
    3830:	08 95       	ret

00003832 <_exit>:
    3832:	f8 94       	cli

00003834 <__stop_program>:
    3834:	ff cf       	rjmp	.-2      	; 0x3834 <__stop_program>

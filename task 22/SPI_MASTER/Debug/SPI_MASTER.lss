
SPI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001996  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001996  00001a0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001770  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d64  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00003ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00005de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00006ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00007bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00007e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008637  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <main>
      7a:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <SPI_enum_INIT>:
#include"SPI_config.h"
#include"SPI_private.h"
#include "../1-DIO/DIO_interface.h"

ES_t SPI_enum_INIT(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
//	ES_t Local_enu_Erorr_State= ES_OK;

	/*data order= MSB first */
	CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_DORD_BIT5);
     b3e:	ad e2       	ldi	r26, 0x2D	; 45
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	ed e2       	ldi	r30, 0x2D	; 45
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8f 7d       	andi	r24, 0xDF	; 223
     b4a:	8c 93       	st	X, r24

	/*Choose CPOL and CPHA => Falling,Raising / setup,sample */
	SET_BIT(SPI_u8_SPCR_REG,SPI_u8_CPOL_BIT3);
     b4c:	ad e2       	ldi	r26, 0x2D	; 45
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	ed e2       	ldi	r30, 0x2D	; 45
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	88 60       	ori	r24, 0x08	; 8
     b58:	8c 93       	st	X, r24
	SET_BIT(SPI_u8_SPCR_REG,SPI_u8_CPHA_BIT2);
     b5a:	ad e2       	ldi	r26, 0x2D	; 45
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ed e2       	ldi	r30, 0x2D	; 45
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	84 60       	ori	r24, 0x04	; 4
     b66:	8c 93       	st	X, r24
#if SPI_u8_MODE == SPI_u8_MASTER_MODE
	/*CONFIG PINs OF MASTER MODE*/
	DIO_u8_Set_Pin_Direction(SPI_u8_MOSI_PORT,SPI_u8_MOSI_PIN,DIO_u8_OUTPUT);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	65 e0       	ldi	r22, 0x05	; 5
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8_Set_Pin_Direction>
	DIO_u8_Set_Pin_Direction(SPI_u8_MISO_PORT,SPI_u8_MISO_PIN,DIO_u8_INPUT);
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	66 e0       	ldi	r22, 0x06	; 6
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8_Set_Pin_Direction>
	DIO_u8_Set_Pin_Direction(SPI_u8_SCK_PORT,SPI_u8_SCK_PIN,DIO_u8_OUTPUT);
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	67 e0       	ldi	r22, 0x07	; 7
     b80:	41 e0       	ldi	r20, 0x01	; 1
     b82:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8_Set_Pin_Direction>
	DIO_u8_Set_Pin_Direction(SPI_u8_SS_PORT,SPI_u8_SS_PIN,DIO_u8_INPUT);
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	64 e0       	ldi	r22, 0x04	; 4
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8_Set_Pin_Direction>

	DIO_u8_Set_Pin_Value(SPI_u8_MOSI_PORT,SPI_u8_MOSI_PIN,DIO_u8_INTIAL_LOW);
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	65 e0       	ldi	r22, 0x05	; 5
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	0e 94 c3 08 	call	0x1186	; 0x1186 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value(SPI_u8_MISO_PORT,SPI_u8_MISO_PIN,DIO_u8_INTIAL_FLOAT);
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	66 e0       	ldi	r22, 0x06	; 6
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	0e 94 c3 08 	call	0x1186	; 0x1186 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value(SPI_u8_SCK_PORT,SPI_u8_SCK_PIN,DIO_u8_INTIAL_LOW);
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	67 e0       	ldi	r22, 0x07	; 7
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	0e 94 c3 08 	call	0x1186	; 0x1186 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value(SPI_u8_SS_PORT,SPI_u8_SS_PIN,DIO_u8_INTIAL_PULL_UP);
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	64 e0       	ldi	r22, 0x04	; 4
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	0e 94 c3 08 	call	0x1186	; 0x1186 <DIO_u8_Set_Pin_Value>
	/*master mode*/
	SET_BIT(SPI_u8_SPCR_REG,SPI_u8_MSTR_BIT4);
     bb8:	ad e2       	ldi	r26, 0x2D	; 45
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	ed e2       	ldi	r30, 0x2D	; 45
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	80 61       	ori	r24, 0x10	; 16
     bc4:	8c 93       	st	X, r24
	CLR_BIT(SPI_u8_SPSR_REG,SPI_u8_SPI2X_BIT0);
	SET_BIT(SPI_u8_SPCR_REG,SPI_u8_SPR0_BIT0);
	CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_SPR1_BIT1);
#elif SPI_u8_CLK==SPI_u8_CLK_fosc_64
   /*CLK=fosc/64*/
	CLR_BIT(SPI_u8_SPSR_REG,SPI_u8_SPI2X_BIT0);
     bc6:	ae e2       	ldi	r26, 0x2E	; 46
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	ee e2       	ldi	r30, 0x2E	; 46
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8e 7f       	andi	r24, 0xFE	; 254
     bd2:	8c 93       	st	X, r24
	CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_SPR0_BIT0);
     bd4:	ad e2       	ldi	r26, 0x2D	; 45
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	ed e2       	ldi	r30, 0x2D	; 45
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	8e 7f       	andi	r24, 0xFE	; 254
     be0:	8c 93       	st	X, r24
	SET_BIT(SPI_u8_SPCR_REG,SPI_u8_SPR1_BIT1);
     be2:	ad e2       	ldi	r26, 0x2D	; 45
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	ed e2       	ldi	r30, 0x2D	; 45
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	82 60       	ori	r24, 0x02	; 2
     bee:	8c 93       	st	X, r24
    CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_MSTR_BIT4);

#endif

		/*Enable SPI*/
		SET_BIT(SPI_u8_SPCR_REG,SPI_u8_SPE_BIT6);
     bf0:	ad e2       	ldi	r26, 0x2D	; 45
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	ed e2       	ldi	r30, 0x2D	; 45
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	80 64       	ori	r24, 0x40	; 64
     bfc:	8c 93       	st	X, r24

	return ES_OK;
     bfe:	80 e0       	ldi	r24, 0x00	; 0
}
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <SPI_enum_trans_recieve>:
ES_t SPI_enum_trans_recieve(u8 Copy_u8_Treansmitted_Byte ,u8 * Copy_pu8_Recieved_Byte )
{
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <SPI_enum_trans_recieve+0x6>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <SPI_enum_trans_recieve+0x8>
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	8a 83       	std	Y+2, r24	; 0x02
     c14:	7c 83       	std	Y+4, r23	; 0x04
     c16:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enu_Erorr_State= ES_OK;
     c18:	19 82       	std	Y+1, r1	; 0x01
if(Copy_pu8_Recieved_Byte!= NULL)
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	89 f0       	breq	.+34     	; 0xc44 <SPI_enum_trans_recieve+0x3e>
{
	/*send byte*/
	SPI_u8_SPDR_REG =Copy_u8_Treansmitted_Byte;
     c22:	ef e2       	ldi	r30, 0x2F	; 47
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	8a 81       	ldd	r24, Y+2	; 0x02
     c28:	80 83       	st	Z, r24
	/*Chack if the transmission is completed*/
	while(!GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT7));
     c2a:	ee e2       	ldi	r30, 0x2E	; 46
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	88 23       	and	r24, r24
     c32:	dc f7       	brge	.-10     	; 0xc2a <SPI_enum_trans_recieve+0x24>
	/*Read byte*/
	*Copy_pu8_Recieved_Byte = SPI_u8_SPDR_REG;
     c34:	ef e2       	ldi	r30, 0x2F	; 47
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	eb 81       	ldd	r30, Y+3	; 0x03
     c3c:	fc 81       	ldd	r31, Y+4	; 0x04
     c3e:	80 83       	st	Z, r24
	Local_enu_Erorr_State= ES_NOK;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	89 83       	std	Y+1, r24	; 0x01
}

		return Local_enu_Erorr_State;
     c44:	89 81       	ldd	r24, Y+1	; 0x01

}
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <SPI_enum_Send_Byte>:
ES_t SPI_enum_Send_Byte(u8 Copy_u8_send_Byte )
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	00 d0       	rcall	.+0      	; 0xc5a <SPI_enum_Send_Byte+0x6>
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
     c60:	19 82       	std	Y+1, r1	; 0x01
/*send byte*/
	SPI_u8_SPDR_REG=Copy_u8_send_Byte;
     c62:	ef e2       	ldi	r30, 0x2F	; 47
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	80 83       	st	Z, r24
//	/*Chack if the transmission is completed*/
//		while(!GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT7));

		return Local_enu_Erorr_State;
     c6a:	89 81       	ldd	r24, Y+1	; 0x01

}
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	cf 91       	pop	r28
     c72:	df 91       	pop	r29
     c74:	08 95       	ret

00000c76 <SPI_enum_recieve_Byte>:
ES_t SPI_enum_recieve_Byte(u8 * Copy_pu8_Recieved_Byte )
{
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <SPI_enum_recieve_Byte+0x6>
     c7c:	0f 92       	push	r0
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	9b 83       	std	Y+3, r25	; 0x03
     c84:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
     c86:	19 82       	std	Y+1, r1	; 0x01
if(Copy_pu8_Recieved_Byte!= NULL){
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	9b 81       	ldd	r25, Y+3	; 0x03
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	59 f0       	breq	.+22     	; 0xca6 <SPI_enum_recieve_Byte+0x30>
	/*Chack if the transmission is completed*/
		while(!GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT7));
     c90:	ee e2       	ldi	r30, 0x2E	; 46
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	88 23       	and	r24, r24
     c98:	dc f7       	brge	.-10     	; 0xc90 <SPI_enum_recieve_Byte+0x1a>
		/*Read byte*/
		*Copy_pu8_Recieved_Byte = SPI_u8_SPDR_REG;
     c9a:	ef e2       	ldi	r30, 0x2F	; 47
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	ea 81       	ldd	r30, Y+2	; 0x02
     ca2:	fb 81       	ldd	r31, Y+3	; 0x03
     ca4:	80 83       	st	Z, r24
}

		return Local_enu_Erorr_State;
     ca6:	89 81       	ldd	r24, Y+1	; 0x01

}
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <UART_enum_INIT>:
#include "../../MCAL/1-DIO/DIO_interface.h"


#include<util/delay.h>
ES_t  UART_enum_INIT (void)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	00 d0       	rcall	.+0      	; 0xcba <UART_enum_INIT+0x6>
     cba:	00 d0       	rcall	.+0      	; 0xcbc <UART_enum_INIT+0x8>
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State= ES_OK;
     cc0:	1c 82       	std	Y+4, r1	; 0x04
	u16 local_u16_baud_rate_value = UART_u8_inital_baud_rate_9600;
     cc2:	87 e6       	ldi	r24, 0x67	; 103
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	9b 83       	std	Y+3, r25	; 0x03
     cc8:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8_UCSRC_value= UART_INTIAL_UCSRC_value;
     cca:	80 e8       	ldi	r24, 0x80	; 128
     ccc:	89 83       	std	Y+1, r24	; 0x01


     /*Normal speed*/
	CLR_BIT(UART_u8_UCSRA_REG,UART_u8_U2X_BIT1);
     cce:	ab e2       	ldi	r26, 0x2B	; 43
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	eb e2       	ldi	r30, 0x2B	; 43
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	8d 7f       	andi	r24, 0xFD	; 253
     cda:	8c 93       	st	X, r24

	/*Disable MPCM */
	CLR_BIT (UART_u8_UCSRA_REG ,UART_u8_MPCM_BIT0);
     cdc:	ab e2       	ldi	r26, 0x2B	; 43
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	eb e2       	ldi	r30, 0x2B	; 43
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	8e 7f       	andi	r24, 0xFE	; 254
     ce8:	8c 93       	st	X, r24

	/*Enable Rx ,Tx*/
	SET_BIT(UART_u8_UCSRB_REG,UART_u8_TXEN_BIT3);
     cea:	aa e2       	ldi	r26, 0x2A	; 42
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	ea e2       	ldi	r30, 0x2A	; 42
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	88 60       	ori	r24, 0x08	; 8
     cf6:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG,UART_u8_RXEN_BIT4);
     cf8:	aa e2       	ldi	r26, 0x2A	; 42
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	ea e2       	ldi	r30, 0x2A	; 42
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	80 61       	ori	r24, 0x10	; 16
     d04:	8c 93       	st	X, r24


	/*Select 8 bit */
	CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSZ2_BIT2);
     d06:	aa e2       	ldi	r26, 0x2A	; 42
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ea e2       	ldi	r30, 0x2A	; 42
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8b 7f       	andi	r24, 0xFB	; 251
     d12:	8c 93       	st	X, r24
	SET_BIT(local_u8_UCSRC_value,UART_u8_UCSZ0_BIT1);
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	82 60       	ori	r24, 0x02	; 2
     d18:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_u8_UCSRC_value,UART_u8_UCSZ1_BIT2);
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	84 60       	ori	r24, 0x04	; 4
     d1e:	89 83       	std	Y+1, r24	; 0x01

     /*Select Asynch Mode */
	CLR_BIT(local_u8_UCSRC_value,UART_u8_UMSEL_BIT6);
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	8f 7b       	andi	r24, 0xBF	; 191
     d24:	89 83       	std	Y+1, r24	; 0x01

	/*NO Parity Bit*/
	CLR_BIT(local_u8_UCSRC_value,UART_u8_UPM0_BIT4);
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	8f 7e       	andi	r24, 0xEF	; 239
     d2a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(local_u8_UCSRC_value,UART_u8_UPM1_BIT5);
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	8f 7d       	andi	r24, 0xDF	; 223
     d30:	89 83       	std	Y+1, r24	; 0x01

	/*Enable 2 Stop Bits*/
	CLR_BIT(local_u8_UCSRC_value,UART_u8_USBS_BIT3);
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	87 7f       	andi	r24, 0xF7	; 247
     d36:	89 83       	std	Y+1, r24	; 0x01

    /*Update UCSRC REG*/
	UART_u8_UCSRC_REG=local_u8_UCSRC_value;
     d38:	e0 e4       	ldi	r30, 0x40	; 64
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	80 83       	st	Z, r24

	/*baud rate = 9600*/
	    UART_u8_UBRRL_REG= (u8)local_u16_baud_rate_value;
     d40:	e9 e2       	ldi	r30, 0x29	; 41
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	80 83       	st	Z, r24
	    UART_u8_UBRRH_REG= (u8)(local_u16_baud_rate_value >> no_of_bit_of_one_byte);
     d48:	e0 e4       	ldi	r30, 0x40	; 64
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	9b 81       	ldd	r25, Y+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	99 27       	eor	r25, r25
     d54:	80 83       	st	Z, r24


	//test
	DIO_u8_Set_Pin_Value(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	0e 94 c3 08 	call	0x1186	; 0x1186 <DIO_u8_Set_Pin_Value>

	return Local_enu_Erorr_State;
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <UART_enum_SEND_Byte>:
ES_t  UART_enum_SEND_Byte (u8 copy_UART_u8_data_byte)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <UART_enum_SEND_Byte+0x6>
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
     d7c:	19 82       	std	Y+1, r1	; 0x01
     /* wait until the transmit reg is empty*/
	while (GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT5)==0);
     d7e:	eb e2       	ldi	r30, 0x2B	; 43
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	88 2f       	mov	r24, r24
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	80 72       	andi	r24, 0x20	; 32
     d8a:	90 70       	andi	r25, 0x00	; 0
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	b9 f3       	breq	.-18     	; 0xd7e <UART_enum_SEND_Byte+0xe>

	/* send data byte */
	UART_u8_UDR_REG=copy_UART_u8_data_byte;
     d90:	ec e2       	ldi	r30, 0x2C	; 44
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	80 83       	st	Z, r24
	return Local_enu_Erorr_State;
     d98:	89 81       	ldd	r24, Y+1	; 0x01

}
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <UART_enum_RECIEVE_Byte>:
ES_t  UART_enum_RECIEVE_Byte (u8 *copy_UART_pu8_recieve_byte)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <UART_enum_RECIEVE_Byte+0x6>
     daa:	0f 92       	push	r0
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	9b 83       	std	Y+3, r25	; 0x03
     db2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
     db4:	19 82       	std	Y+1, r1	; 0x01

	if(copy_UART_pu8_recieve_byte != NULL)
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	61 f0       	breq	.+24     	; 0xdd6 <UART_enum_RECIEVE_Byte+0x32>
	{
//		DIO_u8_Set_Pin_Value(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);

	/* wait until the data is recieved */
	while (!GET_BIT(UART_u8_UCSRA_REG,UART_u8_RXC_BIT7));
     dbe:	eb e2       	ldi	r30, 0x2B	; 43
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	88 23       	and	r24, r24
     dc6:	dc f7       	brge	.-10     	; 0xdbe <UART_enum_RECIEVE_Byte+0x1a>
//while(((UART_u8_UCSRA_REG >>7)&1)==0);
	/* read data byte*/
	*copy_UART_pu8_recieve_byte=UART_u8_UDR_REG;
     dc8:	ec e2       	ldi	r30, 0x2C	; 44
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	ea 81       	ldd	r30, Y+2	; 0x02
     dd0:	fb 81       	ldd	r31, Y+3	; 0x03
     dd2:	80 83       	st	Z, r24
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <UART_enum_RECIEVE_Byte+0x36>


	}
	else{

			Local_enu_Erorr_State = ES_NOK;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	89 83       	std	Y+1, r24	; 0x01
		    }
	return Local_enu_Erorr_State;
     dda:	89 81       	ldd	r24, Y+1	; 0x01



}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <UART_enum_Send_String>:

ES_t UART_enum_Send_String(u8 *copy_pu8_string)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	00 d0       	rcall	.+0      	; 0xdee <UART_enum_Send_String+0x6>
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <UART_enum_Send_String+0x8>
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	9c 83       	std	Y+4, r25	; 0x04
     df6:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enu_Erorr_State= ES_OK;
     df8:	1a 82       	std	Y+2, r1	; 0x02
	if(copy_pu8_string!= NULL){
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	29 f1       	breq	.+74     	; 0xe4c <UART_enum_Send_String+0x64>
     e02:	18 c0       	rjmp	.+48     	; 0xe34 <UART_enum_Send_String+0x4c>
	for (u8 Local_u8_Iterator ; copy_pu8_string[Local_u8_Iterator] != '\0'; Local_u8_Iterator++){
		 /* wait until the transmit reg is empty*/
			while (GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT5)==0);
     e04:	eb e2       	ldi	r30, 0x2B	; 43
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	88 2f       	mov	r24, r24
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	80 72       	andi	r24, 0x20	; 32
     e10:	90 70       	andi	r25, 0x00	; 0
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	b9 f3       	breq	.-18     	; 0xe04 <UART_enum_Send_String+0x1c>

			/* send data byte */
			UART_u8_UDR_REG=copy_pu8_string[Local_u8_Iterator];
     e16:	ac e2       	ldi	r26, 0x2C	; 44
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	fc 01       	movw	r30, r24
     e26:	e2 0f       	add	r30, r18
     e28:	f3 1f       	adc	r31, r19
     e2a:	80 81       	ld	r24, Z
     e2c:	8c 93       	st	X, r24

ES_t UART_enum_Send_String(u8 *copy_pu8_string)
{
	ES_t Local_enu_Erorr_State= ES_OK;
	if(copy_pu8_string!= NULL){
	for (u8 Local_u8_Iterator ; copy_pu8_string[Local_u8_Iterator] != '\0'; Local_u8_Iterator++){
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	8f 5f       	subi	r24, 0xFF	; 255
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	fc 01       	movw	r30, r24
     e40:	e2 0f       	add	r30, r18
     e42:	f3 1f       	adc	r31, r19
     e44:	80 81       	ld	r24, Z
     e46:	88 23       	and	r24, r24
     e48:	e9 f6       	brne	.-70     	; 0xe04 <UART_enum_Send_String+0x1c>
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <UART_enum_Send_String+0x68>
			/* send data byte */
			UART_u8_UDR_REG=copy_pu8_string[Local_u8_Iterator];
	}
	}
	else{
		Local_enu_Erorr_State = ES_NOK;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	8a 83       	std	Y+2, r24	; 0x02
	    }

	return Local_enu_Erorr_State;
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <UART_enum_RECIEVE_String>:
ES_t  UART_enum_RECIEVE_String (u8 * copy_UART_pu8_recieve_String)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	00 d0       	rcall	.+0      	; 0xe66 <UART_enum_RECIEVE_String+0x6>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <UART_enum_RECIEVE_String+0x8>
     e68:	0f 92       	push	r0
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	9d 83       	std	Y+5, r25	; 0x05
     e70:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enu_Erorr_State= ES_OK;
     e72:	1b 82       	std	Y+3, r1	; 0x03
	u8 i=0;
     e74:	1a 82       	std	Y+2, r1	; 0x02
	u8 local_u8_counter=0;
     e76:	19 82       	std	Y+1, r1	; 0x01
		if(copy_UART_pu8_recieve_String != NULL)
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	9d 81       	ldd	r25, Y+5	; 0x05
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	19 f1       	breq	.+70     	; 0xec6 <UART_enum_RECIEVE_String+0x66>
		{
if(copy_UART_pu8_recieve_String[i]==recieve_sring_mark)   local_u8_counter++;
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	9d 81       	ldd	r25, Y+5	; 0x05
     e8a:	fc 01       	movw	r30, r24
     e8c:	e2 0f       	add	r30, r18
     e8e:	f3 1f       	adc	r31, r19
     e90:	80 81       	ld	r24, Z
     e92:	83 32       	cpi	r24, 0x23	; 35
     e94:	19 f4       	brne	.+6      	; 0xe9c <UART_enum_RECIEVE_String+0x3c>
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	8f 5f       	subi	r24, 0xFF	; 255
     e9a:	89 83       	std	Y+1, r24	; 0x01
if(local_u8_counter<=2){
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	83 30       	cpi	r24, 0x03	; 3
     ea0:	a0 f4       	brcc	.+40     	; 0xeca <UART_enum_RECIEVE_String+0x6a>
	/* wait until the data is recieved */
		while (!GET_BIT(UART_u8_UCSRA_REG,UART_u8_RXC_BIT7));
     ea2:	eb e2       	ldi	r30, 0x2B	; 43
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	88 23       	and	r24, r24
     eaa:	dc f7       	brge	.-10     	; 0xea2 <UART_enum_RECIEVE_String+0x42>
		/* read data byte*/
		copy_UART_pu8_recieve_String[i]=UART_u8_UDR_REG;
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	9d 81       	ldd	r25, Y+5	; 0x05
     eb6:	dc 01       	movw	r26, r24
     eb8:	a2 0f       	add	r26, r18
     eba:	b3 1f       	adc	r27, r19
     ebc:	ec e2       	ldi	r30, 0x2C	; 44
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8c 93       	st	X, r24
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <UART_enum_RECIEVE_String+0x6a>

}
		}
		else{
				Local_enu_Erorr_State = ES_NOK;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	8b 83       	std	Y+3, r24	; 0x03
			    }
		return Local_enu_Erorr_State;
     eca:	8b 81       	ldd	r24, Y+3	; 0x03

}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <DIO_voidInit>:
//MCAL Layer
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidInit(void){
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = CONC(DIO_U8_PA7_INTIAL_DIRECTION, DIO_U8_PA6_INTIAL_DIRECTION, DIO_U8_PA5_INTIAL_DIRECTION, DIO_U8_PA4_INTIAL_DIRECTION,
     ee4:	ea e3       	ldi	r30, 0x3A	; 58
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	8f e0       	ldi	r24, 0x0F	; 15
     eea:	80 83       	st	Z, r24
		                   DIO_U8_PA3_INTIAL_DIRECTION, DIO_U8_PA2_INTIAL_DIRECTION, DIO_U8_PA1_INTIAL_DIRECTION, DIO_U8_PA0_INTIAL_DIRECTION);
		                 			
	DIO_u8_DDRB_REG = CONC(DIO_U8_PB7_INTIAL_DIRECTION, DIO_U8_PB6_INTIAL_DIRECTION, DIO_U8_PB5_INTIAL_DIRECTION, DIO_U8_PB4_INTIAL_DIRECTION,
     eec:	e7 e3       	ldi	r30, 0x37	; 55
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	87 e2       	ldi	r24, 0x27	; 39
     ef2:	80 83       	st	Z, r24
				           DIO_U8_PB3_INTIAL_DIRECTION, DIO_U8_PB2_INTIAL_DIRECTION, DIO_U8_PB1_INTIAL_DIRECTION, DIO_U8_PB0_INTIAL_DIRECTION);
					                                                                                                                      
	DIO_u8_DDRC_REG = CONC(DIO_U8_PC7_INTIAL_DIRECTION, DIO_U8_PC6_INTIAL_DIRECTION, DIO_U8_PC5_INTIAL_DIRECTION, DIO_U8_PC4_INTIAL_DIRECTION,
     ef4:	e4 e3       	ldi	r30, 0x34	; 52
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	10 82       	st	Z, r1
		                   DIO_U8_PC3_INTIAL_DIRECTION, DIO_U8_PC2_INTIAL_DIRECTION, DIO_U8_PC1_INTIAL_DIRECTION, DIO_U8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = CONC(DIO_U8_PD7_INTIAL_DIRECTION, DIO_U8_PD6_INTIAL_DIRECTION, DIO_U8_PD5_INTIAL_DIRECTION, DIO_U8_PD4_INTIAL_DIRECTION,
     efa:	e1 e3       	ldi	r30, 0x31	; 49
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	8e ef       	ldi	r24, 0xFE	; 254
     f00:	80 83       	st	Z, r24
				           DIO_U8_PD3_INTIAL_DIRECTION, DIO_U8_PD2_INTIAL_DIRECTION, DIO_U8_PD1_INTIAL_DIRECTION, DIO_U8_PD0_INTIAL_DIRECTION);

	DIO_u8_PORTA_REG = CONC(DIO_U8_PA7_INTIAL_VALUE, DIO_U8_PA6_INTIAL_VALUE, DIO_U8_PA5_INTIAL_VALUE, DIO_U8_PA4_INTIAL_VALUE,
     f02:	eb e3       	ldi	r30, 0x3B	; 59
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	10 82       	st	Z, r1
						    DIO_U8_PA3_INTIAL_VALUE, DIO_U8_PA2_INTIAL_VALUE, DIO_U8_PA1_INTIAL_VALUE, DIO_U8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = CONC(DIO_U8_PB7_INTIAL_VALUE, DIO_U8_PB6_INTIAL_VALUE, DIO_U8_PB5_INTIAL_VALUE, DIO_U8_PB4_INTIAL_VALUE,
     f08:	e8 e3       	ldi	r30, 0x38	; 56
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	10 82       	st	Z, r1
						   	DIO_U8_PB3_INTIAL_VALUE, DIO_U8_PB2_INTIAL_VALUE, DIO_U8_PB1_INTIAL_VALUE, DIO_U8_PB0_INTIAL_VALUE);
												 
    DIO_u8_PORTC_REG = CONC(DIO_U8_PC7_INTIAL_VALUE, DIO_U8_PC6_INTIAL_VALUE, DIO_U8_PC5_INTIAL_VALUE, DIO_U8_PC4_INTIAL_VALUE,
     f0e:	e5 e3       	ldi	r30, 0x35	; 53
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	10 82       	st	Z, r1
					        DIO_U8_PC3_INTIAL_VALUE, DIO_U8_PC2_INTIAL_VALUE, DIO_U8_PC1_INTIAL_VALUE, DIO_U8_PC0_INTIAL_VALUE);
																		   
    DIO_u8_PORTD_REG = CONC(DIO_U8_PD7_INTIAL_VALUE, DIO_U8_PD6_INTIAL_VALUE, DIO_U8_PD5_INTIAL_VALUE, DIO_U8_PD4_INTIAL_VALUE,
     f14:	e2 e3       	ldi	r30, 0x32	; 50
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	10 82       	st	Z, r1
						    DIO_U8_PD3_INTIAL_VALUE, DIO_U8_PD2_INTIAL_VALUE, DIO_U8_PD1_INTIAL_VALUE, DIO_U8_PD0_INTIAL_VALUE);
    }
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <DIO_u8_Set_Pin_Direction>:

u8 DIO_u8_Set_Pin_Direction  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Direction ){
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	2e 97       	sbiw	r28, 0x0e	; 14
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	8a 83       	std	Y+2, r24	; 0x02
     f36:	6b 83       	std	Y+3, r22	; 0x03
     f38:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
     f3a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Direction == DIO_u8_INTIAL_INPUT)||(Copy_u8_Pin_Direction == DIO_u8_INTIAL_OUTPUT)))
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	84 30       	cpi	r24, 0x04	; 4
     f40:	08 f0       	brcs	.+2      	; 0xf44 <DIO_u8_Set_Pin_Direction+0x24>
     f42:	15 c1       	rjmp	.+554    	; 0x116e <DIO_u8_Set_Pin_Direction+0x24e>
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	88 30       	cpi	r24, 0x08	; 8
     f48:	08 f0       	brcs	.+2      	; 0xf4c <DIO_u8_Set_Pin_Direction+0x2c>
     f4a:	11 c1       	rjmp	.+546    	; 0x116e <DIO_u8_Set_Pin_Direction+0x24e>
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	88 23       	and	r24, r24
     f50:	21 f0       	breq	.+8      	; 0xf5a <DIO_u8_Set_Pin_Direction+0x3a>
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	09 f0       	breq	.+2      	; 0xf5a <DIO_u8_Set_Pin_Direction+0x3a>
     f58:	0a c1       	rjmp	.+532    	; 0x116e <DIO_u8_Set_Pin_Direction+0x24e>
	{
        switch (Copy_u8_Port_ID)
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3e 87       	std	Y+14, r19	; 0x0e
     f62:	2d 87       	std	Y+13, r18	; 0x0d
     f64:	8d 85       	ldd	r24, Y+13	; 0x0d
     f66:	9e 85       	ldd	r25, Y+14	; 0x0e
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	91 05       	cpc	r25, r1
     f6c:	09 f4       	brne	.+2      	; 0xf70 <DIO_u8_Set_Pin_Direction+0x50>
     f6e:	51 c0       	rjmp	.+162    	; 0x1012 <DIO_u8_Set_Pin_Direction+0xf2>
     f70:	2d 85       	ldd	r18, Y+13	; 0x0d
     f72:	3e 85       	ldd	r19, Y+14	; 0x0e
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	2c f4       	brge	.+10     	; 0xf84 <DIO_u8_Set_Pin_Direction+0x64>
     f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	71 f0       	breq	.+28     	; 0xf9e <DIO_u8_Set_Pin_Direction+0x7e>
     f82:	f7 c0       	rjmp	.+494    	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>
     f84:	2d 85       	ldd	r18, Y+13	; 0x0d
     f86:	3e 85       	ldd	r19, Y+14	; 0x0e
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <DIO_u8_Set_Pin_Direction+0x70>
     f8e:	7b c0       	rjmp	.+246    	; 0x1086 <DIO_u8_Set_Pin_Direction+0x166>
     f90:	8d 85       	ldd	r24, Y+13	; 0x0d
     f92:	9e 85       	ldd	r25, Y+14	; 0x0e
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	91 05       	cpc	r25, r1
     f98:	09 f4       	brne	.+2      	; 0xf9c <DIO_u8_Set_Pin_Direction+0x7c>
     f9a:	af c0       	rjmp	.+350    	; 0x10fa <DIO_u8_Set_Pin_Direction+0x1da>
     f9c:	ea c0       	rjmp	.+468    	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>
        {
               case DIO_u8_PORTA:
            	   switch (Copy_u8_Pin_Direction)
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	3c 87       	std	Y+12, r19	; 0x0c
     fa6:	2b 87       	std	Y+11, r18	; 0x0b
     fa8:	8b 85       	ldd	r24, Y+11	; 0x0b
     faa:	9c 85       	ldd	r25, Y+12	; 0x0c
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	c9 f0       	breq	.+50     	; 0xfe2 <DIO_u8_Set_Pin_Direction+0xc2>
     fb0:	2b 85       	ldd	r18, Y+11	; 0x0b
     fb2:	3c 85       	ldd	r19, Y+12	; 0x0c
     fb4:	21 30       	cpi	r18, 0x01	; 1
     fb6:	31 05       	cpc	r19, r1
     fb8:	49 f5       	brne	.+82     	; 0x100c <DIO_u8_Set_Pin_Direction+0xec>
            	   {
                    	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
     fba:	aa e3       	ldi	r26, 0x3A	; 58
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ea e3       	ldi	r30, 0x3A	; 58
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_u8_Set_Pin_Direction+0xb8>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_u8_Set_Pin_Direction+0xb4>
     fdc:	84 2b       	or	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	c8 c0       	rjmp	.+400    	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>
                    	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
     fe2:	aa e3       	ldi	r26, 0x3A	; 58
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	ea e3       	ldi	r30, 0x3A	; 58
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_u8_Set_Pin_Direction+0xe0>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_u8_Set_Pin_Direction+0xdc>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	b3 c0       	rjmp	.+358    	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	b0 c0       	rjmp	.+352    	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>

            	   }
                  break;
               case DIO_u8_PORTB:
             	   switch (Copy_u8_Pin_Direction)
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	3a 87       	std	Y+10, r19	; 0x0a
    101a:	29 87       	std	Y+9, r18	; 0x09
    101c:	89 85       	ldd	r24, Y+9	; 0x09
    101e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	c9 f0       	breq	.+50     	; 0x1056 <DIO_u8_Set_Pin_Direction+0x136>
    1024:	29 85       	ldd	r18, Y+9	; 0x09
    1026:	3a 85       	ldd	r19, Y+10	; 0x0a
    1028:	21 30       	cpi	r18, 0x01	; 1
    102a:	31 05       	cpc	r19, r1
    102c:	49 f5       	brne	.+82     	; 0x1080 <DIO_u8_Set_Pin_Direction+0x160>
             	   {
                     	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    102e:	a7 e3       	ldi	r26, 0x37	; 55
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e7 e3       	ldi	r30, 0x37	; 55
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_u8_Set_Pin_Direction+0x12c>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_u8_Set_Pin_Direction+0x128>
    1050:	84 2b       	or	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	8e c0       	rjmp	.+284    	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>
                     	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    1056:	a7 e3       	ldi	r26, 0x37	; 55
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e7 e3       	ldi	r30, 0x37	; 55
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_u8_Set_Pin_Direction+0x154>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <DIO_u8_Set_Pin_Direction+0x150>
    1078:	80 95       	com	r24
    107a:	84 23       	and	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	79 c0       	rjmp	.+242    	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	76 c0       	rjmp	.+236    	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>

             	   }
                   break;
               case DIO_u8_PORTC:
                   switch (Copy_u8_Pin_Direction)
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	38 87       	std	Y+8, r19	; 0x08
    108e:	2f 83       	std	Y+7, r18	; 0x07
    1090:	8f 81       	ldd	r24, Y+7	; 0x07
    1092:	98 85       	ldd	r25, Y+8	; 0x08
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	c9 f0       	breq	.+50     	; 0x10ca <DIO_u8_Set_Pin_Direction+0x1aa>
    1098:	2f 81       	ldd	r18, Y+7	; 0x07
    109a:	38 85       	ldd	r19, Y+8	; 0x08
    109c:	21 30       	cpi	r18, 0x01	; 1
    109e:	31 05       	cpc	r19, r1
    10a0:	49 f5       	brne	.+82     	; 0x10f4 <DIO_u8_Set_Pin_Direction+0x1d4>
                 	   {
                         	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    10a2:	a4 e3       	ldi	r26, 0x34	; 52
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e4 e3       	ldi	r30, 0x34	; 52
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_u8_Set_Pin_Direction+0x1a0>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_u8_Set_Pin_Direction+0x19c>
    10c4:	84 2b       	or	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	54 c0       	rjmp	.+168    	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>
                         	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    10ca:	a4 e3       	ldi	r26, 0x34	; 52
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e4 e3       	ldi	r30, 0x34	; 52
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_u8_Set_Pin_Direction+0x1c8>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_u8_Set_Pin_Direction+0x1c4>
    10ec:	80 95       	com	r24
    10ee:	84 23       	and	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	3f c0       	rjmp	.+126    	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>
  			           	     default :Local_u8_Erorr_State = ES_NOK ;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	3c c0       	rjmp	.+120    	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>

                 	   }
                       break;

               case DIO_u8_PORTD:
                    switch (Copy_u8_Pin_Direction)
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3e 83       	std	Y+6, r19	; 0x06
    1102:	2d 83       	std	Y+5, r18	; 0x05
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	c9 f0       	breq	.+50     	; 0x113e <DIO_u8_Set_Pin_Direction+0x21e>
    110c:	2d 81       	ldd	r18, Y+5	; 0x05
    110e:	3e 81       	ldd	r19, Y+6	; 0x06
    1110:	21 30       	cpi	r18, 0x01	; 1
    1112:	31 05       	cpc	r19, r1
    1114:	49 f5       	brne	.+82     	; 0x1168 <DIO_u8_Set_Pin_Direction+0x248>
                     	   {
                             	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    1116:	a1 e3       	ldi	r26, 0x31	; 49
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e1 e3       	ldi	r30, 0x31	; 49
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_u8_Set_Pin_Direction+0x214>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_u8_Set_Pin_Direction+0x210>
    1138:	84 2b       	or	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	1a c0       	rjmp	.+52     	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>
                             	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    113e:	a1 e3       	ldi	r26, 0x31	; 49
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e1 e3       	ldi	r30, 0x31	; 49
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_u8_Set_Pin_Direction+0x23c>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_u8_Set_Pin_Direction+0x238>
    1160:	80 95       	com	r24
    1162:	84 23       	and	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>
      			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_u8_Set_Pin_Direction+0x252>
                     	   }
                           break;
        }
	}
	else {
		Local_u8_Erorr_State = ES_NOK ;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_Erorr_State ;
    1172:	89 81       	ldd	r24, Y+1	; 0x01
}
    1174:	2e 96       	adiw	r28, 0x0e	; 14
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <DIO_u8_Set_Pin_Value>:

u8 DIO_u8_Set_Pin_Value  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Value ){
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	2e 97       	sbiw	r28, 0x0e	; 14
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	8a 83       	std	Y+2, r24	; 0x02
    119c:	6b 83       	std	Y+3, r22	; 0x03
    119e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
    11a0:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Value == DIO_u8_INPUT)||(Copy_u8_Pin_Value == DIO_u8_OUTPUT)))
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <DIO_u8_Set_Pin_Value+0x24>
    11a8:	15 c1       	rjmp	.+554    	; 0x13d4 <DIO_u8_Set_Pin_Value+0x24e>
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 30       	cpi	r24, 0x08	; 8
    11ae:	08 f0       	brcs	.+2      	; 0x11b2 <DIO_u8_Set_Pin_Value+0x2c>
    11b0:	11 c1       	rjmp	.+546    	; 0x13d4 <DIO_u8_Set_Pin_Value+0x24e>
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	88 23       	and	r24, r24
    11b6:	21 f0       	breq	.+8      	; 0x11c0 <DIO_u8_Set_Pin_Value+0x3a>
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <DIO_u8_Set_Pin_Value+0x3a>
    11be:	0a c1       	rjmp	.+532    	; 0x13d4 <DIO_u8_Set_Pin_Value+0x24e>
	{
		switch (Copy_u8_Port_ID)
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	3e 87       	std	Y+14, r19	; 0x0e
    11c8:	2d 87       	std	Y+13, r18	; 0x0d
    11ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    11cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	91 05       	cpc	r25, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <DIO_u8_Set_Pin_Value+0x50>
    11d4:	51 c0       	rjmp	.+162    	; 0x1278 <DIO_u8_Set_Pin_Value+0xf2>
    11d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    11d8:	3e 85       	ldd	r19, Y+14	; 0x0e
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	2c f4       	brge	.+10     	; 0x11ea <DIO_u8_Set_Pin_Value+0x64>
    11e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	71 f0       	breq	.+28     	; 0x1204 <DIO_u8_Set_Pin_Value+0x7e>
    11e8:	f7 c0       	rjmp	.+494    	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>
    11ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    11ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <DIO_u8_Set_Pin_Value+0x70>
    11f4:	7b c0       	rjmp	.+246    	; 0x12ec <DIO_u8_Set_Pin_Value+0x166>
    11f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <DIO_u8_Set_Pin_Value+0x7c>
    1200:	af c0       	rjmp	.+350    	; 0x1360 <DIO_u8_Set_Pin_Value+0x1da>
    1202:	ea c0       	rjmp	.+468    	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Pin_Value)
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	3c 87       	std	Y+12, r19	; 0x0c
    120c:	2b 87       	std	Y+11, r18	; 0x0b
    120e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1210:	9c 85       	ldd	r25, Y+12	; 0x0c
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	c9 f0       	breq	.+50     	; 0x1248 <DIO_u8_Set_Pin_Value+0xc2>
    1216:	2b 85       	ldd	r18, Y+11	; 0x0b
    1218:	3c 85       	ldd	r19, Y+12	; 0x0c
    121a:	21 30       	cpi	r18, 0x01	; 1
    121c:	31 05       	cpc	r19, r1
    121e:	49 f5       	brne	.+82     	; 0x1272 <DIO_u8_Set_Pin_Value+0xec>
			{
			     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    1220:	ab e3       	ldi	r26, 0x3B	; 59
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	eb e3       	ldi	r30, 0x3B	; 59
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_u8_Set_Pin_Value+0xb8>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_u8_Set_Pin_Value+0xb4>
    1242:	84 2b       	or	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	c8 c0       	rjmp	.+400    	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>
           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    1248:	ab e3       	ldi	r26, 0x3B	; 59
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	eb e3       	ldi	r30, 0x3B	; 59
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_u8_Set_Pin_Value+0xe0>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_u8_Set_Pin_Value+0xdc>
    126a:	80 95       	com	r24
    126c:	84 23       	and	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	b3 c0       	rjmp	.+358    	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>
           	     default :Local_u8_Erorr_State = ES_NOK ;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	89 83       	std	Y+1, r24	; 0x01
    1276:	b0 c0       	rjmp	.+352    	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>

			}
			break;
		case DIO_u8_PORTB :
			switch (Copy_u8_Pin_Value)
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	3a 87       	std	Y+10, r19	; 0x0a
    1280:	29 87       	std	Y+9, r18	; 0x09
    1282:	89 85       	ldd	r24, Y+9	; 0x09
    1284:	9a 85       	ldd	r25, Y+10	; 0x0a
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	c9 f0       	breq	.+50     	; 0x12bc <DIO_u8_Set_Pin_Value+0x136>
    128a:	29 85       	ldd	r18, Y+9	; 0x09
    128c:	3a 85       	ldd	r19, Y+10	; 0x0a
    128e:	21 30       	cpi	r18, 0x01	; 1
    1290:	31 05       	cpc	r19, r1
    1292:	49 f5       	brne	.+82     	; 0x12e6 <DIO_u8_Set_Pin_Value+0x160>
				{
				     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    1294:	a8 e3       	ldi	r26, 0x38	; 56
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e8 e3       	ldi	r30, 0x38	; 56
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_u8_Set_Pin_Value+0x12c>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_u8_Set_Pin_Value+0x128>
    12b6:	84 2b       	or	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	8e c0       	rjmp	.+284    	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>
	           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    12bc:	a8 e3       	ldi	r26, 0x38	; 56
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e8 e3       	ldi	r30, 0x38	; 56
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 2e       	mov	r0, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <DIO_u8_Set_Pin_Value+0x154>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <DIO_u8_Set_Pin_Value+0x150>
    12de:	80 95       	com	r24
    12e0:	84 23       	and	r24, r20
    12e2:	8c 93       	st	X, r24
    12e4:	79 c0       	rjmp	.+242    	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>
	           	     default :Local_u8_Erorr_State = ES_NOK ;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	76 c0       	rjmp	.+236    	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>

				}
	     	break;
		case DIO_u8_PORTC :
			switch (Copy_u8_Pin_Value)
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	38 87       	std	Y+8, r19	; 0x08
    12f4:	2f 83       	std	Y+7, r18	; 0x07
    12f6:	8f 81       	ldd	r24, Y+7	; 0x07
    12f8:	98 85       	ldd	r25, Y+8	; 0x08
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	c9 f0       	breq	.+50     	; 0x1330 <DIO_u8_Set_Pin_Value+0x1aa>
    12fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1300:	38 85       	ldd	r19, Y+8	; 0x08
    1302:	21 30       	cpi	r18, 0x01	; 1
    1304:	31 05       	cpc	r19, r1
    1306:	49 f5       	brne	.+82     	; 0x135a <DIO_u8_Set_Pin_Value+0x1d4>
					{
					     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    1308:	a5 e3       	ldi	r26, 0x35	; 53
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e5 e3       	ldi	r30, 0x35	; 53
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_u8_Set_Pin_Value+0x1a0>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_u8_Set_Pin_Value+0x19c>
    132a:	84 2b       	or	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	54 c0       	rjmp	.+168    	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>
		           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    1330:	a5 e3       	ldi	r26, 0x35	; 53
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e5 e3       	ldi	r30, 0x35	; 53
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_u8_Set_Pin_Value+0x1c8>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_u8_Set_Pin_Value+0x1c4>
    1352:	80 95       	com	r24
    1354:	84 23       	and	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	3f c0       	rjmp	.+126    	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>
		           	     default :Local_u8_Erorr_State = ES_NOK ;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	3c c0       	rjmp	.+120    	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>

					}
		   break;
		case DIO_u8_PORTD :
			switch (Copy_u8_Pin_Value)
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3e 83       	std	Y+6, r19	; 0x06
    1368:	2d 83       	std	Y+5, r18	; 0x05
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	c9 f0       	breq	.+50     	; 0x13a4 <DIO_u8_Set_Pin_Value+0x21e>
    1372:	2d 81       	ldd	r18, Y+5	; 0x05
    1374:	3e 81       	ldd	r19, Y+6	; 0x06
    1376:	21 30       	cpi	r18, 0x01	; 1
    1378:	31 05       	cpc	r19, r1
    137a:	49 f5       	brne	.+82     	; 0x13ce <DIO_u8_Set_Pin_Value+0x248>
						{
						     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    137c:	a2 e3       	ldi	r26, 0x32	; 50
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e2 e3       	ldi	r30, 0x32	; 50
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_u8_Set_Pin_Value+0x214>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_u8_Set_Pin_Value+0x210>
    139e:	84 2b       	or	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	1a c0       	rjmp	.+52     	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>
			           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    13a4:	a2 e3       	ldi	r26, 0x32	; 50
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e2 e3       	ldi	r30, 0x32	; 50
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_u8_Set_Pin_Value+0x23c>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_u8_Set_Pin_Value+0x238>
    13c6:	80 95       	com	r24
    13c8:	84 23       	and	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	05 c0       	rjmp	.+10     	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_u8_Set_Pin_Value+0x252>
						}
			break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8_Erorr_State ;
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13da:	2e 96       	adiw	r28, 0x0e	; 14
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <DIO_u8_Get_Pin_Value>:

u8 DIO_u8_Get_Pin_Value      (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 *Copy_u8_Returned_Pin_Value ){
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	28 97       	sbiw	r28, 0x08	; 8
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	8b 83       	std	Y+3, r24	; 0x03
    1402:	6c 83       	std	Y+4, r22	; 0x04
    1404:	5e 83       	std	Y+6, r21	; 0x06
    1406:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8_Erorr_State = ES_OK ;
    1408:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Pin_Value ;
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && (Copy_u8_Returned_Pin_Value != NULL)){
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	84 30       	cpi	r24, 0x04	; 4
    140e:	08 f0       	brcs	.+2      	; 0x1412 <DIO_u8_Get_Pin_Value+0x26>
    1410:	9e c0       	rjmp	.+316    	; 0x154e <DIO_u8_Get_Pin_Value+0x162>
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	88 30       	cpi	r24, 0x08	; 8
    1416:	08 f0       	brcs	.+2      	; 0x141a <DIO_u8_Get_Pin_Value+0x2e>
    1418:	9a c0       	rjmp	.+308    	; 0x154e <DIO_u8_Get_Pin_Value+0x162>
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	09 f4       	brne	.+2      	; 0x1424 <DIO_u8_Get_Pin_Value+0x38>
    1422:	95 c0       	rjmp	.+298    	; 0x154e <DIO_u8_Get_Pin_Value+0x162>
		switch (Copy_u8_Port_ID)
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	38 87       	std	Y+8, r19	; 0x08
    142c:	2f 83       	std	Y+7, r18	; 0x07
    142e:	8f 81       	ldd	r24, Y+7	; 0x07
    1430:	98 85       	ldd	r25, Y+8	; 0x08
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	91 05       	cpc	r25, r1
    1436:	a1 f1       	breq	.+104    	; 0x14a0 <DIO_u8_Get_Pin_Value+0xb4>
    1438:	2f 81       	ldd	r18, Y+7	; 0x07
    143a:	38 85       	ldd	r19, Y+8	; 0x08
    143c:	22 30       	cpi	r18, 0x02	; 2
    143e:	31 05       	cpc	r19, r1
    1440:	2c f4       	brge	.+10     	; 0x144c <DIO_u8_Get_Pin_Value+0x60>
    1442:	8f 81       	ldd	r24, Y+7	; 0x07
    1444:	98 85       	ldd	r25, Y+8	; 0x08
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	71 f0       	breq	.+28     	; 0x1466 <DIO_u8_Get_Pin_Value+0x7a>
    144a:	83 c0       	rjmp	.+262    	; 0x1552 <DIO_u8_Get_Pin_Value+0x166>
    144c:	2f 81       	ldd	r18, Y+7	; 0x07
    144e:	38 85       	ldd	r19, Y+8	; 0x08
    1450:	22 30       	cpi	r18, 0x02	; 2
    1452:	31 05       	cpc	r19, r1
    1454:	09 f4       	brne	.+2      	; 0x1458 <DIO_u8_Get_Pin_Value+0x6c>
    1456:	41 c0       	rjmp	.+130    	; 0x14da <DIO_u8_Get_Pin_Value+0xee>
    1458:	8f 81       	ldd	r24, Y+7	; 0x07
    145a:	98 85       	ldd	r25, Y+8	; 0x08
    145c:	83 30       	cpi	r24, 0x03	; 3
    145e:	91 05       	cpc	r25, r1
    1460:	09 f4       	brne	.+2      	; 0x1464 <DIO_u8_Get_Pin_Value+0x78>
    1462:	58 c0       	rjmp	.+176    	; 0x1514 <DIO_u8_Get_Pin_Value+0x128>
    1464:	76 c0       	rjmp	.+236    	; 0x1552 <DIO_u8_Get_Pin_Value+0x166>
		{
		     case DIO_u8_PORTA :
		      Local_u8_Pin_Value = GET_BIT (DIO_u8_PINA_REG, Copy_u8_Pin_ID) ;
    1466:	e9 e3       	ldi	r30, 0x39	; 57
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_u8_Get_Pin_Value+0x94>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_u8_Get_Pin_Value+0x90>
    1484:	84 23       	and	r24, r20
    1486:	89 83       	std	Y+1, r24	; 0x01

		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	88 23       	and	r24, r24
    148c:	21 f4       	brne	.+8      	; 0x1496 <DIO_u8_Get_Pin_Value+0xaa>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    148e:	ed 81       	ldd	r30, Y+5	; 0x05
    1490:	fe 81       	ldd	r31, Y+6	; 0x06
    1492:	10 82       	st	Z, r1
    1494:	5e c0       	rjmp	.+188    	; 0x1552 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		    	 else
		    	 {
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1496:	ed 81       	ldd	r30, Y+5	; 0x05
    1498:	fe 81       	ldd	r31, Y+6	; 0x06
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	80 83       	st	Z, r24
    149e:	59 c0       	rjmp	.+178    	; 0x1552 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		     break;
		     case DIO_u8_PORTB :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINB_REG,Copy_u8_Pin_ID ) ;
    14a0:	e6 e3       	ldi	r30, 0x36	; 54
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <DIO_u8_Get_Pin_Value+0xce>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <DIO_u8_Get_Pin_Value+0xca>
    14be:	84 23       	and	r24, r20
    14c0:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	88 23       	and	r24, r24
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <DIO_u8_Get_Pin_Value+0xe4>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    14c8:	ed 81       	ldd	r30, Y+5	; 0x05
    14ca:	fe 81       	ldd	r31, Y+6	; 0x06
    14cc:	10 82       	st	Z, r1
    14ce:	41 c0       	rjmp	.+130    	; 0x1552 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    14d0:	ed 81       	ldd	r30, Y+5	; 0x05
    14d2:	fe 81       	ldd	r31, Y+6	; 0x06
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 83       	st	Z, r24
    14d8:	3c c0       	rjmp	.+120    	; 0x1552 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTC :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINC_REG,Copy_u8_Pin_ID ) ;
    14da:	e3 e3       	ldi	r30, 0x33	; 51
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_u8_Get_Pin_Value+0x108>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_u8_Get_Pin_Value+0x104>
    14f8:	84 23       	and	r24, r20
    14fa:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	88 23       	and	r24, r24
    1500:	21 f4       	brne	.+8      	; 0x150a <DIO_u8_Get_Pin_Value+0x11e>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    1502:	ed 81       	ldd	r30, Y+5	; 0x05
    1504:	fe 81       	ldd	r31, Y+6	; 0x06
    1506:	10 82       	st	Z, r1
    1508:	24 c0       	rjmp	.+72     	; 0x1552 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    150a:	ed 81       	ldd	r30, Y+5	; 0x05
    150c:	fe 81       	ldd	r31, Y+6	; 0x06
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	80 83       	st	Z, r24
    1512:	1f c0       	rjmp	.+62     	; 0x1552 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTD :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PIND_REG,Copy_u8_Pin_ID ) ;
    1514:	e0 e3       	ldi	r30, 0x30	; 48
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 2e       	mov	r0, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <DIO_u8_Get_Pin_Value+0x142>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	0a 94       	dec	r0
    1530:	e2 f7       	brpl	.-8      	; 0x152a <DIO_u8_Get_Pin_Value+0x13e>
    1532:	84 23       	and	r24, r20
    1534:	89 83       	std	Y+1, r24	; 0x01
		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	88 23       	and	r24, r24
    153a:	21 f4       	brne	.+8      	; 0x1544 <DIO_u8_Get_Pin_Value+0x158>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    153c:	ed 81       	ldd	r30, Y+5	; 0x05
    153e:	fe 81       	ldd	r31, Y+6	; 0x06
    1540:	10 82       	st	Z, r1
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1544:	ed 81       	ldd	r30, Y+5	; 0x05
    1546:	fe 81       	ldd	r31, Y+6	; 0x06
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	80 83       	st	Z, r24
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	8a 83       	std	Y+2, r24	; 0x02
		}
		return Local_u8_Erorr_State ;
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1554:	28 96       	adiw	r28, 0x08	; 8
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <DIO_u8_Set_Port_Direction>:

u8 DIO_u8_Set_Port_Direction (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Direction ){
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	2d 97       	sbiw	r28, 0x0d	; 13
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	8a 83       	std	Y+2, r24	; 0x02
    157c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    157e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && ((Copy_u8_Port_Direction == DIO_u8_INPUT)||(Copy_u8_Port_Direction == DIO_u8_OUTPUT)))
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	84 30       	cpi	r24, 0x04	; 4
    1584:	08 f0       	brcs	.+2      	; 0x1588 <DIO_u8_Set_Port_Direction+0x22>
    1586:	87 c0       	rjmp	.+270    	; 0x1696 <DIO_u8_Set_Port_Direction+0x130>
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	88 23       	and	r24, r24
    158c:	21 f0       	breq	.+8      	; 0x1596 <DIO_u8_Set_Port_Direction+0x30>
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	09 f0       	breq	.+2      	; 0x1596 <DIO_u8_Set_Port_Direction+0x30>
    1594:	80 c0       	rjmp	.+256    	; 0x1696 <DIO_u8_Set_Port_Direction+0x130>
	{
		switch (Copy_u8_Port_ID)
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	3d 87       	std	Y+13, r19	; 0x0d
    159e:	2c 87       	std	Y+12, r18	; 0x0c
    15a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	91 05       	cpc	r25, r1
    15a8:	71 f1       	breq	.+92     	; 0x1606 <DIO_u8_Set_Port_Direction+0xa0>
    15aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    15ac:	3d 85       	ldd	r19, Y+13	; 0x0d
    15ae:	22 30       	cpi	r18, 0x02	; 2
    15b0:	31 05       	cpc	r19, r1
    15b2:	2c f4       	brge	.+10     	; 0x15be <DIO_u8_Set_Port_Direction+0x58>
    15b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	69 f0       	breq	.+26     	; 0x15d6 <DIO_u8_Set_Port_Direction+0x70>
    15bc:	69 c0       	rjmp	.+210    	; 0x1690 <DIO_u8_Set_Port_Direction+0x12a>
    15be:	2c 85       	ldd	r18, Y+12	; 0x0c
    15c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	31 05       	cpc	r19, r1
    15c6:	b1 f1       	breq	.+108    	; 0x1634 <DIO_u8_Set_Port_Direction+0xce>
    15c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    15ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    15cc:	83 30       	cpi	r24, 0x03	; 3
    15ce:	91 05       	cpc	r25, r1
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <DIO_u8_Set_Port_Direction+0x6e>
    15d2:	47 c0       	rjmp	.+142    	; 0x1662 <DIO_u8_Set_Port_Direction+0xfc>
    15d4:	5d c0       	rjmp	.+186    	; 0x1690 <DIO_u8_Set_Port_Direction+0x12a>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Port_Direction)
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	3b 87       	std	Y+11, r19	; 0x0b
    15de:	2a 87       	std	Y+10, r18	; 0x0a
    15e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	59 f0       	breq	.+22     	; 0x15fe <DIO_u8_Set_Port_Direction+0x98>
    15e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    15ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    15ec:	21 30       	cpi	r18, 0x01	; 1
    15ee:	31 05       	cpc	r19, r1
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <DIO_u8_Set_Port_Direction+0x8e>
    15f2:	53 c0       	rjmp	.+166    	; 0x169a <DIO_u8_Set_Port_Direction+0x134>
			{
			    case DIO_u8_OUTPUT : DIO_u8_PORTA_REG = 0xff;break;
    15f4:	eb e3       	ldi	r30, 0x3B	; 59
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	80 83       	st	Z, r24
    15fc:	4e c0       	rjmp	.+156    	; 0x169a <DIO_u8_Set_Port_Direction+0x134>
			    case DIO_u8_INPUT : DIO_u8_PORTA_REG = 0x00;break;
    15fe:	eb e3       	ldi	r30, 0x3B	; 59
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	10 82       	st	Z, r1
    1604:	4a c0       	rjmp	.+148    	; 0x169a <DIO_u8_Set_Port_Direction+0x134>
			}
			break;
			case DIO_u8_PORTB :
				switch (Copy_u8_Port_Direction)
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	39 87       	std	Y+9, r19	; 0x09
    160e:	28 87       	std	Y+8, r18	; 0x08
    1610:	88 85       	ldd	r24, Y+8	; 0x08
    1612:	99 85       	ldd	r25, Y+9	; 0x09
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	51 f0       	breq	.+20     	; 0x162c <DIO_u8_Set_Port_Direction+0xc6>
    1618:	28 85       	ldd	r18, Y+8	; 0x08
    161a:	39 85       	ldd	r19, Y+9	; 0x09
    161c:	21 30       	cpi	r18, 0x01	; 1
    161e:	31 05       	cpc	r19, r1
    1620:	e1 f5       	brne	.+120    	; 0x169a <DIO_u8_Set_Port_Direction+0x134>
				{
				    case DIO_u8_OUTPUT : DIO_u8_PORTB_REG = 0xff;break;
    1622:	e8 e3       	ldi	r30, 0x38	; 56
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	8f ef       	ldi	r24, 0xFF	; 255
    1628:	80 83       	st	Z, r24
    162a:	37 c0       	rjmp	.+110    	; 0x169a <DIO_u8_Set_Port_Direction+0x134>
				    case DIO_u8_INPUT : DIO_u8_PORTB_REG = 0x00;break;
    162c:	e8 e3       	ldi	r30, 0x38	; 56
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	10 82       	st	Z, r1
    1632:	33 c0       	rjmp	.+102    	; 0x169a <DIO_u8_Set_Port_Direction+0x134>
				}
				break;
				case DIO_u8_PORTC :
					switch (Copy_u8_Port_Direction)
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	3f 83       	std	Y+7, r19	; 0x07
    163c:	2e 83       	std	Y+6, r18	; 0x06
    163e:	8e 81       	ldd	r24, Y+6	; 0x06
    1640:	9f 81       	ldd	r25, Y+7	; 0x07
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	51 f0       	breq	.+20     	; 0x165a <DIO_u8_Set_Port_Direction+0xf4>
    1646:	2e 81       	ldd	r18, Y+6	; 0x06
    1648:	3f 81       	ldd	r19, Y+7	; 0x07
    164a:	21 30       	cpi	r18, 0x01	; 1
    164c:	31 05       	cpc	r19, r1
    164e:	29 f5       	brne	.+74     	; 0x169a <DIO_u8_Set_Port_Direction+0x134>
					{
					    case DIO_u8_OUTPUT : DIO_u8_PORTC_REG = 0xff;break;
    1650:	e5 e3       	ldi	r30, 0x35	; 53
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	8f ef       	ldi	r24, 0xFF	; 255
    1656:	80 83       	st	Z, r24
    1658:	20 c0       	rjmp	.+64     	; 0x169a <DIO_u8_Set_Port_Direction+0x134>
					    case DIO_u8_INPUT : DIO_u8_PORTC_REG = 0x00;break;
    165a:	e5 e3       	ldi	r30, 0x35	; 53
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	10 82       	st	Z, r1
    1660:	1c c0       	rjmp	.+56     	; 0x169a <DIO_u8_Set_Port_Direction+0x134>
					}
					break;
					case DIO_u8_PORTD :
						switch (Copy_u8_Port_Direction)
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	3d 83       	std	Y+5, r19	; 0x05
    166a:	2c 83       	std	Y+4, r18	; 0x04
    166c:	8c 81       	ldd	r24, Y+4	; 0x04
    166e:	9d 81       	ldd	r25, Y+5	; 0x05
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	51 f0       	breq	.+20     	; 0x1688 <DIO_u8_Set_Port_Direction+0x122>
    1674:	2c 81       	ldd	r18, Y+4	; 0x04
    1676:	3d 81       	ldd	r19, Y+5	; 0x05
    1678:	21 30       	cpi	r18, 0x01	; 1
    167a:	31 05       	cpc	r19, r1
    167c:	71 f4       	brne	.+28     	; 0x169a <DIO_u8_Set_Port_Direction+0x134>
						{
						    case DIO_u8_OUTPUT : DIO_u8_PORTD_REG = 0xff;break;
    167e:	e2 e3       	ldi	r30, 0x32	; 50
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	80 83       	st	Z, r24
    1686:	09 c0       	rjmp	.+18     	; 0x169a <DIO_u8_Set_Port_Direction+0x134>
						    case DIO_u8_INPUT : DIO_u8_PORTD_REG = 0x00;break;
    1688:	e2 e3       	ldi	r30, 0x32	; 50
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	10 82       	st	Z, r1
    168e:	05 c0       	rjmp	.+10     	; 0x169a <DIO_u8_Set_Port_Direction+0x134>
						}
						break;
						default:Local_u8_Erorr_State = ES_NOK ;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_u8_Set_Port_Direction+0x134>

		}
	}
	else {
				Local_u8_Erorr_State = ES_NOK ;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    169a:	89 81       	ldd	r24, Y+1	; 0x01

}
    169c:	2d 96       	adiw	r28, 0x0d	; 13
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <DIO_u8_Set_Port_Value>:

u8 DIO_u8_Set_Port_Value     (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Value ){
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <DIO_u8_Set_Port_Value+0x6>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <DIO_u8_Set_Port_Value+0x8>
    16b6:	0f 92       	push	r0
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	8a 83       	std	Y+2, r24	; 0x02
    16be:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    16c0:	19 82       	std	Y+1, r1	; 0x01

			switch (Copy_u8_Port_ID)
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3d 83       	std	Y+5, r19	; 0x05
    16ca:	2c 83       	std	Y+4, r18	; 0x04
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	9d 81       	ldd	r25, Y+5	; 0x05
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	91 05       	cpc	r25, r1
    16d4:	d1 f0       	breq	.+52     	; 0x170a <DIO_u8_Set_Port_Value+0x5c>
    16d6:	2c 81       	ldd	r18, Y+4	; 0x04
    16d8:	3d 81       	ldd	r19, Y+5	; 0x05
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	2c f4       	brge	.+10     	; 0x16ea <DIO_u8_Set_Port_Value+0x3c>
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	9d 81       	ldd	r25, Y+5	; 0x05
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	61 f0       	breq	.+24     	; 0x1700 <DIO_u8_Set_Port_Value+0x52>
    16e8:	1f c0       	rjmp	.+62     	; 0x1728 <DIO_u8_Set_Port_Value+0x7a>
    16ea:	2c 81       	ldd	r18, Y+4	; 0x04
    16ec:	3d 81       	ldd	r19, Y+5	; 0x05
    16ee:	22 30       	cpi	r18, 0x02	; 2
    16f0:	31 05       	cpc	r19, r1
    16f2:	81 f0       	breq	.+32     	; 0x1714 <DIO_u8_Set_Port_Value+0x66>
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	9d 81       	ldd	r25, Y+5	; 0x05
    16f8:	83 30       	cpi	r24, 0x03	; 3
    16fa:	91 05       	cpc	r25, r1
    16fc:	81 f0       	breq	.+32     	; 0x171e <DIO_u8_Set_Port_Value+0x70>
    16fe:	14 c0       	rjmp	.+40     	; 0x1728 <DIO_u8_Set_Port_Value+0x7a>
			{
			case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8_Port_Value; break;
    1700:	eb e3       	ldi	r30, 0x3B	; 59
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	80 83       	st	Z, r24
    1708:	11 c0       	rjmp	.+34     	; 0x172c <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8_Port_Value; break;
    170a:	e8 e3       	ldi	r30, 0x38	; 56
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	80 83       	st	Z, r24
    1712:	0c c0       	rjmp	.+24     	; 0x172c <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8_Port_Value; break;
    1714:	e5 e3       	ldi	r30, 0x35	; 53
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	80 83       	st	Z, r24
    171c:	07 c0       	rjmp	.+14     	; 0x172c <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8_Port_Value; break;
    171e:	e2 e3       	ldi	r30, 0x32	; 50
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	80 83       	st	Z, r24
    1726:	02 c0       	rjmp	.+4      	; 0x172c <DIO_u8_Set_Port_Value+0x7e>
			default :Local_u8_Erorr_State = ES_NOK;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    172c:	89 81       	ldd	r24, Y+1	; 0x01

}
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <DIO_u8_Get_Port_Value>:

u8 DIO_u8_Get_Port_Value     (u8 Copy_u8_Port_ID, u8 * Copy_u8_Returned_Port_Value ){
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	00 d0       	rcall	.+0      	; 0x1744 <DIO_u8_Get_Port_Value+0x6>
    1744:	00 d0       	rcall	.+0      	; 0x1746 <DIO_u8_Get_Port_Value+0x8>
    1746:	00 d0       	rcall	.+0      	; 0x1748 <DIO_u8_Get_Port_Value+0xa>
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	8a 83       	std	Y+2, r24	; 0x02
    174e:	7c 83       	std	Y+4, r23	; 0x04
    1750:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1752:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8_Returned_Port_Value != NULL){
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	09 f4       	brne	.+2      	; 0x175e <DIO_u8_Get_Port_Value+0x20>
    175c:	3e c0       	rjmp	.+124    	; 0x17da <DIO_u8_Get_Port_Value+0x9c>
		switch (Copy_u8_Port_ID)
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	3e 83       	std	Y+6, r19	; 0x06
    1766:	2d 83       	std	Y+5, r18	; 0x05
    1768:	8d 81       	ldd	r24, Y+5	; 0x05
    176a:	9e 81       	ldd	r25, Y+6	; 0x06
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	91 05       	cpc	r25, r1
    1770:	e1 f0       	breq	.+56     	; 0x17aa <DIO_u8_Get_Port_Value+0x6c>
    1772:	2d 81       	ldd	r18, Y+5	; 0x05
    1774:	3e 81       	ldd	r19, Y+6	; 0x06
    1776:	22 30       	cpi	r18, 0x02	; 2
    1778:	31 05       	cpc	r19, r1
    177a:	2c f4       	brge	.+10     	; 0x1786 <DIO_u8_Get_Port_Value+0x48>
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	61 f0       	breq	.+24     	; 0x179c <DIO_u8_Get_Port_Value+0x5e>
    1784:	27 c0       	rjmp	.+78     	; 0x17d4 <DIO_u8_Get_Port_Value+0x96>
    1786:	2d 81       	ldd	r18, Y+5	; 0x05
    1788:	3e 81       	ldd	r19, Y+6	; 0x06
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	a1 f0       	breq	.+40     	; 0x17b8 <DIO_u8_Get_Port_Value+0x7a>
    1790:	8d 81       	ldd	r24, Y+5	; 0x05
    1792:	9e 81       	ldd	r25, Y+6	; 0x06
    1794:	83 30       	cpi	r24, 0x03	; 3
    1796:	91 05       	cpc	r25, r1
    1798:	b1 f0       	breq	.+44     	; 0x17c6 <DIO_u8_Get_Port_Value+0x88>
    179a:	1c c0       	rjmp	.+56     	; 0x17d4 <DIO_u8_Get_Port_Value+0x96>
		{
		case DIO_u8_PORTA :* Copy_u8_Returned_Port_Value =DIO_u8_PORTA_REG; break;
    179c:	eb e3       	ldi	r30, 0x3B	; 59
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	eb 81       	ldd	r30, Y+3	; 0x03
    17a4:	fc 81       	ldd	r31, Y+4	; 0x04
    17a6:	80 83       	st	Z, r24
    17a8:	1a c0       	rjmp	.+52     	; 0x17de <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTB :* Copy_u8_Returned_Port_Value =DIO_u8_PORTB_REG; break;
    17aa:	e8 e3       	ldi	r30, 0x38	; 56
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	eb 81       	ldd	r30, Y+3	; 0x03
    17b2:	fc 81       	ldd	r31, Y+4	; 0x04
    17b4:	80 83       	st	Z, r24
    17b6:	13 c0       	rjmp	.+38     	; 0x17de <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTC :* Copy_u8_Returned_Port_Value =DIO_u8_PORTC_REG; break;
    17b8:	e5 e3       	ldi	r30, 0x35	; 53
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	eb 81       	ldd	r30, Y+3	; 0x03
    17c0:	fc 81       	ldd	r31, Y+4	; 0x04
    17c2:	80 83       	st	Z, r24
    17c4:	0c c0       	rjmp	.+24     	; 0x17de <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTD :* Copy_u8_Returned_Port_Value =DIO_u8_PORTD_REG; break;
    17c6:	e2 e3       	ldi	r30, 0x32	; 50
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	eb 81       	ldd	r30, Y+3	; 0x03
    17ce:	fc 81       	ldd	r31, Y+4	; 0x04
    17d0:	80 83       	st	Z, r24
    17d2:	05 c0       	rjmp	.+10     	; 0x17de <DIO_u8_Get_Port_Value+0xa0>
		default :Local_u8_Erorr_State = ES_NOK;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <DIO_u8_Get_Port_Value+0xa0>
		}}
		else {
			Local_u8_Erorr_State = ES_NOK ;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8_Erorr_State ;
    17de:	89 81       	ldd	r24, Y+1	; 0x01

}
    17e0:	26 96       	adiw	r28, 0x06	; 6
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <main>:
#include "../MCAL/8-SPI/SPI_interface.h"

#include<util/delay.h>


int main(){
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	2f 97       	sbiw	r28, 0x0f	; 15
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8_data=0;
    1806:	1f 86       	std	Y+15, r1	; 0x0f
//	DIO_voidInit();
	SPI_enum_INIT();
    1808:	0e 94 9b 05 	call	0xb36	; 0xb36 <SPI_enum_INIT>
	DIO_u8_Set_Pin_Direction(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_OUTPUT);
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	41 e0       	ldi	r20, 0x01	; 1
    1812:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8_Set_Pin_Direction>
	DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	0e 94 c3 08 	call	0x1186	; 0x1186 <DIO_u8_Set_Pin_Value>

	while(1){
		SPI_enum_trans_recieve(5,&local_u8_data);
    1820:	9e 01       	movw	r18, r28
    1822:	21 5f       	subi	r18, 0xF1	; 241
    1824:	3f 4f       	sbci	r19, 0xFF	; 255
    1826:	85 e0       	ldi	r24, 0x05	; 5
    1828:	b9 01       	movw	r22, r18
    182a:	0e 94 03 06 	call	0xc06	; 0xc06 <SPI_enum_trans_recieve>
		if(local_u8_data==10){
    182e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1830:	8a 30       	cpi	r24, 0x0A	; 10
    1832:	29 f4       	brne	.+10     	; 0x183e <main+0x4c>
			DIO_u8_Set_Pin_Value(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0e 94 c3 08 	call	0x1186	; 0x1186 <DIO_u8_Set_Pin_Value>
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	aa ef       	ldi	r26, 0xFA	; 250
    1844:	b4 e4       	ldi	r27, 0x44	; 68
    1846:	8b 87       	std	Y+11, r24	; 0x0b
    1848:	9c 87       	std	Y+12, r25	; 0x0c
    184a:	ad 87       	std	Y+13, r26	; 0x0d
    184c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1850:	7c 85       	ldd	r23, Y+12	; 0x0c
    1852:	8d 85       	ldd	r24, Y+13	; 0x0d
    1854:	9e 85       	ldd	r25, Y+14	; 0x0e
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	4a e7       	ldi	r20, 0x7A	; 122
    185c:	53 e4       	ldi	r21, 0x43	; 67
    185e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	8f 83       	std	Y+7, r24	; 0x07
    1868:	98 87       	std	Y+8, r25	; 0x08
    186a:	a9 87       	std	Y+9, r26	; 0x09
    186c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    186e:	6f 81       	ldd	r22, Y+7	; 0x07
    1870:	78 85       	ldd	r23, Y+8	; 0x08
    1872:	89 85       	ldd	r24, Y+9	; 0x09
    1874:	9a 85       	ldd	r25, Y+10	; 0x0a
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e8       	ldi	r20, 0x80	; 128
    187c:	5f e3       	ldi	r21, 0x3F	; 63
    187e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1882:	88 23       	and	r24, r24
    1884:	2c f4       	brge	.+10     	; 0x1890 <main+0x9e>
		__ticks = 1;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
    188e:	3f c0       	rjmp	.+126    	; 0x190e <main+0x11c>
	else if (__tmp > 65535)
    1890:	6f 81       	ldd	r22, Y+7	; 0x07
    1892:	78 85       	ldd	r23, Y+8	; 0x08
    1894:	89 85       	ldd	r24, Y+9	; 0x09
    1896:	9a 85       	ldd	r25, Y+10	; 0x0a
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	3f ef       	ldi	r19, 0xFF	; 255
    189c:	4f e7       	ldi	r20, 0x7F	; 127
    189e:	57 e4       	ldi	r21, 0x47	; 71
    18a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18a4:	18 16       	cp	r1, r24
    18a6:	4c f5       	brge	.+82     	; 0x18fa <main+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e2       	ldi	r20, 0x20	; 32
    18b6:	51 e4       	ldi	r21, 0x41	; 65
    18b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9e 83       	std	Y+6, r25	; 0x06
    18ce:	8d 83       	std	Y+5, r24	; 0x05
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <main+0xfe>
    18d2:	89 e1       	ldi	r24, 0x19	; 25
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9c 83       	std	Y+4, r25	; 0x04
    18d8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <main+0xec>
    18e2:	9c 83       	std	Y+4, r25	; 0x04
    18e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	9e 83       	std	Y+6, r25	; 0x06
    18ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	9e 81       	ldd	r25, Y+6	; 0x06
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	69 f7       	brne	.-38     	; 0x18d2 <main+0xe0>
    18f8:	93 cf       	rjmp	.-218    	; 0x1820 <main+0x2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fa:	6f 81       	ldd	r22, Y+7	; 0x07
    18fc:	78 85       	ldd	r23, Y+8	; 0x08
    18fe:	89 85       	ldd	r24, Y+9	; 0x09
    1900:	9a 85       	ldd	r25, Y+10	; 0x0a
    1902:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	9e 83       	std	Y+6, r25	; 0x06
    190c:	8d 83       	std	Y+5, r24	; 0x05
    190e:	8d 81       	ldd	r24, Y+5	; 0x05
    1910:	9e 81       	ldd	r25, Y+6	; 0x06
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	9a 81       	ldd	r25, Y+2	; 0x02
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <main+0x128>
    191e:	9a 83       	std	Y+2, r25	; 0x02
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	7e cf       	rjmp	.-260    	; 0x1820 <main+0x2e>

00001924 <__prologue_saves__>:
    1924:	2f 92       	push	r2
    1926:	3f 92       	push	r3
    1928:	4f 92       	push	r4
    192a:	5f 92       	push	r5
    192c:	6f 92       	push	r6
    192e:	7f 92       	push	r7
    1930:	8f 92       	push	r8
    1932:	9f 92       	push	r9
    1934:	af 92       	push	r10
    1936:	bf 92       	push	r11
    1938:	cf 92       	push	r12
    193a:	df 92       	push	r13
    193c:	ef 92       	push	r14
    193e:	ff 92       	push	r15
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	ca 1b       	sub	r28, r26
    194e:	db 0b       	sbc	r29, r27
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	09 94       	ijmp

0000195c <__epilogue_restores__>:
    195c:	2a 88       	ldd	r2, Y+18	; 0x12
    195e:	39 88       	ldd	r3, Y+17	; 0x11
    1960:	48 88       	ldd	r4, Y+16	; 0x10
    1962:	5f 84       	ldd	r5, Y+15	; 0x0f
    1964:	6e 84       	ldd	r6, Y+14	; 0x0e
    1966:	7d 84       	ldd	r7, Y+13	; 0x0d
    1968:	8c 84       	ldd	r8, Y+12	; 0x0c
    196a:	9b 84       	ldd	r9, Y+11	; 0x0b
    196c:	aa 84       	ldd	r10, Y+10	; 0x0a
    196e:	b9 84       	ldd	r11, Y+9	; 0x09
    1970:	c8 84       	ldd	r12, Y+8	; 0x08
    1972:	df 80       	ldd	r13, Y+7	; 0x07
    1974:	ee 80       	ldd	r14, Y+6	; 0x06
    1976:	fd 80       	ldd	r15, Y+5	; 0x05
    1978:	0c 81       	ldd	r16, Y+4	; 0x04
    197a:	1b 81       	ldd	r17, Y+3	; 0x03
    197c:	aa 81       	ldd	r26, Y+2	; 0x02
    197e:	b9 81       	ldd	r27, Y+1	; 0x01
    1980:	ce 0f       	add	r28, r30
    1982:	d1 1d       	adc	r29, r1
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	ed 01       	movw	r28, r26
    1990:	08 95       	ret

00001992 <_exit>:
    1992:	f8 94       	cli

00001994 <__stop_program>:
    1994:	ff cf       	rjmp	.-2      	; 0x1994 <__stop_program>
